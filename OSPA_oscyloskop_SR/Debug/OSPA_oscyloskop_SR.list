
OSPA_oscyloskop_SR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800d29c  0800d29c  0001d29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d328  0800d328  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d328  0800d328  0001d328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d330  0800d330  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d330  0800d330  0001d330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d334  0800d334  0001d334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008dd8  20000094  0800d3cc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008e6c  0800d3cc  00028e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000306fc  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000612d  00000000  00000000  000507c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002560  00000000  00000000  000568f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022c0  00000000  00000000  00058e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d11a  00000000  00000000  0005b110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002260f  00000000  00000000  0008822a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9b3b  00000000  00000000  000aa839  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4374  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fd0  00000000  00000000  001a43f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d284 	.word	0x0800d284

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800d284 	.word	0x0800d284

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200000b0 	.word	0x200000b0
 8000554:	20000108 	.word	0x20000108

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f001 f9e9 	bl	8001934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f831 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 fb89 	bl	8000c7c <MX_GPIO_Init>
  MX_DMA_Init();
 800056a:	f000 fb17 	bl	8000b9c <MX_DMA_Init>
  MX_CRC_Init();
 800056e:	f000 f901 	bl	8000774 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000572:	f000 f93d 	bl	80007f0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000576:	f000 fb31 	bl	8000bdc <MX_FMC_Init>
  MX_I2C3_Init();
 800057a:	f000 f96b 	bl	8000854 <MX_I2C3_Init>
  MX_LTDC_Init();
 800057e:	f000 f9a9 	bl	80008d4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000582:	f000 fa5b 	bl	8000a3c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000586:	f000 fa8f 	bl	8000aa8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800058a:	f000 fadd 	bl	8000b48 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800058e:	f000 f89f 	bl	80006d0 <MX_ADC1_Init>
  MX_DAC_Init();
 8000592:	f000 f903 	bl	800079c <MX_DAC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <main+0x68>)
 8000598:	1d3c      	adds	r4, r7, #4
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f00a f828 	bl	800a602 <osThreadCreate>
 80005b2:	4602      	mov	r2, r0
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <main+0x6c>)
 80005b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b8:	f00a f81c 	bl	800a5f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x64>
 80005be:	bf00      	nop
 80005c0:	0800d2a8 	.word	0x0800d2a8
 80005c4:	2000846c 	.word	0x2000846c

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0a0      	sub	sp, #128	; 0x80
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f00c fd91 	bl	800d0fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2230      	movs	r2, #48	; 0x30
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00c fd82 	bl	800d0fe <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <SystemClock_Config+0x100>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <SystemClock_Config+0x100>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6413      	str	r3, [r2, #64]	; 0x40
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <SystemClock_Config+0x100>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <SystemClock_Config+0x104>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000622:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <SystemClock_Config+0x104>)
 8000624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0x104>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000636:	2301      	movs	r3, #1
 8000638:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000644:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000648:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064a:	2304      	movs	r3, #4
 800064c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800064e:	2348      	movs	r3, #72	; 0x48
 8000650:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000656:	2303      	movs	r3, #3
 8000658:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800065e:	4618      	mov	r0, r3
 8000660:	f004 ff54 	bl	800550c <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800066a:	f000 fc33 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f005 f9ae 	bl	80059ec <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000696:	f000 fc1d 	bl	8000ed4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800069a:	2308      	movs	r3, #8
 800069c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800069e:	2332      	movs	r3, #50	; 0x32
 80006a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80006a6:	2300      	movs	r3, #0
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 fbc0 	bl	8005e34 <HAL_RCCEx_PeriphCLKConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006ba:	f000 fc0b 	bl	8000ed4 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3780      	adds	r7, #128	; 0x80
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_ADC1_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_ADC1_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_ADC1_Init+0x98>)
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_ADC1_Init+0xa0>)
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_ADC1_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_ADC1_Init+0x98>)
 8000730:	f001 f964 	bl	80019fc <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fbcb 	bl	8000ed4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800073e:	230d      	movs	r3, #13
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_ADC1_Init+0x98>)
 8000750:	f001 faf6 	bl	8001d40 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 fbbb 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200085cc 	.word	0x200085cc
 800076c:	40012000 	.word	0x40012000
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_CRC_Init+0x20>)
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <MX_CRC_Init+0x24>)
 800077c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_CRC_Init+0x20>)
 8000780:	f001 fdf8 	bl	8002374 <HAL_CRC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800078a:	f000 fba3 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000851c 	.word	0x2000851c
 8000798:	40023000 	.word	0x40023000

0800079c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_DAC_Init+0x4c>)
 80007ac:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <MX_DAC_Init+0x50>)
 80007ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_DAC_Init+0x4c>)
 80007b2:	f001 fdfb 	bl	80023ac <HAL_DAC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007bc:	f000 fb8a 	bl	8000ed4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	2210      	movs	r2, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_DAC_Init+0x4c>)
 80007d0:	f001 fe62 	bl	8002498 <HAL_DAC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007da:	f000 fb7b 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20008654 	.word	0x20008654
 80007ec:	40007400 	.word	0x40007400

080007f0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_DMA2D_Init+0x5c>)
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <MX_DMA2D_Init+0x60>)
 80007f8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_DMA2D_Init+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_DMA2D_Init+0x5c>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_DMA2D_Init+0x5c>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_DMA2D_Init+0x5c>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_DMA2D_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_DMA2D_Init+0x5c>)
 800081a:	2200      	movs	r2, #0
 800081c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_DMA2D_Init+0x5c>)
 8000820:	2200      	movs	r2, #0
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <MX_DMA2D_Init+0x5c>)
 8000826:	f002 f977 	bl	8002b18 <HAL_DMA2D_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000830:	f000 fb50 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000834:	2101      	movs	r1, #1
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_DMA2D_Init+0x5c>)
 8000838:	f002 fac8 	bl	8002dcc <HAL_DMA2D_ConfigLayer>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000842:	f000 fb47 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20008708 	.word	0x20008708
 8000850:	4002b000 	.word	0x4002b000

08000854 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_I2C3_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_I2C3_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_I2C3_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <MX_I2C3_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_I2C3_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_I2C3_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_I2C3_Init+0x74>)
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_I2C3_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C3_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_I2C3_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_I2C3_Init+0x74>)
 8000892:	f004 f9e1 	bl	8004c58 <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 fb1a 	bl	8000ed4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_I2C3_Init+0x74>)
 80008a4:	f004 fb10 	bl	8004ec8 <HAL_I2CEx_ConfigAnalogFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80008ae:	f000 fb11 	bl	8000ed4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_I2C3_Init+0x74>)
 80008b6:	f004 fb43 	bl	8004f40 <HAL_I2CEx_ConfigDigitalFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 fb08 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20008470 	.word	0x20008470
 80008cc:	40005c00 	.word	0x40005c00
 80008d0:	000186a0 	.word	0x000186a0

080008d4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09a      	sub	sp, #104	; 0x68
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008de:	2234      	movs	r2, #52	; 0x34
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f00c fc0b 	bl	800d0fe <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2234      	movs	r2, #52	; 0x34
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00c fc05 	bl	800d0fe <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008f4:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <MX_LTDC_Init+0x160>)
 80008f6:	4a50      	ldr	r2, [pc, #320]	; (8000a38 <MX_LTDC_Init+0x164>)
 80008f8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008fa:	4b4e      	ldr	r3, [pc, #312]	; (8000a34 <MX_LTDC_Init+0x160>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000900:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000906:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800090c:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <MX_LTDC_Init+0x160>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000912:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000914:	2209      	movs	r2, #9
 8000916:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000918:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <MX_LTDC_Init+0x160>)
 800091a:	2201      	movs	r2, #1
 800091c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000920:	221d      	movs	r2, #29
 8000922:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000924:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000926:	2203      	movs	r2, #3
 8000928:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800092a:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <MX_LTDC_Init+0x160>)
 800092c:	f240 120d 	movw	r2, #269	; 0x10d
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000932:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000934:	f240 1243 	movw	r2, #323	; 0x143
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800093a:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <MX_LTDC_Init+0x160>)
 800093c:	f240 1217 	movw	r2, #279	; 0x117
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000942:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000944:	f240 1247 	movw	r2, #327	; 0x147
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800094a:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <MX_LTDC_Init+0x160>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000952:	4b38      	ldr	r3, [pc, #224]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800095a:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <MX_LTDC_Init+0x160>)
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000962:	4834      	ldr	r0, [pc, #208]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000964:	f004 fb2c 	bl	8004fc0 <HAL_LTDC_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800096e:	f000 fab1 	bl	8000ed4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000976:	23f0      	movs	r3, #240	; 0xf0
 8000978:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800097e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000982:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000984:	2302      	movs	r3, #2
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000988:	23ff      	movs	r3, #255	; 0xff
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000990:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000994:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000996:	2307      	movs	r3, #7
 8000998:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 800099a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800099e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 80009a0:	23f0      	movs	r3, #240	; 0xf0
 80009a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 80009a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009c0:	2200      	movs	r2, #0
 80009c2:	4619      	mov	r1, r3
 80009c4:	481b      	ldr	r0, [pc, #108]	; (8000a34 <MX_LTDC_Init+0x160>)
 80009c6:	f004 fbcb 	bl	8005160 <HAL_LTDC_ConfigLayer>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 80009d0:	f000 fa80 	bl	8000ed4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009f2:	2305      	movs	r3, #5
 80009f4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	2201      	movs	r2, #1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_LTDC_Init+0x160>)
 8000a1c:	f004 fba0 	bl	8005160 <HAL_LTDC_ConfigLayer>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000a26:	f000 fa55 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3768      	adds	r7, #104	; 0x68
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20008524 	.word	0x20008524
 8000a38:	40016800 	.word	0x40016800

08000a3c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a42:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <MX_SPI5_Init+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a70:	2218      	movs	r2, #24
 8000a72:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_SPI5_Init+0x64>)
 8000a8e:	f005 fbc3 	bl	8006218 <HAL_SPI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a98:	f000 fa1c 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200084c4 	.word	0x200084c4
 8000aa4:	40015000 	.word	0x40015000

08000aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <MX_TIM1_Init+0x9c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000af2:	f005 fbf5 	bl	80062e0 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f9ea 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000b0e:	f005 fd3e 	bl	800658e <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b18:	f000 f9dc 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_TIM1_Init+0x98>)
 8000b2a:	f005 ff49 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b34:	f000 f9ce 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200086c8 	.word	0x200086c8
 8000b44:	40010000 	.word	0x40010000

08000b48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_USART1_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART1_UART_Init+0x4c>)
 8000b80:	f005 ffae 	bl	8006ae0 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f9a3 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20008614 	.word	0x20008614
 8000b98:	40011000 	.word	0x40011000

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_DMA_Init+0x3c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <MX_DMA_Init+0x3c>)
 8000bac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_DMA_Init+0x3c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2038      	movs	r0, #56	; 0x38
 8000bc4:	f001 fbac 	bl	8002320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc8:	2038      	movs	r0, #56	; 0x38
 8000bca:	f001 fbc5 	bl	8002358 <HAL_NVIC_EnableIRQ>

}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]
 8000bf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_FMC_Init+0x98>)
 8000bf6:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <MX_FMC_Init+0x9c>)
 8000bf8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_FMC_Init+0x98>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c0e:	2210      	movs	r2, #16
 8000c10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c14:	2240      	movs	r2, #64	; 0x40
 8000c16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c1a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c40:	2307      	movs	r3, #7
 8000c42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c44:	2304      	movs	r3, #4
 8000c46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_FMC_Init+0x98>)
 8000c5e:	f005 faa7 	bl	80061b0 <HAL_SDRAM_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c68:	f000 f934 	bl	8000ed4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20008748 	.word	0x20008748
 8000c78:	a0000140 	.word	0xa0000140

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	; 0x38
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
 8000c96:	4b7a      	ldr	r3, [pc, #488]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a79      	ldr	r2, [pc, #484]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b77      	ldr	r3, [pc, #476]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	623b      	str	r3, [r7, #32]
 8000cac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	4b73      	ldr	r3, [pc, #460]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a72      	ldr	r2, [pc, #456]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000cb8:	f043 0320 	orr.w	r3, r3, #32
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b70      	ldr	r3, [pc, #448]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	4b6c      	ldr	r3, [pc, #432]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a6b      	ldr	r2, [pc, #428]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b69      	ldr	r3, [pc, #420]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	4b65      	ldr	r3, [pc, #404]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a64      	ldr	r2, [pc, #400]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b62      	ldr	r3, [pc, #392]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b5e      	ldr	r3, [pc, #376]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a5d      	ldr	r2, [pc, #372]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b5b      	ldr	r3, [pc, #364]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b57      	ldr	r3, [pc, #348]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a56      	ldr	r2, [pc, #344]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b50      	ldr	r3, [pc, #320]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a4f      	ldr	r2, [pc, #316]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d44:	f043 0310 	orr.w	r3, r3, #16
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <MX_GPIO_Init+0x204>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2116      	movs	r1, #22
 8000d76:	4843      	ldr	r0, [pc, #268]	; (8000e84 <MX_GPIO_Init+0x208>)
 8000d78:	f002 fa64 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	4841      	ldr	r0, [pc, #260]	; (8000e88 <MX_GPIO_Init+0x20c>)
 8000d82:	f002 fa5f 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d8c:	483f      	ldr	r0, [pc, #252]	; (8000e8c <MX_GPIO_Init+0x210>)
 8000d8e:	f002 fa59 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d98:	483d      	ldr	r0, [pc, #244]	; (8000e90 <MX_GPIO_Init+0x214>)
 8000d9a:	f002 fa53 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d9e:	2316      	movs	r3, #22
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4833      	ldr	r0, [pc, #204]	; (8000e84 <MX_GPIO_Init+0x208>)
 8000db6:	f002 f89b 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000dba:	f248 0307 	movw	r3, #32775	; 0x8007
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <MX_GPIO_Init+0x218>)
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482e      	ldr	r0, [pc, #184]	; (8000e88 <MX_GPIO_Init+0x20c>)
 8000dd0:	f002 f88e 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4827      	ldr	r0, [pc, #156]	; (8000e88 <MX_GPIO_Init+0x20c>)
 8000dec:	f002 f880 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000df0:	2320      	movs	r3, #32
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <MX_GPIO_Init+0x218>)
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4820      	ldr	r0, [pc, #128]	; (8000e84 <MX_GPIO_Init+0x208>)
 8000e04:	f002 f874 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481f      	ldr	r0, [pc, #124]	; (8000e98 <MX_GPIO_Init+0x21c>)
 8000e1c:	f002 f868 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4815      	ldr	r0, [pc, #84]	; (8000e8c <MX_GPIO_Init+0x210>)
 8000e36:	f002 f85b 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	480e      	ldr	r0, [pc, #56]	; (8000e8c <MX_GPIO_Init+0x210>)
 8000e54:	f002 f84c 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e58:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_GPIO_Init+0x214>)
 8000e72:	f002 f83d 	bl	8002ef0 <HAL_GPIO_Init>

}
 8000e76:	bf00      	nop
 8000e78:	3738      	adds	r7, #56	; 0x38
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020c00 	.word	0x40020c00
 8000e90:	40021800 	.word	0x40021800
 8000e94:	10120000 	.word	0x10120000
 8000e98:	40020400 	.word	0x40020400

08000e9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000ea4:	f00b fdde 	bl	800ca64 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f009 fbf6 	bl	800a69a <osDelay>
 8000eae:	e7fb      	b.n	8000ea8 <StartDefaultTask+0xc>

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ec2:	f000 fd59 	bl	8001978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40001000 	.word	0x40001000

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_MspInit+0x54>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <HAL_MspInit+0x54>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_MspInit+0x54>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_MspInit+0x54>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_MspInit+0x54>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_MspInit+0x54>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	210f      	movs	r1, #15
 8000f26:	f06f 0001 	mvn.w	r0, #1
 8000f2a:	f001 f9f9 	bl	8002320 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a33      	ldr	r2, [pc, #204]	; (8001028 <HAL_ADC_MspInit+0xec>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d15f      	bne.n	800101e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <HAL_ADC_MspInit+0xf0>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a31      	ldr	r2, [pc, #196]	; (800102c <HAL_ADC_MspInit+0xf0>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <HAL_ADC_MspInit+0xf0>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <HAL_ADC_MspInit+0xf0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <HAL_ADC_MspInit+0xf0>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <HAL_ADC_MspInit+0xf0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = OSCYLOSCOPE_IN_Pin;
 8000f96:	2308      	movs	r3, #8
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OSCYLOSCOPE_IN_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <HAL_ADC_MspInit+0xf4>)
 8000faa:	f001 ffa1 	bl	8002ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <HAL_ADC_MspInit+0xfc>)
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ff2:	4810      	ldr	r0, [pc, #64]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8000ff4:	f001 faa8 	bl	8002548 <HAL_DMA_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000ffe:	f7ff ff69 	bl	8000ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 8001006:	639a      	str	r2, [r3, #56]	; 0x38
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_ADC_MspInit+0xf8>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2012      	movs	r0, #18
 8001014:	f001 f984 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001018:	2012      	movs	r0, #18
 800101a:	f001 f99d 	bl	8002358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40012000 	.word	0x40012000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020800 	.word	0x40020800
 8001034:	20008668 	.word	0x20008668
 8001038:	40026410 	.word	0x40026410

0800103c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_CRC_MspInit+0x3c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d10d      	bne.n	800106a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_CRC_MspInit+0x40>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a09      	ldr	r2, [pc, #36]	; (800107c <HAL_CRC_MspInit+0x40>)
 8001058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_CRC_MspInit+0x40>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023000 	.word	0x40023000
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <HAL_DAC_MspInit+0x8c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d12f      	bne.n	8001102 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_DAC_MspInit+0x90>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_DAC_MspInit+0x90>)
 80010ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_DAC_MspInit+0x90>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_DAC_MspInit+0x90>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <HAL_DAC_MspInit+0x90>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_DAC_MspInit+0x90>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GENERATOR_OUT_Pin;
 80010da:	2320      	movs	r3, #32
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	2303      	movs	r3, #3
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GENERATOR_OUT_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <HAL_DAC_MspInit+0x94>)
 80010ee:	f001 feff 	bl	8002ef0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2036      	movs	r0, #54	; 0x36
 80010f8:	f001 f912 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010fc:	2036      	movs	r0, #54	; 0x36
 80010fe:	f001 f92b 	bl	8002358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40007400 	.word	0x40007400
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_DMA2D_MspInit+0x48>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d115      	bne.n	8001156 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_DMA2D_MspInit+0x4c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_DMA2D_MspInit+0x4c>)
 8001134:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_DMA2D_MspInit+0x4c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2105      	movs	r1, #5
 800114a:	205a      	movs	r0, #90	; 0x5a
 800114c:	f001 f8e8 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001150:	205a      	movs	r0, #90	; 0x5a
 8001152:	f001 f901 	bl	8002358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	4002b000 	.word	0x4002b000
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a29      	ldr	r2, [pc, #164]	; (800122c <HAL_I2C_MspInit+0xc4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d14b      	bne.n	8001222 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <HAL_I2C_MspInit+0xc8>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a27      	ldr	r2, [pc, #156]	; (8001230 <HAL_I2C_MspInit+0xc8>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <HAL_I2C_MspInit+0xc8>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_I2C_MspInit+0xc8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a20      	ldr	r2, [pc, #128]	; (8001230 <HAL_I2C_MspInit+0xc8>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_I2C_MspInit+0xc8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80011c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c8:	2312      	movs	r3, #18
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011d4:	2304      	movs	r3, #4
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4815      	ldr	r0, [pc, #84]	; (8001234 <HAL_I2C_MspInit+0xcc>)
 80011e0:	f001 fe86 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ea:	2312      	movs	r3, #18
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011f6:	2304      	movs	r3, #4
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <HAL_I2C_MspInit+0xd0>)
 8001202:	f001 fe75 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_I2C_MspInit+0xc8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_I2C_MspInit+0xc8>)
 8001210:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_I2C_MspInit+0xc8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40005c00 	.word	0x40005c00
 8001230:	40023800 	.word	0x40023800
 8001234:	40020800 	.word	0x40020800
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a77      	ldr	r2, [pc, #476]	; (8001438 <HAL_LTDC_MspInit+0x1fc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	f040 80e8 	bne.w	8001430 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	4b75      	ldr	r3, [pc, #468]	; (800143c <HAL_LTDC_MspInit+0x200>)
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	4a74      	ldr	r2, [pc, #464]	; (800143c <HAL_LTDC_MspInit+0x200>)
 800126a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800126e:	6453      	str	r3, [r2, #68]	; 0x44
 8001270:	4b72      	ldr	r3, [pc, #456]	; (800143c <HAL_LTDC_MspInit+0x200>)
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	4b6e      	ldr	r3, [pc, #440]	; (800143c <HAL_LTDC_MspInit+0x200>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4a6d      	ldr	r2, [pc, #436]	; (800143c <HAL_LTDC_MspInit+0x200>)
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	6313      	str	r3, [r2, #48]	; 0x30
 800128c:	4b6b      	ldr	r3, [pc, #428]	; (800143c <HAL_LTDC_MspInit+0x200>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_LTDC_MspInit+0x200>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	4a66      	ldr	r2, [pc, #408]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6313      	str	r3, [r2, #48]	; 0x30
 80012a8:	4b64      	ldr	r3, [pc, #400]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	4b60      	ldr	r3, [pc, #384]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	4a5f      	ldr	r2, [pc, #380]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	6313      	str	r3, [r2, #48]	; 0x30
 80012c4:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	4b59      	ldr	r3, [pc, #356]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a58      	ldr	r2, [pc, #352]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b56      	ldr	r3, [pc, #344]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a51      	ldr	r2, [pc, #324]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <HAL_LTDC_MspInit+0x200>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b4b      	ldr	r3, [pc, #300]	; (800143c <HAL_LTDC_MspInit+0x200>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a4a      	ldr	r2, [pc, #296]	; (800143c <HAL_LTDC_MspInit+0x200>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b48      	ldr	r3, [pc, #288]	; (800143c <HAL_LTDC_MspInit+0x200>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001336:	230e      	movs	r3, #14
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	483f      	ldr	r0, [pc, #252]	; (8001440 <HAL_LTDC_MspInit+0x204>)
 8001342:	f001 fdd5 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001346:	f641 0358 	movw	r3, #6232	; 0x1858
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001358:	230e      	movs	r3, #14
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	4838      	ldr	r0, [pc, #224]	; (8001444 <HAL_LTDC_MspInit+0x208>)
 8001364:	f001 fdc4 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001368:	2303      	movs	r3, #3
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001378:	2309      	movs	r3, #9
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	4831      	ldr	r0, [pc, #196]	; (8001448 <HAL_LTDC_MspInit+0x20c>)
 8001384:	f001 fdb4 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001388:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800139a:	230e      	movs	r3, #14
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4828      	ldr	r0, [pc, #160]	; (8001448 <HAL_LTDC_MspInit+0x20c>)
 80013a6:	f001 fda3 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80013aa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013bc:	230e      	movs	r3, #14
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	4821      	ldr	r0, [pc, #132]	; (800144c <HAL_LTDC_MspInit+0x210>)
 80013c8:	f001 fd92 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80013cc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013de:	230e      	movs	r3, #14
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	4819      	ldr	r0, [pc, #100]	; (8001450 <HAL_LTDC_MspInit+0x214>)
 80013ea:	f001 fd81 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80013ee:	2348      	movs	r3, #72	; 0x48
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013fe:	230e      	movs	r3, #14
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	4812      	ldr	r0, [pc, #72]	; (8001454 <HAL_LTDC_MspInit+0x218>)
 800140a:	f001 fd71 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800140e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001420:	2309      	movs	r3, #9
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <HAL_LTDC_MspInit+0x210>)
 800142c:	f001 fd60 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	; 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40016800 	.word	0x40016800
 800143c:	40023800 	.word	0x40023800
 8001440:	40021400 	.word	0x40021400
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40021800 	.word	0x40021800
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00

08001458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_SPI_MspInit+0x84>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12c      	bne.n	80014d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_SPI_MspInit+0x88>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <HAL_SPI_MspInit+0x88>)
 8001484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_SPI_MspInit+0x88>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_SPI_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_SPI_MspInit+0x88>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_SPI_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80014b2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014c4:	2305      	movs	r3, #5
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_SPI_MspInit+0x8c>)
 80014d0:	f001 fd0e 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40015000 	.word	0x40015000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40021400 	.word	0x40021400

080014e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_TIM_Base_MspInit+0x3c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10d      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_TIM_Base_MspInit+0x40>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <HAL_TIM_Base_MspInit+0x40>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <HAL_TIM_Base_MspInit+0x40>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40010000 	.word	0x40010000
 8001528:	40023800 	.word	0x40023800

0800152c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <HAL_UART_MspInit+0x84>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12c      	bne.n	80015a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_UART_MspInit+0x88>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_UART_MspInit+0x88>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_UART_MspInit+0x88>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_UART_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_UART_MspInit+0x88>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <HAL_UART_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001586:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800158a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001598:	2307      	movs	r3, #7
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_UART_MspInit+0x8c>)
 80015a4:	f001 fca4 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015d0:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_FMC_MspInit+0x104>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d16f      	bne.n	80016b8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_FMC_MspInit+0x104>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <HAL_FMC_MspInit+0x108>)
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	4a37      	ldr	r2, [pc, #220]	; (80016c4 <HAL_FMC_MspInit+0x108>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6393      	str	r3, [r2, #56]	; 0x38
 80015ee:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_FMC_MspInit+0x108>)
 80015f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80015fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80015fe:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800160c:	230c      	movs	r3, #12
 800160e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	482c      	ldr	r0, [pc, #176]	; (80016c8 <HAL_FMC_MspInit+0x10c>)
 8001616:	f001 fc6b 	bl	8002ef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800161a:	2301      	movs	r3, #1
 800161c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800162a:	230c      	movs	r3, #12
 800162c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4826      	ldr	r0, [pc, #152]	; (80016cc <HAL_FMC_MspInit+0x110>)
 8001634:	f001 fc5c 	bl	8002ef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001638:	f248 1333 	movw	r3, #33075	; 0x8133
 800163c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800164a:	230c      	movs	r3, #12
 800164c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	481f      	ldr	r0, [pc, #124]	; (80016d0 <HAL_FMC_MspInit+0x114>)
 8001654:	f001 fc4c 	bl	8002ef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001658:	f64f 7383 	movw	r3, #65411	; 0xff83
 800165c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800166a:	230c      	movs	r3, #12
 800166c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4818      	ldr	r0, [pc, #96]	; (80016d4 <HAL_FMC_MspInit+0x118>)
 8001674:	f001 fc3c 	bl	8002ef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001678:	f24c 7303 	movw	r3, #50947	; 0xc703
 800167c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800168a:	230c      	movs	r3, #12
 800168c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4811      	ldr	r0, [pc, #68]	; (80016d8 <HAL_FMC_MspInit+0x11c>)
 8001694:	f001 fc2c 	bl	8002ef0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001698:	2360      	movs	r3, #96	; 0x60
 800169a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a8:	230c      	movs	r3, #12
 80016aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4619      	mov	r1, r3
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <HAL_FMC_MspInit+0x120>)
 80016b2:	f001 fc1d 	bl	8002ef0 <HAL_GPIO_Init>
 80016b6:	e000      	b.n	80016ba <HAL_FMC_MspInit+0xfe>
    return;
 80016b8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000308 	.word	0x20000308
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40021400 	.word	0x40021400
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40021800 	.word	0x40021800
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016e8:	f7ff ff68 	bl	80015bc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	2036      	movs	r0, #54	; 0x36
 800170a:	f000 fe09 	bl	8002320 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800170e:	2036      	movs	r0, #54	; 0x36
 8001710:	f000 fe22 	bl	8002358 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_InitTick+0xa4>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_InitTick+0xa4>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	6413      	str	r3, [r2, #64]	; 0x40
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_InitTick+0xa4>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001730:	f107 0210 	add.w	r2, r7, #16
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f004 fb48 	bl	8005dd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001740:	f004 fb1e 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 8001744:	4603      	mov	r3, r0
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174c:	4a13      	ldr	r2, [pc, #76]	; (800179c <HAL_InitTick+0xa8>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0c9b      	lsrs	r3, r3, #18
 8001754:	3b01      	subs	r3, #1
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_InitTick+0xac>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <HAL_InitTick+0xb0>)
 800175c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_InitTick+0xac>)
 8001760:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001764:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <HAL_InitTick+0xac>)
 8001768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_InitTick+0xac>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_InitTick+0xac>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <HAL_InitTick+0xac>)
 800177a:	f004 fdb1 	bl	80062e0 <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d104      	bne.n	800178e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001784:	4806      	ldr	r0, [pc, #24]	; (80017a0 <HAL_InitTick+0xac>)
 8001786:	f004 fdd6 	bl	8006336 <HAL_TIM_Base_Start_IT>
 800178a:	4603      	mov	r3, r0
 800178c:	e000      	b.n	8001790 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3730      	adds	r7, #48	; 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	431bde83 	.word	0x431bde83
 80017a0:	2000877c 	.word	0x2000877c
 80017a4:	40001000 	.word	0x40001000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <ADC_IRQHandler+0x10>)
 80017e2:	f000 f94e 	bl	8001a82 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200085cc 	.word	0x200085cc

080017f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <TIM6_DAC_IRQHandler+0x14>)
 80017f6:	f000 fdfb 	bl	80023f0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <TIM6_DAC_IRQHandler+0x18>)
 80017fc:	f004 fdbf 	bl	800637e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20008654 	.word	0x20008654
 8001808:	2000877c 	.word	0x2000877c

0800180c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <DMA2_Stream0_IRQHandler+0x10>)
 8001812:	f000 ff47 	bl	80026a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20008668 	.word	0x20008668

08001820 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <OTG_HS_IRQHandler+0x10>)
 8001826:	f001 ffb5 	bl	8003794 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20008ba4 	.word	0x20008ba4

08001834 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <DMA2D_IRQHandler+0x10>)
 800183a:	f001 f9b6 	bl	8002baa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20008708 	.word	0x20008708

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f00b fbfc 	bl	800d074 <__errno>
 800187c:	4602      	mov	r2, r0
 800187e:	230c      	movs	r3, #12
 8001880:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20030000 	.word	0x20030000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	2000030c 	.word	0x2000030c
 80018b0:	20008e70 	.word	0x20008e70

080018b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <SystemInit+0x28>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a07      	ldr	r2, [pc, #28]	; (80018dc <SystemInit+0x28>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SystemInit+0x28>)
 80018ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ce:	609a      	str	r2, [r3, #8]
#endif
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001918 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018e6:	e003      	b.n	80018f0 <LoopCopyDataInit>

080018e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ee:	3104      	adds	r1, #4

080018f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018f8:	d3f6      	bcc.n	80018e8 <CopyDataInit>
  ldr  r2, =_sbss
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018fc:	e002      	b.n	8001904 <LoopFillZerobss>

080018fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001900:	f842 3b04 	str.w	r3, [r2], #4

08001904 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001906:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001908:	d3f9      	bcc.n	80018fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800190a:	f7ff ffd3 	bl	80018b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190e:	f00b fbb7 	bl	800d080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001912:	f7fe fe21 	bl	8000558 <main>
  bx  lr    
 8001916:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001918:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800191c:	0800d338 	.word	0x0800d338
  ldr  r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001924:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001928:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800192c:	20008e6c 	.word	0x20008e6c

08001930 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <CAN1_RX0_IRQHandler>
	...

08001934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <HAL_Init+0x40>)
 800193e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_Init+0x40>)
 800194a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_Init+0x40>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f000 fcd4 	bl	800230a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fec6 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001968:	f7ff fabc 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008
 800199c:	200087bc 	.word	0x200087bc

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200087bc 	.word	0x200087bc

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff ffee 	bl	80019a0 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_Delay+0x40>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000008 	.word	0x20000008

080019fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e033      	b.n	8001a7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fa8e 	bl	8000f3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d118      	bne.n	8001a6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a42:	f023 0302 	bic.w	r3, r3, #2
 8001a46:	f043 0202 	orr.w	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 faa8 	bl	8001fa4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f023 0303 	bic.w	r3, r3, #3
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
 8001a6a:	e001      	b.n	8001a70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d049      	beq.n	8001b58 <HAL_ADC_IRQHandler+0xd6>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d046      	beq.n	8001b58 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d12b      	bne.n	8001b48 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d127      	bne.n	8001b48 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d119      	bne.n	8001b48 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0220 	bic.w	r2, r2, #32
 8001b22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f8db 	bl	8001d04 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f06f 0212 	mvn.w	r2, #18
 8001b56:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b78:	2b80      	cmp	r3, #128	; 0x80
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d057      	beq.n	8001c3a <HAL_ADC_IRQHandler+0x1b8>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d054      	beq.n	8001c3a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d139      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d12b      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d124      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d11d      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d119      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c04:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d105      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f043 0201 	orr.w	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fab6 	bl	800219c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 020c 	mvn.w	r2, #12
 8001c38:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	2b40      	cmp	r3, #64	; 0x40
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d017      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x21a>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d014      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10d      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f843 	bl	8001d18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f06f 0201 	mvn.w	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	bf0c      	ite	eq
 8001caa:	2301      	moveq	r3, #1
 8001cac:	2300      	movne	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d015      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x27a>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d012      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f043 0202 	orr.w	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f06f 0220 	mvn.w	r2, #32
 8001cea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f81d 	bl	8001d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f06f 0220 	mvn.w	r2, #32
 8001cfa:	601a      	str	r2, [r3, #0]
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1c>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e113      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x244>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b09      	cmp	r3, #9
 8001d6a:	d925      	bls.n	8001db8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68d9      	ldr	r1, [r3, #12]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b1e      	subs	r3, #30
 8001d82:	2207      	movs	r2, #7
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43da      	mvns	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	400a      	ands	r2, r1
 8001d90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68d9      	ldr	r1, [r3, #12]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	4603      	mov	r3, r0
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4403      	add	r3, r0
 8001daa:	3b1e      	subs	r3, #30
 8001dac:	409a      	lsls	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	e022      	b.n	8001dfe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6919      	ldr	r1, [r3, #16]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	2207      	movs	r2, #7
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	400a      	ands	r2, r1
 8001dda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6919      	ldr	r1, [r3, #16]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	4603      	mov	r3, r0
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4403      	add	r3, r0
 8001df4:	409a      	lsls	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d824      	bhi.n	8001e50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	3b05      	subs	r3, #5
 8001e18:	221f      	movs	r2, #31
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	400a      	ands	r2, r1
 8001e26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b05      	subs	r3, #5
 8001e42:	fa00 f203 	lsl.w	r2, r0, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e4e:	e04c      	b.n	8001eea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d824      	bhi.n	8001ea2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	3b23      	subs	r3, #35	; 0x23
 8001e6a:	221f      	movs	r2, #31
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43da      	mvns	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	400a      	ands	r2, r1
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b23      	subs	r3, #35	; 0x23
 8001e94:	fa00 f203 	lsl.w	r2, r0, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ea0:	e023      	b.n	8001eea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b41      	subs	r3, #65	; 0x41
 8001eb4:	221f      	movs	r2, #31
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b41      	subs	r3, #65	; 0x41
 8001ede:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eea:	4b29      	ldr	r3, [pc, #164]	; (8001f90 <HAL_ADC_ConfigChannel+0x250>)
 8001eec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_ADC_ConfigChannel+0x254>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d10f      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1d8>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b12      	cmp	r3, #18
 8001efe:	d10b      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <HAL_ADC_ConfigChannel+0x254>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d12b      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x23a>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_ADC_ConfigChannel+0x258>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0x1f4>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b11      	cmp	r3, #17
 8001f32:	d122      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_ADC_ConfigChannel+0x258>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d111      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_ADC_ConfigChannel+0x25c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_ADC_ConfigChannel+0x260>)
 8001f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f60:	0c9a      	lsrs	r2, r3, #18
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f6c:	e002      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f9      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40012300 	.word	0x40012300
 8001f94:	40012000 	.word	0x40012000
 8001f98:	10000012 	.word	0x10000012
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	431bde83 	.word	0x431bde83

08001fa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fac:	4b79      	ldr	r3, [pc, #484]	; (8002194 <ADC_Init+0x1f0>)
 8001fae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	021a      	lsls	r2, r3, #8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800201e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6899      	ldr	r1, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	4a58      	ldr	r2, [pc, #352]	; (8002198 <ADC_Init+0x1f4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d022      	beq.n	8002082 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800204a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800206c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6899      	ldr	r1, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	e00f      	b.n	80020a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0202 	bic.w	r2, r2, #2
 80020b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7e1b      	ldrb	r3, [r3, #24]
 80020bc:	005a      	lsls	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d01b      	beq.n	8002108 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	3b01      	subs	r3, #1
 80020fc:	035a      	lsls	r2, r3, #13
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	e007      	b.n	8002118 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002116:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	3b01      	subs	r3, #1
 8002134:	051a      	lsls	r2, r3, #20
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800214c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800215a:	025a      	lsls	r2, r3, #9
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002172:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6899      	ldr	r1, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	029a      	lsls	r2, r3, #10
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40012300 	.word	0x40012300
 8002198:	0f000001 	.word	0x0f000001

0800219c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4907      	ldr	r1, [pc, #28]	; (800224c <__NVIC_EnableIRQ+0x38>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	; (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	; (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ff4c 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002332:	f7ff ff61 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 8002336:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	6978      	ldr	r0, [r7, #20]
 800233e:	f7ff ffb1 	bl	80022a4 <NVIC_EncodePriority>
 8002342:	4602      	mov	r2, r0
 8002344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff80 	bl	8002250 <__NVIC_SetPriority>
}
 8002350:	bf00      	nop
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff54 	bl	8002214 <__NVIC_EnableIRQ>
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e00e      	b.n	80023a4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	795b      	ldrb	r3, [r3, #5]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fe50 	bl	800103c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e014      	b.n	80023e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	791b      	ldrb	r3, [r3, #4]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fe56 	bl	8001080 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002406:	d118      	bne.n	800243a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2204      	movs	r2, #4
 800240c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002422:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002432:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f825 	bl	8002484 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002448:	d118      	bne.n	800247c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2204      	movs	r2, #4
 800244e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f043 0202 	orr.w	r2, r3, #2
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f85b 	bl	8002532 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	795b      	ldrb	r3, [r3, #5]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_DAC_ConfigChannel+0x20>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e036      	b.n	8002526 <HAL_DAC_ConfigChannel+0x8e>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2202      	movs	r2, #2
 80024c2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80024cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4013      	ands	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	22c0      	movs	r2, #192	; 0xc0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	400a      	ands	r2, r1
 8002516:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff fa24 	bl	80019a0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e099      	b.n	8002698 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002584:	e00f      	b.n	80025a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002586:	f7ff fa0b 	bl	80019a0 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b05      	cmp	r3, #5
 8002592:	d908      	bls.n	80025a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e078      	b.n	8002698 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e8      	bne.n	8002586 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_DMA_Init+0x158>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d107      	bne.n	8002610 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	4313      	orrs	r3, r2
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f023 0307 	bic.w	r3, r3, #7
 8002626:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	2b04      	cmp	r3, #4
 8002638:	d117      	bne.n	800266a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00e      	beq.n	800266a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f9e9 	bl	8002a24 <DMA_CheckFifoParam>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2240      	movs	r2, #64	; 0x40
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002666:	2301      	movs	r3, #1
 8002668:	e016      	b.n	8002698 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f9a0 	bl	80029b8 <DMA_CalcBaseAndBitshift>
 8002678:	4603      	mov	r3, r0
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	223f      	movs	r2, #63	; 0x3f
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	f010803f 	.word	0xf010803f

080026a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026b0:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_DMA_IRQHandler+0x258>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a92      	ldr	r2, [pc, #584]	; (8002900 <HAL_DMA_IRQHandler+0x25c>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2208      	movs	r2, #8
 80026d0:	409a      	lsls	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01a      	beq.n	8002710 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2208      	movs	r2, #8
 80026fe:	409a      	lsls	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	2201      	movs	r2, #1
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2201      	movs	r2, #1
 8002734:	409a      	lsls	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f043 0202 	orr.w	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2204      	movs	r2, #4
 800274c:	409a      	lsls	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d012      	beq.n	800277c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2204      	movs	r2, #4
 800276a:	409a      	lsls	r2, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	f043 0204 	orr.w	r2, r3, #4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	2210      	movs	r2, #16
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d043      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d03c      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279e:	2210      	movs	r2, #16
 80027a0:	409a      	lsls	r2, r3
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d018      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d108      	bne.n	80027d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d024      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
 80027d2:	e01f      	b.n	8002814 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01b      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
 80027e4:	e016      	b.n	8002814 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d107      	bne.n	8002804 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0208 	bic.w	r2, r2, #8
 8002802:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	2220      	movs	r2, #32
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 808e 	beq.w	8002942 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8086 	beq.w	8002942 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2220      	movs	r2, #32
 800283c:	409a      	lsls	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b05      	cmp	r3, #5
 800284c:	d136      	bne.n	80028bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0216 	bic.w	r2, r2, #22
 800285c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <HAL_DMA_IRQHandler+0x1da>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0208 	bic.w	r2, r2, #8
 800288c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	223f      	movs	r2, #63	; 0x3f
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d07d      	beq.n	80029ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4798      	blx	r3
        }
        return;
 80028ba:	e078      	b.n	80029ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01c      	beq.n	8002904 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d108      	bne.n	80028ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d030      	beq.n	8002942 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
 80028e8:	e02b      	b.n	8002942 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d027      	beq.n	8002942 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
 80028fa:	e022      	b.n	8002942 <HAL_DMA_IRQHandler+0x29e>
 80028fc:	20000000 	.word	0x20000000
 8002900:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0210 	bic.w	r2, r2, #16
 8002920:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	2b00      	cmp	r3, #0
 8002948:	d032      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d022      	beq.n	800299c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	429a      	cmp	r2, r3
 8002978:	d307      	bcc.n	800298a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f2      	bne.n	800296e <HAL_DMA_IRQHandler+0x2ca>
 8002988:	e000      	b.n	800298c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800298a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
 80029ac:	e000      	b.n	80029b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029ae:	bf00      	nop
    }
  }
}
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop

080029b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	3b10      	subs	r3, #16
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <DMA_CalcBaseAndBitshift+0x64>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <DMA_CalcBaseAndBitshift+0x68>)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d909      	bls.n	80029fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	1d1a      	adds	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	659a      	str	r2, [r3, #88]	; 0x58
 80029f8:	e007      	b.n	8002a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	aaaaaaab 	.word	0xaaaaaaab
 8002a20:	0800d320 	.word	0x0800d320

08002a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d11f      	bne.n	8002a7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d855      	bhi.n	8002af0 <DMA_CheckFifoParam+0xcc>
 8002a44:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <DMA_CheckFifoParam+0x28>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002a5d 	.word	0x08002a5d
 8002a50:	08002a6f 	.word	0x08002a6f
 8002a54:	08002a5d 	.word	0x08002a5d
 8002a58:	08002af1 	.word	0x08002af1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d045      	beq.n	8002af4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6c:	e042      	b.n	8002af4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a76:	d13f      	bne.n	8002af8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7c:	e03c      	b.n	8002af8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a86:	d121      	bne.n	8002acc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d836      	bhi.n	8002afc <DMA_CheckFifoParam+0xd8>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <DMA_CheckFifoParam+0x70>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002aab 	.word	0x08002aab
 8002a9c:	08002aa5 	.word	0x08002aa5
 8002aa0:	08002abd 	.word	0x08002abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e02f      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d024      	beq.n	8002b00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aba:	e021      	b.n	8002b00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ac4:	d11e      	bne.n	8002b04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aca:	e01b      	b.n	8002b04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <DMA_CheckFifoParam+0xb4>
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d003      	beq.n	8002ade <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ad6:	e018      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      break;
 8002adc:	e015      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00e      	beq.n	8002b08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      break;
 8002aee:	e00b      	b.n	8002b08 <DMA_CheckFifoParam+0xe4>
      break;
 8002af0:	bf00      	nop
 8002af2:	e00a      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
      break;
 8002af4:	bf00      	nop
 8002af6:	e008      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
      break;
 8002af8:	bf00      	nop
 8002afa:	e006      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
      break;
 8002afc:	bf00      	nop
 8002afe:	e004      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
      break;
 8002b00:	bf00      	nop
 8002b02:	e002      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
      break;   
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <DMA_CheckFifoParam+0xe6>
      break;
 8002b08:	bf00      	nop
    }
  } 
  
  return status; 
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e03b      	b.n	8002ba2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe faea 	bl	8001118 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	f023 0107 	bic.w	r1, r3, #7
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68d1      	ldr	r1, [r2, #12]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d026      	beq.n	8002c1a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d021      	beq.n	8002c1a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d026      	beq.n	8002c72 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d021      	beq.n	8002c72 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2220      	movs	r2, #32
 8002c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	f043 0202 	orr.w	r2, r3, #2
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2204      	movs	r2, #4
 8002c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d026      	beq.n	8002cca <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d021      	beq.n	8002cca <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c94:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	f043 0204 	orr.w	r2, r3, #4
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2204      	movs	r2, #4
 8002cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00e      	beq.n	8002cfc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f853 	bl	8002da2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d024      	beq.n	8002d50 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01f      	beq.n	8002d50 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2202      	movs	r2, #2
 8002d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01f      	beq.n	8002d9a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01a      	beq.n	8002d9a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d72:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f80e 	bl	8002db6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_DMA2D_ConfigLayer+0x20>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e079      	b.n	8002ee0 <HAL_DMA2D_ConfigLayer+0x114>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	3318      	adds	r3, #24
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002e16:	4b35      	ldr	r3, [pc, #212]	; (8002eec <HAL_DMA2D_ConfigLayer+0x120>)
 8002e18:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b0a      	cmp	r3, #10
 8002e20:	d003      	beq.n	8002e2a <HAL_DMA2D_ConfigLayer+0x5e>
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b09      	cmp	r3, #9
 8002e28:	d107      	bne.n	8002e3a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e005      	b.n	8002e46 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	061b      	lsls	r3, r3, #24
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d120      	bne.n	8002e8e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	ea02 0103 	and.w	r1, r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b0a      	cmp	r3, #10
 8002e74:	d003      	beq.n	8002e7e <HAL_DMA2D_ConfigLayer+0xb2>
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b09      	cmp	r3, #9
 8002e7c:	d127      	bne.n	8002ece <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e8c:	e01f      	b.n	8002ece <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	ea02 0103 	and.w	r1, r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b0a      	cmp	r3, #10
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA2D_ConfigLayer+0xf4>
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d106      	bne.n	8002ece <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ecc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	ff03000f 	.word	0xff03000f

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e177      	b.n	80031fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 8166 	bne.w	80031f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d00b      	beq.n	8002f4a <HAL_GPIO_Init+0x5a>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f3e:	2b11      	cmp	r3, #17
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b12      	cmp	r3, #18
 8002f48:	d130      	bne.n	8002fac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	2203      	movs	r2, #3
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f80:	2201      	movs	r2, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 0201 	and.w	r2, r3, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0xfc>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b12      	cmp	r3, #18
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80c0 	beq.w	80031f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_GPIO_Init+0x320>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a64      	ldr	r2, [pc, #400]	; (8003210 <HAL_GPIO_Init+0x320>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b62      	ldr	r3, [pc, #392]	; (8003210 <HAL_GPIO_Init+0x320>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a60      	ldr	r2, [pc, #384]	; (8003214 <HAL_GPIO_Init+0x324>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a57      	ldr	r2, [pc, #348]	; (8003218 <HAL_GPIO_Init+0x328>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d037      	beq.n	800312e <HAL_GPIO_Init+0x23e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a56      	ldr	r2, [pc, #344]	; (800321c <HAL_GPIO_Init+0x32c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d031      	beq.n	800312a <HAL_GPIO_Init+0x23a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a55      	ldr	r2, [pc, #340]	; (8003220 <HAL_GPIO_Init+0x330>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d02b      	beq.n	8003126 <HAL_GPIO_Init+0x236>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a54      	ldr	r2, [pc, #336]	; (8003224 <HAL_GPIO_Init+0x334>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d025      	beq.n	8003122 <HAL_GPIO_Init+0x232>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a53      	ldr	r2, [pc, #332]	; (8003228 <HAL_GPIO_Init+0x338>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01f      	beq.n	800311e <HAL_GPIO_Init+0x22e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a52      	ldr	r2, [pc, #328]	; (800322c <HAL_GPIO_Init+0x33c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d019      	beq.n	800311a <HAL_GPIO_Init+0x22a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a51      	ldr	r2, [pc, #324]	; (8003230 <HAL_GPIO_Init+0x340>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_Init+0x226>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <HAL_GPIO_Init+0x344>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00d      	beq.n	8003112 <HAL_GPIO_Init+0x222>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4f      	ldr	r2, [pc, #316]	; (8003238 <HAL_GPIO_Init+0x348>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <HAL_GPIO_Init+0x21e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4e      	ldr	r2, [pc, #312]	; (800323c <HAL_GPIO_Init+0x34c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_GPIO_Init+0x21a>
 8003106:	2309      	movs	r3, #9
 8003108:	e012      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800310a:	230a      	movs	r3, #10
 800310c:	e010      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800310e:	2308      	movs	r3, #8
 8003110:	e00e      	b.n	8003130 <HAL_GPIO_Init+0x240>
 8003112:	2307      	movs	r3, #7
 8003114:	e00c      	b.n	8003130 <HAL_GPIO_Init+0x240>
 8003116:	2306      	movs	r3, #6
 8003118:	e00a      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800311a:	2305      	movs	r3, #5
 800311c:	e008      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800311e:	2304      	movs	r3, #4
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x240>
 8003122:	2303      	movs	r3, #3
 8003124:	e004      	b.n	8003130 <HAL_GPIO_Init+0x240>
 8003126:	2302      	movs	r3, #2
 8003128:	e002      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_GPIO_Init+0x240>
 800312e:	2300      	movs	r3, #0
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	f002 0203 	and.w	r2, r2, #3
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	4093      	lsls	r3, r2
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003140:	4934      	ldr	r1, [pc, #208]	; (8003214 <HAL_GPIO_Init+0x324>)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800314e:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <HAL_GPIO_Init+0x350>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003172:	4a33      	ldr	r2, [pc, #204]	; (8003240 <HAL_GPIO_Init+0x350>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003178:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_GPIO_Init+0x350>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800319c:	4a28      	ldr	r2, [pc, #160]	; (8003240 <HAL_GPIO_Init+0x350>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_GPIO_Init+0x350>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031c6:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <HAL_GPIO_Init+0x350>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031cc:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <HAL_GPIO_Init+0x350>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_GPIO_Init+0x350>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3301      	adds	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	f67f ae84 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003204:	bf00      	nop
 8003206:	3724      	adds	r7, #36	; 0x24
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40023800 	.word	0x40023800
 8003214:	40013800 	.word	0x40013800
 8003218:	40020000 	.word	0x40020000
 800321c:	40020400 	.word	0x40020400
 8003220:	40020800 	.word	0x40020800
 8003224:	40020c00 	.word	0x40020c00
 8003228:	40021000 	.word	0x40021000
 800322c:	40021400 	.word	0x40021400
 8003230:	40021800 	.word	0x40021800
 8003234:	40021c00 	.word	0x40021c00
 8003238:	40022000 	.word	0x40022000
 800323c:	40022400 	.word	0x40022400
 8003240:	40013c00 	.word	0x40013c00

08003244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
 8003250:	4613      	mov	r3, r2
 8003252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003254:	787b      	ldrb	r3, [r7, #1]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003260:	e003      	b.n	800326a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	041a      	lsls	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	619a      	str	r2, [r3, #24]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003278:	b08f      	sub	sp, #60	; 0x3c
 800327a:	af0a      	add	r7, sp, #40	; 0x28
 800327c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e054      	b.n	8003332 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f009 fc32 	bl	800cb0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2203      	movs	r2, #3
 80032ac:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f004 f938 	bl	800753c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	687e      	ldr	r6, [r7, #4]
 80032d4:	466d      	mov	r5, sp
 80032d6:	f106 0410 	add.w	r4, r6, #16
 80032da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80032ea:	1d33      	adds	r3, r6, #4
 80032ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ee:	6838      	ldr	r0, [r7, #0]
 80032f0:	f004 f8b2 	bl	8007458 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 f92f 	bl	800755e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	687e      	ldr	r6, [r7, #4]
 8003308:	466d      	mov	r5, sp
 800330a:	f106 0410 	add.w	r4, r6, #16
 800330e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003316:	e894 0003 	ldmia.w	r4, {r0, r1}
 800331a:	e885 0003 	stmia.w	r5, {r0, r1}
 800331e:	1d33      	adds	r3, r6, #4
 8003320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003322:	6838      	ldr	r0, [r7, #0]
 8003324:	f004 fa42 	bl	80077ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800333a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800333a:	b590      	push	{r4, r7, lr}
 800333c:	b089      	sub	sp, #36	; 0x24
 800333e:	af04      	add	r7, sp, #16
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	4608      	mov	r0, r1
 8003344:	4611      	mov	r1, r2
 8003346:	461a      	mov	r2, r3
 8003348:	4603      	mov	r3, r0
 800334a:	70fb      	strb	r3, [r7, #3]
 800334c:	460b      	mov	r3, r1
 800334e:	70bb      	strb	r3, [r7, #2]
 8003350:	4613      	mov	r3, r2
 8003352:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_HCD_HC_Init+0x28>
 800335e:	2302      	movs	r3, #2
 8003360:	e07f      	b.n	8003462 <HAL_HCD_HC_Init+0x128>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	333d      	adds	r3, #61	; 0x3d
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	440b      	add	r3, r1
 800338c:	3338      	adds	r3, #56	; 0x38
 800338e:	787a      	ldrb	r2, [r7, #1]
 8003390:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	3340      	adds	r3, #64	; 0x40
 80033a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80033a4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	3339      	adds	r3, #57	; 0x39
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	333f      	adds	r3, #63	; 0x3f
 80033ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80033ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	78bb      	ldrb	r3, [r7, #2]
 80033d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d8:	b2d8      	uxtb	r0, r3
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	333a      	adds	r3, #58	; 0x3a
 80033e8:	4602      	mov	r2, r0
 80033ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80033ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da0a      	bge.n	800340a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	333b      	adds	r3, #59	; 0x3b
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	e009      	b.n	800341e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	333b      	adds	r3, #59	; 0x3b
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	333c      	adds	r3, #60	; 0x3c
 800342e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003432:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	787c      	ldrb	r4, [r7, #1]
 800343a:	78ba      	ldrb	r2, [r7, #2]
 800343c:	78f9      	ldrb	r1, [r7, #3]
 800343e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003440:	9302      	str	r3, [sp, #8]
 8003442:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	f897 3020 	ldrb.w	r3, [r7, #32]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	4623      	mov	r3, r4
 8003450:	f004 fb2e 	bl	8007ab0 <USB_HC_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}

0800346a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_HCD_HC_Halt+0x1e>
 8003484:	2302      	movs	r3, #2
 8003486:	e00f      	b.n	80034a8 <HAL_HCD_HC_Halt+0x3e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f004 fd6a 	bl	8007f72 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	4608      	mov	r0, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	461a      	mov	r2, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	70fb      	strb	r3, [r7, #3]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70bb      	strb	r3, [r7, #2]
 80034c6:	4613      	mov	r3, r2
 80034c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	333b      	adds	r3, #59	; 0x3b
 80034da:	78ba      	ldrb	r2, [r7, #2]
 80034dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	333f      	adds	r3, #63	; 0x3f
 80034ee:	787a      	ldrb	r2, [r7, #1]
 80034f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80034f2:	7c3b      	ldrb	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d114      	bne.n	8003522 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	3342      	adds	r3, #66	; 0x42
 8003508:	2203      	movs	r2, #3
 800350a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	440b      	add	r3, r1
 800351a:	333d      	adds	r3, #61	; 0x3d
 800351c:	7f3a      	ldrb	r2, [r7, #28]
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	e009      	b.n	8003536 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	3342      	adds	r3, #66	; 0x42
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003536:	787b      	ldrb	r3, [r7, #1]
 8003538:	2b03      	cmp	r3, #3
 800353a:	f200 80d6 	bhi.w	80036ea <HAL_HCD_HC_SubmitRequest+0x23a>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003555 	.word	0x08003555
 8003548:	080036d5 	.word	0x080036d5
 800354c:	080035c1 	.word	0x080035c1
 8003550:	0800364b 	.word	0x0800364b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003554:	7c3b      	ldrb	r3, [r7, #16]
 8003556:	2b01      	cmp	r3, #1
 8003558:	f040 80c9 	bne.w	80036ee <HAL_HCD_HC_SubmitRequest+0x23e>
 800355c:	78bb      	ldrb	r3, [r7, #2]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 80c5 	bne.w	80036ee <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003564:	8b3b      	ldrh	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	3351      	adds	r3, #81	; 0x51
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	3351      	adds	r3, #81	; 0x51
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	3342      	adds	r3, #66	; 0x42
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80035a8:	e0a1      	b.n	80036ee <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	3342      	adds	r3, #66	; 0x42
 80035ba:	2202      	movs	r2, #2
 80035bc:	701a      	strb	r2, [r3, #0]
      break;
 80035be:	e096      	b.n	80036ee <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80035c0:	78bb      	ldrb	r3, [r7, #2]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d120      	bne.n	8003608 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	440b      	add	r3, r1
 80035d4:	3351      	adds	r3, #81	; 0x51
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	440b      	add	r3, r1
 80035ea:	3342      	adds	r3, #66	; 0x42
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80035f0:	e07e      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	3342      	adds	r3, #66	; 0x42
 8003602:	2202      	movs	r2, #2
 8003604:	701a      	strb	r2, [r3, #0]
      break;
 8003606:	e073      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	3350      	adds	r3, #80	; 0x50
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	3342      	adds	r3, #66	; 0x42
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
      break;
 8003632:	e05d      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	3342      	adds	r3, #66	; 0x42
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]
      break;
 8003648:	e052      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800364a:	78bb      	ldrb	r3, [r7, #2]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d120      	bne.n	8003692 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	440b      	add	r3, r1
 800365e:	3351      	adds	r3, #81	; 0x51
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	440b      	add	r3, r1
 8003674:	3342      	adds	r3, #66	; 0x42
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800367a:	e039      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	3342      	adds	r3, #66	; 0x42
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]
      break;
 8003690:	e02e      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	3350      	adds	r3, #80	; 0x50
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	3342      	adds	r3, #66	; 0x42
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
      break;
 80036bc:	e018      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	3342      	adds	r3, #66	; 0x42
 80036ce:	2202      	movs	r2, #2
 80036d0:	701a      	strb	r2, [r3, #0]
      break;
 80036d2:	e00d      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	3342      	adds	r3, #66	; 0x42
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
      break;
 80036e8:	e002      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80036ee:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	3344      	adds	r3, #68	; 0x44
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	8b39      	ldrh	r1, [r7, #24]
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4403      	add	r3, r0
 8003714:	3348      	adds	r3, #72	; 0x48
 8003716:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	335c      	adds	r3, #92	; 0x5c
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	440b      	add	r3, r1
 800373a:	334c      	adds	r3, #76	; 0x4c
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	3339      	adds	r3, #57	; 0x39
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	440b      	add	r3, r1
 8003762:	335d      	adds	r3, #93	; 0x5d
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	3338      	adds	r3, #56	; 0x38
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	18d1      	adds	r1, r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	f004 fa9e 	bl	8007cc4 <USB_HC_StartXfer>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop

08003794 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 ffbb 	bl	8007726 <USB_GetMode>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	f040 80ef 	bne.w	8003996 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f003 ff9f 	bl	8007700 <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80e5 	beq.w	8003994 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 ff96 	bl	8007700 <USB_ReadInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037de:	d104      	bne.n	80037ea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f003 ff86 	bl	8007700 <USB_ReadInterrupts>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037fe:	d104      	bne.n	800380a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003808:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f003 ff76 	bl	8007700 <USB_ReadInterrupts>
 8003814:	4603      	mov	r3, r0
 8003816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800381a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800381e:	d104      	bne.n	800382a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003828:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f003 ff66 	bl	8007700 <USB_ReadInterrupts>
 8003834:	4603      	mov	r3, r0
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d103      	bne.n	8003846 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2202      	movs	r2, #2
 8003844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f003 ff58 	bl	8007700 <USB_ReadInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800385a:	d115      	bne.n	8003888 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003864:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f009 f9c2 	bl	800cc00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f004 f84e 	bl	8007924 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f003 ff37 	bl	8007700 <USB_ReadInterrupts>
 8003892:	4603      	mov	r3, r0
 8003894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800389c:	d102      	bne.n	80038a4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f001 f966 	bl	8004b70 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f003 ff29 	bl	8007700 <USB_ReadInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d106      	bne.n	80038c6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f009 f985 	bl	800cbc8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2208      	movs	r2, #8
 80038c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 ff18 	bl	8007700 <USB_ReadInterrupts>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038da:	d138      	bne.n	800394e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 fb35 	bl	8007f50 <USB_HC_ReadInterrupt>
 80038e6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	e025      	b.n	800393a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d018      	beq.n	8003934 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4413      	add	r3, r2
 800390a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003918:	d106      	bne.n	8003928 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8cf 	bl	8003ac4 <HCD_HC_IN_IRQHandler>
 8003926:	e005      	b.n	8003934 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fcfd 	bl	800432e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	3301      	adds	r3, #1
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	d3d4      	bcc.n	80038ee <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f003 fed4 	bl	8007700 <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d101      	bne.n	8003966 <HAL_HCD_IRQHandler+0x1d2>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_HCD_IRQHandler+0x1d4>
 8003966:	2300      	movs	r3, #0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d014      	beq.n	8003996 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0210 	bic.w	r2, r2, #16
 800397a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f001 f84b 	bl	8004a18 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0210 	orr.w	r2, r2, #16
 8003990:	619a      	str	r2, [r3, #24]
 8003992:	e000      	b.n	8003996 <HAL_HCD_IRQHandler+0x202>
      return;
 8003994:	bf00      	nop
    }
  }
}
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_HCD_Start+0x16>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e013      	b.n	80039da <HAL_HCD_Start+0x3e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f003 fdab 	bl	800751a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 f80e 	bl	80079ec <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_HCD_Stop+0x16>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e00d      	b.n	8003a14 <HAL_HCD_Stop+0x32>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f004 fbef 	bl	80081e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 ffb5 	bl	8007998 <USB_ResetPort>
 8003a2e:	4603      	mov	r3, r0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	335c      	adds	r3, #92	; 0x5c
 8003a54:	781b      	ldrb	r3, [r3, #0]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	440b      	add	r3, r1
 8003a7c:	334c      	adds	r3, #76	; 0x4c
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f003 fff7 	bl	8007a8c <USB_GetCurrentFrame>
 8003a9e:	4603      	mov	r3, r0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f003 ffd2 	bl	8007a5e <USB_GetHostSpeed>
 8003aba:	4603      	mov	r3, r0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d119      	bne.n	8003b28 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b00:	461a      	mov	r2, r3
 8003b02:	2304      	movs	r3, #4
 8003b04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	0151      	lsls	r1, r2, #5
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	440a      	add	r2, r1
 8003b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b20:	f043 0302 	orr.w	r3, r3, #2
 8003b24:	60d3      	str	r3, [r2, #12]
 8003b26:	e0ce      	b.n	8003cc6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3e:	d12c      	bne.n	8003b9a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	440b      	add	r3, r1
 8003b62:	335d      	adds	r3, #93	; 0x5d
 8003b64:	2207      	movs	r2, #7
 8003b66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	0151      	lsls	r1, r2, #5
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 f9ed 	bl	8007f72 <USB_HC_Halt>
 8003b98:	e095      	b.n	8003cc6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d109      	bne.n	8003bc4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	6093      	str	r3, [r2, #8]
 8003bc2:	e080      	b.n	8003cc6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d134      	bne.n	8003c44 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	0151      	lsls	r1, r2, #5
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	440a      	add	r2, r1
 8003bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	440b      	add	r3, r1
 8003c08:	335d      	adds	r3, #93	; 0x5d
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2308      	movs	r3, #8
 8003c30:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f004 f998 	bl	8007f72 <USB_HC_Halt>
 8003c42:	e040      	b.n	8003cc6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	d134      	bne.n	8003cc6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	0151      	lsls	r1, r2, #5
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	440a      	add	r2, r1
 8003c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c76:	f043 0302 	orr.w	r3, r3, #2
 8003c7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f004 f973 	bl	8007f72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2310      	movs	r3, #16
 8003c9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	335d      	adds	r3, #93	; 0x5d
 8003cae:	2208      	movs	r2, #8
 8003cb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cdc:	d122      	bne.n	8003d24 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f004 f932 	bl	8007f72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d20:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003d22:	e300      	b.n	8004326 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	f040 80fd 	bne.w	8003f36 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01b      	beq.n	8003d7c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	440b      	add	r3, r1
 8003d52:	3348      	adds	r3, #72	; 0x48
 8003d54:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	0159      	lsls	r1, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	440b      	add	r3, r1
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003d68:	1ad1      	subs	r1, r2, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4403      	add	r3, r0
 8003d78:	334c      	adds	r3, #76	; 0x4c
 8003d7a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	440b      	add	r3, r1
 8003d8a:	335d      	adds	r3, #93	; 0x5d
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3358      	adds	r3, #88	; 0x58
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db0:	461a      	mov	r2, r3
 8003db2:	2301      	movs	r3, #1
 8003db4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	440b      	add	r3, r1
 8003dc4:	333f      	adds	r3, #63	; 0x3f
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	440b      	add	r3, r1
 8003dda:	333f      	adds	r3, #63	; 0x3f
 8003ddc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d121      	bne.n	8003e26 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 f8b0 	bl	8007f72 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2310      	movs	r3, #16
 8003e22:	6093      	str	r3, [r2, #8]
 8003e24:	e070      	b.n	8003f08 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	440b      	add	r3, r1
 8003e34:	333f      	adds	r3, #63	; 0x3f
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d12a      	bne.n	8003e92 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e5a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	440b      	add	r3, r1
 8003e6a:	335c      	adds	r3, #92	; 0x5c
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	b2d8      	uxtb	r0, r3
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	440b      	add	r3, r1
 8003e82:	335c      	adds	r3, #92	; 0x5c
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	4601      	mov	r1, r0
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f008 fec6 	bl	800cc1c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e90:	e03a      	b.n	8003f08 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	333f      	adds	r3, #63	; 0x3f
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d12f      	bne.n	8003f08 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	335c      	adds	r3, #92	; 0x5c
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	3350      	adds	r3, #80	; 0x50
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	f083 0301 	eor.w	r3, r3, #1
 8003ed2:	b2d8      	uxtb	r0, r3
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3350      	adds	r3, #80	; 0x50
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	b2d8      	uxtb	r0, r3
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	440b      	add	r3, r1
 8003efa:	335c      	adds	r3, #92	; 0x5c
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	4601      	mov	r1, r0
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f008 fe8a 	bl	800cc1c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	3350      	adds	r3, #80	; 0x50
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	f083 0301 	eor.w	r3, r3, #1
 8003f1e:	b2d8      	uxtb	r0, r3
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3350      	adds	r3, #80	; 0x50
 8003f30:	4602      	mov	r2, r0
 8003f32:	701a      	strb	r2, [r3, #0]
}
 8003f34:	e1f7      	b.n	8004326 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	f040 811a 	bne.w	8004182 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f68:	f023 0302 	bic.w	r3, r3, #2
 8003f6c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	335d      	adds	r3, #93	; 0x5d
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10a      	bne.n	8003f9a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	440b      	add	r3, r1
 8003f92:	335c      	adds	r3, #92	; 0x5c
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e0d9      	b.n	800414e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	440b      	add	r3, r1
 8003fa8:	335d      	adds	r3, #93	; 0x5d
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d10a      	bne.n	8003fc6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	335c      	adds	r3, #92	; 0x5c
 8003fc0:	2205      	movs	r2, #5
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e0c3      	b.n	800414e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	335d      	adds	r3, #93	; 0x5d
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d00a      	beq.n	8003ff2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	440b      	add	r3, r1
 8003fea:	335d      	adds	r3, #93	; 0x5d
 8003fec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d156      	bne.n	80040a0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	440b      	add	r3, r1
 8004000:	3358      	adds	r3, #88	; 0x58
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1c59      	adds	r1, r3, #1
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4403      	add	r3, r0
 8004014:	3358      	adds	r3, #88	; 0x58
 8004016:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	440b      	add	r3, r1
 8004026:	3358      	adds	r3, #88	; 0x58
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d914      	bls.n	8004058 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	3358      	adds	r3, #88	; 0x58
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	335c      	adds	r3, #92	; 0x5c
 8004052:	2204      	movs	r2, #4
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e009      	b.n	800406c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	335c      	adds	r3, #92	; 0x5c
 8004068:	2202      	movs	r2, #2
 800406a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004082:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800408a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4413      	add	r3, r2
 8004094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e056      	b.n	800414e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	440b      	add	r3, r1
 80040ae:	335d      	adds	r3, #93	; 0x5d
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d123      	bne.n	80040fe <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	440b      	add	r3, r1
 80040c4:	335c      	adds	r3, #92	; 0x5c
 80040c6:	2202      	movs	r2, #2
 80040c8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040e0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040e8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f6:	461a      	mov	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	e027      	b.n	800414e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	440b      	add	r3, r1
 800410c:	335d      	adds	r3, #93	; 0x5d
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b07      	cmp	r3, #7
 8004112:	d11c      	bne.n	800414e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	440b      	add	r3, r1
 8004122:	3358      	adds	r3, #88	; 0x58
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	1c59      	adds	r1, r3, #1
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4403      	add	r3, r0
 8004136:	3358      	adds	r3, #88	; 0x58
 8004138:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	440b      	add	r3, r1
 8004148:	335c      	adds	r3, #92	; 0x5c
 800414a:	2204      	movs	r2, #4
 800414c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	461a      	mov	r2, r3
 800415c:	2302      	movs	r3, #2
 800415e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	b2d8      	uxtb	r0, r3
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	440b      	add	r3, r1
 8004172:	335c      	adds	r3, #92	; 0x5c
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	4601      	mov	r1, r0
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f008 fd4e 	bl	800cc1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004180:	e0d1      	b.n	8004326 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4413      	add	r3, r2
 800418a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d13e      	bne.n	8004216 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b2:	f043 0302 	orr.w	r3, r3, #2
 80041b6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	440b      	add	r3, r1
 80041c6:	3358      	adds	r3, #88	; 0x58
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	1c59      	adds	r1, r3, #1
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4403      	add	r3, r0
 80041da:	3358      	adds	r3, #88	; 0x58
 80041dc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	440b      	add	r3, r1
 80041ec:	335d      	adds	r3, #93	; 0x5d
 80041ee:	2206      	movs	r2, #6
 80041f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f003 feb8 	bl	8007f72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	461a      	mov	r2, r3
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	6093      	str	r3, [r2, #8]
}
 8004214:	e087      	b.n	8004326 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4413      	add	r3, r2
 800421e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d17c      	bne.n	8004326 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	440b      	add	r3, r1
 800423a:	333f      	adds	r3, #63	; 0x3f
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b03      	cmp	r3, #3
 8004240:	d122      	bne.n	8004288 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	440b      	add	r3, r1
 8004250:	3358      	adds	r3, #88	; 0x58
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4413      	add	r3, r2
 800425e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	440a      	add	r2, r1
 800426c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004270:	f043 0302 	orr.w	r3, r3, #2
 8004274:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	4611      	mov	r1, r2
 8004280:	4618      	mov	r0, r3
 8004282:	f003 fe76 	bl	8007f72 <USB_HC_Halt>
 8004286:	e045      	b.n	8004314 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	440b      	add	r3, r1
 8004296:	333f      	adds	r3, #63	; 0x3f
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	440b      	add	r3, r1
 80042ac:	333f      	adds	r3, #63	; 0x3f
 80042ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d12f      	bne.n	8004314 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	440b      	add	r3, r1
 80042c2:	3358      	adds	r3, #88	; 0x58
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d121      	bne.n	8004314 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	335d      	adds	r3, #93	; 0x5d
 80042e0:	2203      	movs	r2, #3
 80042e2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	0151      	lsls	r1, r2, #5
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	440a      	add	r2, r1
 80042fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f003 fe2f 	bl	8007f72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004320:	461a      	mov	r2, r3
 8004322:	2310      	movs	r3, #16
 8004324:	6093      	str	r3, [r2, #8]
}
 8004326:	bf00      	nop
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	460b      	mov	r3, r1
 8004338:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d119      	bne.n	8004392 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436a:	461a      	mov	r2, r3
 800436c:	2304      	movs	r3, #4
 800436e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	440a      	add	r2, r1
 8004386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800438a:	f043 0302 	orr.w	r3, r3, #2
 800438e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004390:	e33e      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d141      	bne.n	800442c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b4:	461a      	mov	r2, r3
 80043b6:	2320      	movs	r3, #32
 80043b8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	440b      	add	r3, r1
 80043c8:	333d      	adds	r3, #61	; 0x3d
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	f040 831f 	bne.w	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	440b      	add	r3, r1
 80043e0:	333d      	adds	r3, #61	; 0x3d
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	440b      	add	r3, r1
 80043f4:	335c      	adds	r3, #92	; 0x5c
 80043f6:	2202      	movs	r2, #2
 80043f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	440a      	add	r2, r1
 8004410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	4611      	mov	r1, r2
 8004424:	4618      	mov	r0, r3
 8004426:	f003 fda4 	bl	8007f72 <USB_HC_Halt>
}
 800442a:	e2f1      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d13f      	bne.n	80044c2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	440b      	add	r3, r1
 8004450:	335d      	adds	r3, #93	; 0x5d
 8004452:	2204      	movs	r2, #4
 8004454:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	333d      	adds	r3, #61	; 0x3d
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	440b      	add	r3, r1
 8004478:	3358      	adds	r3, #88	; 0x58
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	440a      	add	r2, r1
 8004494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f003 fd62 	bl	8007f72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ba:	461a      	mov	r2, r3
 80044bc:	2340      	movs	r3, #64	; 0x40
 80044be:	6093      	str	r3, [r2, #8]
}
 80044c0:	e2a6      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d8:	d122      	bne.n	8004520 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f003 fd34 	bl	8007f72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4413      	add	r3, r2
 8004512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004516:	461a      	mov	r2, r3
 8004518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800451c:	6093      	str	r3, [r2, #8]
}
 800451e:	e277      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b01      	cmp	r3, #1
 8004534:	d135      	bne.n	80045a2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	3358      	adds	r3, #88	; 0x58
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	0151      	lsls	r1, r2, #5
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	440a      	add	r2, r1
 8004560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004564:	f043 0302 	orr.w	r3, r3, #2
 8004568:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f003 fcfc 	bl	8007f72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4413      	add	r3, r2
 8004582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004586:	461a      	mov	r2, r3
 8004588:	2301      	movs	r3, #1
 800458a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	440b      	add	r3, r1
 800459a:	335d      	adds	r3, #93	; 0x5d
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
}
 80045a0:	e236      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d12b      	bne.n	8004610 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c4:	461a      	mov	r2, r3
 80045c6:	2308      	movs	r3, #8
 80045c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f003 fcbc 	bl	8007f72 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	440b      	add	r3, r1
 8004608:	335d      	adds	r3, #93	; 0x5d
 800460a:	2205      	movs	r2, #5
 800460c:	701a      	strb	r2, [r3, #0]
}
 800460e:	e1ff      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b10      	cmp	r3, #16
 8004624:	d155      	bne.n	80046d2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	440b      	add	r3, r1
 8004634:	3358      	adds	r3, #88	; 0x58
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	335d      	adds	r3, #93	; 0x5d
 800464a:	2203      	movs	r2, #3
 800464c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	333d      	adds	r3, #61	; 0x3d
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d114      	bne.n	800468e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	440b      	add	r3, r1
 8004672:	333c      	adds	r3, #60	; 0x3c
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	440b      	add	r3, r1
 8004688:	333d      	adds	r3, #61	; 0x3d
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f003 fc5a 	bl	8007f72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ca:	461a      	mov	r2, r3
 80046cc:	2310      	movs	r3, #16
 80046ce:	6093      	str	r3, [r2, #8]
}
 80046d0:	e19e      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b80      	cmp	r3, #128	; 0x80
 80046e6:	d12b      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f003 fc2d 	bl	8007f72 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	440b      	add	r3, r1
 8004726:	335d      	adds	r3, #93	; 0x5d
 8004728:	2206      	movs	r2, #6
 800472a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	461a      	mov	r2, r3
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	6093      	str	r3, [r2, #8]
}
 800473e:	e167      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d135      	bne.n	80047c4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	440a      	add	r2, r1
 800476e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fbf5 	bl	8007f72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	461a      	mov	r2, r3
 8004796:	2310      	movs	r3, #16
 8004798:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a6:	461a      	mov	r2, r3
 80047a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	440b      	add	r3, r1
 80047bc:	335d      	adds	r3, #93	; 0x5d
 80047be:	2208      	movs	r2, #8
 80047c0:	701a      	strb	r2, [r3, #0]
}
 80047c2:	e125      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	f040 811a 	bne.w	8004a10 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047f6:	f023 0302 	bic.w	r3, r3, #2
 80047fa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	440b      	add	r3, r1
 800480a:	335d      	adds	r3, #93	; 0x5d
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d137      	bne.n	8004882 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	440b      	add	r3, r1
 8004820:	335c      	adds	r3, #92	; 0x5c
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	440b      	add	r3, r1
 8004834:	333f      	adds	r3, #63	; 0x3f
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d00b      	beq.n	8004854 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	333f      	adds	r3, #63	; 0x3f
 800484c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800484e:	2b03      	cmp	r3, #3
 8004850:	f040 80c5 	bne.w	80049de <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	440b      	add	r3, r1
 8004862:	3351      	adds	r3, #81	; 0x51
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	f083 0301 	eor.w	r3, r3, #1
 800486a:	b2d8      	uxtb	r0, r3
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	440b      	add	r3, r1
 800487a:	3351      	adds	r3, #81	; 0x51
 800487c:	4602      	mov	r2, r0
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e0ad      	b.n	80049de <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	440b      	add	r3, r1
 8004890:	335d      	adds	r3, #93	; 0x5d
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d10a      	bne.n	80048ae <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	440b      	add	r3, r1
 80048a6:	335c      	adds	r3, #92	; 0x5c
 80048a8:	2202      	movs	r2, #2
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	e097      	b.n	80049de <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	440b      	add	r3, r1
 80048bc:	335d      	adds	r3, #93	; 0x5d
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d10a      	bne.n	80048da <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	440b      	add	r3, r1
 80048d2:	335c      	adds	r3, #92	; 0x5c
 80048d4:	2202      	movs	r2, #2
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e081      	b.n	80049de <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	440b      	add	r3, r1
 80048e8:	335d      	adds	r3, #93	; 0x5d
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d10a      	bne.n	8004906 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	440b      	add	r3, r1
 80048fe:	335c      	adds	r3, #92	; 0x5c
 8004900:	2205      	movs	r2, #5
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	e06b      	b.n	80049de <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	440b      	add	r3, r1
 8004914:	335d      	adds	r3, #93	; 0x5d
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b06      	cmp	r3, #6
 800491a:	d00a      	beq.n	8004932 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	440b      	add	r3, r1
 800492a:	335d      	adds	r3, #93	; 0x5d
 800492c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800492e:	2b08      	cmp	r3, #8
 8004930:	d155      	bne.n	80049de <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	440b      	add	r3, r1
 8004940:	3358      	adds	r3, #88	; 0x58
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	1c59      	adds	r1, r3, #1
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4403      	add	r3, r0
 8004954:	3358      	adds	r3, #88	; 0x58
 8004956:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	440b      	add	r3, r1
 8004966:	3358      	adds	r3, #88	; 0x58
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b03      	cmp	r3, #3
 800496c:	d914      	bls.n	8004998 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	440b      	add	r3, r1
 800497c:	3358      	adds	r3, #88	; 0x58
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	335c      	adds	r3, #92	; 0x5c
 8004992:	2204      	movs	r2, #4
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e009      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	440b      	add	r3, r1
 80049a6:	335c      	adds	r3, #92	; 0x5c
 80049a8:	2202      	movs	r2, #2
 80049aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	461a      	mov	r2, r3
 80049ec:	2302      	movs	r3, #2
 80049ee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	b2d8      	uxtb	r0, r3
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	440b      	add	r3, r1
 8004a02:	335c      	adds	r3, #92	; 0x5c
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	4601      	mov	r1, r0
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f008 f906 	bl	800cc1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004a10:	bf00      	nop
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	0c5b      	lsrs	r3, r3, #17
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a4c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d003      	beq.n	8004a5c <HCD_RXQLVL_IRQHandler+0x44>
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	f000 8082 	beq.w	8004b5e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004a5a:	e083      	b.n	8004b64 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d07f      	beq.n	8004b62 <HCD_RXQLVL_IRQHandler+0x14a>
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	440b      	add	r3, r1
 8004a70:	3344      	adds	r3, #68	; 0x44
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d074      	beq.n	8004b62 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	440b      	add	r3, r1
 8004a8a:	3344      	adds	r3, #68	; 0x44
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	b292      	uxth	r2, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	f002 fe0b 	bl	80076ae <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3344      	adds	r3, #68	; 0x44
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	18d1      	adds	r1, r2, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4403      	add	r3, r0
 8004abc:	3344      	adds	r3, #68	; 0x44
 8004abe:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	334c      	adds	r3, #76	; 0x4c
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	18d1      	adds	r1, r2, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	4403      	add	r3, r0
 8004ae4:	334c      	adds	r3, #76	; 0x4c
 8004ae6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <HCD_RXQLVL_IRQHandler+0x154>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d031      	beq.n	8004b62 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b14:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b1c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3350      	adds	r3, #80	; 0x50
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	f083 0301 	eor.w	r3, r3, #1
 8004b46:	b2d8      	uxtb	r0, r3
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	440b      	add	r3, r1
 8004b56:	3350      	adds	r3, #80	; 0x50
 8004b58:	4602      	mov	r2, r0
 8004b5a:	701a      	strb	r2, [r3, #0]
      break;
 8004b5c:	e001      	b.n	8004b62 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004b62:	bf00      	nop
  }
}
 8004b64:	bf00      	nop
 8004b66:	3728      	adds	r7, #40	; 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	1ff80000 	.word	0x1ff80000

08004b70 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b9c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d10b      	bne.n	8004bc0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d102      	bne.n	8004bb8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f008 f816 	bl	800cbe4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d132      	bne.n	8004c30 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f043 0308 	orr.w	r3, r3, #8
 8004bd0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d126      	bne.n	8004c2a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d113      	bne.n	8004c0c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004bea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bee:	d106      	bne.n	8004bfe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2102      	movs	r1, #2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f002 fe94 	bl	8007924 <USB_InitFSLSPClkSel>
 8004bfc:	e011      	b.n	8004c22 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2101      	movs	r1, #1
 8004c04:	4618      	mov	r0, r3
 8004c06:	f002 fe8d 	bl	8007924 <USB_InitFSLSPClkSel>
 8004c0a:	e00a      	b.n	8004c22 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d106      	bne.n	8004c22 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004c20:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f008 f80c 	bl	800cc40 <HAL_HCD_PortEnabled_Callback>
 8004c28:	e002      	b.n	8004c30 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f008 f816 	bl	800cc5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d103      	bne.n	8004c42 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f043 0320 	orr.w	r3, r3, #32
 8004c40:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6013      	str	r3, [r2, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e11f      	b.n	8004eaa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc fa72 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	; 0x24
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004caa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cbc:	f001 f860 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 8004cc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4a7b      	ldr	r2, [pc, #492]	; (8004eb4 <HAL_I2C_Init+0x25c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d807      	bhi.n	8004cdc <HAL_I2C_Init+0x84>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a7a      	ldr	r2, [pc, #488]	; (8004eb8 <HAL_I2C_Init+0x260>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	bf94      	ite	ls
 8004cd4:	2301      	movls	r3, #1
 8004cd6:	2300      	movhi	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	e006      	b.n	8004cea <HAL_I2C_Init+0x92>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a77      	ldr	r2, [pc, #476]	; (8004ebc <HAL_I2C_Init+0x264>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bf94      	ite	ls
 8004ce4:	2301      	movls	r3, #1
 8004ce6:	2300      	movhi	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0db      	b.n	8004eaa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a72      	ldr	r2, [pc, #456]	; (8004ec0 <HAL_I2C_Init+0x268>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0c9b      	lsrs	r3, r3, #18
 8004cfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a64      	ldr	r2, [pc, #400]	; (8004eb4 <HAL_I2C_Init+0x25c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d802      	bhi.n	8004d2c <HAL_I2C_Init+0xd4>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	e009      	b.n	8004d40 <HAL_I2C_Init+0xe8>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	4a63      	ldr	r2, [pc, #396]	; (8004ec4 <HAL_I2C_Init+0x26c>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	3301      	adds	r3, #1
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4956      	ldr	r1, [pc, #344]	; (8004eb4 <HAL_I2C_Init+0x25c>)
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	d80d      	bhi.n	8004d7c <HAL_I2C_Init+0x124>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1e59      	subs	r1, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d6e:	3301      	adds	r3, #1
 8004d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	bf38      	it	cc
 8004d78:	2304      	movcc	r3, #4
 8004d7a:	e04f      	b.n	8004e1c <HAL_I2C_Init+0x1c4>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d111      	bne.n	8004da8 <HAL_I2C_Init+0x150>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1e58      	subs	r0, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6859      	ldr	r1, [r3, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	440b      	add	r3, r1
 8004d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d96:	3301      	adds	r3, #1
 8004d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e012      	b.n	8004dce <HAL_I2C_Init+0x176>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1e58      	subs	r0, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	0099      	lsls	r1, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_Init+0x17e>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e022      	b.n	8004e1c <HAL_I2C_Init+0x1c4>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10e      	bne.n	8004dfc <HAL_I2C_Init+0x1a4>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1e58      	subs	r0, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	440b      	add	r3, r1
 8004dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df0:	3301      	adds	r3, #1
 8004df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	e00f      	b.n	8004e1c <HAL_I2C_Init+0x1c4>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1e58      	subs	r0, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6859      	ldr	r1, [r3, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	0099      	lsls	r1, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e12:	3301      	adds	r3, #1
 8004e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	6809      	ldr	r1, [r1, #0]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6911      	ldr	r1, [r2, #16]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68d2      	ldr	r2, [r2, #12]
 8004e56:	4311      	orrs	r1, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	000186a0 	.word	0x000186a0
 8004eb8:	001e847f 	.word	0x001e847f
 8004ebc:	003d08ff 	.word	0x003d08ff
 8004ec0:	431bde83 	.word	0x431bde83
 8004ec4:	10624dd3 	.word	0x10624dd3

08004ec8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d129      	bne.n	8004f32 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2224      	movs	r2, #36	; 0x24
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0210 	bic.w	r2, r2, #16
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e000      	b.n	8004f34 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f32:	2302      	movs	r3, #2
  }
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d12a      	bne.n	8004fb0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2224      	movs	r2, #36	; 0x24
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f7a:	89fb      	ldrh	r3, [r7, #14]
 8004f7c:	f023 030f 	bic.w	r3, r3, #15
 8004f80:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	89fb      	ldrh	r3, [r7, #14]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	89fa      	ldrh	r2, [r7, #14]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0bf      	b.n	8005152 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fc f928 	bl	800123c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005002:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6999      	ldr	r1, [r3, #24]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005018:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6899      	ldr	r1, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b4a      	ldr	r3, [pc, #296]	; (800515c <HAL_LTDC_Init+0x19c>)
 8005034:	400b      	ands	r3, r1
 8005036:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6899      	ldr	r1, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68d9      	ldr	r1, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b3e      	ldr	r3, [pc, #248]	; (800515c <HAL_LTDC_Init+0x19c>)
 8005062:	400b      	ands	r3, r1
 8005064:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68d9      	ldr	r1, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6919      	ldr	r1, [r3, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b33      	ldr	r3, [pc, #204]	; (800515c <HAL_LTDC_Init+0x19c>)
 8005090:	400b      	ands	r3, r1
 8005092:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6919      	ldr	r1, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6959      	ldr	r1, [r3, #20]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b27      	ldr	r3, [pc, #156]	; (800515c <HAL_LTDC_Init+0x19c>)
 80050be:	400b      	ands	r3, r1
 80050c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	041b      	lsls	r3, r3, #16
 80050c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6959      	ldr	r1, [r3, #20]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80050f0:	041b      	lsls	r3, r3, #16
 80050f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005102:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0206 	orr.w	r2, r2, #6
 800512e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	f000f800 	.word	0xf000f800

08005160 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_LTDC_ConfigLayer+0x1a>
 8005176:	2302      	movs	r3, #2
 8005178:	e02c      	b.n	80051d4 <HAL_LTDC_ConfigLayer+0x74>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2134      	movs	r1, #52	; 0x34
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	4413      	add	r3, r2
 8005196:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4614      	mov	r4, r2
 800519e:	461d      	mov	r5, r3
 80051a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f811 	bl	80051dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bdb0      	pop	{r4, r5, r7, pc}

080051dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	; 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	0c1b      	lsrs	r3, r3, #16
 80051f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f8:	4413      	add	r3, r2
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	01db      	lsls	r3, r3, #7
 8005208:	4413      	add	r3, r2
 800520a:	3384      	adds	r3, #132	; 0x84
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	4611      	mov	r1, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	01d2      	lsls	r2, r2, #7
 8005218:	440a      	add	r2, r1
 800521a:	3284      	adds	r2, #132	; 0x84
 800521c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005220:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005232:	4413      	add	r3, r2
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4619      	mov	r1, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	01db      	lsls	r3, r3, #7
 8005240:	440b      	add	r3, r1
 8005242:	3384      	adds	r3, #132	; 0x84
 8005244:	4619      	mov	r1, r3
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525a:	4413      	add	r3, r2
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	01db      	lsls	r3, r3, #7
 800526a:	4413      	add	r3, r2
 800526c:	3384      	adds	r3, #132	; 0x84
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	4611      	mov	r1, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	01d2      	lsls	r2, r2, #7
 800527a:	440a      	add	r2, r1
 800527c:	3284      	adds	r2, #132	; 0x84
 800527e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005282:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005292:	4413      	add	r3, r2
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4619      	mov	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	01db      	lsls	r3, r3, #7
 80052a0:	440b      	add	r3, r1
 80052a2:	3384      	adds	r3, #132	; 0x84
 80052a4:	4619      	mov	r1, r3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	01db      	lsls	r3, r3, #7
 80052b6:	4413      	add	r3, r2
 80052b8:	3384      	adds	r3, #132	; 0x84
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	4611      	mov	r1, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	01d2      	lsls	r2, r2, #7
 80052c6:	440a      	add	r2, r1
 80052c8:	3284      	adds	r2, #132	; 0x84
 80052ca:	f023 0307 	bic.w	r3, r3, #7
 80052ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	01db      	lsls	r3, r3, #7
 80052da:	4413      	add	r3, r2
 80052dc:	3384      	adds	r3, #132	; 0x84
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	061b      	lsls	r3, r3, #24
 8005300:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	01db      	lsls	r3, r3, #7
 800530c:	4413      	add	r3, r2
 800530e:	3384      	adds	r3, #132	; 0x84
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	01db      	lsls	r3, r3, #7
 800531c:	4413      	add	r3, r2
 800531e:	3384      	adds	r3, #132	; 0x84
 8005320:	461a      	mov	r2, r3
 8005322:	2300      	movs	r3, #0
 8005324:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800532c:	461a      	mov	r2, r3
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	431a      	orrs	r2, r3
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4619      	mov	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	01db      	lsls	r3, r3, #7
 8005340:	440b      	add	r3, r1
 8005342:	3384      	adds	r3, #132	; 0x84
 8005344:	4619      	mov	r1, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	01db      	lsls	r3, r3, #7
 8005356:	4413      	add	r3, r2
 8005358:	3384      	adds	r3, #132	; 0x84
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	4611      	mov	r1, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	01d2      	lsls	r2, r2, #7
 8005366:	440a      	add	r2, r1
 8005368:	3284      	adds	r2, #132	; 0x84
 800536a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800536e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	01db      	lsls	r3, r3, #7
 800537a:	4413      	add	r3, r2
 800537c:	3384      	adds	r3, #132	; 0x84
 800537e:	461a      	mov	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	01db      	lsls	r3, r3, #7
 8005390:	4413      	add	r3, r2
 8005392:	3384      	adds	r3, #132	; 0x84
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	4611      	mov	r1, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	01d2      	lsls	r2, r2, #7
 80053a0:	440a      	add	r2, r1
 80053a2:	3284      	adds	r2, #132	; 0x84
 80053a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053a8:	f023 0307 	bic.w	r3, r3, #7
 80053ac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	6809      	ldr	r1, [r1, #0]
 80053ba:	4608      	mov	r0, r1
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	01c9      	lsls	r1, r1, #7
 80053c0:	4401      	add	r1, r0
 80053c2:	3184      	adds	r1, #132	; 0x84
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	01db      	lsls	r3, r3, #7
 80053d2:	4413      	add	r3, r2
 80053d4:	3384      	adds	r3, #132	; 0x84
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	01db      	lsls	r3, r3, #7
 80053e2:	4413      	add	r3, r2
 80053e4:	3384      	adds	r3, #132	; 0x84
 80053e6:	461a      	mov	r2, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	01db      	lsls	r3, r3, #7
 80053f6:	4413      	add	r3, r2
 80053f8:	3384      	adds	r3, #132	; 0x84
 80053fa:	461a      	mov	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800540a:	2304      	movs	r3, #4
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	e01b      	b.n	8005448 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d102      	bne.n	800541e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005418:	2303      	movs	r3, #3
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e014      	b.n	8005448 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d00b      	beq.n	800543e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800542a:	2b02      	cmp	r3, #2
 800542c:	d007      	beq.n	800543e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005432:	2b03      	cmp	r3, #3
 8005434:	d003      	beq.n	800543e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800543a:	2b07      	cmp	r3, #7
 800543c:	d102      	bne.n	8005444 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800543e:	2302      	movs	r3, #2
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	e001      	b.n	8005448 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005444:	2301      	movs	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	01db      	lsls	r3, r3, #7
 8005452:	4413      	add	r3, r2
 8005454:	3384      	adds	r3, #132	; 0x84
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	4611      	mov	r1, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	01d2      	lsls	r2, r2, #7
 8005462:	440a      	add	r2, r1
 8005464:	3284      	adds	r2, #132	; 0x84
 8005466:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800546a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	041a      	lsls	r2, r3, #16
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	1acb      	subs	r3, r1, r3
 8005482:	69f9      	ldr	r1, [r7, #28]
 8005484:	fb01 f303 	mul.w	r3, r1, r3
 8005488:	3303      	adds	r3, #3
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	6809      	ldr	r1, [r1, #0]
 800548e:	4608      	mov	r0, r1
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	01c9      	lsls	r1, r1, #7
 8005494:	4401      	add	r1, r0
 8005496:	3184      	adds	r1, #132	; 0x84
 8005498:	4313      	orrs	r3, r2
 800549a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	4413      	add	r3, r2
 80054a8:	3384      	adds	r3, #132	; 0x84
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	4611      	mov	r1, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	01d2      	lsls	r2, r2, #7
 80054b6:	440a      	add	r2, r1
 80054b8:	3284      	adds	r2, #132	; 0x84
 80054ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054be:	f023 0307 	bic.w	r3, r3, #7
 80054c2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	01db      	lsls	r3, r3, #7
 80054ce:	4413      	add	r3, r2
 80054d0:	3384      	adds	r3, #132	; 0x84
 80054d2:	461a      	mov	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	01db      	lsls	r3, r3, #7
 80054e4:	4413      	add	r3, r2
 80054e6:	3384      	adds	r3, #132	; 0x84
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	6812      	ldr	r2, [r2, #0]
 80054ee:	4611      	mov	r1, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	01d2      	lsls	r2, r2, #7
 80054f4:	440a      	add	r2, r1
 80054f6:	3284      	adds	r2, #132	; 0x84
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
}
 80054fe:	bf00      	nop
 8005500:	3724      	adds	r7, #36	; 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e25b      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d075      	beq.n	8005616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800552a:	4ba3      	ldr	r3, [pc, #652]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	2b04      	cmp	r3, #4
 8005534:	d00c      	beq.n	8005550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005536:	4ba0      	ldr	r3, [pc, #640]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800553e:	2b08      	cmp	r3, #8
 8005540:	d112      	bne.n	8005568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005542:	4b9d      	ldr	r3, [pc, #628]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800554e:	d10b      	bne.n	8005568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005550:	4b99      	ldr	r3, [pc, #612]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d05b      	beq.n	8005614 <HAL_RCC_OscConfig+0x108>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d157      	bne.n	8005614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e236      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005570:	d106      	bne.n	8005580 <HAL_RCC_OscConfig+0x74>
 8005572:	4b91      	ldr	r3, [pc, #580]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a90      	ldr	r2, [pc, #576]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e01d      	b.n	80055bc <HAL_RCC_OscConfig+0xb0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005588:	d10c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x98>
 800558a:	4b8b      	ldr	r3, [pc, #556]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a8a      	ldr	r2, [pc, #552]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	4b88      	ldr	r3, [pc, #544]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a87      	ldr	r2, [pc, #540]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e00b      	b.n	80055bc <HAL_RCC_OscConfig+0xb0>
 80055a4:	4b84      	ldr	r3, [pc, #528]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a83      	ldr	r2, [pc, #524]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 80055aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	4b81      	ldr	r3, [pc, #516]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a80      	ldr	r2, [pc, #512]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 80055b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d013      	beq.n	80055ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c4:	f7fc f9ec 	bl	80019a0 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055cc:	f7fc f9e8 	bl	80019a0 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	; 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e1fb      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	4b76      	ldr	r3, [pc, #472]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0xc0>
 80055ea:	e014      	b.n	8005616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ec:	f7fc f9d8 	bl	80019a0 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f4:	f7fc f9d4 	bl	80019a0 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	; 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e1e7      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005606:	4b6c      	ldr	r3, [pc, #432]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f0      	bne.n	80055f4 <HAL_RCC_OscConfig+0xe8>
 8005612:	e000      	b.n	8005616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d063      	beq.n	80056ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005622:	4b65      	ldr	r3, [pc, #404]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 030c 	and.w	r3, r3, #12
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800562e:	4b62      	ldr	r3, [pc, #392]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005636:	2b08      	cmp	r3, #8
 8005638:	d11c      	bne.n	8005674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800563a:	4b5f      	ldr	r3, [pc, #380]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d116      	bne.n	8005674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005646:	4b5c      	ldr	r3, [pc, #368]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_RCC_OscConfig+0x152>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d001      	beq.n	800565e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e1bb      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565e:	4b56      	ldr	r3, [pc, #344]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4952      	ldr	r1, [pc, #328]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005672:	e03a      	b.n	80056ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d020      	beq.n	80056be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800567c:	4b4f      	ldr	r3, [pc, #316]	; (80057bc <HAL_RCC_OscConfig+0x2b0>)
 800567e:	2201      	movs	r2, #1
 8005680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005682:	f7fc f98d 	bl	80019a0 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800568a:	f7fc f989 	bl	80019a0 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e19c      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569c:	4b46      	ldr	r3, [pc, #280]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a8:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4940      	ldr	r1, [pc, #256]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	600b      	str	r3, [r1, #0]
 80056bc:	e015      	b.n	80056ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056be:	4b3f      	ldr	r3, [pc, #252]	; (80057bc <HAL_RCC_OscConfig+0x2b0>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fc f96c 	bl	80019a0 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056cc:	f7fc f968 	bl	80019a0 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e17b      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056de:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d030      	beq.n	8005758 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056fe:	4b30      	ldr	r3, [pc, #192]	; (80057c0 <HAL_RCC_OscConfig+0x2b4>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc f94c 	bl	80019a0 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800570c:	f7fc f948 	bl	80019a0 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e15b      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800571e:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x200>
 800572a:	e015      	b.n	8005758 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800572c:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <HAL_RCC_OscConfig+0x2b4>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005732:	f7fc f935 	bl	80019a0 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800573a:	f7fc f931 	bl	80019a0 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e144      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800574c:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 800574e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 80a0 	beq.w	80058a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005766:	2300      	movs	r3, #0
 8005768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800576a:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10f      	bne.n	8005796 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	4a0e      	ldr	r2, [pc, #56]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005784:	6413      	str	r3, [r2, #64]	; 0x40
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <HAL_RCC_OscConfig+0x2ac>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578e:	60bb      	str	r3, [r7, #8]
 8005790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <HAL_RCC_OscConfig+0x2b8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d121      	bne.n	80057e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <HAL_RCC_OscConfig+0x2b8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <HAL_RCC_OscConfig+0x2b8>)
 80057a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ae:	f7fc f8f7 	bl	80019a0 <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b4:	e011      	b.n	80057da <HAL_RCC_OscConfig+0x2ce>
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800
 80057bc:	42470000 	.word	0x42470000
 80057c0:	42470e80 	.word	0x42470e80
 80057c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c8:	f7fc f8ea 	bl	80019a0 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e0fd      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057da:	4b81      	ldr	r3, [pc, #516]	; (80059e0 <HAL_RCC_OscConfig+0x4d4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d106      	bne.n	80057fc <HAL_RCC_OscConfig+0x2f0>
 80057ee:	4b7d      	ldr	r3, [pc, #500]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	4a7c      	ldr	r2, [pc, #496]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	6713      	str	r3, [r2, #112]	; 0x70
 80057fa:	e01c      	b.n	8005836 <HAL_RCC_OscConfig+0x32a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b05      	cmp	r3, #5
 8005802:	d10c      	bne.n	800581e <HAL_RCC_OscConfig+0x312>
 8005804:	4b77      	ldr	r3, [pc, #476]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	4a76      	ldr	r2, [pc, #472]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 800580a:	f043 0304 	orr.w	r3, r3, #4
 800580e:	6713      	str	r3, [r2, #112]	; 0x70
 8005810:	4b74      	ldr	r3, [pc, #464]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005814:	4a73      	ldr	r2, [pc, #460]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	6713      	str	r3, [r2, #112]	; 0x70
 800581c:	e00b      	b.n	8005836 <HAL_RCC_OscConfig+0x32a>
 800581e:	4b71      	ldr	r3, [pc, #452]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005822:	4a70      	ldr	r2, [pc, #448]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	6713      	str	r3, [r2, #112]	; 0x70
 800582a:	4b6e      	ldr	r3, [pc, #440]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582e:	4a6d      	ldr	r2, [pc, #436]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d015      	beq.n	800586a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583e:	f7fc f8af 	bl	80019a0 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005844:	e00a      	b.n	800585c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005846:	f7fc f8ab 	bl	80019a0 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	f241 3288 	movw	r2, #5000	; 0x1388
 8005854:	4293      	cmp	r3, r2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e0bc      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585c:	4b61      	ldr	r3, [pc, #388]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 800585e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0ee      	beq.n	8005846 <HAL_RCC_OscConfig+0x33a>
 8005868:	e014      	b.n	8005894 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586a:	f7fc f899 	bl	80019a0 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005870:	e00a      	b.n	8005888 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005872:	f7fc f895 	bl	80019a0 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e0a6      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005888:	4b56      	ldr	r3, [pc, #344]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ee      	bne.n	8005872 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d105      	bne.n	80058a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589a:	4b52      	ldr	r3, [pc, #328]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	4a51      	ldr	r2, [pc, #324]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 80058a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8092 	beq.w	80059d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058b0:	4b4c      	ldr	r3, [pc, #304]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 030c 	and.w	r3, r3, #12
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d05c      	beq.n	8005976 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d141      	bne.n	8005948 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c4:	4b48      	ldr	r3, [pc, #288]	; (80059e8 <HAL_RCC_OscConfig+0x4dc>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ca:	f7fc f869 	bl	80019a0 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d2:	f7fc f865 	bl	80019a0 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e078      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e4:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f0      	bne.n	80058d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	019b      	lsls	r3, r3, #6
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	3b01      	subs	r3, #1
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	061b      	lsls	r3, r3, #24
 8005914:	4933      	ldr	r1, [pc, #204]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 8005916:	4313      	orrs	r3, r2
 8005918:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800591a:	4b33      	ldr	r3, [pc, #204]	; (80059e8 <HAL_RCC_OscConfig+0x4dc>)
 800591c:	2201      	movs	r2, #1
 800591e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005920:	f7fc f83e 	bl	80019a0 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005928:	f7fc f83a 	bl	80019a0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e04d      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593a:	4b2a      	ldr	r3, [pc, #168]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x41c>
 8005946:	e045      	b.n	80059d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <HAL_RCC_OscConfig+0x4dc>)
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594e:	f7fc f827 	bl	80019a0 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005956:	f7fc f823 	bl	80019a0 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e036      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f0      	bne.n	8005956 <HAL_RCC_OscConfig+0x44a>
 8005974:	e02e      	b.n	80059d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e029      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <HAL_RCC_OscConfig+0x4d8>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	429a      	cmp	r2, r3
 8005994:	d11c      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d115      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059aa:	4013      	ands	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d10d      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059be:	429a      	cmp	r2, r3
 80059c0:	d106      	bne.n	80059d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d001      	beq.n	80059d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40007000 	.word	0x40007000
 80059e4:	40023800 	.word	0x40023800
 80059e8:	42470060 	.word	0x42470060

080059ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0cc      	b.n	8005b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a00:	4b68      	ldr	r3, [pc, #416]	; (8005ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d90c      	bls.n	8005a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0e:	4b65      	ldr	r3, [pc, #404]	; (8005ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a16:	4b63      	ldr	r3, [pc, #396]	; (8005ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d001      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0b8      	b.n	8005b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d020      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a40:	4b59      	ldr	r3, [pc, #356]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4a58      	ldr	r2, [pc, #352]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a58:	4b53      	ldr	r3, [pc, #332]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4a52      	ldr	r2, [pc, #328]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a64:	4b50      	ldr	r3, [pc, #320]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	494d      	ldr	r1, [pc, #308]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d044      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d107      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8a:	4b47      	ldr	r3, [pc, #284]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d119      	bne.n	8005aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e07f      	b.n	8005b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d003      	beq.n	8005aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d107      	bne.n	8005aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aaa:	4b3f      	ldr	r3, [pc, #252]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e06f      	b.n	8005b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aba:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e067      	b.n	8005b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aca:	4b37      	ldr	r3, [pc, #220]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f023 0203 	bic.w	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	4934      	ldr	r1, [pc, #208]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005adc:	f7fb ff60 	bl	80019a0 <HAL_GetTick>
 8005ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae2:	e00a      	b.n	8005afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae4:	f7fb ff5c 	bl	80019a0 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e04f      	b.n	8005b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afa:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 020c 	and.w	r2, r3, #12
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d1eb      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b0c:	4b25      	ldr	r3, [pc, #148]	; (8005ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d20c      	bcs.n	8005b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1a:	4b22      	ldr	r3, [pc, #136]	; (8005ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	4b20      	ldr	r3, [pc, #128]	; (8005ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e032      	b.n	8005b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b40:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4916      	ldr	r1, [pc, #88]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	490e      	ldr	r1, [pc, #56]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b72:	f000 f821 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 8005b76:	4601      	mov	r1, r0
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <HAL_RCC_ClockConfig+0x1c0>)
 8005b84:	5cd3      	ldrb	r3, [r2, r3]
 8005b86:	fa21 f303 	lsr.w	r3, r1, r3
 8005b8a:	4a09      	ldr	r2, [pc, #36]	; (8005bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fb fdae 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023c00 	.word	0x40023c00
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	0800d308 	.word	0x0800d308
 8005bb0:	20000000 	.word	0x20000000
 8005bb4:	20000004 	.word	0x20000004

08005bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bce:	4b63      	ldr	r3, [pc, #396]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d007      	beq.n	8005bea <HAL_RCC_GetSysClockFreq+0x32>
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d008      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x38>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f040 80b4 	bne.w	8005d4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005be4:	4b5e      	ldr	r3, [pc, #376]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005be6:	60bb      	str	r3, [r7, #8]
       break;
 8005be8:	e0b3      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bea:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005bec:	60bb      	str	r3, [r7, #8]
      break;
 8005bee:	e0b0      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bf0:	4b5a      	ldr	r3, [pc, #360]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bfa:	4b58      	ldr	r3, [pc, #352]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d04a      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c06:	4b55      	ldr	r3, [pc, #340]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	099b      	lsrs	r3, r3, #6
 8005c0c:	f04f 0400 	mov.w	r4, #0
 8005c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	ea03 0501 	and.w	r5, r3, r1
 8005c1c:	ea04 0602 	and.w	r6, r4, r2
 8005c20:	4629      	mov	r1, r5
 8005c22:	4632      	mov	r2, r6
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	f04f 0400 	mov.w	r4, #0
 8005c2c:	0154      	lsls	r4, r2, #5
 8005c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c32:	014b      	lsls	r3, r1, #5
 8005c34:	4619      	mov	r1, r3
 8005c36:	4622      	mov	r2, r4
 8005c38:	1b49      	subs	r1, r1, r5
 8005c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	f04f 0400 	mov.w	r4, #0
 8005c46:	0194      	lsls	r4, r2, #6
 8005c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c4c:	018b      	lsls	r3, r1, #6
 8005c4e:	1a5b      	subs	r3, r3, r1
 8005c50:	eb64 0402 	sbc.w	r4, r4, r2
 8005c54:	f04f 0100 	mov.w	r1, #0
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	00e2      	lsls	r2, r4, #3
 8005c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c62:	00d9      	lsls	r1, r3, #3
 8005c64:	460b      	mov	r3, r1
 8005c66:	4614      	mov	r4, r2
 8005c68:	195b      	adds	r3, r3, r5
 8005c6a:	eb44 0406 	adc.w	r4, r4, r6
 8005c6e:	f04f 0100 	mov.w	r1, #0
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	0262      	lsls	r2, r4, #9
 8005c78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005c7c:	0259      	lsls	r1, r3, #9
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4614      	mov	r4, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	4621      	mov	r1, r4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f04f 0400 	mov.w	r4, #0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4623      	mov	r3, r4
 8005c90:	f7fa faae 	bl	80001f0 <__aeabi_uldivmod>
 8005c94:	4603      	mov	r3, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e049      	b.n	8005d30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9c:	4b2f      	ldr	r3, [pc, #188]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	099b      	lsrs	r3, r3, #6
 8005ca2:	f04f 0400 	mov.w	r4, #0
 8005ca6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	ea03 0501 	and.w	r5, r3, r1
 8005cb2:	ea04 0602 	and.w	r6, r4, r2
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4632      	mov	r2, r6
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	f04f 0400 	mov.w	r4, #0
 8005cc2:	0154      	lsls	r4, r2, #5
 8005cc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005cc8:	014b      	lsls	r3, r1, #5
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4622      	mov	r2, r4
 8005cce:	1b49      	subs	r1, r1, r5
 8005cd0:	eb62 0206 	sbc.w	r2, r2, r6
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	f04f 0400 	mov.w	r4, #0
 8005cdc:	0194      	lsls	r4, r2, #6
 8005cde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ce2:	018b      	lsls	r3, r1, #6
 8005ce4:	1a5b      	subs	r3, r3, r1
 8005ce6:	eb64 0402 	sbc.w	r4, r4, r2
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	00e2      	lsls	r2, r4, #3
 8005cf4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005cf8:	00d9      	lsls	r1, r3, #3
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	195b      	adds	r3, r3, r5
 8005d00:	eb44 0406 	adc.w	r4, r4, r6
 8005d04:	f04f 0100 	mov.w	r1, #0
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	02a2      	lsls	r2, r4, #10
 8005d0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005d12:	0299      	lsls	r1, r3, #10
 8005d14:	460b      	mov	r3, r1
 8005d16:	4614      	mov	r4, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f04f 0400 	mov.w	r4, #0
 8005d22:	461a      	mov	r2, r3
 8005d24:	4623      	mov	r3, r4
 8005d26:	f7fa fa63 	bl	80001f0 <__aeabi_uldivmod>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	0c1b      	lsrs	r3, r3, #16
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d48:	60bb      	str	r3, [r7, #8]
      break;
 8005d4a:	e002      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d4c:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d4e:	60bb      	str	r3, [r7, #8]
      break;
 8005d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d52:	68bb      	ldr	r3, [r7, #8]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	00f42400 	.word	0x00f42400
 8005d64:	007a1200 	.word	0x007a1200

08005d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d6c:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	20000000 	.word	0x20000000

08005d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d84:	f7ff fff0 	bl	8005d68 <HAL_RCC_GetHCLKFreq>
 8005d88:	4601      	mov	r1, r0
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	0a9b      	lsrs	r3, r3, #10
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	4a03      	ldr	r2, [pc, #12]	; (8005da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d96:	5cd3      	ldrb	r3, [r2, r3]
 8005d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40023800 	.word	0x40023800
 8005da4:	0800d318 	.word	0x0800d318

08005da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dac:	f7ff ffdc 	bl	8005d68 <HAL_RCC_GetHCLKFreq>
 8005db0:	4601      	mov	r1, r0
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	0b5b      	lsrs	r3, r3, #13
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	4a03      	ldr	r2, [pc, #12]	; (8005dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dbe:	5cd3      	ldrb	r3, [r2, r3]
 8005dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	0800d318 	.word	0x0800d318

08005dd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	220f      	movs	r2, #15
 8005dde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005de0:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <HAL_RCC_GetClockConfig+0x5c>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 0203 	and.w	r2, r3, #3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005dec:	4b0f      	ldr	r3, [pc, #60]	; (8005e2c <HAL_RCC_GetClockConfig+0x5c>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <HAL_RCC_GetClockConfig+0x5c>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e04:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <HAL_RCC_GetClockConfig+0x5c>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	08db      	lsrs	r3, r3, #3
 8005e0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <HAL_RCC_GetClockConfig+0x60>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 020f 	and.w	r2, r3, #15
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	601a      	str	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	40023c00 	.word	0x40023c00

08005e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d075      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e68:	4bad      	ldr	r3, [pc, #692]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e6e:	f7fb fd97 	bl	80019a0 <HAL_GetTick>
 8005e72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e74:	e008      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e76:	f7fb fd93 	bl	80019a0 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e18b      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e88:	4ba6      	ldr	r3, [pc, #664]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	019a      	lsls	r2, r3, #6
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	071b      	lsls	r3, r3, #28
 8005eac:	499d      	ldr	r1, [pc, #628]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01f      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ec0:	4b98      	ldr	r3, [pc, #608]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec6:	0f1b      	lsrs	r3, r3, #28
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	019a      	lsls	r2, r3, #6
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	061b      	lsls	r3, r3, #24
 8005eda:	431a      	orrs	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	071b      	lsls	r3, r3, #28
 8005ee0:	4990      	ldr	r1, [pc, #576]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ee8:	4b8e      	ldr	r3, [pc, #568]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eee:	f023 021f 	bic.w	r2, r3, #31
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	498a      	ldr	r1, [pc, #552]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00d      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	019a      	lsls	r2, r3, #6
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	061b      	lsls	r3, r3, #24
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	071b      	lsls	r3, r3, #28
 8005f20:	4980      	ldr	r1, [pc, #512]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f28:	4b7d      	ldr	r3, [pc, #500]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f2e:	f7fb fd37 	bl	80019a0 <HAL_GetTick>
 8005f32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f34:	e008      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f36:	f7fb fd33 	bl	80019a0 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e12b      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f48:	4b76      	ldr	r3, [pc, #472]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0f0      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d079      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f6c:	4b6e      	ldr	r3, [pc, #440]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f72:	f7fb fd15 	bl	80019a0 <HAL_GetTick>
 8005f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f78:	e008      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f7a:	f7fb fd11 	bl	80019a0 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e109      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f8c:	4b65      	ldr	r3, [pc, #404]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f98:	d0ef      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d020      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fa6:	4b5f      	ldr	r3, [pc, #380]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fac:	0f1b      	lsrs	r3, r3, #28
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	019a      	lsls	r2, r3, #6
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	061b      	lsls	r3, r3, #24
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	071b      	lsls	r3, r3, #28
 8005fc6:	4957      	ldr	r1, [pc, #348]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fce:	4b55      	ldr	r3, [pc, #340]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	4950      	ldr	r1, [pc, #320]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01e      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ff4:	4b4b      	ldr	r3, [pc, #300]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	0e1b      	lsrs	r3, r3, #24
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	019a      	lsls	r2, r3, #6
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	061b      	lsls	r3, r3, #24
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	071b      	lsls	r3, r3, #28
 8006014:	4943      	ldr	r1, [pc, #268]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800601c:	4b41      	ldr	r3, [pc, #260]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800601e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006022:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	493e      	ldr	r1, [pc, #248]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006032:	4b3d      	ldr	r3, [pc, #244]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006038:	f7fb fcb2 	bl	80019a0 <HAL_GetTick>
 800603c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006040:	f7fb fcae 	bl	80019a0 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e0a6      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006052:	4b34      	ldr	r3, [pc, #208]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800605a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605e:	d1ef      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 808d 	beq.w	8006188 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	4a2b      	ldr	r2, [pc, #172]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800607c:	6413      	str	r3, [r2, #64]	; 0x40
 800607e:	4b29      	ldr	r3, [pc, #164]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800608a:	4b28      	ldr	r3, [pc, #160]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a27      	ldr	r2, [pc, #156]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006094:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006096:	f7fb fc83 	bl	80019a0 <HAL_GetTick>
 800609a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800609c:	e008      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800609e:	f7fb fc7f 	bl	80019a0 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e077      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060b0:	4b1e      	ldr	r3, [pc, #120]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060bc:	4b19      	ldr	r3, [pc, #100]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d039      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d032      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060da:	4b12      	ldr	r3, [pc, #72]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80060f0:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060f6:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d11e      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006102:	f7fb fc4d 	bl	80019a0 <HAL_GetTick>
 8006106:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006108:	e014      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800610a:	f7fb fc49 	bl	80019a0 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f241 3288 	movw	r2, #5000	; 0x1388
 8006118:	4293      	cmp	r3, r2
 800611a:	d90b      	bls.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e03f      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006120:	42470068 	.word	0x42470068
 8006124:	40023800 	.word	0x40023800
 8006128:	42470070 	.word	0x42470070
 800612c:	40007000 	.word	0x40007000
 8006130:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006134:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0e4      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614c:	d10d      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800614e:	4b16      	ldr	r3, [pc, #88]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800615e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006162:	4911      	ldr	r1, [pc, #68]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006164:	4313      	orrs	r3, r2
 8006166:	608b      	str	r3, [r1, #8]
 8006168:	e005      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	4a0e      	ldr	r2, [pc, #56]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006170:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006174:	6093      	str	r3, [r2, #8]
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006178:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006182:	4909      	ldr	r1, [pc, #36]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006184:	4313      	orrs	r3, r2
 8006186:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800619a:	4b04      	ldr	r3, [pc, #16]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800619c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40023800 	.word	0x40023800
 80061ac:	424711e0 	.word	0x424711e0

080061b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e025      	b.n	8006210 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d106      	bne.n	80061de <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fb fa81 	bl	80016e0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2202      	movs	r2, #2
 80061e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f001 f83f 	bl	8007274 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	461a      	mov	r2, r3
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	f001 f8aa 	bl	800735a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e056      	b.n	80062d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d106      	bne.n	800624a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7fb f907 	bl	8001458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2202      	movs	r2, #2
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006260:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	ea42 0103 	orr.w	r1, r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	f003 0104 	and.w	r1, r3, #4
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69da      	ldr	r2, [r3, #28]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e01d      	b.n	800632e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fb f8ee 	bl	80014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3304      	adds	r3, #4
 800631c:	4619      	mov	r1, r3
 800631e:	4610      	mov	r0, r2
 8006320:	f000 fa14 	bl	800674c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0201 	orr.w	r2, r2, #1
 800634c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b06      	cmp	r3, #6
 800635e:	d007      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b02      	cmp	r3, #2
 8006392:	d122      	bne.n	80063da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d11b      	bne.n	80063da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f06f 0202 	mvn.w	r2, #2
 80063aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f9a5 	bl	8006710 <HAL_TIM_IC_CaptureCallback>
 80063c6:	e005      	b.n	80063d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f997 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f9a8 	bl	8006724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d122      	bne.n	800642e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d11b      	bne.n	800642e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f06f 0204 	mvn.w	r2, #4
 80063fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f97b 	bl	8006710 <HAL_TIM_IC_CaptureCallback>
 800641a:	e005      	b.n	8006428 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f96d 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f97e 	bl	8006724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b08      	cmp	r3, #8
 800643a:	d122      	bne.n	8006482 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b08      	cmp	r3, #8
 8006448:	d11b      	bne.n	8006482 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f06f 0208 	mvn.w	r2, #8
 8006452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2204      	movs	r2, #4
 8006458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f951 	bl	8006710 <HAL_TIM_IC_CaptureCallback>
 800646e:	e005      	b.n	800647c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f943 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f954 	bl	8006724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b10      	cmp	r3, #16
 800648e:	d122      	bne.n	80064d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f003 0310 	and.w	r3, r3, #16
 800649a:	2b10      	cmp	r3, #16
 800649c:	d11b      	bne.n	80064d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f06f 0210 	mvn.w	r2, #16
 80064a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2208      	movs	r2, #8
 80064ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f927 	bl	8006710 <HAL_TIM_IC_CaptureCallback>
 80064c2:	e005      	b.n	80064d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f919 	bl	80066fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f92a 	bl	8006724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d10e      	bne.n	8006502 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d107      	bne.n	8006502 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f06f 0201 	mvn.w	r2, #1
 80064fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fa fcd7 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d10e      	bne.n	800652e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651a:	2b80      	cmp	r3, #128	; 0x80
 800651c:	d107      	bne.n	800652e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 facf 	bl	8006acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d10e      	bne.n	800655a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d107      	bne.n	800655a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8ef 	bl	8006738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b20      	cmp	r3, #32
 8006566:	d10e      	bne.n	8006586 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b20      	cmp	r3, #32
 8006574:	d107      	bne.n	8006586 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f06f 0220 	mvn.w	r2, #32
 800657e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fa99 	bl	8006ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_TIM_ConfigClockSource+0x18>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0a6      	b.n	80066f4 <HAL_TIM_ConfigClockSource+0x166>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065cc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d067      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0x120>
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d80b      	bhi.n	80065fa <HAL_TIM_ConfigClockSource+0x6c>
 80065e2:	2b10      	cmp	r3, #16
 80065e4:	d073      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x140>
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d802      	bhi.n	80065f0 <HAL_TIM_ConfigClockSource+0x62>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d06f      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80065ee:	e078      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d06c      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x140>
 80065f4:	2b30      	cmp	r3, #48	; 0x30
 80065f6:	d06a      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x140>
      break;
 80065f8:	e073      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80065fa:	2b70      	cmp	r3, #112	; 0x70
 80065fc:	d00d      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x8c>
 80065fe:	2b70      	cmp	r3, #112	; 0x70
 8006600:	d804      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x7e>
 8006602:	2b50      	cmp	r3, #80	; 0x50
 8006604:	d033      	beq.n	800666e <HAL_TIM_ConfigClockSource+0xe0>
 8006606:	2b60      	cmp	r3, #96	; 0x60
 8006608:	d041      	beq.n	800668e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800660a:	e06a      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800660c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006610:	d066      	beq.n	80066e0 <HAL_TIM_ConfigClockSource+0x152>
 8006612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006616:	d017      	beq.n	8006648 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006618:	e063      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6899      	ldr	r1, [r3, #8]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f000 f9a9 	bl	8006980 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800663c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	609a      	str	r2, [r3, #8]
      break;
 8006646:	e04c      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	6899      	ldr	r1, [r3, #8]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f000 f992 	bl	8006980 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800666a:	609a      	str	r2, [r3, #8]
      break;
 800666c:	e039      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	6859      	ldr	r1, [r3, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	461a      	mov	r2, r3
 800667c:	f000 f906 	bl	800688c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2150      	movs	r1, #80	; 0x50
 8006686:	4618      	mov	r0, r3
 8006688:	f000 f95f 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 800668c:	e029      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6859      	ldr	r1, [r3, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	461a      	mov	r2, r3
 800669c:	f000 f925 	bl	80068ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2160      	movs	r1, #96	; 0x60
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f94f 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 80066ac:	e019      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f000 f8e6 	bl	800688c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2140      	movs	r1, #64	; 0x40
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f93f 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 80066cc:	e009      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f000 f936 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 80066de:	e000      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80066e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a40      	ldr	r2, [pc, #256]	; (8006860 <TIM_Base_SetConfig+0x114>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d013      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676a:	d00f      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a3d      	ldr	r2, [pc, #244]	; (8006864 <TIM_Base_SetConfig+0x118>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00b      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a3c      	ldr	r2, [pc, #240]	; (8006868 <TIM_Base_SetConfig+0x11c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d007      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a3b      	ldr	r2, [pc, #236]	; (800686c <TIM_Base_SetConfig+0x120>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a3a      	ldr	r2, [pc, #232]	; (8006870 <TIM_Base_SetConfig+0x124>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d108      	bne.n	800679e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2f      	ldr	r2, [pc, #188]	; (8006860 <TIM_Base_SetConfig+0x114>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d02b      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d027      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2c      	ldr	r2, [pc, #176]	; (8006864 <TIM_Base_SetConfig+0x118>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d023      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a2b      	ldr	r2, [pc, #172]	; (8006868 <TIM_Base_SetConfig+0x11c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01f      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a2a      	ldr	r2, [pc, #168]	; (800686c <TIM_Base_SetConfig+0x120>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01b      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a29      	ldr	r2, [pc, #164]	; (8006870 <TIM_Base_SetConfig+0x124>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d017      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a28      	ldr	r2, [pc, #160]	; (8006874 <TIM_Base_SetConfig+0x128>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d013      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a27      	ldr	r2, [pc, #156]	; (8006878 <TIM_Base_SetConfig+0x12c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00f      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a26      	ldr	r2, [pc, #152]	; (800687c <TIM_Base_SetConfig+0x130>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00b      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a25      	ldr	r2, [pc, #148]	; (8006880 <TIM_Base_SetConfig+0x134>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a24      	ldr	r2, [pc, #144]	; (8006884 <TIM_Base_SetConfig+0x138>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a23      	ldr	r2, [pc, #140]	; (8006888 <TIM_Base_SetConfig+0x13c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d108      	bne.n	8006810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <TIM_Base_SetConfig+0x114>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_Base_SetConfig+0xf8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a0c      	ldr	r2, [pc, #48]	; (8006870 <TIM_Base_SetConfig+0x124>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d103      	bne.n	800684c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	615a      	str	r2, [r3, #20]
}
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40010000 	.word	0x40010000
 8006864:	40000400 	.word	0x40000400
 8006868:	40000800 	.word	0x40000800
 800686c:	40000c00 	.word	0x40000c00
 8006870:	40010400 	.word	0x40010400
 8006874:	40014000 	.word	0x40014000
 8006878:	40014400 	.word	0x40014400
 800687c:	40014800 	.word	0x40014800
 8006880:	40001800 	.word	0x40001800
 8006884:	40001c00 	.word	0x40001c00
 8006888:	40002000 	.word	0x40002000

0800688c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f023 0201 	bic.w	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f023 030a 	bic.w	r3, r3, #10
 80068c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b087      	sub	sp, #28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0210 	bic.w	r2, r3, #16
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	031b      	lsls	r3, r3, #12
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	f043 0307 	orr.w	r3, r3, #7
 800696c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800699a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e05a      	b.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a24:	d01d      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1d      	ldr	r2, [pc, #116]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d018      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1b      	ldr	r2, [pc, #108]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1a      	ldr	r2, [pc, #104]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00e      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a18      	ldr	r2, [pc, #96]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d009      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a17      	ldr	r2, [pc, #92]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d10c      	bne.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	40000400 	.word	0x40000400
 8006aa4:	40000800 	.word	0x40000800
 8006aa8:	40000c00 	.word	0x40000c00
 8006aac:	40010400 	.word	0x40010400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40001800 	.word	0x40001800

08006ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e03f      	b.n	8006b72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fa fd10 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2224      	movs	r2, #36	; 0x24
 8006b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f829 	bl	8006b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695a      	ldr	r2, [r3, #20]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bbe:	f023 030c 	bic.w	r3, r3, #12
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	68f9      	ldr	r1, [r7, #12]
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bea:	f040 818b 	bne.w	8006f04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4ac1      	ldr	r2, [pc, #772]	; (8006ef8 <UART_SetConfig+0x37c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d005      	beq.n	8006c04 <UART_SetConfig+0x88>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4abf      	ldr	r2, [pc, #764]	; (8006efc <UART_SetConfig+0x380>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	f040 80bd 	bne.w	8006d7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c04:	f7ff f8d0 	bl	8005da8 <HAL_RCC_GetPCLK2Freq>
 8006c08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	461d      	mov	r5, r3
 8006c0e:	f04f 0600 	mov.w	r6, #0
 8006c12:	46a8      	mov	r8, r5
 8006c14:	46b1      	mov	r9, r6
 8006c16:	eb18 0308 	adds.w	r3, r8, r8
 8006c1a:	eb49 0409 	adc.w	r4, r9, r9
 8006c1e:	4698      	mov	r8, r3
 8006c20:	46a1      	mov	r9, r4
 8006c22:	eb18 0805 	adds.w	r8, r8, r5
 8006c26:	eb49 0906 	adc.w	r9, r9, r6
 8006c2a:	f04f 0100 	mov.w	r1, #0
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c3e:	4688      	mov	r8, r1
 8006c40:	4691      	mov	r9, r2
 8006c42:	eb18 0005 	adds.w	r0, r8, r5
 8006c46:	eb49 0106 	adc.w	r1, r9, r6
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	461d      	mov	r5, r3
 8006c50:	f04f 0600 	mov.w	r6, #0
 8006c54:	196b      	adds	r3, r5, r5
 8006c56:	eb46 0406 	adc.w	r4, r6, r6
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	f7f9 fac7 	bl	80001f0 <__aeabi_uldivmod>
 8006c62:	4603      	mov	r3, r0
 8006c64:	460c      	mov	r4, r1
 8006c66:	461a      	mov	r2, r3
 8006c68:	4ba5      	ldr	r3, [pc, #660]	; (8006f00 <UART_SetConfig+0x384>)
 8006c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	461d      	mov	r5, r3
 8006c78:	f04f 0600 	mov.w	r6, #0
 8006c7c:	46a9      	mov	r9, r5
 8006c7e:	46b2      	mov	sl, r6
 8006c80:	eb19 0309 	adds.w	r3, r9, r9
 8006c84:	eb4a 040a 	adc.w	r4, sl, sl
 8006c88:	4699      	mov	r9, r3
 8006c8a:	46a2      	mov	sl, r4
 8006c8c:	eb19 0905 	adds.w	r9, r9, r5
 8006c90:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c94:	f04f 0100 	mov.w	r1, #0
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ca4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ca8:	4689      	mov	r9, r1
 8006caa:	4692      	mov	sl, r2
 8006cac:	eb19 0005 	adds.w	r0, r9, r5
 8006cb0:	eb4a 0106 	adc.w	r1, sl, r6
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	461d      	mov	r5, r3
 8006cba:	f04f 0600 	mov.w	r6, #0
 8006cbe:	196b      	adds	r3, r5, r5
 8006cc0:	eb46 0406 	adc.w	r4, r6, r6
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4623      	mov	r3, r4
 8006cc8:	f7f9 fa92 	bl	80001f0 <__aeabi_uldivmod>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4b8b      	ldr	r3, [pc, #556]	; (8006f00 <UART_SetConfig+0x384>)
 8006cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	2164      	movs	r1, #100	; 0x64
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	3332      	adds	r3, #50	; 0x32
 8006ce6:	4a86      	ldr	r2, [pc, #536]	; (8006f00 <UART_SetConfig+0x384>)
 8006ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cf4:	4498      	add	r8, r3
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	461d      	mov	r5, r3
 8006cfa:	f04f 0600 	mov.w	r6, #0
 8006cfe:	46a9      	mov	r9, r5
 8006d00:	46b2      	mov	sl, r6
 8006d02:	eb19 0309 	adds.w	r3, r9, r9
 8006d06:	eb4a 040a 	adc.w	r4, sl, sl
 8006d0a:	4699      	mov	r9, r3
 8006d0c:	46a2      	mov	sl, r4
 8006d0e:	eb19 0905 	adds.w	r9, r9, r5
 8006d12:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d16:	f04f 0100 	mov.w	r1, #0
 8006d1a:	f04f 0200 	mov.w	r2, #0
 8006d1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d2a:	4689      	mov	r9, r1
 8006d2c:	4692      	mov	sl, r2
 8006d2e:	eb19 0005 	adds.w	r0, r9, r5
 8006d32:	eb4a 0106 	adc.w	r1, sl, r6
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	461d      	mov	r5, r3
 8006d3c:	f04f 0600 	mov.w	r6, #0
 8006d40:	196b      	adds	r3, r5, r5
 8006d42:	eb46 0406 	adc.w	r4, r6, r6
 8006d46:	461a      	mov	r2, r3
 8006d48:	4623      	mov	r3, r4
 8006d4a:	f7f9 fa51 	bl	80001f0 <__aeabi_uldivmod>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	461a      	mov	r2, r3
 8006d54:	4b6a      	ldr	r3, [pc, #424]	; (8006f00 <UART_SetConfig+0x384>)
 8006d56:	fba3 1302 	umull	r1, r3, r3, r2
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	2164      	movs	r1, #100	; 0x64
 8006d5e:	fb01 f303 	mul.w	r3, r1, r3
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	3332      	adds	r3, #50	; 0x32
 8006d68:	4a65      	ldr	r2, [pc, #404]	; (8006f00 <UART_SetConfig+0x384>)
 8006d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	f003 0207 	and.w	r2, r3, #7
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4442      	add	r2, r8
 8006d7a:	609a      	str	r2, [r3, #8]
 8006d7c:	e26f      	b.n	800725e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d7e:	f7fe ffff 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 8006d82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	461d      	mov	r5, r3
 8006d88:	f04f 0600 	mov.w	r6, #0
 8006d8c:	46a8      	mov	r8, r5
 8006d8e:	46b1      	mov	r9, r6
 8006d90:	eb18 0308 	adds.w	r3, r8, r8
 8006d94:	eb49 0409 	adc.w	r4, r9, r9
 8006d98:	4698      	mov	r8, r3
 8006d9a:	46a1      	mov	r9, r4
 8006d9c:	eb18 0805 	adds.w	r8, r8, r5
 8006da0:	eb49 0906 	adc.w	r9, r9, r6
 8006da4:	f04f 0100 	mov.w	r1, #0
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006db0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006db4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006db8:	4688      	mov	r8, r1
 8006dba:	4691      	mov	r9, r2
 8006dbc:	eb18 0005 	adds.w	r0, r8, r5
 8006dc0:	eb49 0106 	adc.w	r1, r9, r6
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	461d      	mov	r5, r3
 8006dca:	f04f 0600 	mov.w	r6, #0
 8006dce:	196b      	adds	r3, r5, r5
 8006dd0:	eb46 0406 	adc.w	r4, r6, r6
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	4623      	mov	r3, r4
 8006dd8:	f7f9 fa0a 	bl	80001f0 <__aeabi_uldivmod>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b47      	ldr	r3, [pc, #284]	; (8006f00 <UART_SetConfig+0x384>)
 8006de4:	fba3 2302 	umull	r2, r3, r3, r2
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	461d      	mov	r5, r3
 8006df2:	f04f 0600 	mov.w	r6, #0
 8006df6:	46a9      	mov	r9, r5
 8006df8:	46b2      	mov	sl, r6
 8006dfa:	eb19 0309 	adds.w	r3, r9, r9
 8006dfe:	eb4a 040a 	adc.w	r4, sl, sl
 8006e02:	4699      	mov	r9, r3
 8006e04:	46a2      	mov	sl, r4
 8006e06:	eb19 0905 	adds.w	r9, r9, r5
 8006e0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e0e:	f04f 0100 	mov.w	r1, #0
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e22:	4689      	mov	r9, r1
 8006e24:	4692      	mov	sl, r2
 8006e26:	eb19 0005 	adds.w	r0, r9, r5
 8006e2a:	eb4a 0106 	adc.w	r1, sl, r6
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	461d      	mov	r5, r3
 8006e34:	f04f 0600 	mov.w	r6, #0
 8006e38:	196b      	adds	r3, r5, r5
 8006e3a:	eb46 0406 	adc.w	r4, r6, r6
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4623      	mov	r3, r4
 8006e42:	f7f9 f9d5 	bl	80001f0 <__aeabi_uldivmod>
 8006e46:	4603      	mov	r3, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4b2c      	ldr	r3, [pc, #176]	; (8006f00 <UART_SetConfig+0x384>)
 8006e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	2164      	movs	r1, #100	; 0x64
 8006e56:	fb01 f303 	mul.w	r3, r1, r3
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	3332      	adds	r3, #50	; 0x32
 8006e60:	4a27      	ldr	r2, [pc, #156]	; (8006f00 <UART_SetConfig+0x384>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e6e:	4498      	add	r8, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	461d      	mov	r5, r3
 8006e74:	f04f 0600 	mov.w	r6, #0
 8006e78:	46a9      	mov	r9, r5
 8006e7a:	46b2      	mov	sl, r6
 8006e7c:	eb19 0309 	adds.w	r3, r9, r9
 8006e80:	eb4a 040a 	adc.w	r4, sl, sl
 8006e84:	4699      	mov	r9, r3
 8006e86:	46a2      	mov	sl, r4
 8006e88:	eb19 0905 	adds.w	r9, r9, r5
 8006e8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e90:	f04f 0100 	mov.w	r1, #0
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ea0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ea4:	4689      	mov	r9, r1
 8006ea6:	4692      	mov	sl, r2
 8006ea8:	eb19 0005 	adds.w	r0, r9, r5
 8006eac:	eb4a 0106 	adc.w	r1, sl, r6
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	461d      	mov	r5, r3
 8006eb6:	f04f 0600 	mov.w	r6, #0
 8006eba:	196b      	adds	r3, r5, r5
 8006ebc:	eb46 0406 	adc.w	r4, r6, r6
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	f7f9 f994 	bl	80001f0 <__aeabi_uldivmod>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <UART_SetConfig+0x384>)
 8006ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	2164      	movs	r1, #100	; 0x64
 8006ed8:	fb01 f303 	mul.w	r3, r1, r3
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	3332      	adds	r3, #50	; 0x32
 8006ee2:	4a07      	ldr	r2, [pc, #28]	; (8006f00 <UART_SetConfig+0x384>)
 8006ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	f003 0207 	and.w	r2, r3, #7
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4442      	add	r2, r8
 8006ef4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006ef6:	e1b2      	b.n	800725e <UART_SetConfig+0x6e2>
 8006ef8:	40011000 	.word	0x40011000
 8006efc:	40011400 	.word	0x40011400
 8006f00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4ad7      	ldr	r2, [pc, #860]	; (8007268 <UART_SetConfig+0x6ec>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d005      	beq.n	8006f1a <UART_SetConfig+0x39e>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4ad6      	ldr	r2, [pc, #856]	; (800726c <UART_SetConfig+0x6f0>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	f040 80d1 	bne.w	80070bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f1a:	f7fe ff45 	bl	8005da8 <HAL_RCC_GetPCLK2Freq>
 8006f1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	469a      	mov	sl, r3
 8006f24:	f04f 0b00 	mov.w	fp, #0
 8006f28:	46d0      	mov	r8, sl
 8006f2a:	46d9      	mov	r9, fp
 8006f2c:	eb18 0308 	adds.w	r3, r8, r8
 8006f30:	eb49 0409 	adc.w	r4, r9, r9
 8006f34:	4698      	mov	r8, r3
 8006f36:	46a1      	mov	r9, r4
 8006f38:	eb18 080a 	adds.w	r8, r8, sl
 8006f3c:	eb49 090b 	adc.w	r9, r9, fp
 8006f40:	f04f 0100 	mov.w	r1, #0
 8006f44:	f04f 0200 	mov.w	r2, #0
 8006f48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f54:	4688      	mov	r8, r1
 8006f56:	4691      	mov	r9, r2
 8006f58:	eb1a 0508 	adds.w	r5, sl, r8
 8006f5c:	eb4b 0609 	adc.w	r6, fp, r9
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	4619      	mov	r1, r3
 8006f66:	f04f 0200 	mov.w	r2, #0
 8006f6a:	f04f 0300 	mov.w	r3, #0
 8006f6e:	f04f 0400 	mov.w	r4, #0
 8006f72:	0094      	lsls	r4, r2, #2
 8006f74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f78:	008b      	lsls	r3, r1, #2
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	4623      	mov	r3, r4
 8006f7e:	4628      	mov	r0, r5
 8006f80:	4631      	mov	r1, r6
 8006f82:	f7f9 f935 	bl	80001f0 <__aeabi_uldivmod>
 8006f86:	4603      	mov	r3, r0
 8006f88:	460c      	mov	r4, r1
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	4bb8      	ldr	r3, [pc, #736]	; (8007270 <UART_SetConfig+0x6f4>)
 8006f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	469b      	mov	fp, r3
 8006f9c:	f04f 0c00 	mov.w	ip, #0
 8006fa0:	46d9      	mov	r9, fp
 8006fa2:	46e2      	mov	sl, ip
 8006fa4:	eb19 0309 	adds.w	r3, r9, r9
 8006fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8006fac:	4699      	mov	r9, r3
 8006fae:	46a2      	mov	sl, r4
 8006fb0:	eb19 090b 	adds.w	r9, r9, fp
 8006fb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fcc:	4689      	mov	r9, r1
 8006fce:	4692      	mov	sl, r2
 8006fd0:	eb1b 0509 	adds.w	r5, fp, r9
 8006fd4:	eb4c 060a 	adc.w	r6, ip, sl
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	f04f 0300 	mov.w	r3, #0
 8006fe6:	f04f 0400 	mov.w	r4, #0
 8006fea:	0094      	lsls	r4, r2, #2
 8006fec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ff0:	008b      	lsls	r3, r1, #2
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4623      	mov	r3, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	f7f9 f8f9 	bl	80001f0 <__aeabi_uldivmod>
 8006ffe:	4603      	mov	r3, r0
 8007000:	460c      	mov	r4, r1
 8007002:	461a      	mov	r2, r3
 8007004:	4b9a      	ldr	r3, [pc, #616]	; (8007270 <UART_SetConfig+0x6f4>)
 8007006:	fba3 1302 	umull	r1, r3, r3, r2
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	2164      	movs	r1, #100	; 0x64
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	3332      	adds	r3, #50	; 0x32
 8007018:	4a95      	ldr	r2, [pc, #596]	; (8007270 <UART_SetConfig+0x6f4>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007024:	4498      	add	r8, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	469b      	mov	fp, r3
 800702a:	f04f 0c00 	mov.w	ip, #0
 800702e:	46d9      	mov	r9, fp
 8007030:	46e2      	mov	sl, ip
 8007032:	eb19 0309 	adds.w	r3, r9, r9
 8007036:	eb4a 040a 	adc.w	r4, sl, sl
 800703a:	4699      	mov	r9, r3
 800703c:	46a2      	mov	sl, r4
 800703e:	eb19 090b 	adds.w	r9, r9, fp
 8007042:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007046:	f04f 0100 	mov.w	r1, #0
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007052:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007056:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800705a:	4689      	mov	r9, r1
 800705c:	4692      	mov	sl, r2
 800705e:	eb1b 0509 	adds.w	r5, fp, r9
 8007062:	eb4c 060a 	adc.w	r6, ip, sl
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	4619      	mov	r1, r3
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	f04f 0400 	mov.w	r4, #0
 8007078:	0094      	lsls	r4, r2, #2
 800707a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800707e:	008b      	lsls	r3, r1, #2
 8007080:	461a      	mov	r2, r3
 8007082:	4623      	mov	r3, r4
 8007084:	4628      	mov	r0, r5
 8007086:	4631      	mov	r1, r6
 8007088:	f7f9 f8b2 	bl	80001f0 <__aeabi_uldivmod>
 800708c:	4603      	mov	r3, r0
 800708e:	460c      	mov	r4, r1
 8007090:	461a      	mov	r2, r3
 8007092:	4b77      	ldr	r3, [pc, #476]	; (8007270 <UART_SetConfig+0x6f4>)
 8007094:	fba3 1302 	umull	r1, r3, r3, r2
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	2164      	movs	r1, #100	; 0x64
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	3332      	adds	r3, #50	; 0x32
 80070a6:	4a72      	ldr	r2, [pc, #456]	; (8007270 <UART_SetConfig+0x6f4>)
 80070a8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	f003 020f 	and.w	r2, r3, #15
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4442      	add	r2, r8
 80070b8:	609a      	str	r2, [r3, #8]
 80070ba:	e0d0      	b.n	800725e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80070bc:	f7fe fe60 	bl	8005d80 <HAL_RCC_GetPCLK1Freq>
 80070c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	469a      	mov	sl, r3
 80070c6:	f04f 0b00 	mov.w	fp, #0
 80070ca:	46d0      	mov	r8, sl
 80070cc:	46d9      	mov	r9, fp
 80070ce:	eb18 0308 	adds.w	r3, r8, r8
 80070d2:	eb49 0409 	adc.w	r4, r9, r9
 80070d6:	4698      	mov	r8, r3
 80070d8:	46a1      	mov	r9, r4
 80070da:	eb18 080a 	adds.w	r8, r8, sl
 80070de:	eb49 090b 	adc.w	r9, r9, fp
 80070e2:	f04f 0100 	mov.w	r1, #0
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070f6:	4688      	mov	r8, r1
 80070f8:	4691      	mov	r9, r2
 80070fa:	eb1a 0508 	adds.w	r5, sl, r8
 80070fe:	eb4b 0609 	adc.w	r6, fp, r9
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	4619      	mov	r1, r3
 8007108:	f04f 0200 	mov.w	r2, #0
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	f04f 0400 	mov.w	r4, #0
 8007114:	0094      	lsls	r4, r2, #2
 8007116:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800711a:	008b      	lsls	r3, r1, #2
 800711c:	461a      	mov	r2, r3
 800711e:	4623      	mov	r3, r4
 8007120:	4628      	mov	r0, r5
 8007122:	4631      	mov	r1, r6
 8007124:	f7f9 f864 	bl	80001f0 <__aeabi_uldivmod>
 8007128:	4603      	mov	r3, r0
 800712a:	460c      	mov	r4, r1
 800712c:	461a      	mov	r2, r3
 800712e:	4b50      	ldr	r3, [pc, #320]	; (8007270 <UART_SetConfig+0x6f4>)
 8007130:	fba3 2302 	umull	r2, r3, r3, r2
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	469b      	mov	fp, r3
 800713e:	f04f 0c00 	mov.w	ip, #0
 8007142:	46d9      	mov	r9, fp
 8007144:	46e2      	mov	sl, ip
 8007146:	eb19 0309 	adds.w	r3, r9, r9
 800714a:	eb4a 040a 	adc.w	r4, sl, sl
 800714e:	4699      	mov	r9, r3
 8007150:	46a2      	mov	sl, r4
 8007152:	eb19 090b 	adds.w	r9, r9, fp
 8007156:	eb4a 0a0c 	adc.w	sl, sl, ip
 800715a:	f04f 0100 	mov.w	r1, #0
 800715e:	f04f 0200 	mov.w	r2, #0
 8007162:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007166:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800716a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800716e:	4689      	mov	r9, r1
 8007170:	4692      	mov	sl, r2
 8007172:	eb1b 0509 	adds.w	r5, fp, r9
 8007176:	eb4c 060a 	adc.w	r6, ip, sl
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4619      	mov	r1, r3
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	f04f 0300 	mov.w	r3, #0
 8007188:	f04f 0400 	mov.w	r4, #0
 800718c:	0094      	lsls	r4, r2, #2
 800718e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007192:	008b      	lsls	r3, r1, #2
 8007194:	461a      	mov	r2, r3
 8007196:	4623      	mov	r3, r4
 8007198:	4628      	mov	r0, r5
 800719a:	4631      	mov	r1, r6
 800719c:	f7f9 f828 	bl	80001f0 <__aeabi_uldivmod>
 80071a0:	4603      	mov	r3, r0
 80071a2:	460c      	mov	r4, r1
 80071a4:	461a      	mov	r2, r3
 80071a6:	4b32      	ldr	r3, [pc, #200]	; (8007270 <UART_SetConfig+0x6f4>)
 80071a8:	fba3 1302 	umull	r1, r3, r3, r2
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	2164      	movs	r1, #100	; 0x64
 80071b0:	fb01 f303 	mul.w	r3, r1, r3
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	3332      	adds	r3, #50	; 0x32
 80071ba:	4a2d      	ldr	r2, [pc, #180]	; (8007270 <UART_SetConfig+0x6f4>)
 80071bc:	fba2 2303 	umull	r2, r3, r2, r3
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071c6:	4498      	add	r8, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	469b      	mov	fp, r3
 80071cc:	f04f 0c00 	mov.w	ip, #0
 80071d0:	46d9      	mov	r9, fp
 80071d2:	46e2      	mov	sl, ip
 80071d4:	eb19 0309 	adds.w	r3, r9, r9
 80071d8:	eb4a 040a 	adc.w	r4, sl, sl
 80071dc:	4699      	mov	r9, r3
 80071de:	46a2      	mov	sl, r4
 80071e0:	eb19 090b 	adds.w	r9, r9, fp
 80071e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071e8:	f04f 0100 	mov.w	r1, #0
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071fc:	4689      	mov	r9, r1
 80071fe:	4692      	mov	sl, r2
 8007200:	eb1b 0509 	adds.w	r5, fp, r9
 8007204:	eb4c 060a 	adc.w	r6, ip, sl
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	4619      	mov	r1, r3
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	f04f 0400 	mov.w	r4, #0
 800721a:	0094      	lsls	r4, r2, #2
 800721c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007220:	008b      	lsls	r3, r1, #2
 8007222:	461a      	mov	r2, r3
 8007224:	4623      	mov	r3, r4
 8007226:	4628      	mov	r0, r5
 8007228:	4631      	mov	r1, r6
 800722a:	f7f8 ffe1 	bl	80001f0 <__aeabi_uldivmod>
 800722e:	4603      	mov	r3, r0
 8007230:	460c      	mov	r4, r1
 8007232:	461a      	mov	r2, r3
 8007234:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <UART_SetConfig+0x6f4>)
 8007236:	fba3 1302 	umull	r1, r3, r3, r2
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	2164      	movs	r1, #100	; 0x64
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	3332      	adds	r3, #50	; 0x32
 8007248:	4a09      	ldr	r2, [pc, #36]	; (8007270 <UART_SetConfig+0x6f4>)
 800724a:	fba2 2303 	umull	r2, r3, r2, r3
 800724e:	095b      	lsrs	r3, r3, #5
 8007250:	f003 020f 	and.w	r2, r3, #15
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4442      	add	r2, r8
 800725a:	609a      	str	r2, [r3, #8]
}
 800725c:	e7ff      	b.n	800725e <UART_SetConfig+0x6e2>
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007268:	40011000 	.word	0x40011000
 800726c:	40011400 	.word	0x40011400
 8007270:	51eb851f 	.word	0x51eb851f

08007274 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d029      	beq.n	80072e2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800729a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800729e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072a8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80072ae:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80072b4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80072ba:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80072c0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80072c6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80072cc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80072d2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	e034      	b.n	800734c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072ee:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80072f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80072fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007312:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007316:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007320:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007326:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800732c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007332:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007338:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4313      	orrs	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800735a:	b480      	push	{r7}
 800735c:	b087      	sub	sp, #28
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d02e      	beq.n	80073d2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007380:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	3b01      	subs	r3, #1
 800738e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007390:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	3b01      	subs	r3, #1
 8007398:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800739a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80073a4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073ae:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80073b8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	3b01      	subs	r3, #1
 80073c0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80073c2:	4313      	orrs	r3, r2
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	e03b      	b.n	800744a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073e2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073f4:	4313      	orrs	r3, r2
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007408:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	3b01      	subs	r3, #1
 8007416:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007418:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	3b01      	subs	r3, #1
 8007420:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007422:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	3b01      	subs	r3, #1
 800742a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800742c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	3b01      	subs	r3, #1
 8007434:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007436:	4313      	orrs	r3, r2
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007458:	b084      	sub	sp, #16
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	f107 001c 	add.w	r0, r7, #28
 8007466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	2b01      	cmp	r3, #1
 800746e:	d122      	bne.n	80074b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800749a:	2b01      	cmp	r3, #1
 800749c:	d105      	bne.n	80074aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f94a 	bl	8007744 <USB_CoreReset>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]
 80074b4:	e01a      	b.n	80074ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f93e 	bl	8007744 <USB_CoreReset>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	639a      	str	r2, [r3, #56]	; 0x38
 80074de:	e005      	b.n	80074ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d10b      	bne.n	800750a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f043 0206 	orr.w	r2, r3, #6
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f043 0220 	orr.w	r2, r3, #32
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007516:	b004      	add	sp, #16
 8007518:	4770      	bx	lr

0800751a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f043 0201 	orr.w	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f023 0201 	bic.w	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d106      	bne.n	800758a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	60da      	str	r2, [r3, #12]
 8007588:	e00b      	b.n	80075a2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	60da      	str	r2, [r3, #12]
 800759c:	e001      	b.n	80075a2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e003      	b.n	80075aa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80075a2:	2032      	movs	r0, #50	; 0x32
 80075a4:	f7fa fa08 	bl	80019b8 <HAL_Delay>

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	019b      	lsls	r3, r3, #6
 80075c6:	f043 0220 	orr.w	r2, r3, #32
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4a09      	ldr	r2, [pc, #36]	; (80075fc <USB_FlushTxFifo+0x48>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d901      	bls.n	80075e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e006      	b.n	80075ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d0f0      	beq.n	80075ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	00030d40 	.word	0x00030d40

08007600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2210      	movs	r2, #16
 8007610:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a09      	ldr	r2, [pc, #36]	; (8007640 <USB_FlushRxFifo+0x40>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d901      	bls.n	8007624 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e006      	b.n	8007632 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b10      	cmp	r3, #16
 800762e:	d0f0      	beq.n	8007612 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	00030d40 	.word	0x00030d40

08007644 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007644:	b480      	push	{r7}
 8007646:	b089      	sub	sp, #36	; 0x24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4611      	mov	r1, r2
 8007650:	461a      	mov	r2, r3
 8007652:	460b      	mov	r3, r1
 8007654:	71fb      	strb	r3, [r7, #7]
 8007656:	4613      	mov	r3, r2
 8007658:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	d11a      	bne.n	80076a0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800766a:	88bb      	ldrh	r3, [r7, #4]
 800766c:	3303      	adds	r3, #3
 800766e:	089b      	lsrs	r3, r3, #2
 8007670:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007672:	2300      	movs	r3, #0
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	e00f      	b.n	8007698 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	031a      	lsls	r2, r3, #12
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	4413      	add	r3, r2
 8007680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007684:	461a      	mov	r2, r3
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	3304      	adds	r3, #4
 8007690:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	3301      	adds	r3, #1
 8007696:	61bb      	str	r3, [r7, #24]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	429a      	cmp	r2, r3
 800769e:	d3eb      	bcc.n	8007678 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3724      	adds	r7, #36	; 0x24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b089      	sub	sp, #36	; 0x24
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	4613      	mov	r3, r2
 80076ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	3303      	adds	r3, #3
 80076c8:	089b      	lsrs	r3, r3, #2
 80076ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80076cc:	2300      	movs	r3, #0
 80076ce:	61bb      	str	r3, [r7, #24]
 80076d0:	e00b      	b.n	80076ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	3304      	adds	r3, #4
 80076e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	3301      	adds	r3, #1
 80076e8:	61bb      	str	r3, [r7, #24]
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d3ef      	bcc.n	80076d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80076f2:	69fb      	ldr	r3, [r7, #28]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3724      	adds	r7, #36	; 0x24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4013      	ands	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007718:	68fb      	ldr	r3, [r7, #12]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f003 0301 	and.w	r3, r3, #1
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3301      	adds	r3, #1
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4a13      	ldr	r2, [pc, #76]	; (80077a8 <USB_CoreReset+0x64>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d901      	bls.n	8007762 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e01b      	b.n	800779a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	daf2      	bge.n	8007750 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f043 0201 	orr.w	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a09      	ldr	r2, [pc, #36]	; (80077a8 <USB_CoreReset+0x64>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d901      	bls.n	800778c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e006      	b.n	800779a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b01      	cmp	r3, #1
 8007796:	d0f0      	beq.n	800777a <USB_CoreReset+0x36>

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	00030d40 	.word	0x00030d40

080077ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077ac:	b084      	sub	sp, #16
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	f107 001c 	add.w	r0, r7, #28
 80077ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077c8:	461a      	mov	r2, r3
 80077ca:	2300      	movs	r3, #0
 80077cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d018      	beq.n	8007830 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10a      	bne.n	800781a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007812:	f043 0304 	orr.w	r3, r3, #4
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	e014      	b.n	8007844 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007828:	f023 0304 	bic.w	r3, r3, #4
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	e009      	b.n	8007844 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800783e:	f023 0304 	bic.w	r3, r3, #4
 8007842:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007844:	2110      	movs	r1, #16
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff feb4 	bl	80075b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff fed7 	bl	8007600 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e015      	b.n	8007884 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4413      	add	r3, r2
 8007860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007864:	461a      	mov	r2, r3
 8007866:	f04f 33ff 	mov.w	r3, #4294967295
 800786a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4413      	add	r3, r2
 8007874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007878:	461a      	mov	r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	429a      	cmp	r2, r3
 800788a:	d3e5      	bcc.n	8007858 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800788c:	2101      	movs	r1, #1
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f8ac 	bl	80079ec <USB_DriveVbus>

  HAL_Delay(200U);
 8007894:	20c8      	movs	r0, #200	; 0xc8
 8007896:	f7fa f88f 	bl	80019b8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295
 80078a6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a14      	ldr	r2, [pc, #80]	; (8007910 <USB_HostInit+0x164>)
 80078c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a13      	ldr	r2, [pc, #76]	; (8007914 <USB_HostInit+0x168>)
 80078c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80078ca:	e009      	b.n	80078e0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2280      	movs	r2, #128	; 0x80
 80078d0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a10      	ldr	r2, [pc, #64]	; (8007918 <USB_HostInit+0x16c>)
 80078d6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a10      	ldr	r2, [pc, #64]	; (800791c <USB_HostInit+0x170>)
 80078dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d105      	bne.n	80078f2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	f043 0210 	orr.w	r2, r3, #16
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699a      	ldr	r2, [r3, #24]
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <USB_HostInit+0x174>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800790a:	b004      	add	sp, #16
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	01000200 	.word	0x01000200
 8007914:	00e00300 	.word	0x00e00300
 8007918:	00600080 	.word	0x00600080
 800791c:	004000e0 	.word	0x004000e0
 8007920:	a3200008 	.word	0xa3200008

08007924 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007942:	f023 0303 	bic.w	r3, r3, #3
 8007946:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	68f9      	ldr	r1, [r7, #12]
 8007958:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800795c:	4313      	orrs	r3, r2
 800795e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d107      	bne.n	8007976 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800796c:	461a      	mov	r2, r3
 800796e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007972:	6053      	str	r3, [r2, #4]
 8007974:	e009      	b.n	800798a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d106      	bne.n	800798a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007982:	461a      	mov	r2, r3
 8007984:	f241 7370 	movw	r3, #6000	; 0x1770
 8007988:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80079b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80079c8:	2064      	movs	r0, #100	; 0x64
 80079ca:	f7f9 fff5 	bl	80019b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079da:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80079dc:	200a      	movs	r0, #10
 80079de:	f7f9 ffeb 	bl	80019b8 <HAL_Delay>

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007a10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <USB_DriveVbus+0x44>
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d106      	bne.n	8007a30 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a2e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3a:	d109      	bne.n	8007a50 <USB_DriveVbus+0x64>
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a4e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	0c5b      	lsrs	r3, r3, #17
 8007a7c:	f003 0303 	and.w	r3, r3, #3
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	b29b      	uxth	r3, r3
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	4608      	mov	r0, r1
 8007aba:	4611      	mov	r1, r2
 8007abc:	461a      	mov	r2, r3
 8007abe:	4603      	mov	r3, r0
 8007ac0:	70fb      	strb	r3, [r7, #3]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	70bb      	strb	r3, [r7, #2]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007ae6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d87e      	bhi.n	8007bec <USB_HC_Init+0x13c>
 8007aee:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <USB_HC_Init+0x44>)
 8007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af4:	08007b05 	.word	0x08007b05
 8007af8:	08007baf 	.word	0x08007baf
 8007afc:	08007b05 	.word	0x08007b05
 8007b00:	08007b71 	.word	0x08007b71
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b10:	461a      	mov	r2, r3
 8007b12:	f240 439d 	movw	r3, #1181	; 0x49d
 8007b16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007b18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	da10      	bge.n	8007b42 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	78fa      	ldrb	r2, [r7, #3]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b3e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007b40:	e057      	b.n	8007bf2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d051      	beq.n	8007bf2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	78fa      	ldrb	r2, [r7, #3]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b6c:	60d3      	str	r3, [r2, #12]
      break;
 8007b6e:	e040      	b.n	8007bf2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007b82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	da34      	bge.n	8007bf6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	78fa      	ldrb	r2, [r7, #3]
 8007b9c:	0151      	lsls	r1, r2, #5
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	440a      	add	r2, r1
 8007ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007baa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007bac:	e023      	b.n	8007bf6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f240 2325 	movw	r3, #549	; 0x225
 8007bc0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007bc2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	da17      	bge.n	8007bfa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	78fa      	ldrb	r2, [r7, #3]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007be4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007be8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007bea:	e006      	b.n	8007bfa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf0:	e004      	b.n	8007bfc <USB_HC_Init+0x14c>
      break;
 8007bf2:	bf00      	nop
 8007bf4:	e002      	b.n	8007bfc <USB_HC_Init+0x14c>
      break;
 8007bf6:	bf00      	nop
 8007bf8:	e000      	b.n	8007bfc <USB_HC_Init+0x14c>
      break;
 8007bfa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c02:	699a      	ldr	r2, [r3, #24]
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c16:	4313      	orrs	r3, r2
 8007c18:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007c26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da03      	bge.n	8007c36 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	e001      	b.n	8007c3a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007c3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d103      	bne.n	8007c4a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	e001      	b.n	8007c4e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c4e:	787b      	ldrb	r3, [r7, #1]
 8007c50:	059b      	lsls	r3, r3, #22
 8007c52:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c56:	78bb      	ldrb	r3, [r7, #2]
 8007c58:	02db      	lsls	r3, r3, #11
 8007c5a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c5e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c64:	049b      	lsls	r3, r3, #18
 8007c66:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c6a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	0159      	lsls	r1, r3, #5
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	440b      	add	r3, r1
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c84:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c8a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007c8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d10f      	bne.n	8007cb4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cb2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop

08007cc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08c      	sub	sp, #48	; 0x30
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ce0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d028      	beq.n	8007d40 <USB_HC_StartXfer+0x7c>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	791b      	ldrb	r3, [r3, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d124      	bne.n	8007d40 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10b      	bne.n	8007d14 <USB_HC_StartXfer+0x50>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	795b      	ldrb	r3, [r3, #5]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d107      	bne.n	8007d14 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fa30 	bl	8008170 <USB_DoPing>
      return HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e114      	b.n	8007f3e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d112      	bne.n	8007d40 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	6a3a      	ldr	r2, [r7, #32]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d34:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007d38:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d018      	beq.n	8007d7a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	8912      	ldrh	r2, [r2, #8]
 8007d50:	4413      	add	r3, r2
 8007d52:	3b01      	subs	r3, #1
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	8912      	ldrh	r2, [r2, #8]
 8007d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d5c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007d5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007d60:	8b7b      	ldrh	r3, [r7, #26]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d90b      	bls.n	8007d7e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007d66:	8b7b      	ldrh	r3, [r7, #26]
 8007d68:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007d6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	8912      	ldrh	r2, [r2, #8]
 8007d70:	fb02 f203 	mul.w	r2, r2, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	611a      	str	r2, [r3, #16]
 8007d78:	e001      	b.n	8007d7e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	78db      	ldrb	r3, [r3, #3]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d006      	beq.n	8007d94 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007d86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	8912      	ldrh	r2, [r2, #8]
 8007d8c:	fb02 f203 	mul.w	r2, r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d9e:	04d9      	lsls	r1, r3, #19
 8007da0:	4b69      	ldr	r3, [pc, #420]	; (8007f48 <USB_HC_StartXfer+0x284>)
 8007da2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007da4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	7a9b      	ldrb	r3, [r3, #10]
 8007daa:	075b      	lsls	r3, r3, #29
 8007dac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007db0:	69f9      	ldr	r1, [r7, #28]
 8007db2:	0148      	lsls	r0, r1, #5
 8007db4:	6a39      	ldr	r1, [r7, #32]
 8007db6:	4401      	add	r1, r0
 8007db8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007dbc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007dbe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d009      	beq.n	8007dda <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	68d9      	ldr	r1, [r3, #12]
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd6:	460a      	mov	r2, r1
 8007dd8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bf0c      	ite	eq
 8007dea:	2301      	moveq	r3, #1
 8007dec:	2300      	movne	r3, #0
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	0151      	lsls	r1, r2, #5
 8007e04:	6a3a      	ldr	r2, [r7, #32]
 8007e06:	440a      	add	r2, r1
 8007e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	7e7b      	ldrb	r3, [r7, #25]
 8007e22:	075b      	lsls	r3, r3, #29
 8007e24:	69f9      	ldr	r1, [r7, #28]
 8007e26:	0148      	lsls	r0, r1, #5
 8007e28:	6a39      	ldr	r1, [r7, #32]
 8007e2a:	4401      	add	r1, r0
 8007e2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007e30:	4313      	orrs	r3, r2
 8007e32:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a42      	ldr	r2, [pc, #264]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e44:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e46:	4b41      	ldr	r3, [pc, #260]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e4e:	4a3f      	ldr	r2, [pc, #252]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e50:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	78db      	ldrb	r3, [r3, #3]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d006      	beq.n	8007e68 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007e5a:	4b3c      	ldr	r3, [pc, #240]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e62:	4a3a      	ldr	r2, [pc, #232]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	e005      	b.n	8007e74 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007e68:	4b38      	ldr	r3, [pc, #224]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e70:	4a36      	ldr	r2, [pc, #216]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e72:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e74:	4b35      	ldr	r3, [pc, #212]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e7c:	4a33      	ldr	r2, [pc, #204]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e7e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4b2f      	ldr	r3, [pc, #188]	; (8007f4c <USB_HC_StartXfer+0x288>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e04f      	b.n	8007f3e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	78db      	ldrb	r3, [r3, #3]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d14a      	bne.n	8007f3c <USB_HC_StartXfer+0x278>
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d046      	beq.n	8007f3c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	79db      	ldrb	r3, [r3, #7]
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d830      	bhi.n	8007f18 <USB_HC_StartXfer+0x254>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <USB_HC_StartXfer+0x1f8>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007ecd 	.word	0x08007ecd
 8007ec0:	08007ef1 	.word	0x08007ef1
 8007ec4:	08007ecd 	.word	0x08007ecd
 8007ec8:	08007ef1 	.word	0x08007ef1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	3303      	adds	r3, #3
 8007ed2:	089b      	lsrs	r3, r3, #2
 8007ed4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007ed6:	8afa      	ldrh	r2, [r7, #22]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d91c      	bls.n	8007f1c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	f043 0220 	orr.w	r2, r3, #32
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	619a      	str	r2, [r3, #24]
        }
        break;
 8007eee:	e015      	b.n	8007f1c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	3303      	adds	r3, #3
 8007ef6:	089b      	lsrs	r3, r3, #2
 8007ef8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007efa:	8afa      	ldrh	r2, [r7, #22]
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d90a      	bls.n	8007f20 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	619a      	str	r2, [r3, #24]
        }
        break;
 8007f16:	e003      	b.n	8007f20 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007f18:	bf00      	nop
 8007f1a:	e002      	b.n	8007f22 <USB_HC_StartXfer+0x25e>
        break;
 8007f1c:	bf00      	nop
 8007f1e:	e000      	b.n	8007f22 <USB_HC_StartXfer+0x25e>
        break;
 8007f20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	68d9      	ldr	r1, [r3, #12]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	785a      	ldrb	r2, [r3, #1]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	b298      	uxth	r0, r3
 8007f30:	2300      	movs	r3, #0
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	4603      	mov	r3, r0
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7ff fb84 	bl	8007644 <USB_WritePacket>
  }

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3728      	adds	r7, #40	; 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	1ff80000 	.word	0x1ff80000
 8007f4c:	20000310 	.word	0x20000310

08007f50 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	b29b      	uxth	r3, r3
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b087      	sub	sp, #28
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f82:	78fb      	ldrb	r3, [r7, #3]
 8007f84:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	0c9b      	lsrs	r3, r3, #18
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <USB_HC_Halt+0x3a>
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d16c      	bne.n	8008086 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	0151      	lsls	r1, r2, #5
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	440a      	add	r2, r1
 8007fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fca:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d143      	bne.n	8008060 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ff2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ff6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	440a      	add	r2, r1
 800800e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008012:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008016:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	440a      	add	r2, r1
 800802e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008032:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008036:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	3301      	adds	r3, #1
 800803c:	617b      	str	r3, [r7, #20]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008044:	d81d      	bhi.n	8008082 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	4413      	add	r3, r2
 800804e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800805c:	d0ec      	beq.n	8008038 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800805e:	e080      	b.n	8008162 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	4413      	add	r3, r2
 8008068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	0151      	lsls	r1, r2, #5
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	440a      	add	r2, r1
 8008076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800807a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800807e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008080:	e06f      	b.n	8008162 <USB_HC_Halt+0x1f0>
          break;
 8008082:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008084:	e06d      	b.n	8008162 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4413      	add	r3, r2
 800808e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	0151      	lsls	r1, r2, #5
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	440a      	add	r2, r1
 800809c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d143      	bne.n	800813e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	0151      	lsls	r1, r2, #5
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	440a      	add	r2, r1
 80080cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	0151      	lsls	r1, r2, #5
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	440a      	add	r2, r1
 800810c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008110:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008114:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	3301      	adds	r3, #1
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008122:	d81d      	bhi.n	8008160 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	4413      	add	r3, r2
 800812c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800813a:	d0ec      	beq.n	8008116 <USB_HC_Halt+0x1a4>
 800813c:	e011      	b.n	8008162 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	4413      	add	r3, r2
 8008146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	440a      	add	r2, r1
 8008154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	e000      	b.n	8008162 <USB_HC_Halt+0x1f0>
          break;
 8008160:	bf00      	nop
    }
  }

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008184:	2301      	movs	r3, #1
 8008186:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	04da      	lsls	r2, r3, #19
 800818c:	4b15      	ldr	r3, [pc, #84]	; (80081e4 <USB_DoPing+0x74>)
 800818e:	4013      	ands	r3, r2
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	440a      	add	r2, r1
 8008198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800819c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ce:	461a      	mov	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	1ff80000 	.word	0x1ff80000

080081e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff f99f 	bl	800753c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80081fe:	2110      	movs	r1, #16
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff f9d7 	bl	80075b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff f9fa 	bl	8007600 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800820c:	2300      	movs	r3, #0
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	e01f      	b.n	8008252 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4413      	add	r3, r2
 800821a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008228:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008230:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008238:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008246:	461a      	mov	r2, r3
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	3301      	adds	r3, #1
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b0f      	cmp	r3, #15
 8008256:	d9dc      	bls.n	8008212 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008258:	2300      	movs	r3, #0
 800825a:	613b      	str	r3, [r7, #16]
 800825c:	e034      	b.n	80082c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008274:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800827c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008284:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008292:	461a      	mov	r2, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	3301      	adds	r3, #1
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082a4:	d80c      	bhi.n	80082c0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082bc:	d0ec      	beq.n	8008298 <USB_StopHost+0xb0>
 80082be:	e000      	b.n	80082c2 <USB_StopHost+0xda>
        break;
 80082c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	3301      	adds	r3, #1
 80082c6:	613b      	str	r3, [r7, #16]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2b0f      	cmp	r3, #15
 80082cc:	d9c7      	bls.n	800825e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082d4:	461a      	mov	r2, r3
 80082d6:	f04f 33ff 	mov.w	r3, #4294967295
 80082da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f04f 32ff 	mov.w	r2, #4294967295
 80082e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff f918 	bl	800751a <USB_EnableGlobalInt>

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80082f4:	b590      	push	{r4, r7, lr}
 80082f6:	b089      	sub	sp, #36	; 0x24
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80082fc:	2301      	movs	r3, #1
 80082fe:	2202      	movs	r2, #2
 8008300:	2102      	movs	r1, #2
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fcba 	bl	8008c7c <USBH_FindInterface>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	2bff      	cmp	r3, #255	; 0xff
 8008310:	d002      	beq.n	8008318 <USBH_CDC_InterfaceInit+0x24>
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d901      	bls.n	800831c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008318:	2302      	movs	r3, #2
 800831a:	e13d      	b.n	8008598 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fc8f 	bl	8008c44 <USBH_SelectInterface>
 8008326:	4603      	mov	r3, r0
 8008328:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008330:	2302      	movs	r3, #2
 8008332:	e131      	b.n	8008598 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800833a:	2050      	movs	r0, #80	; 0x50
 800833c:	f004 fec4 	bl	800d0c8 <malloc>
 8008340:	4603      	mov	r3, r0
 8008342:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008354:	2302      	movs	r3, #2
 8008356:	e11f      	b.n	8008598 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008358:	2250      	movs	r2, #80	; 0x50
 800835a:	2100      	movs	r1, #0
 800835c:	68b8      	ldr	r0, [r7, #8]
 800835e:	f004 fece 	bl	800d0fe <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	211a      	movs	r1, #26
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	4413      	add	r3, r2
 800836e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	b25b      	sxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	da15      	bge.n	80083a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	211a      	movs	r1, #26
 8008380:	fb01 f303 	mul.w	r3, r1, r3
 8008384:	4413      	add	r3, r2
 8008386:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	211a      	movs	r1, #26
 8008396:	fb01 f303 	mul.w	r3, r1, r3
 800839a:	4413      	add	r3, r2
 800839c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80083a0:	881a      	ldrh	r2, [r3, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	785b      	ldrb	r3, [r3, #1]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f002 f894 	bl	800a4da <USBH_AllocPipe>
 80083b2:	4603      	mov	r3, r0
 80083b4:	461a      	mov	r2, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	7819      	ldrb	r1, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	7858      	ldrb	r0, [r3, #1]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	8952      	ldrh	r2, [r2, #10]
 80083d2:	9202      	str	r2, [sp, #8]
 80083d4:	2203      	movs	r2, #3
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4623      	mov	r3, r4
 80083dc:	4602      	mov	r2, r0
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f002 f84c 	bl	800a47c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2200      	movs	r2, #0
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f004 fdbb 	bl	800cf68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80083f2:	2300      	movs	r3, #0
 80083f4:	2200      	movs	r2, #0
 80083f6:	210a      	movs	r1, #10
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fc3f 	bl	8008c7c <USBH_FindInterface>
 80083fe:	4603      	mov	r3, r0
 8008400:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	2bff      	cmp	r3, #255	; 0xff
 8008406:	d002      	beq.n	800840e <USBH_CDC_InterfaceInit+0x11a>
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d901      	bls.n	8008412 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800840e:	2302      	movs	r3, #2
 8008410:	e0c2      	b.n	8008598 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	211a      	movs	r1, #26
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	4413      	add	r3, r2
 800841e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b25b      	sxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	da16      	bge.n	8008458 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	211a      	movs	r1, #26
 8008430:	fb01 f303 	mul.w	r3, r1, r3
 8008434:	4413      	add	r3, r2
 8008436:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800843a:	781a      	ldrb	r2, [r3, #0]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	211a      	movs	r1, #26
 8008446:	fb01 f303 	mul.w	r3, r1, r3
 800844a:	4413      	add	r3, r2
 800844c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008450:	881a      	ldrh	r2, [r3, #0]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	835a      	strh	r2, [r3, #26]
 8008456:	e015      	b.n	8008484 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	211a      	movs	r1, #26
 800845e:	fb01 f303 	mul.w	r3, r1, r3
 8008462:	4413      	add	r3, r2
 8008464:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008468:	781a      	ldrb	r2, [r3, #0]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	211a      	movs	r1, #26
 8008474:	fb01 f303 	mul.w	r3, r1, r3
 8008478:	4413      	add	r3, r2
 800847a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800847e:	881a      	ldrh	r2, [r3, #0]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	211a      	movs	r1, #26
 800848a:	fb01 f303 	mul.w	r3, r1, r3
 800848e:	4413      	add	r3, r2
 8008490:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	b25b      	sxtb	r3, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	da16      	bge.n	80084ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	211a      	movs	r1, #26
 80084a2:	fb01 f303 	mul.w	r3, r1, r3
 80084a6:	4413      	add	r3, r2
 80084a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80084ac:	781a      	ldrb	r2, [r3, #0]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	211a      	movs	r1, #26
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	4413      	add	r3, r2
 80084be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80084c2:	881a      	ldrh	r2, [r3, #0]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	835a      	strh	r2, [r3, #26]
 80084c8:	e015      	b.n	80084f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	211a      	movs	r1, #26
 80084d0:	fb01 f303 	mul.w	r3, r1, r3
 80084d4:	4413      	add	r3, r2
 80084d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	211a      	movs	r1, #26
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80084f0:	881a      	ldrh	r2, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	7b9b      	ldrb	r3, [r3, #14]
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 ffec 	bl	800a4da <USBH_AllocPipe>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	7bdb      	ldrb	r3, [r3, #15]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 ffe2 	bl	800a4da <USBH_AllocPipe>
 8008516:	4603      	mov	r3, r0
 8008518:	461a      	mov	r2, r3
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	7b59      	ldrb	r1, [r3, #13]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	7b98      	ldrb	r0, [r3, #14]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	8b12      	ldrh	r2, [r2, #24]
 8008536:	9202      	str	r2, [sp, #8]
 8008538:	2202      	movs	r2, #2
 800853a:	9201      	str	r2, [sp, #4]
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	4623      	mov	r3, r4
 8008540:	4602      	mov	r2, r0
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 ff9a 	bl	800a47c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	7b19      	ldrb	r1, [r3, #12]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	7bd8      	ldrb	r0, [r3, #15]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	8b52      	ldrh	r2, [r2, #26]
 8008560:	9202      	str	r2, [sp, #8]
 8008562:	2202      	movs	r2, #2
 8008564:	9201      	str	r2, [sp, #4]
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	4623      	mov	r3, r4
 800856a:	4602      	mov	r2, r0
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 ff85 	bl	800a47c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	7b5b      	ldrb	r3, [r3, #13]
 800857e:	2200      	movs	r2, #0
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f004 fcf0 	bl	800cf68 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	7b1b      	ldrb	r3, [r3, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f004 fce9 	bl	800cf68 <USBH_LL_SetToggle>

  return USBH_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	bd90      	pop	{r4, r7, pc}

080085a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00e      	beq.n	80085d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 ff7a 	bl	800a4ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 ffa5 	bl	800a51c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	7b1b      	ldrb	r3, [r3, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00e      	beq.n	80085fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	7b1b      	ldrb	r3, [r3, #12]
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 ff67 	bl	800a4ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	7b1b      	ldrb	r3, [r3, #12]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 ff92 	bl	800a51c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	7b5b      	ldrb	r3, [r3, #13]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00e      	beq.n	8008624 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	7b5b      	ldrb	r3, [r3, #13]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 ff54 	bl	800a4ba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	7b5b      	ldrb	r3, [r3, #13]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 ff7f 	bl	800a51c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	4618      	mov	r0, r3
 800863a:	f004 fd4d 	bl	800d0d8 <free>
    phost->pActiveClass->pData = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008644:	2200      	movs	r2, #0
 8008646:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3340      	adds	r3, #64	; 0x40
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f8b1 	bl	80087d2 <GetLineCoding>
 8008670:	4603      	mov	r3, r0
 8008672:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d105      	bne.n	8008686 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008680:	2102      	movs	r1, #2
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008686:	7afb      	ldrb	r3, [r7, #11]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008698:	2301      	movs	r3, #1
 800869a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d877      	bhi.n	80087a4 <USBH_CDC_Process+0x114>
 80086b4:	a201      	add	r2, pc, #4	; (adr r2, 80086bc <USBH_CDC_Process+0x2c>)
 80086b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ba:	bf00      	nop
 80086bc:	080086d1 	.word	0x080086d1
 80086c0:	080086d7 	.word	0x080086d7
 80086c4:	08008707 	.word	0x08008707
 80086c8:	0800877b 	.word	0x0800877b
 80086cc:	08008789 	.word	0x08008789
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]
      break;
 80086d4:	e06d      	b.n	80087b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f897 	bl	8008810 <SetLineCoding>
 80086e2:	4603      	mov	r3, r0
 80086e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80086f4:	e058      	b.n	80087a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d055      	beq.n	80087a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2204      	movs	r2, #4
 8008700:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008704:	e050      	b.n	80087a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	3340      	adds	r3, #64	; 0x40
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f860 	bl	80087d2 <GetLineCoding>
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d126      	bne.n	800876a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800872e:	791b      	ldrb	r3, [r3, #4]
 8008730:	429a      	cmp	r2, r3
 8008732:	d13b      	bne.n	80087ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800873e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008740:	429a      	cmp	r2, r3
 8008742:	d133      	bne.n	80087ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800874e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008750:	429a      	cmp	r2, r3
 8008752:	d12b      	bne.n	80087ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800875c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800875e:	429a      	cmp	r2, r3
 8008760:	d124      	bne.n	80087ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f984 	bl	8008a70 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008768:	e020      	b.n	80087ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d01d      	beq.n	80087ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2204      	movs	r2, #4
 8008774:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008778:	e018      	b.n	80087ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f867 	bl	800884e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f8f8 	bl	8008976 <CDC_ProcessReception>
      break;
 8008786:	e014      	b.n	80087b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008788:	2100      	movs	r1, #0
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 f953 	bl	8009a36 <USBH_ClrFeature>
 8008790:	4603      	mov	r3, r0
 8008792:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10a      	bne.n	80087b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80087a2:	e005      	b.n	80087b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80087a4:	bf00      	nop
 80087a6:	e004      	b.n	80087b2 <USBH_CDC_Process+0x122>
      break;
 80087a8:	bf00      	nop
 80087aa:	e002      	b.n	80087b2 <USBH_CDC_Process+0x122>
      break;
 80087ac:	bf00      	nop
 80087ae:	e000      	b.n	80087b2 <USBH_CDC_Process+0x122>
      break;
 80087b0:	bf00      	nop

  }

  return status;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	22a1      	movs	r2, #161	; 0xa1
 80087e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2221      	movs	r2, #33	; 0x21
 80087e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2207      	movs	r2, #7
 80087f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2207      	movs	r2, #7
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 faf8 	bl	8009df6 <USBH_CtlReq>
 8008806:	4603      	mov	r3, r0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2221      	movs	r2, #33	; 0x21
 800881e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2220      	movs	r2, #32
 8008824:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2207      	movs	r2, #7
 8008836:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2207      	movs	r2, #7
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 fad9 	bl	8009df6 <USBH_CtlReq>
 8008844:	4603      	mov	r3, r0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af02      	add	r7, sp, #8
 8008854:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008860:	2300      	movs	r3, #0
 8008862:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800886a:	2b01      	cmp	r3, #1
 800886c:	d002      	beq.n	8008874 <CDC_ProcessTransmission+0x26>
 800886e:	2b02      	cmp	r3, #2
 8008870:	d025      	beq.n	80088be <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8008872:	e07c      	b.n	800896e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	8b12      	ldrh	r2, [r2, #24]
 800887c:	4293      	cmp	r3, r2
 800887e:	d90c      	bls.n	800889a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	69d9      	ldr	r1, [r3, #28]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8b1a      	ldrh	r2, [r3, #24]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	7b58      	ldrb	r0, [r3, #13]
 800888c:	2301      	movs	r3, #1
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	4603      	mov	r3, r0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 fdaf 	bl	800a3f6 <USBH_BulkSendData>
 8008898:	e00c      	b.n	80088b4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	7b58      	ldrb	r0, [r3, #13]
 80088a8:	2301      	movs	r3, #1
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	4603      	mov	r3, r0
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 fda1 	bl	800a3f6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80088bc:	e057      	b.n	800896e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	7b5b      	ldrb	r3, [r3, #13]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f004 fb25 	bl	800cf14 <USBH_LL_GetURBState>
 80088ca:	4603      	mov	r3, r0
 80088cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80088ce:	7afb      	ldrb	r3, [r7, #11]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d136      	bne.n	8008942 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	8b12      	ldrh	r2, [r2, #24]
 80088dc:	4293      	cmp	r3, r2
 80088de:	d90e      	bls.n	80088fe <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	8b12      	ldrh	r2, [r2, #24]
 80088e8:	1a9a      	subs	r2, r3, r2
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	8b12      	ldrh	r2, [r2, #24]
 80088f6:	441a      	add	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	61da      	str	r2, [r3, #28]
 80088fc:	e002      	b.n	8008904 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	2b00      	cmp	r3, #0
 800890a:	d004      	beq.n	8008916 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8008914:	e006      	b.n	8008924 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f892 	bl	8008a48 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2204      	movs	r2, #4
 8008928:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008938:	2200      	movs	r2, #0
 800893a:	4619      	mov	r1, r3
 800893c:	f001 feea 	bl	800a714 <osMessagePut>
      break;
 8008940:	e014      	b.n	800896c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8008942:	7afb      	ldrb	r3, [r7, #11]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d111      	bne.n	800896c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2204      	movs	r2, #4
 8008954:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008964:	2200      	movs	r2, #0
 8008966:	4619      	mov	r1, r3
 8008968:	f001 fed4 	bl	800a714 <osMessagePut>
      break;
 800896c:	bf00      	nop
  }
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b086      	sub	sp, #24
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008988:	2300      	movs	r3, #0
 800898a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008992:	2b03      	cmp	r3, #3
 8008994:	d002      	beq.n	800899c <CDC_ProcessReception+0x26>
 8008996:	2b04      	cmp	r3, #4
 8008998:	d00e      	beq.n	80089b8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800899a:	e051      	b.n	8008a40 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	6a19      	ldr	r1, [r3, #32]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	8b5a      	ldrh	r2, [r3, #26]
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	7b1b      	ldrb	r3, [r3, #12]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fd49 	bl	800a440 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2204      	movs	r2, #4
 80089b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80089b6:	e043      	b.n	8008a40 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	7b1b      	ldrb	r3, [r3, #12]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f004 faa8 	bl	800cf14 <USBH_LL_GetURBState>
 80089c4:	4603      	mov	r3, r0
 80089c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80089c8:	7cfb      	ldrb	r3, [r7, #19]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d137      	bne.n	8008a3e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	7b1b      	ldrb	r3, [r3, #12]
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f004 fa0b 	bl	800cdf0 <USBH_LL_GetLastXferSize>
 80089da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d016      	beq.n	8008a14 <CDC_ProcessReception+0x9e>
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	8b5b      	ldrh	r3, [r3, #26]
 80089ea:	461a      	mov	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d910      	bls.n	8008a14 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	1ad2      	subs	r2, r2, r3
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	6a1a      	ldr	r2, [r3, #32]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	441a      	add	r2, r3
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2203      	movs	r2, #3
 8008a0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8008a12:	e006      	b.n	8008a22 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f81d 	bl	8008a5c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2204      	movs	r2, #4
 8008a26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008a36:	2200      	movs	r2, #0
 8008a38:	4619      	mov	r1, r3
 8008a3a:	f001 fe6b 	bl	800a714 <osMessagePut>
      break;
 8008a3e:	bf00      	nop
  }
}
 8008a40:	bf00      	nop
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008a84:	b5b0      	push	{r4, r5, r7, lr}
 8008a86:	b090      	sub	sp, #64	; 0x40
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d101      	bne.n	8008a9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e04d      	b.n	8008b38 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	79fa      	ldrb	r2, [r7, #7]
 8008aa0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f847 	bl	8008b48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <USBH_Init+0xbc>)
 8008aea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8008aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008af4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008af8:	2100      	movs	r1, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 fde1 	bl	800a6c2 <osMessageCreate>
 8008b00:	4602      	mov	r2, r0
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008b08:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <USBH_Init+0xc0>)
 8008b0a:	f107 0414 	add.w	r4, r7, #20
 8008b0e:	461d      	mov	r5, r3
 8008b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008b1c:	f107 0314 	add.w	r3, r7, #20
 8008b20:	68f9      	ldr	r1, [r7, #12]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fd6d 	bl	800a602 <osThreadCreate>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f004 f8a1 	bl	800cc78 <USBH_LL_Init>

  return USBH_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3740      	adds	r7, #64	; 0x40
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b40:	0800d2c8 	.word	0x0800d2c8
 8008b44:	0800d2e4 	.word	0x0800d2e4

08008b48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	e009      	b.n	8008b6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	33e0      	adds	r3, #224	; 0xe0
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	2200      	movs	r2, #0
 8008b66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b0e      	cmp	r3, #14
 8008b72:	d9f2      	bls.n	8008b5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	e009      	b.n	8008b8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b84:	2200      	movs	r2, #0
 8008b86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b94:	d3f1      	bcc.n	8008b7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2240      	movs	r2, #64	; 0x40
 8008bba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d016      	beq.n	8008c32 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10e      	bne.n	8008c2c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008c14:	1c59      	adds	r1, r3, #1
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	33de      	adds	r3, #222	; 0xde
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73fb      	strb	r3, [r7, #15]
 8008c2a:	e004      	b.n	8008c36 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	73fb      	strb	r3, [r7, #15]
 8008c30:	e001      	b.n	8008c36 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008c32:	2302      	movs	r3, #2
 8008c34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d204      	bcs.n	8008c6a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	78fa      	ldrb	r2, [r7, #3]
 8008c64:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008c68:	e001      	b.n	8008c6e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	4608      	mov	r0, r1
 8008c86:	4611      	mov	r1, r2
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	70fb      	strb	r3, [r7, #3]
 8008c8e:	460b      	mov	r3, r1
 8008c90:	70bb      	strb	r3, [r7, #2]
 8008c92:	4613      	mov	r3, r2
 8008c94:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ca4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ca6:	e025      	b.n	8008cf4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	221a      	movs	r2, #26
 8008cac:	fb02 f303 	mul.w	r3, r2, r3
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	3302      	adds	r3, #2
 8008cb8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	795b      	ldrb	r3, [r3, #5]
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d002      	beq.n	8008cca <USBH_FindInterface+0x4e>
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	2bff      	cmp	r3, #255	; 0xff
 8008cc8:	d111      	bne.n	8008cee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008cce:	78ba      	ldrb	r2, [r7, #2]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d002      	beq.n	8008cda <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008cd4:	78bb      	ldrb	r3, [r7, #2]
 8008cd6:	2bff      	cmp	r3, #255	; 0xff
 8008cd8:	d109      	bne.n	8008cee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008cde:	787a      	ldrb	r2, [r7, #1]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d002      	beq.n	8008cea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ce4:	787b      	ldrb	r3, [r7, #1]
 8008ce6:	2bff      	cmp	r3, #255	; 0xff
 8008ce8:	d101      	bne.n	8008cee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	e006      	b.n	8008cfc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d9d6      	bls.n	8008ca8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008cfa:	23ff      	movs	r3, #255	; 0xff
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f003 fff7 	bl	800cd04 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008d16:	2101      	movs	r1, #1
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f004 f90e 	bl	800cf3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af04      	add	r7, sp, #16
 8008d2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008d30:	2302      	movs	r3, #2
 8008d32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d102      	bne.n	8008d4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2203      	movs	r2, #3
 8008d48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b0b      	cmp	r3, #11
 8008d52:	f200 823c 	bhi.w	80091ce <USBH_Process+0x4a6>
 8008d56:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <USBH_Process+0x34>)
 8008d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5c:	08008d8d 	.word	0x08008d8d
 8008d60:	08008ddb 	.word	0x08008ddb
 8008d64:	08008e5f 	.word	0x08008e5f
 8008d68:	0800914d 	.word	0x0800914d
 8008d6c:	080091cf 	.word	0x080091cf
 8008d70:	08008f1f 	.word	0x08008f1f
 8008d74:	080090d7 	.word	0x080090d7
 8008d78:	08008f71 	.word	0x08008f71
 8008d7c:	08008fad 	.word	0x08008fad
 8008d80:	08008fe7 	.word	0x08008fe7
 8008d84:	0800902f 	.word	0x0800902f
 8008d88:	08009135 	.word	0x08009135
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 821c 	beq.w	80091d2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008da0:	20c8      	movs	r0, #200	; 0xc8
 8008da2:	f004 f914 	bl	800cfce <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f004 f807 	bl	800cdba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	f001 fc9e 	bl	800a714 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008dd8:	e1fb      	b.n	80091d2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d107      	bne.n	8008df4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	701a      	strb	r2, [r3, #0]
 8008df2:	e025      	b.n	8008e40 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dfe:	d914      	bls.n	8008e2a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008e06:	3301      	adds	r3, #1
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d903      	bls.n	8008e22 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	220d      	movs	r2, #13
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	e00e      	b.n	8008e40 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	701a      	strb	r2, [r3, #0]
 8008e28:	e00a      	b.n	8008e40 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008e30:	f103 020a 	add.w	r2, r3, #10
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008e3a:	200a      	movs	r0, #10
 8008e3c:	f004 f8c7 	bl	800cfce <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e54:	2200      	movs	r2, #0
 8008e56:	4619      	mov	r1, r3
 8008e58:	f001 fc5c 	bl	800a714 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e5c:	e1c0      	b.n	80091e0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e6e:	2104      	movs	r1, #4
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008e74:	2064      	movs	r0, #100	; 0x64
 8008e76:	f004 f8aa 	bl	800cfce <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f003 ff78 	bl	800cd70 <USBH_LL_GetSpeed>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2205      	movs	r2, #5
 8008e8e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 fb21 	bl	800a4da <USBH_AllocPipe>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f001 fb19 	bl	800a4da <USBH_AllocPipe>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	461a      	mov	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	7919      	ldrb	r1, [r3, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ec4:	b292      	uxth	r2, r2
 8008ec6:	9202      	str	r2, [sp, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	9201      	str	r2, [sp, #4]
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2280      	movs	r2, #128	; 0x80
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f001 fad2 	bl	800a47c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	7959      	ldrb	r1, [r3, #5]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008eec:	b292      	uxth	r2, r2
 8008eee:	9202      	str	r2, [sp, #8]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	9201      	str	r2, [sp, #4]
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2200      	movs	r2, #0
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fabe 	bl	800a47c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f14:	2200      	movs	r2, #0
 8008f16:	4619      	mov	r1, r3
 8008f18:	f001 fbfc 	bl	800a714 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f1c:	e160      	b.n	80091e0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f964 	bl	80091ec <USBH_HandleEnum>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 8152 	bne.w	80091d6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d103      	bne.n	8008f4c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2208      	movs	r2, #8
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	e002      	b.n	8008f52 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2207      	movs	r2, #7
 8008f50:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2205      	movs	r2, #5
 8008f56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f66:	2200      	movs	r2, #0
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f001 fbd3 	bl	800a714 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008f6e:	e132      	b.n	80091d6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 812f 	beq.w	80091da <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f82:	2101      	movs	r1, #1
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2208      	movs	r2, #8
 8008f8c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2205      	movs	r2, #5
 8008f92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	f001 fbb5 	bl	800a714 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008faa:	e116      	b.n	80091da <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fcf6 	bl	80099a8 <USBH_SetCfg>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2209      	movs	r2, #9
 8008fc6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4619      	mov	r1, r3
 8008fe0:	f001 fb98 	bl	800a714 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008fe4:	e0fc      	b.n	80091e0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00a      	beq.n	800900a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fcf9 	bl	80099ee <USBH_SetFeature>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	220a      	movs	r2, #10
 8009006:	701a      	strb	r2, [r3, #0]
 8009008:	e002      	b.n	8009010 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	220a      	movs	r2, #10
 800900e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009024:	2200      	movs	r2, #0
 8009026:	4619      	mov	r1, r3
 8009028:	f001 fb74 	bl	800a714 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800902c:	e0d8      	b.n	80091e0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009034:	2b00      	cmp	r3, #0
 8009036:	d03f      	beq.n	80090b8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
 8009044:	e016      	b.n	8009074 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009046:	7bfa      	ldrb	r2, [r7, #15]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	32de      	adds	r2, #222	; 0xde
 800904c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009050:	791a      	ldrb	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009058:	429a      	cmp	r2, r3
 800905a:	d108      	bne.n	800906e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800905c:	7bfa      	ldrb	r2, [r7, #15]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	32de      	adds	r2, #222	; 0xde
 8009062:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800906c:	e005      	b.n	800907a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	3301      	adds	r3, #1
 8009072:	73fb      	strb	r3, [r7, #15]
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0e5      	beq.n	8009046 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009080:	2b00      	cmp	r3, #0
 8009082:	d016      	beq.n	80090b2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d109      	bne.n	80090aa <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2206      	movs	r2, #6
 800909a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090a2:	2103      	movs	r1, #3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	4798      	blx	r3
 80090a8:	e006      	b.n	80090b8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	220d      	movs	r2, #13
 80090ae:	701a      	strb	r2, [r3, #0]
 80090b0:	e002      	b.n	80090b8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	220d      	movs	r2, #13
 80090b6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2205      	movs	r2, #5
 80090bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090cc:	2200      	movs	r2, #0
 80090ce:	4619      	mov	r1, r3
 80090d0:	f001 fb20 	bl	800a714 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090d4:	e084      	b.n	80091e0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d017      	beq.n	8009110 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	220b      	movs	r2, #11
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	e00a      	b.n	8009116 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d106      	bne.n	8009116 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	220d      	movs	r2, #13
 800910c:	701a      	strb	r2, [r3, #0]
 800910e:	e002      	b.n	8009116 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	220d      	movs	r2, #13
 8009114:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2205      	movs	r2, #5
 800911a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800912a:	2200      	movs	r2, #0
 800912c:	4619      	mov	r1, r3
 800912e:	f001 faf1 	bl	800a714 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009132:	e055      	b.n	80091e0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800913a:	2b00      	cmp	r3, #0
 800913c:	d04f      	beq.n	80091de <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	4798      	blx	r3
      }
      break;
 800914a:	e048      	b.n	80091de <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff fcf7 	bl	8008b48 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009188:	2105      	movs	r1, #5
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b01      	cmp	r3, #1
 8009198:	d107      	bne.n	80091aa <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7ff fdb0 	bl	8008d08 <USBH_Start>
 80091a8:	e002      	b.n	80091b0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f003 fdaa 	bl	800cd04 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091c4:	2200      	movs	r2, #0
 80091c6:	4619      	mov	r1, r3
 80091c8:	f001 faa4 	bl	800a714 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80091cc:	e008      	b.n	80091e0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80091ce:	bf00      	nop
 80091d0:	e006      	b.n	80091e0 <USBH_Process+0x4b8>
      break;
 80091d2:	bf00      	nop
 80091d4:	e004      	b.n	80091e0 <USBH_Process+0x4b8>
      break;
 80091d6:	bf00      	nop
 80091d8:	e002      	b.n	80091e0 <USBH_Process+0x4b8>
    break;
 80091da:	bf00      	nop
 80091dc:	e000      	b.n	80091e0 <USBH_Process+0x4b8>
      break;
 80091de:	bf00      	nop
  }
  return USBH_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop

080091ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af04      	add	r7, sp, #16
 80091f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091f4:	2301      	movs	r3, #1
 80091f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80091f8:	2301      	movs	r3, #1
 80091fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	785b      	ldrb	r3, [r3, #1]
 8009200:	2b07      	cmp	r3, #7
 8009202:	f200 8208 	bhi.w	8009616 <USBH_HandleEnum+0x42a>
 8009206:	a201      	add	r2, pc, #4	; (adr r2, 800920c <USBH_HandleEnum+0x20>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	0800922d 	.word	0x0800922d
 8009210:	080092eb 	.word	0x080092eb
 8009214:	08009355 	.word	0x08009355
 8009218:	080093e3 	.word	0x080093e3
 800921c:	0800944d 	.word	0x0800944d
 8009220:	080094bd 	.word	0x080094bd
 8009224:	08009559 	.word	0x08009559
 8009228:	080095d7 	.word	0x080095d7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800922c:	2108      	movs	r1, #8
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 faea 	bl	8009808 <USBH_Get_DevDesc>
 8009234:	4603      	mov	r3, r0
 8009236:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d130      	bne.n	80092a0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	7919      	ldrb	r1, [r3, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009262:	b292      	uxth	r2, r2
 8009264:	9202      	str	r2, [sp, #8]
 8009266:	2200      	movs	r2, #0
 8009268:	9201      	str	r2, [sp, #4]
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	4603      	mov	r3, r0
 800926e:	2280      	movs	r2, #128	; 0x80
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 f903 	bl	800a47c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	7959      	ldrb	r1, [r3, #5]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800928a:	b292      	uxth	r2, r2
 800928c:	9202      	str	r2, [sp, #8]
 800928e:	2200      	movs	r2, #0
 8009290:	9201      	str	r2, [sp, #4]
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	4603      	mov	r3, r0
 8009296:	2200      	movs	r2, #0
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 f8ef 	bl	800a47c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800929e:	e1bc      	b.n	800961a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	f040 81b9 	bne.w	800961a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092ae:	3301      	adds	r3, #1
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d903      	bls.n	80092ca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	220d      	movs	r2, #13
 80092c6:	701a      	strb	r2, [r3, #0]
      break;
 80092c8:	e1a7      	b.n	800961a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	795b      	ldrb	r3, [r3, #5]
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f923 	bl	800a51c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	791b      	ldrb	r3, [r3, #4]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f91d 	bl	800a51c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	701a      	strb	r2, [r3, #0]
      break;
 80092e8:	e197      	b.n	800961a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80092ea:	2112      	movs	r1, #18
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fa8b 	bl	8009808 <USBH_Get_DevDesc>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d103      	bne.n	8009304 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009302:	e18c      	b.n	800961e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b03      	cmp	r3, #3
 8009308:	f040 8189 	bne.w	800961e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009312:	3301      	adds	r3, #1
 8009314:	b2da      	uxtb	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009322:	2b03      	cmp	r3, #3
 8009324:	d903      	bls.n	800932e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	220d      	movs	r2, #13
 800932a:	701a      	strb	r2, [r3, #0]
      break;
 800932c:	e177      	b.n	800961e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	795b      	ldrb	r3, [r3, #5]
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 f8f1 	bl	800a51c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	791b      	ldrb	r3, [r3, #4]
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f001 f8eb 	bl	800a51c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	701a      	strb	r2, [r3, #0]
      break;
 8009352:	e164      	b.n	800961e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009354:	2101      	movs	r1, #1
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fb02 	bl	8009960 <USBH_SetAddress>
 800935c:	4603      	mov	r3, r0
 800935e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d132      	bne.n	80093cc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009366:	2002      	movs	r0, #2
 8009368:	f003 fe31 	bl	800cfce <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2203      	movs	r2, #3
 8009378:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7919      	ldrb	r1, [r3, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800938e:	b292      	uxth	r2, r2
 8009390:	9202      	str	r2, [sp, #8]
 8009392:	2200      	movs	r2, #0
 8009394:	9201      	str	r2, [sp, #4]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	4603      	mov	r3, r0
 800939a:	2280      	movs	r2, #128	; 0x80
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 f86d 	bl	800a47c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	7959      	ldrb	r1, [r3, #5]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093b6:	b292      	uxth	r2, r2
 80093b8:	9202      	str	r2, [sp, #8]
 80093ba:	2200      	movs	r2, #0
 80093bc:	9201      	str	r2, [sp, #4]
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	4603      	mov	r3, r0
 80093c2:	2200      	movs	r2, #0
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 f859 	bl	800a47c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093ca:	e12a      	b.n	8009622 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	f040 8127 	bne.w	8009622 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	220d      	movs	r2, #13
 80093d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	705a      	strb	r2, [r3, #1]
      break;
 80093e0:	e11f      	b.n	8009622 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80093e2:	2109      	movs	r1, #9
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fa37 	bl	8009858 <USBH_Get_CfgDesc>
 80093ea:	4603      	mov	r3, r0
 80093ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093ee:	7bbb      	ldrb	r3, [r7, #14]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2204      	movs	r2, #4
 80093f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093fa:	e114      	b.n	8009626 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b03      	cmp	r3, #3
 8009400:	f040 8111 	bne.w	8009626 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800940a:	3301      	adds	r3, #1
 800940c:	b2da      	uxtb	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800941a:	2b03      	cmp	r3, #3
 800941c:	d903      	bls.n	8009426 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	220d      	movs	r2, #13
 8009422:	701a      	strb	r2, [r3, #0]
      break;
 8009424:	e0ff      	b.n	8009626 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	795b      	ldrb	r3, [r3, #5]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 f875 	bl	800a51c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	791b      	ldrb	r3, [r3, #4]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 f86f 	bl	800a51c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	701a      	strb	r2, [r3, #0]
      break;
 800944a:	e0ec      	b.n	8009626 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f9ff 	bl	8009858 <USBH_Get_CfgDesc>
 800945a:	4603      	mov	r3, r0
 800945c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d103      	bne.n	800946c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2205      	movs	r2, #5
 8009468:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800946a:	e0de      	b.n	800962a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b03      	cmp	r3, #3
 8009470:	f040 80db 	bne.w	800962a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800947a:	3301      	adds	r3, #1
 800947c:	b2da      	uxtb	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800948a:	2b03      	cmp	r3, #3
 800948c:	d903      	bls.n	8009496 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	220d      	movs	r2, #13
 8009492:	701a      	strb	r2, [r3, #0]
      break;
 8009494:	e0c9      	b.n	800962a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	795b      	ldrb	r3, [r3, #5]
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 f83d 	bl	800a51c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	791b      	ldrb	r3, [r3, #4]
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 f837 	bl	800a51c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	701a      	strb	r2, [r3, #0]
      break;
 80094ba:	e0b6      	b.n	800962a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d036      	beq.n	8009534 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094d2:	23ff      	movs	r3, #255	; 0xff
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f9e3 	bl	80098a0 <USBH_Get_StringDesc>
 80094da:	4603      	mov	r3, r0
 80094dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d111      	bne.n	8009508 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2206      	movs	r2, #6
 80094e8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2205      	movs	r2, #5
 80094ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094fe:	2200      	movs	r2, #0
 8009500:	4619      	mov	r1, r3
 8009502:	f001 f907 	bl	800a714 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009506:	e092      	b.n	800962e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	2b03      	cmp	r3, #3
 800950c:	f040 808f 	bne.w	800962e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2206      	movs	r2, #6
 8009514:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2205      	movs	r2, #5
 800951a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800952a:	2200      	movs	r2, #0
 800952c:	4619      	mov	r1, r3
 800952e:	f001 f8f1 	bl	800a714 <osMessagePut>
      break;
 8009532:	e07c      	b.n	800962e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2206      	movs	r2, #6
 8009538:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2205      	movs	r2, #5
 800953e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800954e:	2200      	movs	r2, #0
 8009550:	4619      	mov	r1, r3
 8009552:	f001 f8df 	bl	800a714 <osMessagePut>
      break;
 8009556:	e06a      	b.n	800962e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800955e:	2b00      	cmp	r3, #0
 8009560:	d027      	beq.n	80095b2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800956e:	23ff      	movs	r3, #255	; 0xff
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f995 	bl	80098a0 <USBH_Get_StringDesc>
 8009576:	4603      	mov	r3, r0
 8009578:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2207      	movs	r2, #7
 8009584:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009586:	e054      	b.n	8009632 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2b03      	cmp	r3, #3
 800958c:	d151      	bne.n	8009632 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2207      	movs	r2, #7
 8009592:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2205      	movs	r2, #5
 8009598:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095a8:	2200      	movs	r2, #0
 80095aa:	4619      	mov	r1, r3
 80095ac:	f001 f8b2 	bl	800a714 <osMessagePut>
      break;
 80095b0:	e03f      	b.n	8009632 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2207      	movs	r2, #7
 80095b6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2205      	movs	r2, #5
 80095bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095cc:	2200      	movs	r2, #0
 80095ce:	4619      	mov	r1, r3
 80095d0:	f001 f8a0 	bl	800a714 <osMessagePut>
      break;
 80095d4:	e02d      	b.n	8009632 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d017      	beq.n	8009610 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80095ec:	23ff      	movs	r3, #255	; 0xff
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f956 	bl	80098a0 <USBH_Get_StringDesc>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d102      	bne.n	8009604 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009602:	e018      	b.n	8009636 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b03      	cmp	r3, #3
 8009608:	d115      	bne.n	8009636 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]
      break;
 800960e:	e012      	b.n	8009636 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
      break;
 8009614:	e00f      	b.n	8009636 <USBH_HandleEnum+0x44a>

    default:
      break;
 8009616:	bf00      	nop
 8009618:	e00e      	b.n	8009638 <USBH_HandleEnum+0x44c>
      break;
 800961a:	bf00      	nop
 800961c:	e00c      	b.n	8009638 <USBH_HandleEnum+0x44c>
      break;
 800961e:	bf00      	nop
 8009620:	e00a      	b.n	8009638 <USBH_HandleEnum+0x44c>
      break;
 8009622:	bf00      	nop
 8009624:	e008      	b.n	8009638 <USBH_HandleEnum+0x44c>
      break;
 8009626:	bf00      	nop
 8009628:	e006      	b.n	8009638 <USBH_HandleEnum+0x44c>
      break;
 800962a:	bf00      	nop
 800962c:	e004      	b.n	8009638 <USBH_HandleEnum+0x44c>
      break;
 800962e:	bf00      	nop
 8009630:	e002      	b.n	8009638 <USBH_HandleEnum+0x44c>
      break;
 8009632:	bf00      	nop
 8009634:	e000      	b.n	8009638 <USBH_HandleEnum+0x44c>
      break;
 8009636:	bf00      	nop
  }
  return Status;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop

08009644 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009656:	bf00      	nop
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009670:	1c5a      	adds	r2, r3, #1
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f804 	bl	8009686 <USBH_HandleSof>
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b0b      	cmp	r3, #11
 8009696:	d10a      	bne.n	80096ae <USBH_HandleSof+0x28>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	4798      	blx	r3
  }
}
 80096ae:	bf00      	nop
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096da:	2200      	movs	r2, #0
 80096dc:	4619      	mov	r1, r3
 80096de:	f001 f819 	bl	800a714 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80096e2:	bf00      	nop
}
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80096fa:	bf00      	nop
}
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2201      	movs	r2, #1
 800972a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800973a:	2200      	movs	r2, #0
 800973c:	4619      	mov	r1, r3
 800973e:	f000 ffe9 	bl	800a714 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f003 fae4 	bl	800cd3a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	791b      	ldrb	r3, [r3, #4]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fecf 	bl	800a51c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	795b      	ldrb	r3, [r3, #5]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fec9 	bl	800a51c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800979e:	2200      	movs	r2, #0
 80097a0:	4619      	mov	r1, r3
 80097a2:	f000 ffb7 	bl	800a714 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80097be:	f107 030c 	add.w	r3, r7, #12
 80097c2:	f04f 32ff 	mov.w	r2, #4294967295
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 ffe4 	bl	800a794 <osMessageGet>
    if (event.status == osEventMessage)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b10      	cmp	r3, #16
 80097d0:	d1f2      	bne.n	80097b8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7ff faa8 	bl	8008d28 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80097d8:	e7ee      	b.n	80097b8 <USBH_Process_OS+0x8>

080097da <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b082      	sub	sp, #8
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097f6:	2200      	movs	r2, #0
 80097f8:	4619      	mov	r1, r3
 80097fa:	f000 ff8b 	bl	800a714 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af02      	add	r7, sp, #8
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	b29b      	uxth	r3, r3
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	4613      	mov	r3, r2
 8009822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009826:	2100      	movs	r1, #0
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f864 	bl	80098f6 <USBH_GetDescriptor>
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009844:	78fa      	ldrb	r2, [r7, #3]
 8009846:	b292      	uxth	r2, r2
 8009848:	4619      	mov	r1, r3
 800984a:	f000 f918 	bl	8009a7e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af02      	add	r7, sp, #8
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	331c      	adds	r3, #28
 8009868:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800986a:	887b      	ldrh	r3, [r7, #2]
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009874:	2100      	movs	r1, #0
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f83d 	bl	80098f6 <USBH_GetDescriptor>
 800987c:	4603      	mov	r3, r0
 800987e:	72fb      	strb	r3, [r7, #11]
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d107      	bne.n	8009896 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800988c:	887a      	ldrh	r2, [r7, #2]
 800988e:	68f9      	ldr	r1, [r7, #12]
 8009890:	4618      	mov	r0, r3
 8009892:	f000 f964 	bl	8009b5e <USBH_ParseCfgDesc>
  }

  return status;
 8009896:	7afb      	ldrb	r3, [r7, #11]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	461a      	mov	r2, r3
 80098ac:	460b      	mov	r3, r1
 80098ae:	72fb      	strb	r3, [r7, #11]
 80098b0:	4613      	mov	r3, r2
 80098b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80098bc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80098c4:	893b      	ldrh	r3, [r7, #8]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	460b      	mov	r3, r1
 80098ca:	2100      	movs	r1, #0
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 f812 	bl	80098f6 <USBH_GetDescriptor>
 80098d2:	4603      	mov	r3, r0
 80098d4:	75fb      	strb	r3, [r7, #23]
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d107      	bne.n	80098ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098e2:	893a      	ldrh	r2, [r7, #8]
 80098e4:	6879      	ldr	r1, [r7, #4]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fa37 	bl	8009d5a <USBH_ParseStringDesc>
  }

  return status;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	60f8      	str	r0, [r7, #12]
 80098fe:	607b      	str	r3, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	72fb      	strb	r3, [r7, #11]
 8009904:	4613      	mov	r3, r2
 8009906:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	789b      	ldrb	r3, [r3, #2]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d11c      	bne.n	800994a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009916:	b2da      	uxtb	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2206      	movs	r2, #6
 8009920:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	893a      	ldrh	r2, [r7, #8]
 8009926:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009928:	893b      	ldrh	r3, [r7, #8]
 800992a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800992e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009932:	d104      	bne.n	800993e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f240 4209 	movw	r2, #1033	; 0x409
 800993a:	829a      	strh	r2, [r3, #20]
 800993c:	e002      	b.n	8009944 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8b3a      	ldrh	r2, [r7, #24]
 8009948:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800994a:	8b3b      	ldrh	r3, [r7, #24]
 800994c:	461a      	mov	r2, r3
 800994e:	6879      	ldr	r1, [r7, #4]
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fa50 	bl	8009df6 <USBH_CtlReq>
 8009956:	4603      	mov	r3, r0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	789b      	ldrb	r3, [r3, #2]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d10f      	bne.n	8009994 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2205      	movs	r2, #5
 800997e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	b29a      	uxth	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009994:	2200      	movs	r2, #0
 8009996:	2100      	movs	r1, #0
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fa2c 	bl	8009df6 <USBH_CtlReq>
 800999e:	4603      	mov	r3, r0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	789b      	ldrb	r3, [r3, #2]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d10e      	bne.n	80099da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2209      	movs	r2, #9
 80099c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	887a      	ldrh	r2, [r7, #2]
 80099cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80099da:	2200      	movs	r2, #0
 80099dc:	2100      	movs	r1, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa09 	bl	8009df6 <USBH_CtlReq>
 80099e4:	4603      	mov	r3, r0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	789b      	ldrb	r3, [r3, #2]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d10f      	bne.n	8009a22 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009a22:	2200      	movs	r2, #0
 8009a24:	2100      	movs	r1, #0
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f9e5 	bl	8009df6 <USBH_CtlReq>
 8009a2c:	4603      	mov	r3, r0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	789b      	ldrb	r3, [r3, #2]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d10f      	bne.n	8009a6a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f9c1 	bl	8009df6 <USBH_CtlReq>
 8009a74:	4603      	mov	r3, r0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b085      	sub	sp, #20
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	60f8      	str	r0, [r7, #12]
 8009a86:	60b9      	str	r1, [r7, #8]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	781a      	ldrb	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	785a      	ldrb	r2, [r3, #1]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	3303      	adds	r3, #3
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	791a      	ldrb	r2, [r3, #4]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	795a      	ldrb	r2, [r3, #5]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	799a      	ldrb	r2, [r3, #6]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	79da      	ldrb	r2, [r3, #7]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009ad8:	88fb      	ldrh	r3, [r7, #6]
 8009ada:	2b08      	cmp	r3, #8
 8009adc:	d939      	bls.n	8009b52 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	3309      	adds	r3, #9
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	021b      	lsls	r3, r3, #8
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	4313      	orrs	r3, r2
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	330a      	adds	r3, #10
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	330b      	adds	r3, #11
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	330c      	adds	r3, #12
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	330d      	adds	r3, #13
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	021b      	lsls	r3, r3, #8
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	7b9a      	ldrb	r2, [r3, #14]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	7bda      	ldrb	r2, [r3, #15]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	7c1a      	ldrb	r2, [r3, #16]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	7c5a      	ldrb	r2, [r3, #17]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	745a      	strb	r2, [r3, #17]
  }
}
 8009b52:	bf00      	nop
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b08a      	sub	sp, #40	; 0x28
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	60b9      	str	r1, [r7, #8]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	781a      	ldrb	r2, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	785a      	ldrb	r2, [r3, #1]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	3302      	adds	r3, #2
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	3303      	adds	r3, #3
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	791a      	ldrb	r2, [r3, #4]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	795a      	ldrb	r2, [r3, #5]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	799a      	ldrb	r2, [r3, #6]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	79da      	ldrb	r2, [r3, #7]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	7a1a      	ldrb	r2, [r3, #8]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009bd4:	88fb      	ldrh	r3, [r7, #6]
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	d95f      	bls.n	8009c9a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009bda:	2309      	movs	r3, #9
 8009bdc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009be2:	e051      	b.n	8009c88 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009be4:	f107 0316 	add.w	r3, r7, #22
 8009be8:	4619      	mov	r1, r3
 8009bea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bec:	f000 f8e8 	bl	8009dc0 <USBH_GetNextDesc>
 8009bf0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	785b      	ldrb	r3, [r3, #1]
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d146      	bne.n	8009c88 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bfe:	221a      	movs	r2, #26
 8009c00:	fb02 f303 	mul.w	r3, r2, r3
 8009c04:	3308      	adds	r3, #8
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	4413      	add	r3, r2
 8009c0a:	3302      	adds	r3, #2
 8009c0c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c10:	69f8      	ldr	r0, [r7, #28]
 8009c12:	f000 f846 	bl	8009ca2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c20:	e022      	b.n	8009c68 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c22:	f107 0316 	add.w	r3, r7, #22
 8009c26:	4619      	mov	r1, r3
 8009c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c2a:	f000 f8c9 	bl	8009dc0 <USBH_GetNextDesc>
 8009c2e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b05      	cmp	r3, #5
 8009c36:	d117      	bne.n	8009c68 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c3c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009c40:	3201      	adds	r2, #1
 8009c42:	00d2      	lsls	r2, r2, #3
 8009c44:	211a      	movs	r1, #26
 8009c46:	fb01 f303 	mul.w	r3, r1, r3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4413      	add	r3, r2
 8009c52:	3304      	adds	r3, #4
 8009c54:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c58:	69b8      	ldr	r0, [r7, #24]
 8009c5a:	f000 f851 	bl	8009d00 <USBH_ParseEPDesc>
            ep_ix++;
 8009c5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009c62:	3301      	adds	r3, #1
 8009c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	791b      	ldrb	r3, [r3, #4]
 8009c6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d204      	bcs.n	8009c7e <USBH_ParseCfgDesc+0x120>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	885a      	ldrh	r2, [r3, #2]
 8009c78:	8afb      	ldrh	r3, [r7, #22]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d8d1      	bhi.n	8009c22 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c82:	3301      	adds	r3, #1
 8009c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d804      	bhi.n	8009c9a <USBH_ParseCfgDesc+0x13c>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	885a      	ldrh	r2, [r3, #2]
 8009c94:	8afb      	ldrh	r3, [r7, #22]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d8a4      	bhi.n	8009be4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009c9a:	bf00      	nop
 8009c9c:	3728      	adds	r7, #40	; 0x28
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b083      	sub	sp, #12
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781a      	ldrb	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	785a      	ldrb	r2, [r3, #1]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	789a      	ldrb	r2, [r3, #2]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	78da      	ldrb	r2, [r3, #3]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	791a      	ldrb	r2, [r3, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	795a      	ldrb	r2, [r3, #5]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	799a      	ldrb	r2, [r3, #6]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	79da      	ldrb	r2, [r3, #7]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	7a1a      	ldrb	r2, [r3, #8]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	721a      	strb	r2, [r3, #8]
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781a      	ldrb	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	785a      	ldrb	r2, [r3, #1]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	789a      	ldrb	r2, [r3, #2]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	78da      	ldrb	r2, [r3, #3]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	3305      	adds	r3, #5
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	021b      	lsls	r3, r3, #8
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	799a      	ldrb	r2, [r3, #6]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	719a      	strb	r2, [r3, #6]
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b087      	sub	sp, #28
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	4613      	mov	r3, r2
 8009d66:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d120      	bne.n	8009db4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	1e9a      	subs	r2, r3, #2
 8009d78:	88fb      	ldrh	r3, [r7, #6]
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	bf28      	it	cs
 8009d7e:	4613      	movcs	r3, r2
 8009d80:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3302      	adds	r3, #2
 8009d86:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009d88:	2300      	movs	r3, #0
 8009d8a:	82fb      	strh	r3, [r7, #22]
 8009d8c:	e00b      	b.n	8009da6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009d8e:	8afb      	ldrh	r3, [r7, #22]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	781a      	ldrb	r2, [r3, #0]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009da0:	8afb      	ldrh	r3, [r7, #22]
 8009da2:	3302      	adds	r3, #2
 8009da4:	82fb      	strh	r3, [r7, #22]
 8009da6:	8afa      	ldrh	r2, [r7, #22]
 8009da8:	8abb      	ldrh	r3, [r7, #20]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d3ef      	bcc.n	8009d8e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2200      	movs	r2, #0
 8009db2:	701a      	strb	r2, [r3, #0]
  }
}
 8009db4:	bf00      	nop
 8009db6:	371c      	adds	r7, #28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	881a      	ldrh	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009de8:	68fb      	ldr	r3, [r7, #12]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b086      	sub	sp, #24
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	4613      	mov	r3, r2
 8009e02:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009e04:	2301      	movs	r3, #1
 8009e06:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	789b      	ldrb	r3, [r3, #2]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d002      	beq.n	8009e16 <USBH_CtlReq+0x20>
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d01d      	beq.n	8009e50 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009e14:	e043      	b.n	8009e9e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	88fa      	ldrh	r2, [r7, #6]
 8009e20:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2201      	movs	r2, #1
 8009e26:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2203      	movs	r2, #3
 8009e36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e46:	2200      	movs	r2, #0
 8009e48:	4619      	mov	r1, r3
 8009e4a:	f000 fc63 	bl	800a714 <osMessagePut>
      break;
 8009e4e:	e026      	b.n	8009e9e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 f829 	bl	8009ea8 <USBH_HandleControl>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <USBH_CtlReq+0x70>
 8009e60:	7dfb      	ldrb	r3, [r7, #23]
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d106      	bne.n	8009e74 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	761a      	strb	r2, [r3, #24]
 8009e72:	e005      	b.n	8009e80 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d102      	bne.n	8009e80 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2203      	movs	r2, #3
 8009e84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e94:	2200      	movs	r2, #0
 8009e96:	4619      	mov	r1, r3
 8009e98:	f000 fc3c 	bl	800a714 <osMessagePut>
      break;
 8009e9c:	bf00      	nop
  }
  return status;
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af02      	add	r7, sp, #8
 8009eae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	7e1b      	ldrb	r3, [r3, #24]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	2b0a      	cmp	r3, #10
 8009ec0:	f200 822b 	bhi.w	800a31a <USBH_HandleControl+0x472>
 8009ec4:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <USBH_HandleControl+0x24>)
 8009ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eca:	bf00      	nop
 8009ecc:	08009ef9 	.word	0x08009ef9
 8009ed0:	08009f13 	.word	0x08009f13
 8009ed4:	08009fb5 	.word	0x08009fb5
 8009ed8:	08009fdb 	.word	0x08009fdb
 8009edc:	0800a067 	.word	0x0800a067
 8009ee0:	0800a093 	.word	0x0800a093
 8009ee4:	0800a155 	.word	0x0800a155
 8009ee8:	0800a177 	.word	0x0800a177
 8009eec:	0800a209 	.word	0x0800a209
 8009ef0:	0800a231 	.word	0x0800a231
 8009ef4:	0800a2c3 	.word	0x0800a2c3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f103 0110 	add.w	r1, r3, #16
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	795b      	ldrb	r3, [r3, #5]
 8009f02:	461a      	mov	r2, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fa19 	bl	800a33c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	761a      	strb	r2, [r3, #24]
      break;
 8009f10:	e20e      	b.n	800a330 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	795b      	ldrb	r3, [r3, #5]
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f002 fffb 	bl	800cf14 <USBH_LL_GetURBState>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d12c      	bne.n	8009f82 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	7c1b      	ldrb	r3, [r3, #16]
 8009f2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	8adb      	ldrh	r3, [r3, #22]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009f3a:	7b7b      	ldrb	r3, [r7, #13]
 8009f3c:	2b80      	cmp	r3, #128	; 0x80
 8009f3e:	d103      	bne.n	8009f48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2203      	movs	r2, #3
 8009f44:	761a      	strb	r2, [r3, #24]
 8009f46:	e00d      	b.n	8009f64 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2205      	movs	r2, #5
 8009f4c:	761a      	strb	r2, [r3, #24]
 8009f4e:	e009      	b.n	8009f64 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009f50:	7b7b      	ldrb	r3, [r7, #13]
 8009f52:	2b80      	cmp	r3, #128	; 0x80
 8009f54:	d103      	bne.n	8009f5e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2209      	movs	r2, #9
 8009f5a:	761a      	strb	r2, [r3, #24]
 8009f5c:	e002      	b.n	8009f64 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2207      	movs	r2, #7
 8009f62:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2203      	movs	r2, #3
 8009f68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	f000 fbca 	bl	800a714 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f80:	e1cd      	b.n	800a31e <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d003      	beq.n	8009f90 <USBH_HandleControl+0xe8>
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	f040 81c7 	bne.w	800a31e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	220b      	movs	r2, #11
 8009f94:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009faa:	2200      	movs	r2, #0
 8009fac:	4619      	mov	r1, r3
 8009fae:	f000 fbb1 	bl	800a714 <osMessagePut>
      break;
 8009fb2:	e1b4      	b.n	800a31e <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6899      	ldr	r1, [r3, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	899a      	ldrh	r2, [r3, #12]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	791b      	ldrb	r3, [r3, #4]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f9f4 	bl	800a3ba <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2204      	movs	r2, #4
 8009fd6:	761a      	strb	r2, [r3, #24]
      break;
 8009fd8:	e1aa      	b.n	800a330 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	791b      	ldrb	r3, [r3, #4]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f002 ff97 	bl	800cf14 <USBH_LL_GetURBState>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d110      	bne.n	800a012 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2209      	movs	r2, #9
 8009ff4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2203      	movs	r2, #3
 8009ffa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a00a:	2200      	movs	r2, #0
 800a00c:	4619      	mov	r1, r3
 800a00e:	f000 fb81 	bl	800a714 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	2b05      	cmp	r3, #5
 800a016:	d110      	bne.n	800a03a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a018:	2303      	movs	r3, #3
 800a01a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2203      	movs	r2, #3
 800a020:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a030:	2200      	movs	r2, #0
 800a032:	4619      	mov	r1, r3
 800a034:	f000 fb6e 	bl	800a714 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a038:	e173      	b.n	800a322 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	f040 8170 	bne.w	800a322 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	220b      	movs	r2, #11
 800a046:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2203      	movs	r2, #3
 800a04c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a05c:	2200      	movs	r2, #0
 800a05e:	4619      	mov	r1, r3
 800a060:	f000 fb58 	bl	800a714 <osMessagePut>
      break;
 800a064:	e15d      	b.n	800a322 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6899      	ldr	r1, [r3, #8]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	899a      	ldrh	r2, [r3, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	7958      	ldrb	r0, [r3, #5]
 800a072:	2301      	movs	r3, #1
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	4603      	mov	r3, r0
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f979 	bl	800a370 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a084:	b29a      	uxth	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2206      	movs	r2, #6
 800a08e:	761a      	strb	r2, [r3, #24]
      break;
 800a090:	e14e      	b.n	800a330 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	795b      	ldrb	r3, [r3, #5]
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f002 ff3b 	bl	800cf14 <USBH_LL_GetURBState>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a0a2:	7bbb      	ldrb	r3, [r7, #14]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d111      	bne.n	800a0cc <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2207      	movs	r2, #7
 800a0ac:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	f000 fb25 	bl	800a714 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a0ca:	e12c      	b.n	800a326 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800a0cc:	7bbb      	ldrb	r3, [r7, #14]
 800a0ce:	2b05      	cmp	r3, #5
 800a0d0:	d113      	bne.n	800a0fa <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	220c      	movs	r2, #12
 800a0d6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2203      	movs	r2, #3
 800a0e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	f000 fb0e 	bl	800a714 <osMessagePut>
      break;
 800a0f8:	e115      	b.n	800a326 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d111      	bne.n	800a124 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2205      	movs	r2, #5
 800a104:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2203      	movs	r2, #3
 800a10a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a11a:	2200      	movs	r2, #0
 800a11c:	4619      	mov	r1, r3
 800a11e:	f000 faf9 	bl	800a714 <osMessagePut>
      break;
 800a122:	e100      	b.n	800a326 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800a124:	7bbb      	ldrb	r3, [r7, #14]
 800a126:	2b04      	cmp	r3, #4
 800a128:	f040 80fd 	bne.w	800a326 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	220b      	movs	r2, #11
 800a130:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a132:	2302      	movs	r3, #2
 800a134:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2203      	movs	r2, #3
 800a13a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a14a:	2200      	movs	r2, #0
 800a14c:	4619      	mov	r1, r3
 800a14e:	f000 fae1 	bl	800a714 <osMessagePut>
      break;
 800a152:	e0e8      	b.n	800a326 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	791b      	ldrb	r3, [r3, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	2100      	movs	r1, #0
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f92c 	bl	800a3ba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a168:	b29a      	uxth	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2208      	movs	r2, #8
 800a172:	761a      	strb	r2, [r3, #24]

      break;
 800a174:	e0dc      	b.n	800a330 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	791b      	ldrb	r3, [r3, #4]
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f002 fec9 	bl	800cf14 <USBH_LL_GetURBState>
 800a182:	4603      	mov	r3, r0
 800a184:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d113      	bne.n	800a1b4 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	220d      	movs	r2, #13
 800a190:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2203      	movs	r2, #3
 800a19a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f000 fab1 	bl	800a714 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1b2:	e0ba      	b.n	800a32a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d111      	bne.n	800a1de <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	220b      	movs	r2, #11
 800a1be:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2203      	movs	r2, #3
 800a1c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	f000 fa9c 	bl	800a714 <osMessagePut>
      break;
 800a1dc:	e0a5      	b.n	800a32a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
 800a1e0:	2b05      	cmp	r3, #5
 800a1e2:	f040 80a2 	bne.w	800a32a <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2203      	movs	r2, #3
 800a1ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1fe:	2200      	movs	r2, #0
 800a200:	4619      	mov	r1, r3
 800a202:	f000 fa87 	bl	800a714 <osMessagePut>
      break;
 800a206:	e090      	b.n	800a32a <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	795a      	ldrb	r2, [r3, #5]
 800a20c:	2301      	movs	r3, #1
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	4613      	mov	r3, r2
 800a212:	2200      	movs	r2, #0
 800a214:	2100      	movs	r1, #0
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f8aa 	bl	800a370 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	220a      	movs	r2, #10
 800a22c:	761a      	strb	r2, [r3, #24]
      break;
 800a22e:	e07f      	b.n	800a330 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	795b      	ldrb	r3, [r3, #5]
 800a234:	4619      	mov	r1, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f002 fe6c 	bl	800cf14 <USBH_LL_GetURBState>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a240:	7bbb      	ldrb	r3, [r7, #14]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d113      	bne.n	800a26e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	220d      	movs	r2, #13
 800a24e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2203      	movs	r2, #3
 800a254:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a264:	2200      	movs	r2, #0
 800a266:	4619      	mov	r1, r3
 800a268:	f000 fa54 	bl	800a714 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a26c:	e05f      	b.n	800a32e <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d111      	bne.n	800a298 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2209      	movs	r2, #9
 800a278:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2203      	movs	r2, #3
 800a27e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a28e:	2200      	movs	r2, #0
 800a290:	4619      	mov	r1, r3
 800a292:	f000 fa3f 	bl	800a714 <osMessagePut>
      break;
 800a296:	e04a      	b.n	800a32e <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800a298:	7bbb      	ldrb	r3, [r7, #14]
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d147      	bne.n	800a32e <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	220b      	movs	r2, #11
 800a2a2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	f000 fa2a 	bl	800a714 <osMessagePut>
      break;
 800a2c0:	e035      	b.n	800a32e <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	7e5b      	ldrb	r3, [r3, #25]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	765a      	strb	r2, [r3, #25]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	7e5b      	ldrb	r3, [r3, #25]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d806      	bhi.n	800a2e4 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a2e2:	e025      	b.n	800a330 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2ea:	2106      	movs	r1, #6
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	795b      	ldrb	r3, [r3, #5]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f90d 	bl	800a51c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	791b      	ldrb	r3, [r3, #4]
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f907 	bl	800a51c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a314:	2302      	movs	r3, #2
 800a316:	73fb      	strb	r3, [r7, #15]
      break;
 800a318:	e00a      	b.n	800a330 <USBH_HandleControl+0x488>

    default:
      break;
 800a31a:	bf00      	nop
 800a31c:	e008      	b.n	800a330 <USBH_HandleControl+0x488>
      break;
 800a31e:	bf00      	nop
 800a320:	e006      	b.n	800a330 <USBH_HandleControl+0x488>
      break;
 800a322:	bf00      	nop
 800a324:	e004      	b.n	800a330 <USBH_HandleControl+0x488>
      break;
 800a326:	bf00      	nop
 800a328:	e002      	b.n	800a330 <USBH_HandleControl+0x488>
      break;
 800a32a:	bf00      	nop
 800a32c:	e000      	b.n	800a330 <USBH_HandleControl+0x488>
      break;
 800a32e:	bf00      	nop
  }

  return status;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop

0800a33c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b088      	sub	sp, #32
 800a340:	af04      	add	r7, sp, #16
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a34a:	79f9      	ldrb	r1, [r7, #7]
 800a34c:	2300      	movs	r3, #0
 800a34e:	9303      	str	r3, [sp, #12]
 800a350:	2308      	movs	r3, #8
 800a352:	9302      	str	r3, [sp, #8]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	2300      	movs	r3, #0
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	2300      	movs	r3, #0
 800a35e:	2200      	movs	r2, #0
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f002 fda6 	bl	800ceb2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af04      	add	r7, sp, #16
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	4611      	mov	r1, r2
 800a37c:	461a      	mov	r2, r3
 800a37e:	460b      	mov	r3, r1
 800a380:	80fb      	strh	r3, [r7, #6]
 800a382:	4613      	mov	r3, r2
 800a384:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a394:	7979      	ldrb	r1, [r7, #5]
 800a396:	7e3b      	ldrb	r3, [r7, #24]
 800a398:	9303      	str	r3, [sp, #12]
 800a39a:	88fb      	ldrh	r3, [r7, #6]
 800a39c:	9302      	str	r3, [sp, #8]
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f002 fd81 	bl	800ceb2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b088      	sub	sp, #32
 800a3be:	af04      	add	r7, sp, #16
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	60b9      	str	r1, [r7, #8]
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	80fb      	strh	r3, [r7, #6]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3d0:	7979      	ldrb	r1, [r7, #5]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	9303      	str	r3, [sp, #12]
 800a3d6:	88fb      	ldrh	r3, [r7, #6]
 800a3d8:	9302      	str	r3, [sp, #8]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	2301      	movs	r3, #1
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f002 fd63 	bl	800ceb2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a3ec:	2300      	movs	r3, #0

}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b088      	sub	sp, #32
 800a3fa:	af04      	add	r7, sp, #16
 800a3fc:	60f8      	str	r0, [r7, #12]
 800a3fe:	60b9      	str	r1, [r7, #8]
 800a400:	4611      	mov	r1, r2
 800a402:	461a      	mov	r2, r3
 800a404:	460b      	mov	r3, r1
 800a406:	80fb      	strh	r3, [r7, #6]
 800a408:	4613      	mov	r3, r2
 800a40a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a41a:	7979      	ldrb	r1, [r7, #5]
 800a41c:	7e3b      	ldrb	r3, [r7, #24]
 800a41e:	9303      	str	r3, [sp, #12]
 800a420:	88fb      	ldrh	r3, [r7, #6]
 800a422:	9302      	str	r3, [sp, #8]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	9301      	str	r3, [sp, #4]
 800a428:	2301      	movs	r3, #1
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	2302      	movs	r3, #2
 800a42e:	2200      	movs	r2, #0
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f002 fd3e 	bl	800ceb2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af04      	add	r7, sp, #16
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	4611      	mov	r1, r2
 800a44c:	461a      	mov	r2, r3
 800a44e:	460b      	mov	r3, r1
 800a450:	80fb      	strh	r3, [r7, #6]
 800a452:	4613      	mov	r3, r2
 800a454:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a456:	7979      	ldrb	r1, [r7, #5]
 800a458:	2300      	movs	r3, #0
 800a45a:	9303      	str	r3, [sp, #12]
 800a45c:	88fb      	ldrh	r3, [r7, #6]
 800a45e:	9302      	str	r3, [sp, #8]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	2301      	movs	r3, #1
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	2302      	movs	r3, #2
 800a46a:	2201      	movs	r2, #1
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f002 fd20 	bl	800ceb2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af04      	add	r7, sp, #16
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	461a      	mov	r2, r3
 800a48a:	4603      	mov	r3, r0
 800a48c:	70fb      	strb	r3, [r7, #3]
 800a48e:	460b      	mov	r3, r1
 800a490:	70bb      	strb	r3, [r7, #2]
 800a492:	4613      	mov	r3, r2
 800a494:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a496:	7878      	ldrb	r0, [r7, #1]
 800a498:	78ba      	ldrb	r2, [r7, #2]
 800a49a:	78f9      	ldrb	r1, [r7, #3]
 800a49c:	8b3b      	ldrh	r3, [r7, #24]
 800a49e:	9302      	str	r3, [sp, #8]
 800a4a0:	7d3b      	ldrb	r3, [r7, #20]
 800a4a2:	9301      	str	r3, [sp, #4]
 800a4a4:	7c3b      	ldrb	r3, [r7, #16]
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f002 fcb3 	bl	800ce16 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a4c6:	78fb      	ldrb	r3, [r7, #3]
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f002 fcd2 	bl	800ce74 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f836 	bl	800a558 <USBH_GetFreePipe>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a4f0:	89fb      	ldrh	r3, [r7, #14]
 800a4f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d00a      	beq.n	800a510 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a4fa:	78fa      	ldrb	r2, [r7, #3]
 800a4fc:	89fb      	ldrh	r3, [r7, #14]
 800a4fe:	f003 030f 	and.w	r3, r3, #15
 800a502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a506:	6879      	ldr	r1, [r7, #4]
 800a508:	33e0      	adds	r3, #224	; 0xe0
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	440b      	add	r3, r1
 800a50e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a510:	89fb      	ldrh	r3, [r7, #14]
 800a512:	b2db      	uxtb	r3, r3
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	460b      	mov	r3, r1
 800a526:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	2b0a      	cmp	r3, #10
 800a52c:	d80d      	bhi.n	800a54a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a52e:	78fb      	ldrb	r3, [r7, #3]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	33e0      	adds	r3, #224	; 0xe0
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a540:	6879      	ldr	r1, [r7, #4]
 800a542:	33e0      	adds	r3, #224	; 0xe0
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	440b      	add	r3, r1
 800a548:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
 800a568:	e00f      	b.n	800a58a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	33e0      	adds	r3, #224	; 0xe0
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d102      	bne.n	800a584 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
 800a580:	b29b      	uxth	r3, r3
 800a582:	e007      	b.n	800a594 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a584:	7bfb      	ldrb	r3, [r7, #15]
 800a586:	3301      	adds	r3, #1
 800a588:	73fb      	strb	r3, [r7, #15]
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	2b0a      	cmp	r3, #10
 800a58e:	d9ec      	bls.n	800a56a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a590:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a5ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5b2:	2b84      	cmp	r3, #132	; 0x84
 800a5b4:	d005      	beq.n	800a5c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a5b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4413      	add	r3, r2
 800a5be:	3303      	adds	r3, #3
 800a5c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5d6:	f3ef 8305 	mrs	r3, IPSR
 800a5da:	607b      	str	r3, [r7, #4]
  return(result);
 800a5dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	bf14      	ite	ne
 800a5e2:	2301      	movne	r3, #1
 800a5e4:	2300      	moveq	r3, #0
 800a5e6:	b2db      	uxtb	r3, r3
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a5f8:	f001 f8f4 	bl	800b7e4 <vTaskStartScheduler>
  
  return osOK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	bd80      	pop	{r7, pc}

0800a602 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a602:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a604:	b089      	sub	sp, #36	; 0x24
 800a606:	af04      	add	r7, sp, #16
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d020      	beq.n	800a656 <osThreadCreate+0x54>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d01c      	beq.n	800a656 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685c      	ldr	r4, [r3, #4]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681d      	ldr	r5, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	691e      	ldr	r6, [r3, #16]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff ffb6 	bl	800a5a0 <makeFreeRtosPriority>
 800a634:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a63e:	9202      	str	r2, [sp, #8]
 800a640:	9301      	str	r3, [sp, #4]
 800a642:	9100      	str	r1, [sp, #0]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	4632      	mov	r2, r6
 800a648:	4629      	mov	r1, r5
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 fefb 	bl	800b446 <xTaskCreateStatic>
 800a650:	4603      	mov	r3, r0
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e01c      	b.n	800a690 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685c      	ldr	r4, [r3, #4]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a662:	b29e      	uxth	r6, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff ff98 	bl	800a5a0 <makeFreeRtosPriority>
 800a670:	4602      	mov	r2, r0
 800a672:	f107 030c 	add.w	r3, r7, #12
 800a676:	9301      	str	r3, [sp, #4]
 800a678:	9200      	str	r2, [sp, #0]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	4632      	mov	r2, r6
 800a67e:	4629      	mov	r1, r5
 800a680:	4620      	mov	r0, r4
 800a682:	f000 ff3a 	bl	800b4fa <xTaskCreate>
 800a686:	4603      	mov	r3, r0
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d001      	beq.n	800a690 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	e000      	b.n	800a692 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a690:	68fb      	ldr	r3, [r7, #12]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a69a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b084      	sub	sp, #16
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <osDelay+0x16>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	e000      	b.n	800a6b2 <osDelay+0x18>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f001 f862 	bl	800b77c <vTaskDelay>
  
  return osOK;
 800a6b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a6c2:	b590      	push	{r4, r7, lr}
 800a6c4:	b085      	sub	sp, #20
 800a6c6:	af02      	add	r7, sp, #8
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d012      	beq.n	800a6fa <osMessageCreate+0x38>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00e      	beq.n	800a6fa <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6859      	ldr	r1, [r3, #4]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	689a      	ldr	r2, [r3, #8]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68dc      	ldr	r4, [r3, #12]
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	4623      	mov	r3, r4
 800a6f2:	f000 f9df 	bl	800aab4 <xQueueGenericCreateStatic>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	e008      	b.n	800a70c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	4619      	mov	r1, r3
 800a706:	f000 fa48 	bl	800ab9a <xQueueGenericCreate>
 800a70a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	bd90      	pop	{r4, r7, pc}

0800a714 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a720:	2300      	movs	r3, #0
 800a722:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <osMessagePut+0x1e>
    ticks = 1;
 800a72e:	2301      	movs	r3, #1
 800a730:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a732:	f7ff ff4d 	bl	800a5d0 <inHandlerMode>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d018      	beq.n	800a76e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a73c:	f107 0210 	add.w	r2, r7, #16
 800a740:	f107 0108 	add.w	r1, r7, #8
 800a744:	2300      	movs	r3, #0
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 fb80 	bl	800ae4c <xQueueGenericSendFromISR>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d001      	beq.n	800a756 <osMessagePut+0x42>
      return osErrorOS;
 800a752:	23ff      	movs	r3, #255	; 0xff
 800a754:	e018      	b.n	800a788 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d014      	beq.n	800a786 <osMessagePut+0x72>
 800a75c:	4b0c      	ldr	r3, [pc, #48]	; (800a790 <osMessagePut+0x7c>)
 800a75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	e00b      	b.n	800a786 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a76e:	f107 0108 	add.w	r1, r7, #8
 800a772:	2300      	movs	r3, #0
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f000 fa6e 	bl	800ac58 <xQueueGenericSend>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d001      	beq.n	800a786 <osMessagePut+0x72>
      return osErrorOS;
 800a782:	23ff      	movs	r3, #255	; 0xff
 800a784:	e000      	b.n	800a788 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3718      	adds	r7, #24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	e000ed04 	.word	0xe000ed04

0800a794 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a794:	b590      	push	{r4, r7, lr}
 800a796:	b08b      	sub	sp, #44	; 0x2c
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10a      	bne.n	800a7c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a7ae:	2380      	movs	r3, #128	; 0x80
 800a7b0:	617b      	str	r3, [r7, #20]
    return event;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	461c      	mov	r4, r3
 800a7b6:	f107 0314 	add.w	r3, r7, #20
 800a7ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a7c2:	e054      	b.n	800a86e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d2:	d103      	bne.n	800a7dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7da:	e009      	b.n	800a7f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d006      	beq.n	800a7f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d101      	bne.n	800a7f0 <osMessageGet+0x5c>
      ticks = 1;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a7f0:	f7ff feee 	bl	800a5d0 <inHandlerMode>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d01c      	beq.n	800a834 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a7fa:	f107 0220 	add.w	r2, r7, #32
 800a7fe:	f107 0314 	add.w	r3, r7, #20
 800a802:	3304      	adds	r3, #4
 800a804:	4619      	mov	r1, r3
 800a806:	68b8      	ldr	r0, [r7, #8]
 800a808:	f000 fc90 	bl	800b12c <xQueueReceiveFromISR>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d102      	bne.n	800a818 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a812:	2310      	movs	r3, #16
 800a814:	617b      	str	r3, [r7, #20]
 800a816:	e001      	b.n	800a81c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a818:	2300      	movs	r3, #0
 800a81a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d01d      	beq.n	800a85e <osMessageGet+0xca>
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <osMessageGet+0xe4>)
 800a824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	e014      	b.n	800a85e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a834:	f107 0314 	add.w	r3, r7, #20
 800a838:	3304      	adds	r3, #4
 800a83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83c:	4619      	mov	r1, r3
 800a83e:	68b8      	ldr	r0, [r7, #8]
 800a840:	f000 fb98 	bl	800af74 <xQueueReceive>
 800a844:	4603      	mov	r3, r0
 800a846:	2b01      	cmp	r3, #1
 800a848:	d102      	bne.n	800a850 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a84a:	2310      	movs	r3, #16
 800a84c:	617b      	str	r3, [r7, #20]
 800a84e:	e006      	b.n	800a85e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a852:	2b00      	cmp	r3, #0
 800a854:	d101      	bne.n	800a85a <osMessageGet+0xc6>
 800a856:	2300      	movs	r3, #0
 800a858:	e000      	b.n	800a85c <osMessageGet+0xc8>
 800a85a:	2340      	movs	r3, #64	; 0x40
 800a85c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	461c      	mov	r4, r3
 800a862:	f107 0314 	add.w	r3, r7, #20
 800a866:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a86a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	372c      	adds	r7, #44	; 0x2c
 800a872:	46bd      	mov	sp, r7
 800a874:	bd90      	pop	{r4, r7, pc}
 800a876:	bf00      	nop
 800a878:	e000ed04 	.word	0xe000ed04

0800a87c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f103 0208 	add.w	r2, r3, #8
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f04f 32ff 	mov.w	r2, #4294967295
 800a894:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f103 0208 	add.w	r2, r3, #8
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f103 0208 	add.w	r2, r3, #8
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a8ca:	bf00      	nop
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	1c5a      	adds	r2, r3, #1
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	601a      	str	r2, [r3, #0]
}
 800a912:	bf00      	nop
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a91e:	b480      	push	{r7}
 800a920:	b085      	sub	sp, #20
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a934:	d103      	bne.n	800a93e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	e00c      	b.n	800a958 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3308      	adds	r3, #8
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	e002      	b.n	800a94c <vListInsert+0x2e>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	429a      	cmp	r2, r3
 800a956:	d2f6      	bcs.n	800a946 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	601a      	str	r2, [r3, #0]
}
 800a984:	bf00      	nop
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	6892      	ldr	r2, [r2, #8]
 800a9a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	6852      	ldr	r2, [r2, #4]
 800a9b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d103      	bne.n	800a9c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689a      	ldr	r2, [r3, #8]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	1e5a      	subs	r2, r3, #1
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d109      	bne.n	800aa0c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	60bb      	str	r3, [r7, #8]
 800aa0a:	e7fe      	b.n	800aa0a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800aa0c:	f001 fd36 	bl	800c47c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa18:	68f9      	ldr	r1, [r7, #12]
 800aa1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa1c:	fb01 f303 	mul.w	r3, r1, r3
 800aa20:	441a      	add	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	68f9      	ldr	r1, [r7, #12]
 800aa40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa42:	fb01 f303 	mul.w	r3, r1, r3
 800aa46:	441a      	add	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	22ff      	movs	r2, #255	; 0xff
 800aa50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	22ff      	movs	r2, #255	; 0xff
 800aa58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d114      	bne.n	800aa8c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d01a      	beq.n	800aaa0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	3310      	adds	r3, #16
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f001 f91c 	bl	800bcac <xTaskRemoveFromEventList>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d012      	beq.n	800aaa0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa7a:	4b0d      	ldr	r3, [pc, #52]	; (800aab0 <xQueueGenericReset+0xcc>)
 800aa7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	e009      	b.n	800aaa0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3310      	adds	r3, #16
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7ff fef3 	bl	800a87c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3324      	adds	r3, #36	; 0x24
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff feee 	bl	800a87c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aaa0:	f001 fd1a 	bl	800c4d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aaa4:	2301      	movs	r3, #1
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	e000ed04 	.word	0xe000ed04

0800aab4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08e      	sub	sp, #56	; 0x38
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d109      	bne.n	800aadc <xQueueGenericCreateStatic+0x28>
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aada:	e7fe      	b.n	800aada <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d109      	bne.n	800aaf6 <xQueueGenericCreateStatic+0x42>
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf4:	e7fe      	b.n	800aaf4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <xQueueGenericCreateStatic+0x4e>
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <xQueueGenericCreateStatic+0x52>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e000      	b.n	800ab08 <xQueueGenericCreateStatic+0x54>
 800ab06:	2300      	movs	r3, #0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d109      	bne.n	800ab20 <xQueueGenericCreateStatic+0x6c>
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	623b      	str	r3, [r7, #32]
 800ab1e:	e7fe      	b.n	800ab1e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d102      	bne.n	800ab2c <xQueueGenericCreateStatic+0x78>
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <xQueueGenericCreateStatic+0x7c>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e000      	b.n	800ab32 <xQueueGenericCreateStatic+0x7e>
 800ab30:	2300      	movs	r3, #0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d109      	bne.n	800ab4a <xQueueGenericCreateStatic+0x96>
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	61fb      	str	r3, [r7, #28]
 800ab48:	e7fe      	b.n	800ab48 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab4a:	2348      	movs	r3, #72	; 0x48
 800ab4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	2b48      	cmp	r3, #72	; 0x48
 800ab52:	d009      	beq.n	800ab68 <xQueueGenericCreateStatic+0xb4>
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	61bb      	str	r3, [r7, #24]
 800ab66:	e7fe      	b.n	800ab66 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00d      	beq.n	800ab90 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	4613      	mov	r3, r2
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	68b9      	ldr	r1, [r7, #8]
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 f844 	bl	800ac18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3730      	adds	r7, #48	; 0x30
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b08a      	sub	sp, #40	; 0x28
 800ab9e:	af02      	add	r7, sp, #8
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	4613      	mov	r3, r2
 800aba6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d109      	bne.n	800abc2 <xQueueGenericCreate+0x28>
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	613b      	str	r3, [r7, #16]
 800abc0:	e7fe      	b.n	800abc0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d102      	bne.n	800abce <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	61fb      	str	r3, [r7, #28]
 800abcc:	e004      	b.n	800abd8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	fb02 f303 	mul.w	r3, r2, r3
 800abd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	3348      	adds	r3, #72	; 0x48
 800abdc:	4618      	mov	r0, r3
 800abde:	f001 fd67 	bl	800c6b0 <pvPortMalloc>
 800abe2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d011      	beq.n	800ac0e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	3348      	adds	r3, #72	; 0x48
 800abf2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abfc:	79fa      	ldrb	r2, [r7, #7]
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	4613      	mov	r3, r2
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	68b9      	ldr	r1, [r7, #8]
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 f805 	bl	800ac18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac0e:	69bb      	ldr	r3, [r7, #24]
	}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3720      	adds	r7, #32
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d103      	bne.n	800ac34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	e002      	b.n	800ac3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac46:	2101      	movs	r1, #1
 800ac48:	69b8      	ldr	r0, [r7, #24]
 800ac4a:	f7ff fecb 	bl	800a9e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac4e:	bf00      	nop
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08e      	sub	sp, #56	; 0x38
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac66:	2300      	movs	r3, #0
 800ac68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d109      	bne.n	800ac88 <xQueueGenericSend+0x30>
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac86:	e7fe      	b.n	800ac86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d103      	bne.n	800ac96 <xQueueGenericSend+0x3e>
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <xQueueGenericSend+0x42>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <xQueueGenericSend+0x44>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d109      	bne.n	800acb4 <xQueueGenericSend+0x5c>
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24
 800acb2:	e7fe      	b.n	800acb2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d103      	bne.n	800acc2 <xQueueGenericSend+0x6a>
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d101      	bne.n	800acc6 <xQueueGenericSend+0x6e>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e000      	b.n	800acc8 <xQueueGenericSend+0x70>
 800acc6:	2300      	movs	r3, #0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d109      	bne.n	800ace0 <xQueueGenericSend+0x88>
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	623b      	str	r3, [r7, #32]
 800acde:	e7fe      	b.n	800acde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ace0:	f001 f99c 	bl	800c01c <xTaskGetSchedulerState>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d102      	bne.n	800acf0 <xQueueGenericSend+0x98>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <xQueueGenericSend+0x9c>
 800acf0:	2301      	movs	r3, #1
 800acf2:	e000      	b.n	800acf6 <xQueueGenericSend+0x9e>
 800acf4:	2300      	movs	r3, #0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d109      	bne.n	800ad0e <xQueueGenericSend+0xb6>
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	61fb      	str	r3, [r7, #28]
 800ad0c:	e7fe      	b.n	800ad0c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad0e:	f001 fbb5 	bl	800c47c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d302      	bcc.n	800ad24 <xQueueGenericSend+0xcc>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d129      	bne.n	800ad78 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	68b9      	ldr	r1, [r7, #8]
 800ad28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad2a:	f000 fa7c 	bl	800b226 <prvCopyDataToQueue>
 800ad2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d010      	beq.n	800ad5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	3324      	adds	r3, #36	; 0x24
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 ffb5 	bl	800bcac <xTaskRemoveFromEventList>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d013      	beq.n	800ad70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad48:	4b3f      	ldr	r3, [pc, #252]	; (800ae48 <xQueueGenericSend+0x1f0>)
 800ad4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	e00a      	b.n	800ad70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d007      	beq.n	800ad70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad60:	4b39      	ldr	r3, [pc, #228]	; (800ae48 <xQueueGenericSend+0x1f0>)
 800ad62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad70:	f001 fbb2 	bl	800c4d8 <vPortExitCritical>
				return pdPASS;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e063      	b.n	800ae40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d103      	bne.n	800ad86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad7e:	f001 fbab 	bl	800c4d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	e05c      	b.n	800ae40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d106      	bne.n	800ad9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad8c:	f107 0314 	add.w	r3, r7, #20
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 ffed 	bl	800bd70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad96:	2301      	movs	r3, #1
 800ad98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad9a:	f001 fb9d 	bl	800c4d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad9e:	f000 fd7f 	bl	800b8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ada2:	f001 fb6b 	bl	800c47c <vPortEnterCritical>
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adac:	b25b      	sxtb	r3, r3
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb2:	d103      	bne.n	800adbc <xQueueGenericSend+0x164>
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adc2:	b25b      	sxtb	r3, r3
 800adc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc8:	d103      	bne.n	800add2 <xQueueGenericSend+0x17a>
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800add2:	f001 fb81 	bl	800c4d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800add6:	1d3a      	adds	r2, r7, #4
 800add8:	f107 0314 	add.w	r3, r7, #20
 800addc:	4611      	mov	r1, r2
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 ffdc 	bl	800bd9c <xTaskCheckForTimeOut>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d124      	bne.n	800ae34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800adea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adec:	f000 fb13 	bl	800b416 <prvIsQueueFull>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d018      	beq.n	800ae28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	3310      	adds	r3, #16
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	4611      	mov	r1, r2
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 ff30 	bl	800bc64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae06:	f000 fa9e 	bl	800b346 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae0a:	f000 fd57 	bl	800b8bc <xTaskResumeAll>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f47f af7c 	bne.w	800ad0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ae16:	4b0c      	ldr	r3, [pc, #48]	; (800ae48 <xQueueGenericSend+0x1f0>)
 800ae18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	e772      	b.n	800ad0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae2a:	f000 fa8c 	bl	800b346 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae2e:	f000 fd45 	bl	800b8bc <xTaskResumeAll>
 800ae32:	e76c      	b.n	800ad0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae36:	f000 fa86 	bl	800b346 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae3a:	f000 fd3f 	bl	800b8bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3738      	adds	r7, #56	; 0x38
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	e000ed04 	.word	0xe000ed04

0800ae4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08e      	sub	sp, #56	; 0x38
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d109      	bne.n	800ae78 <xQueueGenericSendFromISR+0x2c>
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
 800ae76:	e7fe      	b.n	800ae76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d103      	bne.n	800ae86 <xQueueGenericSendFromISR+0x3a>
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <xQueueGenericSendFromISR+0x3e>
 800ae86:	2301      	movs	r3, #1
 800ae88:	e000      	b.n	800ae8c <xQueueGenericSendFromISR+0x40>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d109      	bne.n	800aea4 <xQueueGenericSendFromISR+0x58>
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	623b      	str	r3, [r7, #32]
 800aea2:	e7fe      	b.n	800aea2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d103      	bne.n	800aeb2 <xQueueGenericSendFromISR+0x66>
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d101      	bne.n	800aeb6 <xQueueGenericSendFromISR+0x6a>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e000      	b.n	800aeb8 <xQueueGenericSendFromISR+0x6c>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <xQueueGenericSendFromISR+0x84>
 800aebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	61fb      	str	r3, [r7, #28]
 800aece:	e7fe      	b.n	800aece <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aed0:	f001 fbb0 	bl	800c634 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aed4:	f3ef 8211 	mrs	r2, BASEPRI
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	61ba      	str	r2, [r7, #24]
 800aeea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aeec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aeee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d302      	bcc.n	800af02 <xQueueGenericSendFromISR+0xb6>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d12c      	bne.n	800af5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	68b9      	ldr	r1, [r7, #8]
 800af10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af12:	f000 f988 	bl	800b226 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800af1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1e:	d112      	bne.n	800af46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	d016      	beq.n	800af56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2a:	3324      	adds	r3, #36	; 0x24
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 febd 	bl	800bcac <xTaskRemoveFromEventList>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00e      	beq.n	800af56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00b      	beq.n	800af56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	e007      	b.n	800af56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af4a:	3301      	adds	r3, #1
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	b25a      	sxtb	r2, r3
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af56:	2301      	movs	r3, #1
 800af58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800af5a:	e001      	b.n	800af60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af5c:	2300      	movs	r3, #0
 800af5e:	637b      	str	r3, [r7, #52]	; 0x34
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3738      	adds	r7, #56	; 0x38
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b08c      	sub	sp, #48	; 0x30
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800af80:	2300      	movs	r3, #0
 800af82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d109      	bne.n	800afa2 <xQueueReceive+0x2e>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	623b      	str	r3, [r7, #32]
 800afa0:	e7fe      	b.n	800afa0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d103      	bne.n	800afb0 <xQueueReceive+0x3c>
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <xQueueReceive+0x40>
 800afb0:	2301      	movs	r3, #1
 800afb2:	e000      	b.n	800afb6 <xQueueReceive+0x42>
 800afb4:	2300      	movs	r3, #0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d109      	bne.n	800afce <xQueueReceive+0x5a>
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	61fb      	str	r3, [r7, #28]
 800afcc:	e7fe      	b.n	800afcc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afce:	f001 f825 	bl	800c01c <xTaskGetSchedulerState>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d102      	bne.n	800afde <xQueueReceive+0x6a>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <xQueueReceive+0x6e>
 800afde:	2301      	movs	r3, #1
 800afe0:	e000      	b.n	800afe4 <xQueueReceive+0x70>
 800afe2:	2300      	movs	r3, #0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d109      	bne.n	800affc <xQueueReceive+0x88>
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	e7fe      	b.n	800affa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800affc:	f001 fa3e 	bl	800c47c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d01f      	beq.n	800b04c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b00c:	68b9      	ldr	r1, [r7, #8]
 800b00e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b010:	f000 f973 	bl	800b2fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	1e5a      	subs	r2, r3, #1
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00f      	beq.n	800b044 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	3310      	adds	r3, #16
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fe3f 	bl	800bcac <xTaskRemoveFromEventList>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d007      	beq.n	800b044 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b034:	4b3c      	ldr	r3, [pc, #240]	; (800b128 <xQueueReceive+0x1b4>)
 800b036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b044:	f001 fa48 	bl	800c4d8 <vPortExitCritical>
				return pdPASS;
 800b048:	2301      	movs	r3, #1
 800b04a:	e069      	b.n	800b120 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d103      	bne.n	800b05a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b052:	f001 fa41 	bl	800c4d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b056:	2300      	movs	r3, #0
 800b058:	e062      	b.n	800b120 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d106      	bne.n	800b06e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b060:	f107 0310 	add.w	r3, r7, #16
 800b064:	4618      	mov	r0, r3
 800b066:	f000 fe83 	bl	800bd70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b06a:	2301      	movs	r3, #1
 800b06c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b06e:	f001 fa33 	bl	800c4d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b072:	f000 fc15 	bl	800b8a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b076:	f001 fa01 	bl	800c47c <vPortEnterCritical>
 800b07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b080:	b25b      	sxtb	r3, r3
 800b082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b086:	d103      	bne.n	800b090 <xQueueReceive+0x11c>
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b096:	b25b      	sxtb	r3, r3
 800b098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09c:	d103      	bne.n	800b0a6 <xQueueReceive+0x132>
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0a6:	f001 fa17 	bl	800c4d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0aa:	1d3a      	adds	r2, r7, #4
 800b0ac:	f107 0310 	add.w	r3, r7, #16
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f000 fe72 	bl	800bd9c <xTaskCheckForTimeOut>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d123      	bne.n	800b106 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0c0:	f000 f993 	bl	800b3ea <prvIsQueueEmpty>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d017      	beq.n	800b0fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	3324      	adds	r3, #36	; 0x24
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fdc6 	bl	800bc64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0da:	f000 f934 	bl	800b346 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0de:	f000 fbed 	bl	800b8bc <xTaskResumeAll>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d189      	bne.n	800affc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b0e8:	4b0f      	ldr	r3, [pc, #60]	; (800b128 <xQueueReceive+0x1b4>)
 800b0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	e780      	b.n	800affc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0fc:	f000 f923 	bl	800b346 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b100:	f000 fbdc 	bl	800b8bc <xTaskResumeAll>
 800b104:	e77a      	b.n	800affc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b108:	f000 f91d 	bl	800b346 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b10c:	f000 fbd6 	bl	800b8bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b112:	f000 f96a 	bl	800b3ea <prvIsQueueEmpty>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f43f af6f 	beq.w	800affc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b11e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b120:	4618      	mov	r0, r3
 800b122:	3730      	adds	r7, #48	; 0x30
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	e000ed04 	.word	0xe000ed04

0800b12c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08e      	sub	sp, #56	; 0x38
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d109      	bne.n	800b156 <xQueueReceiveFromISR+0x2a>
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	623b      	str	r3, [r7, #32]
 800b154:	e7fe      	b.n	800b154 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d103      	bne.n	800b164 <xQueueReceiveFromISR+0x38>
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <xQueueReceiveFromISR+0x3c>
 800b164:	2301      	movs	r3, #1
 800b166:	e000      	b.n	800b16a <xQueueReceiveFromISR+0x3e>
 800b168:	2300      	movs	r3, #0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d109      	bne.n	800b182 <xQueueReceiveFromISR+0x56>
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	61fb      	str	r3, [r7, #28]
 800b180:	e7fe      	b.n	800b180 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b182:	f001 fa57 	bl	800c634 <vPortValidateInterruptPriority>
	__asm volatile
 800b186:	f3ef 8211 	mrs	r2, BASEPRI
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	61ba      	str	r2, [r7, #24]
 800b19c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b19e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d02f      	beq.n	800b20e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1b8:	68b9      	ldr	r1, [r7, #8]
 800b1ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1bc:	f000 f89d 	bl	800b2fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	1e5a      	subs	r2, r3, #1
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b1c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d0:	d112      	bne.n	800b1f8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d016      	beq.n	800b208 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	3310      	adds	r3, #16
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 fd64 	bl	800bcac <xTaskRemoveFromEventList>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00e      	beq.n	800b208 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	e007      	b.n	800b208 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	b25a      	sxtb	r2, r3
 800b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b208:	2301      	movs	r3, #1
 800b20a:	637b      	str	r3, [r7, #52]	; 0x34
 800b20c:	e001      	b.n	800b212 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b20e:	2300      	movs	r3, #0
 800b210:	637b      	str	r3, [r7, #52]	; 0x34
 800b212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b214:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3738      	adds	r7, #56	; 0x38
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b232:	2300      	movs	r3, #0
 800b234:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10d      	bne.n	800b260 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d14d      	bne.n	800b2e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	4618      	mov	r0, r3
 800b252:	f000 ff01 	bl	800c058 <xTaskPriorityDisinherit>
 800b256:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	609a      	str	r2, [r3, #8]
 800b25e:	e043      	b.n	800b2e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d119      	bne.n	800b29a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6858      	ldr	r0, [r3, #4]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26e:	461a      	mov	r2, r3
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	f001 ff39 	bl	800d0e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	685a      	ldr	r2, [r3, #4]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	441a      	add	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d32b      	bcc.n	800b2e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	605a      	str	r2, [r3, #4]
 800b298:	e026      	b.n	800b2e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	68d8      	ldr	r0, [r3, #12]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	68b9      	ldr	r1, [r7, #8]
 800b2a6:	f001 ff1f 	bl	800d0e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	68da      	ldr	r2, [r3, #12]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b2:	425b      	negs	r3, r3
 800b2b4:	441a      	add	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d207      	bcs.n	800b2d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ce:	425b      	negs	r3, r3
 800b2d0:	441a      	add	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d105      	bne.n	800b2e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d002      	beq.n	800b2e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2f0:	697b      	ldr	r3, [r7, #20]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d018      	beq.n	800b33e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b314:	441a      	add	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	429a      	cmp	r2, r3
 800b324:	d303      	bcc.n	800b32e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68d9      	ldr	r1, [r3, #12]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	461a      	mov	r2, r3
 800b338:	6838      	ldr	r0, [r7, #0]
 800b33a:	f001 fed5 	bl	800d0e8 <memcpy>
	}
}
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b084      	sub	sp, #16
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b34e:	f001 f895 	bl	800c47c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b358:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b35a:	e011      	b.n	800b380 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	2b00      	cmp	r3, #0
 800b362:	d012      	beq.n	800b38a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3324      	adds	r3, #36	; 0x24
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fc9f 	bl	800bcac <xTaskRemoveFromEventList>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b374:	f000 fd72 	bl	800be5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	3b01      	subs	r3, #1
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b384:	2b00      	cmp	r3, #0
 800b386:	dce9      	bgt.n	800b35c <prvUnlockQueue+0x16>
 800b388:	e000      	b.n	800b38c <prvUnlockQueue+0x46>
					break;
 800b38a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	22ff      	movs	r2, #255	; 0xff
 800b390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b394:	f001 f8a0 	bl	800c4d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b398:	f001 f870 	bl	800c47c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3a4:	e011      	b.n	800b3ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d012      	beq.n	800b3d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3310      	adds	r3, #16
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 fc7a 	bl	800bcac <xTaskRemoveFromEventList>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3be:	f000 fd4d 	bl	800be5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	dce9      	bgt.n	800b3a6 <prvUnlockQueue+0x60>
 800b3d2:	e000      	b.n	800b3d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	22ff      	movs	r2, #255	; 0xff
 800b3da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3de:	f001 f87b 	bl	800c4d8 <vPortExitCritical>
}
 800b3e2:	bf00      	nop
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3f2:	f001 f843 	bl	800c47c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3fe:	2301      	movs	r3, #1
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	e001      	b.n	800b408 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b404:	2300      	movs	r3, #0
 800b406:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b408:	f001 f866 	bl	800c4d8 <vPortExitCritical>

	return xReturn;
 800b40c:	68fb      	ldr	r3, [r7, #12]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b084      	sub	sp, #16
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b41e:	f001 f82d 	bl	800c47c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d102      	bne.n	800b434 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b42e:	2301      	movs	r3, #1
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	e001      	b.n	800b438 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b434:	2300      	movs	r3, #0
 800b436:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b438:	f001 f84e 	bl	800c4d8 <vPortExitCritical>

	return xReturn;
 800b43c:	68fb      	ldr	r3, [r7, #12]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b446:	b580      	push	{r7, lr}
 800b448:	b08e      	sub	sp, #56	; 0x38
 800b44a:	af04      	add	r7, sp, #16
 800b44c:	60f8      	str	r0, [r7, #12]
 800b44e:	60b9      	str	r1, [r7, #8]
 800b450:	607a      	str	r2, [r7, #4]
 800b452:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b456:	2b00      	cmp	r3, #0
 800b458:	d109      	bne.n	800b46e <xTaskCreateStatic+0x28>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	623b      	str	r3, [r7, #32]
 800b46c:	e7fe      	b.n	800b46c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b470:	2b00      	cmp	r3, #0
 800b472:	d109      	bne.n	800b488 <xTaskCreateStatic+0x42>
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	e7fe      	b.n	800b486 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b488:	2358      	movs	r3, #88	; 0x58
 800b48a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	2b58      	cmp	r3, #88	; 0x58
 800b490:	d009      	beq.n	800b4a6 <xTaskCreateStatic+0x60>
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	61bb      	str	r3, [r7, #24]
 800b4a4:	e7fe      	b.n	800b4a4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d01e      	beq.n	800b4ec <xTaskCreateStatic+0xa6>
 800b4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d01b      	beq.n	800b4ec <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	9303      	str	r3, [sp, #12]
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	9302      	str	r3, [sp, #8]
 800b4ce:	f107 0314 	add.w	r3, r7, #20
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	68b9      	ldr	r1, [r7, #8]
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 f850 	bl	800b584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4e6:	f000 f8df 	bl	800b6a8 <prvAddNewTaskToReadyList>
 800b4ea:	e001      	b.n	800b4f0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4f0:	697b      	ldr	r3, [r7, #20]
	}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3728      	adds	r7, #40	; 0x28
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b08c      	sub	sp, #48	; 0x30
 800b4fe:	af04      	add	r7, sp, #16
 800b500:	60f8      	str	r0, [r7, #12]
 800b502:	60b9      	str	r1, [r7, #8]
 800b504:	603b      	str	r3, [r7, #0]
 800b506:	4613      	mov	r3, r2
 800b508:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b50a:	88fb      	ldrh	r3, [r7, #6]
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 f8ce 	bl	800c6b0 <pvPortMalloc>
 800b514:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00e      	beq.n	800b53a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b51c:	2058      	movs	r0, #88	; 0x58
 800b51e:	f001 f8c7 	bl	800c6b0 <pvPortMalloc>
 800b522:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	697a      	ldr	r2, [r7, #20]
 800b52e:	631a      	str	r2, [r3, #48]	; 0x30
 800b530:	e005      	b.n	800b53e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b532:	6978      	ldr	r0, [r7, #20]
 800b534:	f001 f982 	bl	800c83c <vPortFree>
 800b538:	e001      	b.n	800b53e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d017      	beq.n	800b574 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b54c:	88fa      	ldrh	r2, [r7, #6]
 800b54e:	2300      	movs	r3, #0
 800b550:	9303      	str	r3, [sp, #12]
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	9302      	str	r3, [sp, #8]
 800b556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	68b9      	ldr	r1, [r7, #8]
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 f80e 	bl	800b584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b568:	69f8      	ldr	r0, [r7, #28]
 800b56a:	f000 f89d 	bl	800b6a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b56e:	2301      	movs	r3, #1
 800b570:	61bb      	str	r3, [r7, #24]
 800b572:	e002      	b.n	800b57a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b574:	f04f 33ff 	mov.w	r3, #4294967295
 800b578:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b57a:	69bb      	ldr	r3, [r7, #24]
	}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3720      	adds	r7, #32
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
 800b590:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b594:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	461a      	mov	r2, r3
 800b59c:	21a5      	movs	r1, #165	; 0xa5
 800b59e:	f001 fdae 	bl	800d0fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	f023 0307 	bic.w	r3, r3, #7
 800b5ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	f003 0307 	and.w	r3, r3, #7
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d009      	beq.n	800b5da <prvInitialiseNewTask+0x56>
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	617b      	str	r3, [r7, #20]
 800b5d8:	e7fe      	b.n	800b5d8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01f      	beq.n	800b620 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	61fb      	str	r3, [r7, #28]
 800b5e4:	e012      	b.n	800b60c <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	7819      	ldrb	r1, [r3, #0]
 800b5ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	3334      	adds	r3, #52	; 0x34
 800b5f6:	460a      	mov	r2, r1
 800b5f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	4413      	add	r3, r2
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d006      	beq.n	800b614 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	3301      	adds	r3, #1
 800b60a:	61fb      	str	r3, [r7, #28]
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	2b0f      	cmp	r3, #15
 800b610:	d9e9      	bls.n	800b5e6 <prvInitialiseNewTask+0x62>
 800b612:	e000      	b.n	800b616 <prvInitialiseNewTask+0x92>
			{
				break;
 800b614:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b61e:	e003      	b.n	800b628 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b622:	2200      	movs	r2, #0
 800b624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62a:	2b06      	cmp	r3, #6
 800b62c:	d901      	bls.n	800b632 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b62e:	2306      	movs	r3, #6
 800b630:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b636:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b63c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	2200      	movs	r2, #0
 800b642:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	3304      	adds	r3, #4
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff f937 	bl	800a8bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	3318      	adds	r3, #24
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff f932 	bl	800a8bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b65c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	f1c3 0207 	rsb	r2, r3, #7
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b66c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	2200      	movs	r2, #0
 800b672:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	2200      	movs	r2, #0
 800b678:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	68f9      	ldr	r1, [r7, #12]
 800b686:	69b8      	ldr	r0, [r7, #24]
 800b688:	f000 fdd0 	bl	800c22c <pxPortInitialiseStack>
 800b68c:	4602      	mov	r2, r0
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b69c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b69e:	bf00      	nop
 800b6a0:	3720      	adds	r7, #32
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6b0:	f000 fee4 	bl	800c47c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6b4:	4b2a      	ldr	r3, [pc, #168]	; (800b760 <prvAddNewTaskToReadyList+0xb8>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	4a29      	ldr	r2, [pc, #164]	; (800b760 <prvAddNewTaskToReadyList+0xb8>)
 800b6bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6be:	4b29      	ldr	r3, [pc, #164]	; (800b764 <prvAddNewTaskToReadyList+0xbc>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d109      	bne.n	800b6da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6c6:	4a27      	ldr	r2, [pc, #156]	; (800b764 <prvAddNewTaskToReadyList+0xbc>)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6cc:	4b24      	ldr	r3, [pc, #144]	; (800b760 <prvAddNewTaskToReadyList+0xb8>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d110      	bne.n	800b6f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b6d4:	f000 fbe8 	bl	800bea8 <prvInitialiseTaskLists>
 800b6d8:	e00d      	b.n	800b6f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6da:	4b23      	ldr	r3, [pc, #140]	; (800b768 <prvAddNewTaskToReadyList+0xc0>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d109      	bne.n	800b6f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6e2:	4b20      	ldr	r3, [pc, #128]	; (800b764 <prvAddNewTaskToReadyList+0xbc>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d802      	bhi.n	800b6f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6f0:	4a1c      	ldr	r2, [pc, #112]	; (800b764 <prvAddNewTaskToReadyList+0xbc>)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6f6:	4b1d      	ldr	r3, [pc, #116]	; (800b76c <prvAddNewTaskToReadyList+0xc4>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	4a1b      	ldr	r2, [pc, #108]	; (800b76c <prvAddNewTaskToReadyList+0xc4>)
 800b6fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b704:	2201      	movs	r2, #1
 800b706:	409a      	lsls	r2, r3
 800b708:	4b19      	ldr	r3, [pc, #100]	; (800b770 <prvAddNewTaskToReadyList+0xc8>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	4a18      	ldr	r2, [pc, #96]	; (800b770 <prvAddNewTaskToReadyList+0xc8>)
 800b710:	6013      	str	r3, [r2, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b716:	4613      	mov	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4413      	add	r3, r2
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4a15      	ldr	r2, [pc, #84]	; (800b774 <prvAddNewTaskToReadyList+0xcc>)
 800b720:	441a      	add	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3304      	adds	r3, #4
 800b726:	4619      	mov	r1, r3
 800b728:	4610      	mov	r0, r2
 800b72a:	f7ff f8d4 	bl	800a8d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b72e:	f000 fed3 	bl	800c4d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b732:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <prvAddNewTaskToReadyList+0xc0>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00e      	beq.n	800b758 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b73a:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <prvAddNewTaskToReadyList+0xbc>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b744:	429a      	cmp	r2, r3
 800b746:	d207      	bcs.n	800b758 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b748:	4b0b      	ldr	r3, [pc, #44]	; (800b778 <prvAddNewTaskToReadyList+0xd0>)
 800b74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b74e:	601a      	str	r2, [r3, #0]
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20000414 	.word	0x20000414
 800b764:	20000314 	.word	0x20000314
 800b768:	20000420 	.word	0x20000420
 800b76c:	20000430 	.word	0x20000430
 800b770:	2000041c 	.word	0x2000041c
 800b774:	20000318 	.word	0x20000318
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b784:	2300      	movs	r3, #0
 800b786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d016      	beq.n	800b7bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b78e:	4b13      	ldr	r3, [pc, #76]	; (800b7dc <vTaskDelay+0x60>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d009      	beq.n	800b7aa <vTaskDelay+0x2e>
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	60bb      	str	r3, [r7, #8]
 800b7a8:	e7fe      	b.n	800b7a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b7aa:	f000 f879 	bl	800b8a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fcd5 	bl	800c160 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7b6:	f000 f881 	bl	800b8bc <xTaskResumeAll>
 800b7ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d107      	bne.n	800b7d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b7c2:	4b07      	ldr	r3, [pc, #28]	; (800b7e0 <vTaskDelay+0x64>)
 800b7c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c8:	601a      	str	r2, [r3, #0]
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7d2:	bf00      	nop
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	2000043c 	.word	0x2000043c
 800b7e0:	e000ed04 	.word	0xe000ed04

0800b7e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b08a      	sub	sp, #40	; 0x28
 800b7e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7f2:	463a      	mov	r2, r7
 800b7f4:	1d39      	adds	r1, r7, #4
 800b7f6:	f107 0308 	add.w	r3, r7, #8
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7f4 fe92 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b800:	6839      	ldr	r1, [r7, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	9202      	str	r2, [sp, #8]
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	2300      	movs	r3, #0
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	2300      	movs	r3, #0
 800b810:	460a      	mov	r2, r1
 800b812:	491d      	ldr	r1, [pc, #116]	; (800b888 <vTaskStartScheduler+0xa4>)
 800b814:	481d      	ldr	r0, [pc, #116]	; (800b88c <vTaskStartScheduler+0xa8>)
 800b816:	f7ff fe16 	bl	800b446 <xTaskCreateStatic>
 800b81a:	4602      	mov	r2, r0
 800b81c:	4b1c      	ldr	r3, [pc, #112]	; (800b890 <vTaskStartScheduler+0xac>)
 800b81e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b820:	4b1b      	ldr	r3, [pc, #108]	; (800b890 <vTaskStartScheduler+0xac>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b828:	2301      	movs	r3, #1
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	e001      	b.n	800b832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d115      	bne.n	800b864 <vTaskStartScheduler+0x80>
 800b838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b84a:	4b12      	ldr	r3, [pc, #72]	; (800b894 <vTaskStartScheduler+0xb0>)
 800b84c:	f04f 32ff 	mov.w	r2, #4294967295
 800b850:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b852:	4b11      	ldr	r3, [pc, #68]	; (800b898 <vTaskStartScheduler+0xb4>)
 800b854:	2201      	movs	r2, #1
 800b856:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b858:	4b10      	ldr	r3, [pc, #64]	; (800b89c <vTaskStartScheduler+0xb8>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b85e:	f000 fd6f 	bl	800c340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b862:	e00d      	b.n	800b880 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86a:	d109      	bne.n	800b880 <vTaskStartScheduler+0x9c>
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	e7fe      	b.n	800b87e <vTaskStartScheduler+0x9a>
}
 800b880:	bf00      	nop
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	0800d300 	.word	0x0800d300
 800b88c:	0800be75 	.word	0x0800be75
 800b890:	20000438 	.word	0x20000438
 800b894:	20000434 	.word	0x20000434
 800b898:	20000420 	.word	0x20000420
 800b89c:	20000418 	.word	0x20000418

0800b8a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b8a4:	4b04      	ldr	r3, [pc, #16]	; (800b8b8 <vTaskSuspendAll+0x18>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	4a03      	ldr	r2, [pc, #12]	; (800b8b8 <vTaskSuspendAll+0x18>)
 800b8ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b8ae:	bf00      	nop
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	2000043c 	.word	0x2000043c

0800b8bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8ca:	4b41      	ldr	r3, [pc, #260]	; (800b9d0 <xTaskResumeAll+0x114>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d109      	bne.n	800b8e6 <xTaskResumeAll+0x2a>
 800b8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d6:	f383 8811 	msr	BASEPRI, r3
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	603b      	str	r3, [r7, #0]
 800b8e4:	e7fe      	b.n	800b8e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8e6:	f000 fdc9 	bl	800c47c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8ea:	4b39      	ldr	r3, [pc, #228]	; (800b9d0 <xTaskResumeAll+0x114>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	4a37      	ldr	r2, [pc, #220]	; (800b9d0 <xTaskResumeAll+0x114>)
 800b8f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8f4:	4b36      	ldr	r3, [pc, #216]	; (800b9d0 <xTaskResumeAll+0x114>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d161      	bne.n	800b9c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8fc:	4b35      	ldr	r3, [pc, #212]	; (800b9d4 <xTaskResumeAll+0x118>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d05d      	beq.n	800b9c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b904:	e02e      	b.n	800b964 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b906:	4b34      	ldr	r3, [pc, #208]	; (800b9d8 <xTaskResumeAll+0x11c>)
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3318      	adds	r3, #24
 800b912:	4618      	mov	r0, r3
 800b914:	f7ff f83c 	bl	800a990 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3304      	adds	r3, #4
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff f837 	bl	800a990 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	2201      	movs	r2, #1
 800b928:	409a      	lsls	r2, r3
 800b92a:	4b2c      	ldr	r3, [pc, #176]	; (800b9dc <xTaskResumeAll+0x120>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4313      	orrs	r3, r2
 800b930:	4a2a      	ldr	r2, [pc, #168]	; (800b9dc <xTaskResumeAll+0x120>)
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b938:	4613      	mov	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4a27      	ldr	r2, [pc, #156]	; (800b9e0 <xTaskResumeAll+0x124>)
 800b942:	441a      	add	r2, r3
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3304      	adds	r3, #4
 800b948:	4619      	mov	r1, r3
 800b94a:	4610      	mov	r0, r2
 800b94c:	f7fe ffc3 	bl	800a8d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b954:	4b23      	ldr	r3, [pc, #140]	; (800b9e4 <xTaskResumeAll+0x128>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d302      	bcc.n	800b964 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b95e:	4b22      	ldr	r3, [pc, #136]	; (800b9e8 <xTaskResumeAll+0x12c>)
 800b960:	2201      	movs	r2, #1
 800b962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b964:	4b1c      	ldr	r3, [pc, #112]	; (800b9d8 <xTaskResumeAll+0x11c>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1cc      	bne.n	800b906 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b972:	f000 fb33 	bl	800bfdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b976:	4b1d      	ldr	r3, [pc, #116]	; (800b9ec <xTaskResumeAll+0x130>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d010      	beq.n	800b9a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b982:	f000 f837 	bl	800b9f4 <xTaskIncrementTick>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b98c:	4b16      	ldr	r3, [pc, #88]	; (800b9e8 <xTaskResumeAll+0x12c>)
 800b98e:	2201      	movs	r2, #1
 800b990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3b01      	subs	r3, #1
 800b996:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1f1      	bne.n	800b982 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b99e:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <xTaskResumeAll+0x130>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9a4:	4b10      	ldr	r3, [pc, #64]	; (800b9e8 <xTaskResumeAll+0x12c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d009      	beq.n	800b9c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9b0:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <xTaskResumeAll+0x134>)
 800b9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9c0:	f000 fd8a 	bl	800c4d8 <vPortExitCritical>

	return xAlreadyYielded;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	2000043c 	.word	0x2000043c
 800b9d4:	20000414 	.word	0x20000414
 800b9d8:	200003d4 	.word	0x200003d4
 800b9dc:	2000041c 	.word	0x2000041c
 800b9e0:	20000318 	.word	0x20000318
 800b9e4:	20000314 	.word	0x20000314
 800b9e8:	20000428 	.word	0x20000428
 800b9ec:	20000424 	.word	0x20000424
 800b9f0:	e000ed04 	.word	0xe000ed04

0800b9f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9fe:	4b4e      	ldr	r3, [pc, #312]	; (800bb38 <xTaskIncrementTick+0x144>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f040 8087 	bne.w	800bb16 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba08:	4b4c      	ldr	r3, [pc, #304]	; (800bb3c <xTaskIncrementTick+0x148>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba10:	4a4a      	ldr	r2, [pc, #296]	; (800bb3c <xTaskIncrementTick+0x148>)
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d11f      	bne.n	800ba5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba1c:	4b48      	ldr	r3, [pc, #288]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d009      	beq.n	800ba3a <xTaskIncrementTick+0x46>
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	603b      	str	r3, [r7, #0]
 800ba38:	e7fe      	b.n	800ba38 <xTaskIncrementTick+0x44>
 800ba3a:	4b41      	ldr	r3, [pc, #260]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	60fb      	str	r3, [r7, #12]
 800ba40:	4b40      	ldr	r3, [pc, #256]	; (800bb44 <xTaskIncrementTick+0x150>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a3e      	ldr	r2, [pc, #248]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	4a3e      	ldr	r2, [pc, #248]	; (800bb44 <xTaskIncrementTick+0x150>)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	4b3e      	ldr	r3, [pc, #248]	; (800bb48 <xTaskIncrementTick+0x154>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	3301      	adds	r3, #1
 800ba54:	4a3c      	ldr	r2, [pc, #240]	; (800bb48 <xTaskIncrementTick+0x154>)
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	f000 fac0 	bl	800bfdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba5c:	4b3b      	ldr	r3, [pc, #236]	; (800bb4c <xTaskIncrementTick+0x158>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d348      	bcc.n	800baf8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba66:	4b36      	ldr	r3, [pc, #216]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d104      	bne.n	800ba7a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba70:	4b36      	ldr	r3, [pc, #216]	; (800bb4c <xTaskIncrementTick+0x158>)
 800ba72:	f04f 32ff 	mov.w	r2, #4294967295
 800ba76:	601a      	str	r2, [r3, #0]
					break;
 800ba78:	e03e      	b.n	800baf8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba7a:	4b31      	ldr	r3, [pc, #196]	; (800bb40 <xTaskIncrementTick+0x14c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d203      	bcs.n	800ba9a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba92:	4a2e      	ldr	r2, [pc, #184]	; (800bb4c <xTaskIncrementTick+0x158>)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba98:	e02e      	b.n	800baf8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fe ff76 	bl	800a990 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d004      	beq.n	800bab6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	3318      	adds	r3, #24
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fe ff6d 	bl	800a990 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baba:	2201      	movs	r2, #1
 800babc:	409a      	lsls	r2, r3
 800babe:	4b24      	ldr	r3, [pc, #144]	; (800bb50 <xTaskIncrementTick+0x15c>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	4a22      	ldr	r2, [pc, #136]	; (800bb50 <xTaskIncrementTick+0x15c>)
 800bac6:	6013      	str	r3, [r2, #0]
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bacc:	4613      	mov	r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4a1f      	ldr	r2, [pc, #124]	; (800bb54 <xTaskIncrementTick+0x160>)
 800bad6:	441a      	add	r2, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	3304      	adds	r3, #4
 800badc:	4619      	mov	r1, r3
 800bade:	4610      	mov	r0, r2
 800bae0:	f7fe fef9 	bl	800a8d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae8:	4b1b      	ldr	r3, [pc, #108]	; (800bb58 <xTaskIncrementTick+0x164>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baee:	429a      	cmp	r2, r3
 800baf0:	d3b9      	bcc.n	800ba66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800baf2:	2301      	movs	r3, #1
 800baf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baf6:	e7b6      	b.n	800ba66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800baf8:	4b17      	ldr	r3, [pc, #92]	; (800bb58 <xTaskIncrementTick+0x164>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafe:	4915      	ldr	r1, [pc, #84]	; (800bb54 <xTaskIncrementTick+0x160>)
 800bb00:	4613      	mov	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4413      	add	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	440b      	add	r3, r1
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d907      	bls.n	800bb20 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800bb10:	2301      	movs	r3, #1
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	e004      	b.n	800bb20 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bb16:	4b11      	ldr	r3, [pc, #68]	; (800bb5c <xTaskIncrementTick+0x168>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	4a0f      	ldr	r2, [pc, #60]	; (800bb5c <xTaskIncrementTick+0x168>)
 800bb1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bb20:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <xTaskIncrementTick+0x16c>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bb2c:	697b      	ldr	r3, [r7, #20]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2000043c 	.word	0x2000043c
 800bb3c:	20000418 	.word	0x20000418
 800bb40:	200003cc 	.word	0x200003cc
 800bb44:	200003d0 	.word	0x200003d0
 800bb48:	2000042c 	.word	0x2000042c
 800bb4c:	20000434 	.word	0x20000434
 800bb50:	2000041c 	.word	0x2000041c
 800bb54:	20000318 	.word	0x20000318
 800bb58:	20000314 	.word	0x20000314
 800bb5c:	20000424 	.word	0x20000424
 800bb60:	20000428 	.word	0x20000428

0800bb64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb6a:	4b39      	ldr	r3, [pc, #228]	; (800bc50 <vTaskSwitchContext+0xec>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb72:	4b38      	ldr	r3, [pc, #224]	; (800bc54 <vTaskSwitchContext+0xf0>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb78:	e065      	b.n	800bc46 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800bb7a:	4b36      	ldr	r3, [pc, #216]	; (800bc54 <vTaskSwitchContext+0xf0>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bb80:	4b35      	ldr	r3, [pc, #212]	; (800bc58 <vTaskSwitchContext+0xf4>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb86:	61fb      	str	r3, [r7, #28]
 800bb88:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800bb8c:	61bb      	str	r3, [r7, #24]
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	69ba      	ldr	r2, [r7, #24]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d111      	bne.n	800bbbc <vTaskSwitchContext+0x58>
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d10b      	bne.n	800bbbc <vTaskSwitchContext+0x58>
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	3308      	adds	r3, #8
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	69ba      	ldr	r2, [r7, #24]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d105      	bne.n	800bbbc <vTaskSwitchContext+0x58>
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	330c      	adds	r3, #12
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d008      	beq.n	800bbce <vTaskSwitchContext+0x6a>
 800bbbc:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <vTaskSwitchContext+0xf4>)
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	4b25      	ldr	r3, [pc, #148]	; (800bc58 <vTaskSwitchContext+0xf4>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3334      	adds	r3, #52	; 0x34
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	4610      	mov	r0, r2
 800bbca:	f7f4 fc98 	bl	80004fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbce:	4b23      	ldr	r3, [pc, #140]	; (800bc5c <vTaskSwitchContext+0xf8>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	fab3 f383 	clz	r3, r3
 800bbda:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bbdc:	7afb      	ldrb	r3, [r7, #11]
 800bbde:	f1c3 031f 	rsb	r3, r3, #31
 800bbe2:	617b      	str	r3, [r7, #20]
 800bbe4:	491e      	ldr	r1, [pc, #120]	; (800bc60 <vTaskSwitchContext+0xfc>)
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	4413      	add	r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	440b      	add	r3, r1
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d109      	bne.n	800bc0c <vTaskSwitchContext+0xa8>
	__asm volatile
 800bbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	607b      	str	r3, [r7, #4]
 800bc0a:	e7fe      	b.n	800bc0a <vTaskSwitchContext+0xa6>
 800bc0c:	697a      	ldr	r2, [r7, #20]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	4413      	add	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4a12      	ldr	r2, [pc, #72]	; (800bc60 <vTaskSwitchContext+0xfc>)
 800bc18:	4413      	add	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	605a      	str	r2, [r3, #4]
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	685a      	ldr	r2, [r3, #4]
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d104      	bne.n	800bc3c <vTaskSwitchContext+0xd8>
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	605a      	str	r2, [r3, #4]
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	4a05      	ldr	r2, [pc, #20]	; (800bc58 <vTaskSwitchContext+0xf4>)
 800bc44:	6013      	str	r3, [r2, #0]
}
 800bc46:	bf00      	nop
 800bc48:	3720      	adds	r7, #32
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	2000043c 	.word	0x2000043c
 800bc54:	20000428 	.word	0x20000428
 800bc58:	20000314 	.word	0x20000314
 800bc5c:	2000041c 	.word	0x2000041c
 800bc60:	20000318 	.word	0x20000318

0800bc64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d109      	bne.n	800bc88 <vTaskPlaceOnEventList+0x24>
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	60fb      	str	r3, [r7, #12]
 800bc86:	e7fe      	b.n	800bc86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc88:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <vTaskPlaceOnEventList+0x44>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3318      	adds	r3, #24
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7fe fe44 	bl	800a91e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc96:	2101      	movs	r1, #1
 800bc98:	6838      	ldr	r0, [r7, #0]
 800bc9a:	f000 fa61 	bl	800c160 <prvAddCurrentTaskToDelayedList>
}
 800bc9e:	bf00      	nop
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20000314 	.word	0x20000314

0800bcac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b086      	sub	sp, #24
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d109      	bne.n	800bcd6 <xTaskRemoveFromEventList+0x2a>
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	60fb      	str	r3, [r7, #12]
 800bcd4:	e7fe      	b.n	800bcd4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	3318      	adds	r3, #24
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fe fe58 	bl	800a990 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bce0:	4b1d      	ldr	r3, [pc, #116]	; (800bd58 <xTaskRemoveFromEventList+0xac>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d11c      	bne.n	800bd22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	3304      	adds	r3, #4
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fe fe4f 	bl	800a990 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	409a      	lsls	r2, r3
 800bcfa:	4b18      	ldr	r3, [pc, #96]	; (800bd5c <xTaskRemoveFromEventList+0xb0>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	4a16      	ldr	r2, [pc, #88]	; (800bd5c <xTaskRemoveFromEventList+0xb0>)
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd08:	4613      	mov	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4a13      	ldr	r2, [pc, #76]	; (800bd60 <xTaskRemoveFromEventList+0xb4>)
 800bd12:	441a      	add	r2, r3
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	3304      	adds	r3, #4
 800bd18:	4619      	mov	r1, r3
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	f7fe fddb 	bl	800a8d6 <vListInsertEnd>
 800bd20:	e005      	b.n	800bd2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	3318      	adds	r3, #24
 800bd26:	4619      	mov	r1, r3
 800bd28:	480e      	ldr	r0, [pc, #56]	; (800bd64 <xTaskRemoveFromEventList+0xb8>)
 800bd2a:	f7fe fdd4 	bl	800a8d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd32:	4b0d      	ldr	r3, [pc, #52]	; (800bd68 <xTaskRemoveFromEventList+0xbc>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d905      	bls.n	800bd48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd40:	4b0a      	ldr	r3, [pc, #40]	; (800bd6c <xTaskRemoveFromEventList+0xc0>)
 800bd42:	2201      	movs	r2, #1
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	e001      	b.n	800bd4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd4c:	697b      	ldr	r3, [r7, #20]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	2000043c 	.word	0x2000043c
 800bd5c:	2000041c 	.word	0x2000041c
 800bd60:	20000318 	.word	0x20000318
 800bd64:	200003d4 	.word	0x200003d4
 800bd68:	20000314 	.word	0x20000314
 800bd6c:	20000428 	.word	0x20000428

0800bd70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd78:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <vTaskInternalSetTimeOutState+0x24>)
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd80:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <vTaskInternalSetTimeOutState+0x28>)
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	605a      	str	r2, [r3, #4]
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	2000042c 	.word	0x2000042c
 800bd98:	20000418 	.word	0x20000418

0800bd9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b088      	sub	sp, #32
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d109      	bne.n	800bdc0 <xTaskCheckForTimeOut+0x24>
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	613b      	str	r3, [r7, #16]
 800bdbe:	e7fe      	b.n	800bdbe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d109      	bne.n	800bdda <xTaskCheckForTimeOut+0x3e>
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	e7fe      	b.n	800bdd8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bdda:	f000 fb4f 	bl	800c47c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bdde:	4b1d      	ldr	r3, [pc, #116]	; (800be54 <xTaskCheckForTimeOut+0xb8>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	69ba      	ldr	r2, [r7, #24]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf6:	d102      	bne.n	800bdfe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	61fb      	str	r3, [r7, #28]
 800bdfc:	e023      	b.n	800be46 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	4b15      	ldr	r3, [pc, #84]	; (800be58 <xTaskCheckForTimeOut+0xbc>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	429a      	cmp	r2, r3
 800be08:	d007      	beq.n	800be1a <xTaskCheckForTimeOut+0x7e>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	429a      	cmp	r2, r3
 800be12:	d302      	bcc.n	800be1a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be14:	2301      	movs	r3, #1
 800be16:	61fb      	str	r3, [r7, #28]
 800be18:	e015      	b.n	800be46 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	429a      	cmp	r2, r3
 800be22:	d20b      	bcs.n	800be3c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	1ad2      	subs	r2, r2, r3
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7ff ff9d 	bl	800bd70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be36:	2300      	movs	r3, #0
 800be38:	61fb      	str	r3, [r7, #28]
 800be3a:	e004      	b.n	800be46 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2200      	movs	r2, #0
 800be40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be42:	2301      	movs	r3, #1
 800be44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be46:	f000 fb47 	bl	800c4d8 <vPortExitCritical>

	return xReturn;
 800be4a:	69fb      	ldr	r3, [r7, #28]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	20000418 	.word	0x20000418
 800be58:	2000042c 	.word	0x2000042c

0800be5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be5c:	b480      	push	{r7}
 800be5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be60:	4b03      	ldr	r3, [pc, #12]	; (800be70 <vTaskMissedYield+0x14>)
 800be62:	2201      	movs	r2, #1
 800be64:	601a      	str	r2, [r3, #0]
}
 800be66:	bf00      	nop
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	20000428 	.word	0x20000428

0800be74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be7c:	f000 f854 	bl	800bf28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be80:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <prvIdleTask+0x2c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d907      	bls.n	800be98 <prvIdleTask+0x24>
			{
				taskYIELD();
 800be88:	4b06      	ldr	r3, [pc, #24]	; (800bea4 <prvIdleTask+0x30>)
 800be8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be8e:	601a      	str	r2, [r3, #0]
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800be98:	f7f4 fb2a 	bl	80004f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800be9c:	e7ee      	b.n	800be7c <prvIdleTask+0x8>
 800be9e:	bf00      	nop
 800bea0:	20000318 	.word	0x20000318
 800bea4:	e000ed04 	.word	0xe000ed04

0800bea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800beae:	2300      	movs	r3, #0
 800beb0:	607b      	str	r3, [r7, #4]
 800beb2:	e00c      	b.n	800bece <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	4613      	mov	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4a12      	ldr	r2, [pc, #72]	; (800bf08 <prvInitialiseTaskLists+0x60>)
 800bec0:	4413      	add	r3, r2
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fe fcda 	bl	800a87c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3301      	adds	r3, #1
 800becc:	607b      	str	r3, [r7, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b06      	cmp	r3, #6
 800bed2:	d9ef      	bls.n	800beb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bed4:	480d      	ldr	r0, [pc, #52]	; (800bf0c <prvInitialiseTaskLists+0x64>)
 800bed6:	f7fe fcd1 	bl	800a87c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800beda:	480d      	ldr	r0, [pc, #52]	; (800bf10 <prvInitialiseTaskLists+0x68>)
 800bedc:	f7fe fcce 	bl	800a87c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bee0:	480c      	ldr	r0, [pc, #48]	; (800bf14 <prvInitialiseTaskLists+0x6c>)
 800bee2:	f7fe fccb 	bl	800a87c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bee6:	480c      	ldr	r0, [pc, #48]	; (800bf18 <prvInitialiseTaskLists+0x70>)
 800bee8:	f7fe fcc8 	bl	800a87c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800beec:	480b      	ldr	r0, [pc, #44]	; (800bf1c <prvInitialiseTaskLists+0x74>)
 800beee:	f7fe fcc5 	bl	800a87c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bef2:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <prvInitialiseTaskLists+0x78>)
 800bef4:	4a05      	ldr	r2, [pc, #20]	; (800bf0c <prvInitialiseTaskLists+0x64>)
 800bef6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bef8:	4b0a      	ldr	r3, [pc, #40]	; (800bf24 <prvInitialiseTaskLists+0x7c>)
 800befa:	4a05      	ldr	r2, [pc, #20]	; (800bf10 <prvInitialiseTaskLists+0x68>)
 800befc:	601a      	str	r2, [r3, #0]
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	20000318 	.word	0x20000318
 800bf0c:	200003a4 	.word	0x200003a4
 800bf10:	200003b8 	.word	0x200003b8
 800bf14:	200003d4 	.word	0x200003d4
 800bf18:	200003e8 	.word	0x200003e8
 800bf1c:	20000400 	.word	0x20000400
 800bf20:	200003cc 	.word	0x200003cc
 800bf24:	200003d0 	.word	0x200003d0

0800bf28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf2e:	e019      	b.n	800bf64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf30:	f000 faa4 	bl	800c47c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf34:	4b0f      	ldr	r3, [pc, #60]	; (800bf74 <prvCheckTasksWaitingTermination+0x4c>)
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe fd25 	bl	800a990 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf46:	4b0c      	ldr	r3, [pc, #48]	; (800bf78 <prvCheckTasksWaitingTermination+0x50>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	4a0a      	ldr	r2, [pc, #40]	; (800bf78 <prvCheckTasksWaitingTermination+0x50>)
 800bf4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <prvCheckTasksWaitingTermination+0x54>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	4a09      	ldr	r2, [pc, #36]	; (800bf7c <prvCheckTasksWaitingTermination+0x54>)
 800bf58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf5a:	f000 fabd 	bl	800c4d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f80e 	bl	800bf80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf64:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <prvCheckTasksWaitingTermination+0x54>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1e1      	bne.n	800bf30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	200003e8 	.word	0x200003e8
 800bf78:	20000414 	.word	0x20000414
 800bf7c:	200003fc 	.word	0x200003fc

0800bf80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d108      	bne.n	800bfa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 fc50 	bl	800c83c <vPortFree>
				vPortFree( pxTCB );
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fc4d 	bl	800c83c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bfa2:	e017      	b.n	800bfd4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d103      	bne.n	800bfb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fc44 	bl	800c83c <vPortFree>
	}
 800bfb4:	e00e      	b.n	800bfd4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d009      	beq.n	800bfd4 <prvDeleteTCB+0x54>
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	60fb      	str	r3, [r7, #12]
 800bfd2:	e7fe      	b.n	800bfd2 <prvDeleteTCB+0x52>
	}
 800bfd4:	bf00      	nop
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfe2:	4b0c      	ldr	r3, [pc, #48]	; (800c014 <prvResetNextTaskUnblockTime+0x38>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d104      	bne.n	800bff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfec:	4b0a      	ldr	r3, [pc, #40]	; (800c018 <prvResetNextTaskUnblockTime+0x3c>)
 800bfee:	f04f 32ff 	mov.w	r2, #4294967295
 800bff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bff4:	e008      	b.n	800c008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bff6:	4b07      	ldr	r3, [pc, #28]	; (800c014 <prvResetNextTaskUnblockTime+0x38>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	4a04      	ldr	r2, [pc, #16]	; (800c018 <prvResetNextTaskUnblockTime+0x3c>)
 800c006:	6013      	str	r3, [r2, #0]
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr
 800c014:	200003cc 	.word	0x200003cc
 800c018:	20000434 	.word	0x20000434

0800c01c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c022:	4b0b      	ldr	r3, [pc, #44]	; (800c050 <xTaskGetSchedulerState+0x34>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d102      	bne.n	800c030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c02a:	2301      	movs	r3, #1
 800c02c:	607b      	str	r3, [r7, #4]
 800c02e:	e008      	b.n	800c042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c030:	4b08      	ldr	r3, [pc, #32]	; (800c054 <xTaskGetSchedulerState+0x38>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c038:	2302      	movs	r3, #2
 800c03a:	607b      	str	r3, [r7, #4]
 800c03c:	e001      	b.n	800c042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c03e:	2300      	movs	r3, #0
 800c040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c042:	687b      	ldr	r3, [r7, #4]
	}
 800c044:	4618      	mov	r0, r3
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr
 800c050:	20000420 	.word	0x20000420
 800c054:	2000043c 	.word	0x2000043c

0800c058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c064:	2300      	movs	r3, #0
 800c066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d06c      	beq.n	800c148 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c06e:	4b39      	ldr	r3, [pc, #228]	; (800c154 <xTaskPriorityDisinherit+0xfc>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	693a      	ldr	r2, [r7, #16]
 800c074:	429a      	cmp	r2, r3
 800c076:	d009      	beq.n	800c08c <xTaskPriorityDisinherit+0x34>
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	60fb      	str	r3, [r7, #12]
 800c08a:	e7fe      	b.n	800c08a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c090:	2b00      	cmp	r3, #0
 800c092:	d109      	bne.n	800c0a8 <xTaskPriorityDisinherit+0x50>
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	60bb      	str	r3, [r7, #8]
 800c0a6:	e7fe      	b.n	800c0a6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0ac:	1e5a      	subs	r2, r3, #1
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d044      	beq.n	800c148 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d140      	bne.n	800c148 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fe fc60 	bl	800a990 <uxListRemove>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d115      	bne.n	800c102 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0da:	491f      	ldr	r1, [pc, #124]	; (800c158 <xTaskPriorityDisinherit+0x100>)
 800c0dc:	4613      	mov	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	440b      	add	r3, r1
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10a      	bne.n	800c102 <xTaskPriorityDisinherit+0xaa>
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f6:	43da      	mvns	r2, r3
 800c0f8:	4b18      	ldr	r3, [pc, #96]	; (800c15c <xTaskPriorityDisinherit+0x104>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	4a17      	ldr	r2, [pc, #92]	; (800c15c <xTaskPriorityDisinherit+0x104>)
 800c100:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10e:	f1c3 0207 	rsb	r2, r3, #7
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11a:	2201      	movs	r2, #1
 800c11c:	409a      	lsls	r2, r3
 800c11e:	4b0f      	ldr	r3, [pc, #60]	; (800c15c <xTaskPriorityDisinherit+0x104>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4313      	orrs	r3, r2
 800c124:	4a0d      	ldr	r2, [pc, #52]	; (800c15c <xTaskPriorityDisinherit+0x104>)
 800c126:	6013      	str	r3, [r2, #0]
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c12c:	4613      	mov	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4a08      	ldr	r2, [pc, #32]	; (800c158 <xTaskPriorityDisinherit+0x100>)
 800c136:	441a      	add	r2, r3
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	3304      	adds	r3, #4
 800c13c:	4619      	mov	r1, r3
 800c13e:	4610      	mov	r0, r2
 800c140:	f7fe fbc9 	bl	800a8d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c144:	2301      	movs	r3, #1
 800c146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c148:	697b      	ldr	r3, [r7, #20]
	}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	20000314 	.word	0x20000314
 800c158:	20000318 	.word	0x20000318
 800c15c:	2000041c 	.word	0x2000041c

0800c160 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c16a:	4b29      	ldr	r3, [pc, #164]	; (800c210 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c170:	4b28      	ldr	r3, [pc, #160]	; (800c214 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3304      	adds	r3, #4
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe fc0a 	bl	800a990 <uxListRemove>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10b      	bne.n	800c19a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c182:	4b24      	ldr	r3, [pc, #144]	; (800c214 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	2201      	movs	r2, #1
 800c18a:	fa02 f303 	lsl.w	r3, r2, r3
 800c18e:	43da      	mvns	r2, r3
 800c190:	4b21      	ldr	r3, [pc, #132]	; (800c218 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4013      	ands	r3, r2
 800c196:	4a20      	ldr	r2, [pc, #128]	; (800c218 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c198:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a0:	d10a      	bne.n	800c1b8 <prvAddCurrentTaskToDelayedList+0x58>
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d007      	beq.n	800c1b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1a8:	4b1a      	ldr	r3, [pc, #104]	; (800c214 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	481a      	ldr	r0, [pc, #104]	; (800c21c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c1b2:	f7fe fb90 	bl	800a8d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1b6:	e026      	b.n	800c206 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4413      	add	r3, r2
 800c1be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1c0:	4b14      	ldr	r3, [pc, #80]	; (800c214 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d209      	bcs.n	800c1e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1d0:	4b13      	ldr	r3, [pc, #76]	; (800c220 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	4b0f      	ldr	r3, [pc, #60]	; (800c214 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3304      	adds	r3, #4
 800c1da:	4619      	mov	r1, r3
 800c1dc:	4610      	mov	r0, r2
 800c1de:	f7fe fb9e 	bl	800a91e <vListInsert>
}
 800c1e2:	e010      	b.n	800c206 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1e4:	4b0f      	ldr	r3, [pc, #60]	; (800c224 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	; (800c214 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	f7fe fb94 	bl	800a91e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1f6:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d202      	bcs.n	800c206 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c200:	4a09      	ldr	r2, [pc, #36]	; (800c228 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	6013      	str	r3, [r2, #0]
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	20000418 	.word	0x20000418
 800c214:	20000314 	.word	0x20000314
 800c218:	2000041c 	.word	0x2000041c
 800c21c:	20000400 	.word	0x20000400
 800c220:	200003d0 	.word	0x200003d0
 800c224:	200003cc 	.word	0x200003cc
 800c228:	20000434 	.word	0x20000434

0800c22c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	3b04      	subs	r3, #4
 800c23c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3b04      	subs	r3, #4
 800c24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	f023 0201 	bic.w	r2, r3, #1
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	3b04      	subs	r3, #4
 800c25a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c25c:	4a0c      	ldr	r2, [pc, #48]	; (800c290 <pxPortInitialiseStack+0x64>)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3b14      	subs	r3, #20
 800c266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	3b04      	subs	r3, #4
 800c272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f06f 0202 	mvn.w	r2, #2
 800c27a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	3b20      	subs	r3, #32
 800c280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c282:	68fb      	ldr	r3, [r7, #12]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	0800c295 	.word	0x0800c295

0800c294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c29e:	4b11      	ldr	r3, [pc, #68]	; (800c2e4 <prvTaskExitError+0x50>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a6:	d009      	beq.n	800c2bc <prvTaskExitError+0x28>
 800c2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ac:	f383 8811 	msr	BASEPRI, r3
 800c2b0:	f3bf 8f6f 	isb	sy
 800c2b4:	f3bf 8f4f 	dsb	sy
 800c2b8:	60fb      	str	r3, [r7, #12]
 800c2ba:	e7fe      	b.n	800c2ba <prvTaskExitError+0x26>
 800c2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2ce:	bf00      	nop
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d0fc      	beq.n	800c2d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2d6:	bf00      	nop
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	2000002c 	.word	0x2000002c
	...

0800c2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2f0:	4b07      	ldr	r3, [pc, #28]	; (800c310 <pxCurrentTCBConst2>)
 800c2f2:	6819      	ldr	r1, [r3, #0]
 800c2f4:	6808      	ldr	r0, [r1, #0]
 800c2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	f380 8809 	msr	PSP, r0
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f04f 0000 	mov.w	r0, #0
 800c306:	f380 8811 	msr	BASEPRI, r0
 800c30a:	4770      	bx	lr
 800c30c:	f3af 8000 	nop.w

0800c310 <pxCurrentTCBConst2>:
 800c310:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop

0800c318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c318:	4808      	ldr	r0, [pc, #32]	; (800c33c <prvPortStartFirstTask+0x24>)
 800c31a:	6800      	ldr	r0, [r0, #0]
 800c31c:	6800      	ldr	r0, [r0, #0]
 800c31e:	f380 8808 	msr	MSP, r0
 800c322:	f04f 0000 	mov.w	r0, #0
 800c326:	f380 8814 	msr	CONTROL, r0
 800c32a:	b662      	cpsie	i
 800c32c:	b661      	cpsie	f
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	df00      	svc	0
 800c338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c33a:	bf00      	nop
 800c33c:	e000ed08 	.word	0xe000ed08

0800c340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c346:	4b44      	ldr	r3, [pc, #272]	; (800c458 <xPortStartScheduler+0x118>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a44      	ldr	r2, [pc, #272]	; (800c45c <xPortStartScheduler+0x11c>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d109      	bne.n	800c364 <xPortStartScheduler+0x24>
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	613b      	str	r3, [r7, #16]
 800c362:	e7fe      	b.n	800c362 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c364:	4b3c      	ldr	r3, [pc, #240]	; (800c458 <xPortStartScheduler+0x118>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a3d      	ldr	r2, [pc, #244]	; (800c460 <xPortStartScheduler+0x120>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d109      	bne.n	800c382 <xPortStartScheduler+0x42>
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	e7fe      	b.n	800c380 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c382:	4b38      	ldr	r3, [pc, #224]	; (800c464 <xPortStartScheduler+0x124>)
 800c384:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	22ff      	movs	r2, #255	; 0xff
 800c392:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c39c:	78fb      	ldrb	r3, [r7, #3]
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	4b30      	ldr	r3, [pc, #192]	; (800c468 <xPortStartScheduler+0x128>)
 800c3a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3aa:	4b30      	ldr	r3, [pc, #192]	; (800c46c <xPortStartScheduler+0x12c>)
 800c3ac:	2207      	movs	r2, #7
 800c3ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3b0:	e009      	b.n	800c3c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c3b2:	4b2e      	ldr	r3, [pc, #184]	; (800c46c <xPortStartScheduler+0x12c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	4a2c      	ldr	r2, [pc, #176]	; (800c46c <xPortStartScheduler+0x12c>)
 800c3ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c3bc:	78fb      	ldrb	r3, [r7, #3]
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	005b      	lsls	r3, r3, #1
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3c6:	78fb      	ldrb	r3, [r7, #3]
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ce:	2b80      	cmp	r3, #128	; 0x80
 800c3d0:	d0ef      	beq.n	800c3b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c3d2:	4b26      	ldr	r3, [pc, #152]	; (800c46c <xPortStartScheduler+0x12c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f1c3 0307 	rsb	r3, r3, #7
 800c3da:	2b04      	cmp	r3, #4
 800c3dc:	d009      	beq.n	800c3f2 <xPortStartScheduler+0xb2>
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	60bb      	str	r3, [r7, #8]
 800c3f0:	e7fe      	b.n	800c3f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3f2:	4b1e      	ldr	r3, [pc, #120]	; (800c46c <xPortStartScheduler+0x12c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	021b      	lsls	r3, r3, #8
 800c3f8:	4a1c      	ldr	r2, [pc, #112]	; (800c46c <xPortStartScheduler+0x12c>)
 800c3fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3fc:	4b1b      	ldr	r3, [pc, #108]	; (800c46c <xPortStartScheduler+0x12c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c404:	4a19      	ldr	r2, [pc, #100]	; (800c46c <xPortStartScheduler+0x12c>)
 800c406:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	b2da      	uxtb	r2, r3
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c410:	4b17      	ldr	r3, [pc, #92]	; (800c470 <xPortStartScheduler+0x130>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a16      	ldr	r2, [pc, #88]	; (800c470 <xPortStartScheduler+0x130>)
 800c416:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c41a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c41c:	4b14      	ldr	r3, [pc, #80]	; (800c470 <xPortStartScheduler+0x130>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a13      	ldr	r2, [pc, #76]	; (800c470 <xPortStartScheduler+0x130>)
 800c422:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c426:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c428:	f000 f8d6 	bl	800c5d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c42c:	4b11      	ldr	r3, [pc, #68]	; (800c474 <xPortStartScheduler+0x134>)
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c432:	f000 f8f5 	bl	800c620 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c436:	4b10      	ldr	r3, [pc, #64]	; (800c478 <xPortStartScheduler+0x138>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a0f      	ldr	r2, [pc, #60]	; (800c478 <xPortStartScheduler+0x138>)
 800c43c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c440:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c442:	f7ff ff69 	bl	800c318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c446:	f7ff fb8d 	bl	800bb64 <vTaskSwitchContext>
	prvTaskExitError();
 800c44a:	f7ff ff23 	bl	800c294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	e000ed00 	.word	0xe000ed00
 800c45c:	410fc271 	.word	0x410fc271
 800c460:	410fc270 	.word	0x410fc270
 800c464:	e000e400 	.word	0xe000e400
 800c468:	20000440 	.word	0x20000440
 800c46c:	20000444 	.word	0x20000444
 800c470:	e000ed20 	.word	0xe000ed20
 800c474:	2000002c 	.word	0x2000002c
 800c478:	e000ef34 	.word	0xe000ef34

0800c47c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c494:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <vPortEnterCritical+0x54>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	3301      	adds	r3, #1
 800c49a:	4a0d      	ldr	r2, [pc, #52]	; (800c4d0 <vPortEnterCritical+0x54>)
 800c49c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c49e:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <vPortEnterCritical+0x54>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d10e      	bne.n	800c4c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c4a6:	4b0b      	ldr	r3, [pc, #44]	; (800c4d4 <vPortEnterCritical+0x58>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d009      	beq.n	800c4c4 <vPortEnterCritical+0x48>
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	603b      	str	r3, [r7, #0]
 800c4c2:	e7fe      	b.n	800c4c2 <vPortEnterCritical+0x46>
	}
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr
 800c4d0:	2000002c 	.word	0x2000002c
 800c4d4:	e000ed04 	.word	0xe000ed04

0800c4d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4de:	4b11      	ldr	r3, [pc, #68]	; (800c524 <vPortExitCritical+0x4c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d109      	bne.n	800c4fa <vPortExitCritical+0x22>
 800c4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	607b      	str	r3, [r7, #4]
 800c4f8:	e7fe      	b.n	800c4f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c4fa:	4b0a      	ldr	r3, [pc, #40]	; (800c524 <vPortExitCritical+0x4c>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	3b01      	subs	r3, #1
 800c500:	4a08      	ldr	r2, [pc, #32]	; (800c524 <vPortExitCritical+0x4c>)
 800c502:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c504:	4b07      	ldr	r3, [pc, #28]	; (800c524 <vPortExitCritical+0x4c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d104      	bne.n	800c516 <vPortExitCritical+0x3e>
 800c50c:	2300      	movs	r3, #0
 800c50e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c516:	bf00      	nop
 800c518:	370c      	adds	r7, #12
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	2000002c 	.word	0x2000002c
	...

0800c530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c530:	f3ef 8009 	mrs	r0, PSP
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	4b15      	ldr	r3, [pc, #84]	; (800c590 <pxCurrentTCBConst>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	f01e 0f10 	tst.w	lr, #16
 800c540:	bf08      	it	eq
 800c542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54a:	6010      	str	r0, [r2, #0]
 800c54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c550:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c554:	f380 8811 	msr	BASEPRI, r0
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f7ff fb00 	bl	800bb64 <vTaskSwitchContext>
 800c564:	f04f 0000 	mov.w	r0, #0
 800c568:	f380 8811 	msr	BASEPRI, r0
 800c56c:	bc09      	pop	{r0, r3}
 800c56e:	6819      	ldr	r1, [r3, #0]
 800c570:	6808      	ldr	r0, [r1, #0]
 800c572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c576:	f01e 0f10 	tst.w	lr, #16
 800c57a:	bf08      	it	eq
 800c57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c580:	f380 8809 	msr	PSP, r0
 800c584:	f3bf 8f6f 	isb	sy
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	f3af 8000 	nop.w

0800c590 <pxCurrentTCBConst>:
 800c590:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c594:	bf00      	nop
 800c596:	bf00      	nop

0800c598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c5b0:	f7ff fa20 	bl	800b9f4 <xTaskIncrementTick>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d003      	beq.n	800c5c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c5ba:	4b06      	ldr	r3, [pc, #24]	; (800c5d4 <SysTick_Handler+0x3c>)
 800c5bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5c0:	601a      	str	r2, [r3, #0]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5cc:	bf00      	nop
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	e000ed04 	.word	0xe000ed04

0800c5d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5d8:	b480      	push	{r7}
 800c5da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5dc:	4b0b      	ldr	r3, [pc, #44]	; (800c60c <vPortSetupTimerInterrupt+0x34>)
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5e2:	4b0b      	ldr	r3, [pc, #44]	; (800c610 <vPortSetupTimerInterrupt+0x38>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5e8:	4b0a      	ldr	r3, [pc, #40]	; (800c614 <vPortSetupTimerInterrupt+0x3c>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a0a      	ldr	r2, [pc, #40]	; (800c618 <vPortSetupTimerInterrupt+0x40>)
 800c5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f2:	099b      	lsrs	r3, r3, #6
 800c5f4:	4a09      	ldr	r2, [pc, #36]	; (800c61c <vPortSetupTimerInterrupt+0x44>)
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5fa:	4b04      	ldr	r3, [pc, #16]	; (800c60c <vPortSetupTimerInterrupt+0x34>)
 800c5fc:	2207      	movs	r2, #7
 800c5fe:	601a      	str	r2, [r3, #0]
}
 800c600:	bf00      	nop
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	e000e010 	.word	0xe000e010
 800c610:	e000e018 	.word	0xe000e018
 800c614:	20000000 	.word	0x20000000
 800c618:	10624dd3 	.word	0x10624dd3
 800c61c:	e000e014 	.word	0xe000e014

0800c620 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c620:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c630 <vPortEnableVFP+0x10>
 800c624:	6801      	ldr	r1, [r0, #0]
 800c626:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c62a:	6001      	str	r1, [r0, #0]
 800c62c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c62e:	bf00      	nop
 800c630:	e000ed88 	.word	0xe000ed88

0800c634 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c63a:	f3ef 8305 	mrs	r3, IPSR
 800c63e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b0f      	cmp	r3, #15
 800c644:	d913      	bls.n	800c66e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c646:	4a16      	ldr	r2, [pc, #88]	; (800c6a0 <vPortValidateInterruptPriority+0x6c>)
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4413      	add	r3, r2
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c650:	4b14      	ldr	r3, [pc, #80]	; (800c6a4 <vPortValidateInterruptPriority+0x70>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	7afa      	ldrb	r2, [r7, #11]
 800c656:	429a      	cmp	r2, r3
 800c658:	d209      	bcs.n	800c66e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	607b      	str	r3, [r7, #4]
 800c66c:	e7fe      	b.n	800c66c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c66e:	4b0e      	ldr	r3, [pc, #56]	; (800c6a8 <vPortValidateInterruptPriority+0x74>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c676:	4b0d      	ldr	r3, [pc, #52]	; (800c6ac <vPortValidateInterruptPriority+0x78>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d909      	bls.n	800c692 <vPortValidateInterruptPriority+0x5e>
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	603b      	str	r3, [r7, #0]
 800c690:	e7fe      	b.n	800c690 <vPortValidateInterruptPriority+0x5c>
	}
 800c692:	bf00      	nop
 800c694:	3714      	adds	r7, #20
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	e000e3f0 	.word	0xe000e3f0
 800c6a4:	20000440 	.word	0x20000440
 800c6a8:	e000ed0c 	.word	0xe000ed0c
 800c6ac:	20000444 	.word	0x20000444

0800c6b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08a      	sub	sp, #40	; 0x28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c6bc:	f7ff f8f0 	bl	800b8a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c6c0:	4b59      	ldr	r3, [pc, #356]	; (800c828 <pvPortMalloc+0x178>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d101      	bne.n	800c6cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c6c8:	f000 f910 	bl	800c8ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c6cc:	4b57      	ldr	r3, [pc, #348]	; (800c82c <pvPortMalloc+0x17c>)
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4013      	ands	r3, r2
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f040 808c 	bne.w	800c7f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d01c      	beq.n	800c71a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c6e0:	2208      	movs	r2, #8
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f003 0307 	and.w	r3, r3, #7
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d013      	beq.n	800c71a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f023 0307 	bic.w	r3, r3, #7
 800c6f8:	3308      	adds	r3, #8
 800c6fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f003 0307 	and.w	r3, r3, #7
 800c702:	2b00      	cmp	r3, #0
 800c704:	d009      	beq.n	800c71a <pvPortMalloc+0x6a>
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	617b      	str	r3, [r7, #20]
 800c718:	e7fe      	b.n	800c718 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d068      	beq.n	800c7f2 <pvPortMalloc+0x142>
 800c720:	4b43      	ldr	r3, [pc, #268]	; (800c830 <pvPortMalloc+0x180>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	429a      	cmp	r2, r3
 800c728:	d863      	bhi.n	800c7f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c72a:	4b42      	ldr	r3, [pc, #264]	; (800c834 <pvPortMalloc+0x184>)
 800c72c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c72e:	4b41      	ldr	r3, [pc, #260]	; (800c834 <pvPortMalloc+0x184>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c734:	e004      	b.n	800c740 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	429a      	cmp	r2, r3
 800c748:	d903      	bls.n	800c752 <pvPortMalloc+0xa2>
 800c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1f1      	bne.n	800c736 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c752:	4b35      	ldr	r3, [pc, #212]	; (800c828 <pvPortMalloc+0x178>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c758:	429a      	cmp	r2, r3
 800c75a:	d04a      	beq.n	800c7f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c75c:	6a3b      	ldr	r3, [r7, #32]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2208      	movs	r2, #8
 800c762:	4413      	add	r3, r2
 800c764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	6a3b      	ldr	r3, [r7, #32]
 800c76c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	1ad2      	subs	r2, r2, r3
 800c776:	2308      	movs	r3, #8
 800c778:	005b      	lsls	r3, r3, #1
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d91e      	bls.n	800c7bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4413      	add	r3, r2
 800c784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	f003 0307 	and.w	r3, r3, #7
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d009      	beq.n	800c7a4 <pvPortMalloc+0xf4>
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	613b      	str	r3, [r7, #16]
 800c7a2:	e7fe      	b.n	800c7a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	685a      	ldr	r2, [r3, #4]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	1ad2      	subs	r2, r2, r3
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c7b6:	69b8      	ldr	r0, [r7, #24]
 800c7b8:	f000 f8fa 	bl	800c9b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c7bc:	4b1c      	ldr	r3, [pc, #112]	; (800c830 <pvPortMalloc+0x180>)
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	4a1a      	ldr	r2, [pc, #104]	; (800c830 <pvPortMalloc+0x180>)
 800c7c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c7ca:	4b19      	ldr	r3, [pc, #100]	; (800c830 <pvPortMalloc+0x180>)
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	4b1a      	ldr	r3, [pc, #104]	; (800c838 <pvPortMalloc+0x188>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d203      	bcs.n	800c7de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7d6:	4b16      	ldr	r3, [pc, #88]	; (800c830 <pvPortMalloc+0x180>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a17      	ldr	r2, [pc, #92]	; (800c838 <pvPortMalloc+0x188>)
 800c7dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	685a      	ldr	r2, [r3, #4]
 800c7e2:	4b12      	ldr	r3, [pc, #72]	; (800c82c <pvPortMalloc+0x17c>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7f2:	f7ff f863 	bl	800b8bc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c7fc:	f7f3 fe8a 	bl	8000514 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	f003 0307 	and.w	r3, r3, #7
 800c806:	2b00      	cmp	r3, #0
 800c808:	d009      	beq.n	800c81e <pvPortMalloc+0x16e>
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	e7fe      	b.n	800c81c <pvPortMalloc+0x16c>
	return pvReturn;
 800c81e:	69fb      	ldr	r3, [r7, #28]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3728      	adds	r7, #40	; 0x28
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	20008450 	.word	0x20008450
 800c82c:	2000845c 	.word	0x2000845c
 800c830:	20008454 	.word	0x20008454
 800c834:	20008448 	.word	0x20008448
 800c838:	20008458 	.word	0x20008458

0800c83c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d046      	beq.n	800c8dc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c84e:	2308      	movs	r3, #8
 800c850:	425b      	negs	r3, r3
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	4413      	add	r3, r2
 800c856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	4b20      	ldr	r3, [pc, #128]	; (800c8e4 <vPortFree+0xa8>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4013      	ands	r3, r2
 800c866:	2b00      	cmp	r3, #0
 800c868:	d109      	bne.n	800c87e <vPortFree+0x42>
 800c86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	e7fe      	b.n	800c87c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d009      	beq.n	800c89a <vPortFree+0x5e>
 800c886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	60bb      	str	r3, [r7, #8]
 800c898:	e7fe      	b.n	800c898 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	685a      	ldr	r2, [r3, #4]
 800c89e:	4b11      	ldr	r3, [pc, #68]	; (800c8e4 <vPortFree+0xa8>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d019      	beq.n	800c8dc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d115      	bne.n	800c8dc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	4b0b      	ldr	r3, [pc, #44]	; (800c8e4 <vPortFree+0xa8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	43db      	mvns	r3, r3
 800c8ba:	401a      	ands	r2, r3
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8c0:	f7fe ffee 	bl	800b8a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	4b07      	ldr	r3, [pc, #28]	; (800c8e8 <vPortFree+0xac>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	4a06      	ldr	r2, [pc, #24]	; (800c8e8 <vPortFree+0xac>)
 800c8d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8d2:	6938      	ldr	r0, [r7, #16]
 800c8d4:	f000 f86c 	bl	800c9b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c8d8:	f7fe fff0 	bl	800b8bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8dc:	bf00      	nop
 800c8de:	3718      	adds	r7, #24
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	2000845c 	.word	0x2000845c
 800c8e8:	20008454 	.word	0x20008454

0800c8ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8f8:	4b27      	ldr	r3, [pc, #156]	; (800c998 <prvHeapInit+0xac>)
 800c8fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f003 0307 	and.w	r3, r3, #7
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00c      	beq.n	800c920 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	3307      	adds	r3, #7
 800c90a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f023 0307 	bic.w	r3, r3, #7
 800c912:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	4a1f      	ldr	r2, [pc, #124]	; (800c998 <prvHeapInit+0xac>)
 800c91c:	4413      	add	r3, r2
 800c91e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c924:	4a1d      	ldr	r2, [pc, #116]	; (800c99c <prvHeapInit+0xb0>)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c92a:	4b1c      	ldr	r3, [pc, #112]	; (800c99c <prvHeapInit+0xb0>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	4413      	add	r3, r2
 800c936:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c938:	2208      	movs	r2, #8
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	1a9b      	subs	r3, r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f023 0307 	bic.w	r3, r3, #7
 800c946:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	4a15      	ldr	r2, [pc, #84]	; (800c9a0 <prvHeapInit+0xb4>)
 800c94c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c94e:	4b14      	ldr	r3, [pc, #80]	; (800c9a0 <prvHeapInit+0xb4>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2200      	movs	r2, #0
 800c954:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c956:	4b12      	ldr	r3, [pc, #72]	; (800c9a0 <prvHeapInit+0xb4>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2200      	movs	r2, #0
 800c95c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	1ad2      	subs	r2, r2, r3
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c96c:	4b0c      	ldr	r3, [pc, #48]	; (800c9a0 <prvHeapInit+0xb4>)
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	4a0a      	ldr	r2, [pc, #40]	; (800c9a4 <prvHeapInit+0xb8>)
 800c97a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	4a09      	ldr	r2, [pc, #36]	; (800c9a8 <prvHeapInit+0xbc>)
 800c982:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c984:	4b09      	ldr	r3, [pc, #36]	; (800c9ac <prvHeapInit+0xc0>)
 800c986:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c98a:	601a      	str	r2, [r3, #0]
}
 800c98c:	bf00      	nop
 800c98e:	3714      	adds	r7, #20
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	20000448 	.word	0x20000448
 800c99c:	20008448 	.word	0x20008448
 800c9a0:	20008450 	.word	0x20008450
 800c9a4:	20008458 	.word	0x20008458
 800c9a8:	20008454 	.word	0x20008454
 800c9ac:	2000845c 	.word	0x2000845c

0800c9b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9b8:	4b28      	ldr	r3, [pc, #160]	; (800ca5c <prvInsertBlockIntoFreeList+0xac>)
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	e002      	b.n	800c9c4 <prvInsertBlockIntoFreeList+0x14>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	60fb      	str	r3, [r7, #12]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d8f7      	bhi.n	800c9be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	4413      	add	r3, r2
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d108      	bne.n	800c9f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	441a      	add	r2, r3
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	441a      	add	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d118      	bne.n	800ca38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	4b15      	ldr	r3, [pc, #84]	; (800ca60 <prvInsertBlockIntoFreeList+0xb0>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d00d      	beq.n	800ca2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685a      	ldr	r2, [r3, #4]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	441a      	add	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	601a      	str	r2, [r3, #0]
 800ca2c:	e008      	b.n	800ca40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca2e:	4b0c      	ldr	r3, [pc, #48]	; (800ca60 <prvInsertBlockIntoFreeList+0xb0>)
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	601a      	str	r2, [r3, #0]
 800ca36:	e003      	b.n	800ca40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d002      	beq.n	800ca4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca4e:	bf00      	nop
 800ca50:	3714      	adds	r7, #20
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	20008448 	.word	0x20008448
 800ca60:	20008450 	.word	0x20008450

0800ca64 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	490e      	ldr	r1, [pc, #56]	; (800caa4 <MX_USB_HOST_Init+0x40>)
 800ca6c:	480e      	ldr	r0, [pc, #56]	; (800caa8 <MX_USB_HOST_Init+0x44>)
 800ca6e:	f7fc f809 	bl	8008a84 <USBH_Init>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d001      	beq.n	800ca7c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ca78:	f7f4 fa2c 	bl	8000ed4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800ca7c:	490b      	ldr	r1, [pc, #44]	; (800caac <MX_USB_HOST_Init+0x48>)
 800ca7e:	480a      	ldr	r0, [pc, #40]	; (800caa8 <MX_USB_HOST_Init+0x44>)
 800ca80:	f7fc f8b6 	bl	8008bf0 <USBH_RegisterClass>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ca8a:	f7f4 fa23 	bl	8000ed4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ca8e:	4806      	ldr	r0, [pc, #24]	; (800caa8 <MX_USB_HOST_Init+0x44>)
 800ca90:	f7fc f93a 	bl	8008d08 <USBH_Start>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ca9a:	f7f4 fa1b 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ca9e:	bf00      	nop
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	0800cab1 	.word	0x0800cab1
 800caa8:	200087c0 	.word	0x200087c0
 800caac:	2000000c 	.word	0x2000000c

0800cab0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	460b      	mov	r3, r1
 800caba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cabc:	78fb      	ldrb	r3, [r7, #3]
 800cabe:	3b01      	subs	r3, #1
 800cac0:	2b04      	cmp	r3, #4
 800cac2:	d819      	bhi.n	800caf8 <USBH_UserProcess+0x48>
 800cac4:	a201      	add	r2, pc, #4	; (adr r2, 800cacc <USBH_UserProcess+0x1c>)
 800cac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caca:	bf00      	nop
 800cacc:	0800caf9 	.word	0x0800caf9
 800cad0:	0800cae9 	.word	0x0800cae9
 800cad4:	0800caf9 	.word	0x0800caf9
 800cad8:	0800caf1 	.word	0x0800caf1
 800cadc:	0800cae1 	.word	0x0800cae1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cae0:	4b09      	ldr	r3, [pc, #36]	; (800cb08 <USBH_UserProcess+0x58>)
 800cae2:	2203      	movs	r2, #3
 800cae4:	701a      	strb	r2, [r3, #0]
  break;
 800cae6:	e008      	b.n	800cafa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cae8:	4b07      	ldr	r3, [pc, #28]	; (800cb08 <USBH_UserProcess+0x58>)
 800caea:	2202      	movs	r2, #2
 800caec:	701a      	strb	r2, [r3, #0]
  break;
 800caee:	e004      	b.n	800cafa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800caf0:	4b05      	ldr	r3, [pc, #20]	; (800cb08 <USBH_UserProcess+0x58>)
 800caf2:	2201      	movs	r2, #1
 800caf4:	701a      	strb	r2, [r3, #0]
  break;
 800caf6:	e000      	b.n	800cafa <USBH_UserProcess+0x4a>

  default:
  break;
 800caf8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cafa:	bf00      	nop
 800cafc:	370c      	adds	r7, #12
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	20008460 	.word	0x20008460

0800cb0c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b08a      	sub	sp, #40	; 0x28
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb14:	f107 0314 	add.w	r3, r7, #20
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]
 800cb1c:	605a      	str	r2, [r3, #4]
 800cb1e:	609a      	str	r2, [r3, #8]
 800cb20:	60da      	str	r2, [r3, #12]
 800cb22:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a24      	ldr	r2, [pc, #144]	; (800cbbc <HAL_HCD_MspInit+0xb0>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d141      	bne.n	800cbb2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb2e:	2300      	movs	r3, #0
 800cb30:	613b      	str	r3, [r7, #16]
 800cb32:	4b23      	ldr	r3, [pc, #140]	; (800cbc0 <HAL_HCD_MspInit+0xb4>)
 800cb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb36:	4a22      	ldr	r2, [pc, #136]	; (800cbc0 <HAL_HCD_MspInit+0xb4>)
 800cb38:	f043 0302 	orr.w	r3, r3, #2
 800cb3c:	6313      	str	r3, [r2, #48]	; 0x30
 800cb3e:	4b20      	ldr	r3, [pc, #128]	; (800cbc0 <HAL_HCD_MspInit+0xb4>)
 800cb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb42:	f003 0302 	and.w	r3, r3, #2
 800cb46:	613b      	str	r3, [r7, #16]
 800cb48:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cb4a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800cb4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb50:	2302      	movs	r3, #2
 800cb52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb54:	2300      	movs	r3, #0
 800cb56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cb5c:	230c      	movs	r3, #12
 800cb5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb60:	f107 0314 	add.w	r3, r7, #20
 800cb64:	4619      	mov	r1, r3
 800cb66:	4817      	ldr	r0, [pc, #92]	; (800cbc4 <HAL_HCD_MspInit+0xb8>)
 800cb68:	f7f6 f9c2 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cb6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cb72:	2300      	movs	r3, #0
 800cb74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb76:	2300      	movs	r3, #0
 800cb78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cb7a:	f107 0314 	add.w	r3, r7, #20
 800cb7e:	4619      	mov	r1, r3
 800cb80:	4810      	ldr	r0, [pc, #64]	; (800cbc4 <HAL_HCD_MspInit+0xb8>)
 800cb82:	f7f6 f9b5 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cb86:	2300      	movs	r3, #0
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <HAL_HCD_MspInit+0xb4>)
 800cb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8e:	4a0c      	ldr	r2, [pc, #48]	; (800cbc0 <HAL_HCD_MspInit+0xb4>)
 800cb90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb94:	6313      	str	r3, [r2, #48]	; 0x30
 800cb96:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <HAL_HCD_MspInit+0xb4>)
 800cb98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb9e:	60fb      	str	r3, [r7, #12]
 800cba0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800cba2:	2200      	movs	r2, #0
 800cba4:	2100      	movs	r1, #0
 800cba6:	204d      	movs	r0, #77	; 0x4d
 800cba8:	f7f5 fbba 	bl	8002320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cbac:	204d      	movs	r0, #77	; 0x4d
 800cbae:	f7f5 fbd3 	bl	8002358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cbb2:	bf00      	nop
 800cbb4:	3728      	adds	r7, #40	; 0x28
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	40040000 	.word	0x40040000
 800cbc0:	40023800 	.word	0x40023800
 800cbc4:	40020400 	.word	0x40020400

0800cbc8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7fc fd43 	bl	8009662 <USBH_LL_IncTimer>
}
 800cbdc:	bf00      	nop
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fc fd87 	bl	8009706 <USBH_LL_Connect>
}
 800cbf8:	bf00      	nop
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fc fd9c 	bl	800974c <USBH_LL_Disconnect>
}
 800cc14:	bf00      	nop
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	460b      	mov	r3, r1
 800cc26:	70fb      	strb	r3, [r7, #3]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fc fdd1 	bl	80097da <USBH_LL_NotifyURBChange>
#endif
}
 800cc38:	bf00      	nop
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7fc fd31 	bl	80096b6 <USBH_LL_PortEnabled>
}
 800cc54:	bf00      	nop
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fc fd3d 	bl	80096ea <USBH_LL_PortDisabled>
}
 800cc70:	bf00      	nop
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d132      	bne.n	800ccf0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800cc8a:	4a1c      	ldr	r2, [pc, #112]	; (800ccfc <USBH_LL_Init+0x84>)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a19      	ldr	r2, [pc, #100]	; (800ccfc <USBH_LL_Init+0x84>)
 800cc96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cc9a:	4b18      	ldr	r3, [pc, #96]	; (800ccfc <USBH_LL_Init+0x84>)
 800cc9c:	4a18      	ldr	r2, [pc, #96]	; (800cd00 <USBH_LL_Init+0x88>)
 800cc9e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800cca0:	4b16      	ldr	r3, [pc, #88]	; (800ccfc <USBH_LL_Init+0x84>)
 800cca2:	220c      	movs	r2, #12
 800cca4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800cca6:	4b15      	ldr	r3, [pc, #84]	; (800ccfc <USBH_LL_Init+0x84>)
 800cca8:	2201      	movs	r2, #1
 800ccaa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ccac:	4b13      	ldr	r3, [pc, #76]	; (800ccfc <USBH_LL_Init+0x84>)
 800ccae:	2200      	movs	r2, #0
 800ccb0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ccb2:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <USBH_LL_Init+0x84>)
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ccb8:	4b10      	ldr	r3, [pc, #64]	; (800ccfc <USBH_LL_Init+0x84>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ccbe:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <USBH_LL_Init+0x84>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ccc4:	4b0d      	ldr	r3, [pc, #52]	; (800ccfc <USBH_LL_Init+0x84>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ccca:	4b0c      	ldr	r3, [pc, #48]	; (800ccfc <USBH_LL_Init+0x84>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800ccd0:	480a      	ldr	r0, [pc, #40]	; (800ccfc <USBH_LL_Init+0x84>)
 800ccd2:	f7f6 fad0 	bl	8003276 <HAL_HCD_Init>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800ccdc:	f7f4 f8fa 	bl	8000ed4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cce0:	4806      	ldr	r0, [pc, #24]	; (800ccfc <USBH_LL_Init+0x84>)
 800cce2:	f7f6 fed3 	bl	8003a8c <HAL_HCD_GetCurrentFrame>
 800cce6:	4603      	mov	r3, r0
 800cce8:	4619      	mov	r1, r3
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7fc fcaa 	bl	8009644 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ccf0:	2300      	movs	r3, #0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20008ba4 	.word	0x20008ba4
 800cd00:	40040000 	.word	0x40040000

0800cd04 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7f6 fe3e 	bl	800399c <HAL_HCD_Start>
 800cd20:	4603      	mov	r3, r0
 800cd22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 f95c 	bl	800cfe4 <USBH_Get_USB_Status>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd30:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd46:	2300      	movs	r3, #0
 800cd48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7f6 fe46 	bl	80039e2 <HAL_HCD_Stop>
 800cd56:	4603      	mov	r3, r0
 800cd58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 f941 	bl	800cfe4 <USBH_Get_USB_Status>
 800cd62:	4603      	mov	r3, r0
 800cd64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd66:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7f6 fe90 	bl	8003aa8 <HAL_HCD_GetCurrentSpeed>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d007      	beq.n	800cd9e <USBH_LL_GetSpeed+0x2e>
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d302      	bcc.n	800cd98 <USBH_LL_GetSpeed+0x28>
 800cd92:	2b02      	cmp	r3, #2
 800cd94:	d006      	beq.n	800cda4 <USBH_LL_GetSpeed+0x34>
 800cd96:	e008      	b.n	800cdaa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd9c:	e008      	b.n	800cdb0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	73fb      	strb	r3, [r7, #15]
    break;
 800cda2:	e005      	b.n	800cdb0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cda4:	2302      	movs	r3, #2
 800cda6:	73fb      	strb	r3, [r7, #15]
    break;
 800cda8:	e002      	b.n	800cdb0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	73fb      	strb	r3, [r7, #15]
    break;
 800cdae:	bf00      	nop
  }
  return  speed;
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7f6 fe23 	bl	8003a1c <HAL_HCD_ResetPort>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f000 f901 	bl	800cfe4 <USBH_Get_USB_Status>
 800cde2:	4603      	mov	r3, r0
 800cde4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce02:	78fa      	ldrb	r2, [r7, #3]
 800ce04:	4611      	mov	r1, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7f6 fe2b 	bl	8003a62 <HAL_HCD_HC_GetXferCount>
 800ce0c:	4603      	mov	r3, r0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ce16:	b590      	push	{r4, r7, lr}
 800ce18:	b089      	sub	sp, #36	; 0x24
 800ce1a:	af04      	add	r7, sp, #16
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	4608      	mov	r0, r1
 800ce20:	4611      	mov	r1, r2
 800ce22:	461a      	mov	r2, r3
 800ce24:	4603      	mov	r3, r0
 800ce26:	70fb      	strb	r3, [r7, #3]
 800ce28:	460b      	mov	r3, r1
 800ce2a:	70bb      	strb	r3, [r7, #2]
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce34:	2300      	movs	r3, #0
 800ce36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ce3e:	787c      	ldrb	r4, [r7, #1]
 800ce40:	78ba      	ldrb	r2, [r7, #2]
 800ce42:	78f9      	ldrb	r1, [r7, #3]
 800ce44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ce46:	9302      	str	r3, [sp, #8]
 800ce48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce4c:	9301      	str	r3, [sp, #4]
 800ce4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	4623      	mov	r3, r4
 800ce56:	f7f6 fa70 	bl	800333a <HAL_HCD_HC_Init>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce5e:	7bfb      	ldrb	r3, [r7, #15]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 f8bf 	bl	800cfe4 <USBH_Get_USB_Status>
 800ce66:	4603      	mov	r3, r0
 800ce68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd90      	pop	{r4, r7, pc}

0800ce74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce8e:	78fa      	ldrb	r2, [r7, #3]
 800ce90:	4611      	mov	r1, r2
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7f6 fae9 	bl	800346a <HAL_HCD_HC_Halt>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce9c:	7bfb      	ldrb	r3, [r7, #15]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 f8a0 	bl	800cfe4 <USBH_Get_USB_Status>
 800cea4:	4603      	mov	r3, r0
 800cea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ceb2:	b590      	push	{r4, r7, lr}
 800ceb4:	b089      	sub	sp, #36	; 0x24
 800ceb6:	af04      	add	r7, sp, #16
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	4608      	mov	r0, r1
 800cebc:	4611      	mov	r1, r2
 800cebe:	461a      	mov	r2, r3
 800cec0:	4603      	mov	r3, r0
 800cec2:	70fb      	strb	r3, [r7, #3]
 800cec4:	460b      	mov	r3, r1
 800cec6:	70bb      	strb	r3, [r7, #2]
 800cec8:	4613      	mov	r3, r2
 800ceca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ceda:	787c      	ldrb	r4, [r7, #1]
 800cedc:	78ba      	ldrb	r2, [r7, #2]
 800cede:	78f9      	ldrb	r1, [r7, #3]
 800cee0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cee4:	9303      	str	r3, [sp, #12]
 800cee6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cee8:	9302      	str	r3, [sp, #8]
 800ceea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	4623      	mov	r3, r4
 800cef6:	f7f6 fadb 	bl	80034b0 <HAL_HCD_HC_SubmitRequest>
 800cefa:	4603      	mov	r3, r0
 800cefc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 f86f 	bl	800cfe4 <USBH_Get_USB_Status>
 800cf06:	4603      	mov	r3, r0
 800cf08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd90      	pop	{r4, r7, pc}

0800cf14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf26:	78fa      	ldrb	r2, [r7, #3]
 800cf28:	4611      	mov	r1, r2
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7f6 fd84 	bl	8003a38 <HAL_HCD_HC_GetURBState>
 800cf30:	4603      	mov	r3, r0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	460b      	mov	r3, r1
 800cf44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d103      	bne.n	800cf58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cf50:	78fb      	ldrb	r3, [r7, #3]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f000 f872 	bl	800d03c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cf58:	20c8      	movs	r0, #200	; 0xc8
 800cf5a:	f7f4 fd2d 	bl	80019b8 <HAL_Delay>
  return USBH_OK;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	460b      	mov	r3, r1
 800cf72:	70fb      	strb	r3, [r7, #3]
 800cf74:	4613      	mov	r3, r2
 800cf76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cf80:	78fa      	ldrb	r2, [r7, #3]
 800cf82:	68f9      	ldr	r1, [r7, #12]
 800cf84:	4613      	mov	r3, r2
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4413      	add	r3, r2
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	440b      	add	r3, r1
 800cf8e:	333b      	adds	r3, #59	; 0x3b
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00a      	beq.n	800cfac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cf96:	78fa      	ldrb	r2, [r7, #3]
 800cf98:	68f9      	ldr	r1, [r7, #12]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4413      	add	r3, r2
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	440b      	add	r3, r1
 800cfa4:	3350      	adds	r3, #80	; 0x50
 800cfa6:	78ba      	ldrb	r2, [r7, #2]
 800cfa8:	701a      	strb	r2, [r3, #0]
 800cfaa:	e009      	b.n	800cfc0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cfac:	78fa      	ldrb	r2, [r7, #3]
 800cfae:	68f9      	ldr	r1, [r7, #12]
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4413      	add	r3, r2
 800cfb6:	00db      	lsls	r3, r3, #3
 800cfb8:	440b      	add	r3, r1
 800cfba:	3351      	adds	r3, #81	; 0x51
 800cfbc:	78ba      	ldrb	r2, [r7, #2]
 800cfbe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b082      	sub	sp, #8
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f7f4 fcee 	bl	80019b8 <HAL_Delay>
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cff2:	79fb      	ldrb	r3, [r7, #7]
 800cff4:	2b03      	cmp	r3, #3
 800cff6:	d817      	bhi.n	800d028 <USBH_Get_USB_Status+0x44>
 800cff8:	a201      	add	r2, pc, #4	; (adr r2, 800d000 <USBH_Get_USB_Status+0x1c>)
 800cffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffe:	bf00      	nop
 800d000:	0800d011 	.word	0x0800d011
 800d004:	0800d017 	.word	0x0800d017
 800d008:	0800d01d 	.word	0x0800d01d
 800d00c:	0800d023 	.word	0x0800d023
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	73fb      	strb	r3, [r7, #15]
    break;
 800d014:	e00b      	b.n	800d02e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d016:	2302      	movs	r3, #2
 800d018:	73fb      	strb	r3, [r7, #15]
    break;
 800d01a:	e008      	b.n	800d02e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d01c:	2301      	movs	r3, #1
 800d01e:	73fb      	strb	r3, [r7, #15]
    break;
 800d020:	e005      	b.n	800d02e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d022:	2302      	movs	r3, #2
 800d024:	73fb      	strb	r3, [r7, #15]
    break;
 800d026:	e002      	b.n	800d02e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d028:	2302      	movs	r3, #2
 800d02a:	73fb      	strb	r3, [r7, #15]
    break;
 800d02c:	bf00      	nop
  }
  return usb_status;
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d046:	79fb      	ldrb	r3, [r7, #7]
 800d048:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d04a:	79fb      	ldrb	r3, [r7, #7]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d102      	bne.n	800d056 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d050:	2301      	movs	r3, #1
 800d052:	73fb      	strb	r3, [r7, #15]
 800d054:	e001      	b.n	800d05a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d056:	2300      	movs	r3, #0
 800d058:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d05a:	7bfb      	ldrb	r3, [r7, #15]
 800d05c:	461a      	mov	r2, r3
 800d05e:	2110      	movs	r1, #16
 800d060:	4803      	ldr	r0, [pc, #12]	; (800d070 <MX_DriverVbusHS+0x34>)
 800d062:	f7f6 f8ef 	bl	8003244 <HAL_GPIO_WritePin>
}
 800d066:	bf00      	nop
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	40020800 	.word	0x40020800

0800d074 <__errno>:
 800d074:	4b01      	ldr	r3, [pc, #4]	; (800d07c <__errno+0x8>)
 800d076:	6818      	ldr	r0, [r3, #0]
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	20000030 	.word	0x20000030

0800d080 <__libc_init_array>:
 800d080:	b570      	push	{r4, r5, r6, lr}
 800d082:	4e0d      	ldr	r6, [pc, #52]	; (800d0b8 <__libc_init_array+0x38>)
 800d084:	4c0d      	ldr	r4, [pc, #52]	; (800d0bc <__libc_init_array+0x3c>)
 800d086:	1ba4      	subs	r4, r4, r6
 800d088:	10a4      	asrs	r4, r4, #2
 800d08a:	2500      	movs	r5, #0
 800d08c:	42a5      	cmp	r5, r4
 800d08e:	d109      	bne.n	800d0a4 <__libc_init_array+0x24>
 800d090:	4e0b      	ldr	r6, [pc, #44]	; (800d0c0 <__libc_init_array+0x40>)
 800d092:	4c0c      	ldr	r4, [pc, #48]	; (800d0c4 <__libc_init_array+0x44>)
 800d094:	f000 f8f6 	bl	800d284 <_init>
 800d098:	1ba4      	subs	r4, r4, r6
 800d09a:	10a4      	asrs	r4, r4, #2
 800d09c:	2500      	movs	r5, #0
 800d09e:	42a5      	cmp	r5, r4
 800d0a0:	d105      	bne.n	800d0ae <__libc_init_array+0x2e>
 800d0a2:	bd70      	pop	{r4, r5, r6, pc}
 800d0a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d0a8:	4798      	blx	r3
 800d0aa:	3501      	adds	r5, #1
 800d0ac:	e7ee      	b.n	800d08c <__libc_init_array+0xc>
 800d0ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d0b2:	4798      	blx	r3
 800d0b4:	3501      	adds	r5, #1
 800d0b6:	e7f2      	b.n	800d09e <__libc_init_array+0x1e>
 800d0b8:	0800d330 	.word	0x0800d330
 800d0bc:	0800d330 	.word	0x0800d330
 800d0c0:	0800d330 	.word	0x0800d330
 800d0c4:	0800d334 	.word	0x0800d334

0800d0c8 <malloc>:
 800d0c8:	4b02      	ldr	r3, [pc, #8]	; (800d0d4 <malloc+0xc>)
 800d0ca:	4601      	mov	r1, r0
 800d0cc:	6818      	ldr	r0, [r3, #0]
 800d0ce:	f000 b86d 	b.w	800d1ac <_malloc_r>
 800d0d2:	bf00      	nop
 800d0d4:	20000030 	.word	0x20000030

0800d0d8 <free>:
 800d0d8:	4b02      	ldr	r3, [pc, #8]	; (800d0e4 <free+0xc>)
 800d0da:	4601      	mov	r1, r0
 800d0dc:	6818      	ldr	r0, [r3, #0]
 800d0de:	f000 b817 	b.w	800d110 <_free_r>
 800d0e2:	bf00      	nop
 800d0e4:	20000030 	.word	0x20000030

0800d0e8 <memcpy>:
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	1e43      	subs	r3, r0, #1
 800d0ec:	440a      	add	r2, r1
 800d0ee:	4291      	cmp	r1, r2
 800d0f0:	d100      	bne.n	800d0f4 <memcpy+0xc>
 800d0f2:	bd10      	pop	{r4, pc}
 800d0f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0fc:	e7f7      	b.n	800d0ee <memcpy+0x6>

0800d0fe <memset>:
 800d0fe:	4402      	add	r2, r0
 800d100:	4603      	mov	r3, r0
 800d102:	4293      	cmp	r3, r2
 800d104:	d100      	bne.n	800d108 <memset+0xa>
 800d106:	4770      	bx	lr
 800d108:	f803 1b01 	strb.w	r1, [r3], #1
 800d10c:	e7f9      	b.n	800d102 <memset+0x4>
	...

0800d110 <_free_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4605      	mov	r5, r0
 800d114:	2900      	cmp	r1, #0
 800d116:	d045      	beq.n	800d1a4 <_free_r+0x94>
 800d118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d11c:	1f0c      	subs	r4, r1, #4
 800d11e:	2b00      	cmp	r3, #0
 800d120:	bfb8      	it	lt
 800d122:	18e4      	addlt	r4, r4, r3
 800d124:	f000 f8ac 	bl	800d280 <__malloc_lock>
 800d128:	4a1f      	ldr	r2, [pc, #124]	; (800d1a8 <_free_r+0x98>)
 800d12a:	6813      	ldr	r3, [r2, #0]
 800d12c:	4610      	mov	r0, r2
 800d12e:	b933      	cbnz	r3, 800d13e <_free_r+0x2e>
 800d130:	6063      	str	r3, [r4, #4]
 800d132:	6014      	str	r4, [r2, #0]
 800d134:	4628      	mov	r0, r5
 800d136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d13a:	f000 b8a2 	b.w	800d282 <__malloc_unlock>
 800d13e:	42a3      	cmp	r3, r4
 800d140:	d90c      	bls.n	800d15c <_free_r+0x4c>
 800d142:	6821      	ldr	r1, [r4, #0]
 800d144:	1862      	adds	r2, r4, r1
 800d146:	4293      	cmp	r3, r2
 800d148:	bf04      	itt	eq
 800d14a:	681a      	ldreq	r2, [r3, #0]
 800d14c:	685b      	ldreq	r3, [r3, #4]
 800d14e:	6063      	str	r3, [r4, #4]
 800d150:	bf04      	itt	eq
 800d152:	1852      	addeq	r2, r2, r1
 800d154:	6022      	streq	r2, [r4, #0]
 800d156:	6004      	str	r4, [r0, #0]
 800d158:	e7ec      	b.n	800d134 <_free_r+0x24>
 800d15a:	4613      	mov	r3, r2
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	b10a      	cbz	r2, 800d164 <_free_r+0x54>
 800d160:	42a2      	cmp	r2, r4
 800d162:	d9fa      	bls.n	800d15a <_free_r+0x4a>
 800d164:	6819      	ldr	r1, [r3, #0]
 800d166:	1858      	adds	r0, r3, r1
 800d168:	42a0      	cmp	r0, r4
 800d16a:	d10b      	bne.n	800d184 <_free_r+0x74>
 800d16c:	6820      	ldr	r0, [r4, #0]
 800d16e:	4401      	add	r1, r0
 800d170:	1858      	adds	r0, r3, r1
 800d172:	4282      	cmp	r2, r0
 800d174:	6019      	str	r1, [r3, #0]
 800d176:	d1dd      	bne.n	800d134 <_free_r+0x24>
 800d178:	6810      	ldr	r0, [r2, #0]
 800d17a:	6852      	ldr	r2, [r2, #4]
 800d17c:	605a      	str	r2, [r3, #4]
 800d17e:	4401      	add	r1, r0
 800d180:	6019      	str	r1, [r3, #0]
 800d182:	e7d7      	b.n	800d134 <_free_r+0x24>
 800d184:	d902      	bls.n	800d18c <_free_r+0x7c>
 800d186:	230c      	movs	r3, #12
 800d188:	602b      	str	r3, [r5, #0]
 800d18a:	e7d3      	b.n	800d134 <_free_r+0x24>
 800d18c:	6820      	ldr	r0, [r4, #0]
 800d18e:	1821      	adds	r1, r4, r0
 800d190:	428a      	cmp	r2, r1
 800d192:	bf04      	itt	eq
 800d194:	6811      	ldreq	r1, [r2, #0]
 800d196:	6852      	ldreq	r2, [r2, #4]
 800d198:	6062      	str	r2, [r4, #4]
 800d19a:	bf04      	itt	eq
 800d19c:	1809      	addeq	r1, r1, r0
 800d19e:	6021      	streq	r1, [r4, #0]
 800d1a0:	605c      	str	r4, [r3, #4]
 800d1a2:	e7c7      	b.n	800d134 <_free_r+0x24>
 800d1a4:	bd38      	pop	{r3, r4, r5, pc}
 800d1a6:	bf00      	nop
 800d1a8:	20008464 	.word	0x20008464

0800d1ac <_malloc_r>:
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	1ccd      	adds	r5, r1, #3
 800d1b0:	f025 0503 	bic.w	r5, r5, #3
 800d1b4:	3508      	adds	r5, #8
 800d1b6:	2d0c      	cmp	r5, #12
 800d1b8:	bf38      	it	cc
 800d1ba:	250c      	movcc	r5, #12
 800d1bc:	2d00      	cmp	r5, #0
 800d1be:	4606      	mov	r6, r0
 800d1c0:	db01      	blt.n	800d1c6 <_malloc_r+0x1a>
 800d1c2:	42a9      	cmp	r1, r5
 800d1c4:	d903      	bls.n	800d1ce <_malloc_r+0x22>
 800d1c6:	230c      	movs	r3, #12
 800d1c8:	6033      	str	r3, [r6, #0]
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}
 800d1ce:	f000 f857 	bl	800d280 <__malloc_lock>
 800d1d2:	4a21      	ldr	r2, [pc, #132]	; (800d258 <_malloc_r+0xac>)
 800d1d4:	6814      	ldr	r4, [r2, #0]
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	b991      	cbnz	r1, 800d200 <_malloc_r+0x54>
 800d1da:	4c20      	ldr	r4, [pc, #128]	; (800d25c <_malloc_r+0xb0>)
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	b91b      	cbnz	r3, 800d1e8 <_malloc_r+0x3c>
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f000 f83d 	bl	800d260 <_sbrk_r>
 800d1e6:	6020      	str	r0, [r4, #0]
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f000 f838 	bl	800d260 <_sbrk_r>
 800d1f0:	1c43      	adds	r3, r0, #1
 800d1f2:	d124      	bne.n	800d23e <_malloc_r+0x92>
 800d1f4:	230c      	movs	r3, #12
 800d1f6:	6033      	str	r3, [r6, #0]
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	f000 f842 	bl	800d282 <__malloc_unlock>
 800d1fe:	e7e4      	b.n	800d1ca <_malloc_r+0x1e>
 800d200:	680b      	ldr	r3, [r1, #0]
 800d202:	1b5b      	subs	r3, r3, r5
 800d204:	d418      	bmi.n	800d238 <_malloc_r+0x8c>
 800d206:	2b0b      	cmp	r3, #11
 800d208:	d90f      	bls.n	800d22a <_malloc_r+0x7e>
 800d20a:	600b      	str	r3, [r1, #0]
 800d20c:	50cd      	str	r5, [r1, r3]
 800d20e:	18cc      	adds	r4, r1, r3
 800d210:	4630      	mov	r0, r6
 800d212:	f000 f836 	bl	800d282 <__malloc_unlock>
 800d216:	f104 000b 	add.w	r0, r4, #11
 800d21a:	1d23      	adds	r3, r4, #4
 800d21c:	f020 0007 	bic.w	r0, r0, #7
 800d220:	1ac3      	subs	r3, r0, r3
 800d222:	d0d3      	beq.n	800d1cc <_malloc_r+0x20>
 800d224:	425a      	negs	r2, r3
 800d226:	50e2      	str	r2, [r4, r3]
 800d228:	e7d0      	b.n	800d1cc <_malloc_r+0x20>
 800d22a:	428c      	cmp	r4, r1
 800d22c:	684b      	ldr	r3, [r1, #4]
 800d22e:	bf16      	itet	ne
 800d230:	6063      	strne	r3, [r4, #4]
 800d232:	6013      	streq	r3, [r2, #0]
 800d234:	460c      	movne	r4, r1
 800d236:	e7eb      	b.n	800d210 <_malloc_r+0x64>
 800d238:	460c      	mov	r4, r1
 800d23a:	6849      	ldr	r1, [r1, #4]
 800d23c:	e7cc      	b.n	800d1d8 <_malloc_r+0x2c>
 800d23e:	1cc4      	adds	r4, r0, #3
 800d240:	f024 0403 	bic.w	r4, r4, #3
 800d244:	42a0      	cmp	r0, r4
 800d246:	d005      	beq.n	800d254 <_malloc_r+0xa8>
 800d248:	1a21      	subs	r1, r4, r0
 800d24a:	4630      	mov	r0, r6
 800d24c:	f000 f808 	bl	800d260 <_sbrk_r>
 800d250:	3001      	adds	r0, #1
 800d252:	d0cf      	beq.n	800d1f4 <_malloc_r+0x48>
 800d254:	6025      	str	r5, [r4, #0]
 800d256:	e7db      	b.n	800d210 <_malloc_r+0x64>
 800d258:	20008464 	.word	0x20008464
 800d25c:	20008468 	.word	0x20008468

0800d260 <_sbrk_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4c06      	ldr	r4, [pc, #24]	; (800d27c <_sbrk_r+0x1c>)
 800d264:	2300      	movs	r3, #0
 800d266:	4605      	mov	r5, r0
 800d268:	4608      	mov	r0, r1
 800d26a:	6023      	str	r3, [r4, #0]
 800d26c:	f7f4 faec 	bl	8001848 <_sbrk>
 800d270:	1c43      	adds	r3, r0, #1
 800d272:	d102      	bne.n	800d27a <_sbrk_r+0x1a>
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	b103      	cbz	r3, 800d27a <_sbrk_r+0x1a>
 800d278:	602b      	str	r3, [r5, #0]
 800d27a:	bd38      	pop	{r3, r4, r5, pc}
 800d27c:	20008e68 	.word	0x20008e68

0800d280 <__malloc_lock>:
 800d280:	4770      	bx	lr

0800d282 <__malloc_unlock>:
 800d282:	4770      	bx	lr

0800d284 <_init>:
 800d284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d286:	bf00      	nop
 800d288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d28a:	bc08      	pop	{r3}
 800d28c:	469e      	mov	lr, r3
 800d28e:	4770      	bx	lr

0800d290 <_fini>:
 800d290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d292:	bf00      	nop
 800d294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d296:	bc08      	pop	{r3}
 800d298:	469e      	mov	lr, r3
 800d29a:	4770      	bx	lr
