
OSPA_oscyloskop_SR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c75c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800c90c  0800c90c  0001c90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c990  0800c990  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c990  0800c990  0001c990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c998  0800c998  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c998  0800c998  0001c998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c99c  0800c99c  0001c99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c9a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d78  20000094  0800ca34  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008e0c  0800ca34  00028e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ecef  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ce8  00000000  00000000  0004edb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002428  00000000  00000000  00054aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021a8  00000000  00000000  00056ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cc0a  00000000  00000000  00059070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020f96  00000000  00000000  00085c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f953c  00000000  00000000  000a6c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a014c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ad4  00000000  00000000  001a01c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c8f4 	.word	0x0800c8f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800c8f4 	.word	0x0800c8f4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200000b0 	.word	0x200000b0
 8000554:	20000108 	.word	0x20000108

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f001 f977 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f82f 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 fb67 	bl	8000c38 <MX_GPIO_Init>
  MX_CRC_Init();
 800056a:	f000 f901 	bl	8000770 <MX_CRC_Init>
  MX_DMA2D_Init();
 800056e:	f000 f93d 	bl	80007ec <MX_DMA2D_Init>
  MX_FMC_Init();
 8000572:	f000 fb11 	bl	8000b98 <MX_FMC_Init>
  MX_I2C3_Init();
 8000576:	f000 f96b 	bl	8000850 <MX_I2C3_Init>
  MX_LTDC_Init();
 800057a:	f000 f9a9 	bl	80008d0 <MX_LTDC_Init>
  MX_SPI5_Init();
 800057e:	f000 fa5b 	bl	8000a38 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000582:	f000 fa8f 	bl	8000aa4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000586:	f000 fadd 	bl	8000b44 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800058a:	f000 f89f 	bl	80006cc <MX_ADC1_Init>
  MX_DAC_Init();
 800058e:	f000 f903 	bl	8000798 <MX_DAC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <main+0x64>)
 8000594:	1d3c      	adds	r4, r7, #4
 8000596:	461d      	mov	r5, r3
 8000598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f009 fb66 	bl	8009c7a <osThreadCreate>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <main+0x68>)
 80005b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f009 fb5a 	bl	8009c6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x60>
 80005ba:	bf00      	nop
 80005bc:	0800c918 	.word	0x0800c918
 80005c0:	2000846c 	.word	0x2000846c

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b0a0      	sub	sp, #128	; 0x80
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f00c f8cb 	bl	800c76e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2230      	movs	r2, #48	; 0x30
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f00c f8bc 	bl	800c76e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b32      	ldr	r3, [pc, #200]	; (80006c4 <SystemClock_Config+0x100>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	4a31      	ldr	r2, [pc, #196]	; (80006c4 <SystemClock_Config+0x100>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	6413      	str	r3, [r2, #64]	; 0x40
 8000606:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <SystemClock_Config+0x100>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <SystemClock_Config+0x104>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061e:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <SystemClock_Config+0x104>)
 8000620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0x104>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000632:	2301      	movs	r3, #1
 8000634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000644:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000646:	2304      	movs	r3, #4
 8000648:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800064a:	2348      	movs	r3, #72	; 0x48
 800064c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000652:	2303      	movs	r3, #3
 8000654:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fa92 	bl	8004b84 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000666:	f000 fc13 	bl	8000e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000680:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f004 fcec 	bl	8005064 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000692:	f000 fbfd 	bl	8000e90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000696:	2308      	movs	r3, #8
 8000698:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800069a:	2332      	movs	r3, #50	; 0x32
 800069c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80006a2:	2300      	movs	r3, #0
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 fefe 	bl	80054ac <HAL_RCCEx_PeriphCLKConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006b6:	f000 fbeb 	bl	8000e90 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3780      	adds	r7, #128	; 0x80
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_ADC1_Init+0x98>)
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <MX_ADC1_Init+0x9c>)
 80006e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_ADC1_Init+0x98>)
 800070c:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_ADC1_Init+0xa0>)
 800070e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_ADC1_Init+0x98>)
 8000718:	2201      	movs	r2, #1
 800071a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ADC1_Init+0x98>)
 8000726:	2201      	movs	r2, #1
 8000728:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <MX_ADC1_Init+0x98>)
 800072c:	f001 f8f4 	bl	8001918 <HAL_ADC_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000736:	f000 fbab 	bl	8000e90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800073a:	230d      	movs	r3, #13
 800073c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_ADC1_Init+0x98>)
 800074c:	f001 f928 	bl	80019a0 <HAL_ADC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000756:	f000 fb9b 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200085cc 	.word	0x200085cc
 8000768:	40012000 	.word	0x40012000
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_CRC_Init+0x20>)
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <MX_CRC_Init+0x24>)
 8000778:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_CRC_Init+0x20>)
 800077c:	f001 fc20 	bl	8001fc0 <HAL_CRC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000786:	f000 fb83 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000851c 	.word	0x2000851c
 8000794:	40023000 	.word	0x40023000

08000798 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_DAC_Init+0x4c>)
 80007a8:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <MX_DAC_Init+0x50>)
 80007aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_DAC_Init+0x4c>)
 80007ae:	f001 fc23 	bl	8001ff8 <HAL_DAC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007b8:	f000 fb6a 	bl	8000e90 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	2210      	movs	r2, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_DAC_Init+0x4c>)
 80007cc:	f001 fc8a 	bl	80020e4 <HAL_DAC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007d6:	f000 fb5b 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20008654 	.word	0x20008654
 80007e8:	40007400 	.word	0x40007400

080007ec <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_DMA2D_Init+0x5c>)
 80007f2:	4a16      	ldr	r2, [pc, #88]	; (800084c <MX_DMA2D_Init+0x60>)
 80007f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_DMA2D_Init+0x5c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_DMA2D_Init+0x5c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_DMA2D_Init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_DMA2D_Init+0x5c>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_DMA2D_Init+0x5c>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_DMA2D_Init+0x5c>)
 8000816:	2200      	movs	r2, #0
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_DMA2D_Init+0x5c>)
 800081c:	2200      	movs	r2, #0
 800081e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <MX_DMA2D_Init+0x5c>)
 8000822:	f001 fcb6 	bl	8002192 <HAL_DMA2D_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800082c:	f000 fb30 	bl	8000e90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000830:	2101      	movs	r1, #1
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_DMA2D_Init+0x5c>)
 8000834:	f001 fe06 	bl	8002444 <HAL_DMA2D_ConfigLayer>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800083e:	f000 fb27 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200086a8 	.word	0x200086a8
 800084c:	4002b000 	.word	0x4002b000

08000850 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C3_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C3_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C3_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C3_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C3_Init+0x74>)
 800086e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000872:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_I2C3_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C3_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_I2C3_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C3_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <MX_I2C3_Init+0x74>)
 800088e:	f003 fd1f 	bl	80042d0 <HAL_I2C_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000898:	f000 fafa 	bl	8000e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C3_Init+0x74>)
 80008a0:	f003 fe4e 	bl	8004540 <HAL_I2CEx_ConfigAnalogFilter>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80008aa:	f000 faf1 	bl	8000e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_I2C3_Init+0x74>)
 80008b2:	f003 fe81 	bl	80045b8 <HAL_I2CEx_ConfigDigitalFilter>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008bc:	f000 fae8 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20008470 	.word	0x20008470
 80008c8:	40005c00 	.word	0x40005c00
 80008cc:	000186a0 	.word	0x000186a0

080008d0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09a      	sub	sp, #104	; 0x68
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008da:	2234      	movs	r2, #52	; 0x34
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f00b ff45 	bl	800c76e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2234      	movs	r2, #52	; 0x34
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00b ff3f 	bl	800c76e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008f0:	4b4f      	ldr	r3, [pc, #316]	; (8000a30 <MX_LTDC_Init+0x160>)
 80008f2:	4a50      	ldr	r2, [pc, #320]	; (8000a34 <MX_LTDC_Init+0x164>)
 80008f4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008f6:	4b4e      	ldr	r3, [pc, #312]	; (8000a30 <MX_LTDC_Init+0x160>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008fc:	4b4c      	ldr	r3, [pc, #304]	; (8000a30 <MX_LTDC_Init+0x160>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000902:	4b4b      	ldr	r3, [pc, #300]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000908:	4b49      	ldr	r3, [pc, #292]	; (8000a30 <MX_LTDC_Init+0x160>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800090e:	4b48      	ldr	r3, [pc, #288]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000910:	2209      	movs	r2, #9
 8000912:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000914:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000916:	2201      	movs	r2, #1
 8000918:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800091a:	4b45      	ldr	r3, [pc, #276]	; (8000a30 <MX_LTDC_Init+0x160>)
 800091c:	221d      	movs	r2, #29
 800091e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000920:	4b43      	ldr	r3, [pc, #268]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000922:	2203      	movs	r2, #3
 8000924:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000926:	4b42      	ldr	r3, [pc, #264]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000928:	f240 120d 	movw	r2, #269	; 0x10d
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800092e:	4b40      	ldr	r3, [pc, #256]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000930:	f240 1243 	movw	r2, #323	; 0x143
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000936:	4b3e      	ldr	r3, [pc, #248]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000938:	f240 1217 	movw	r2, #279	; 0x117
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800093e:	4b3c      	ldr	r3, [pc, #240]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000940:	f240 1247 	movw	r2, #327	; 0x147
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000946:	4b3a      	ldr	r3, [pc, #232]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800094e:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000956:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800095e:	4834      	ldr	r0, [pc, #208]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000960:	f003 fe6a 	bl	8004638 <HAL_LTDC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800096a:	f000 fa91 	bl	8000e90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000972:	23f0      	movs	r3, #240	; 0xf0
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 800097a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000980:	2302      	movs	r3, #2
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000984:	23ff      	movs	r3, #255	; 0xff
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800098c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000990:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000992:	2307      	movs	r3, #7
 8000994:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000996:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800099a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 800099c:	23f0      	movs	r3, #240	; 0xf0
 800099e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 80009a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80009a4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	481b      	ldr	r0, [pc, #108]	; (8000a30 <MX_LTDC_Init+0x160>)
 80009c2:	f003 ff09 	bl	80047d8 <HAL_LTDC_ConfigLayer>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 80009cc:	f000 fa60 	bl	8000e90 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009ee:	2305      	movs	r3, #5
 80009f0:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	2201      	movs	r2, #1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <MX_LTDC_Init+0x160>)
 8000a18:	f003 fede 	bl	80047d8 <HAL_LTDC_ConfigLayer>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000a22:	f000 fa35 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3768      	adds	r7, #104	; 0x68
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20008524 	.word	0x20008524
 8000a34:	40016800 	.word	0x40016800

08000a38 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_SPI5_Init+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a6c:	2218      	movs	r2, #24
 8000a6e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_SPI5_Init+0x64>)
 8000a8a:	f004 ff01 	bl	8005890 <HAL_SPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a94:	f000 f9fc 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200084c4 	.word	0x200084c4
 8000aa0:	40015000 	.word	0x40015000

08000aa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <MX_TIM1_Init+0x9c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000aee:	f004 ff33 	bl	8005958 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000af8:	f000 f9ca 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000b0a:	f005 f87c 	bl	8005c06 <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b14:	f000 f9bc 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM1_Init+0x98>)
 8000b26:	f005 fa87 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b30:	f000 f9ae 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20008668 	.word	0x20008668
 8000b40:	40010000 	.word	0x40010000

08000b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_USART1_UART_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b7c:	f005 faec 	bl	8006158 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b86:	f000 f983 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20008614 	.word	0x20008614
 8000b94:	40011000 	.word	0x40011000

08000b98 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bb2:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <MX_FMC_Init+0x9c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bca:	2210      	movs	r2, #16
 8000bcc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bd0:	2240      	movs	r2, #64	; 0x40
 8000bd2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bd6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000bda:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_FMC_Init+0x98>)
 8000be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_FMC_Init+0x98>)
 8000bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c04:	2307      	movs	r3, #7
 8000c06:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_FMC_Init+0x98>)
 8000c1a:	f004 fe05 	bl	8005828 <HAL_SDRAM_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c24:	f000 f934 	bl	8000e90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200086e8 	.word	0x200086e8
 8000c34:	a0000140 	.word	0xa0000140

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	; 0x38
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
 8000c52:	4b7a      	ldr	r3, [pc, #488]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a79      	ldr	r2, [pc, #484]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b77      	ldr	r3, [pc, #476]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	623b      	str	r3, [r7, #32]
 8000c68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	4b73      	ldr	r3, [pc, #460]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a72      	ldr	r2, [pc, #456]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000c74:	f043 0320 	orr.w	r3, r3, #32
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b70      	ldr	r3, [pc, #448]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0320 	and.w	r3, r3, #32
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	4b6c      	ldr	r3, [pc, #432]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a6b      	ldr	r2, [pc, #428]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b69      	ldr	r3, [pc, #420]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	4b65      	ldr	r3, [pc, #404]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a64      	ldr	r2, [pc, #400]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a5d      	ldr	r2, [pc, #372]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a56      	ldr	r2, [pc, #344]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b54      	ldr	r3, [pc, #336]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b50      	ldr	r3, [pc, #320]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a4f      	ldr	r2, [pc, #316]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000d00:	f043 0310 	orr.w	r3, r3, #16
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0310 	and.w	r3, r3, #16
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a48      	ldr	r2, [pc, #288]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <MX_GPIO_Init+0x204>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2116      	movs	r1, #22
 8000d32:	4843      	ldr	r0, [pc, #268]	; (8000e40 <MX_GPIO_Init+0x208>)
 8000d34:	f001 fdc2 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	4841      	ldr	r0, [pc, #260]	; (8000e44 <MX_GPIO_Init+0x20c>)
 8000d3e:	f001 fdbd 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d48:	483f      	ldr	r0, [pc, #252]	; (8000e48 <MX_GPIO_Init+0x210>)
 8000d4a:	f001 fdb7 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d54:	483d      	ldr	r0, [pc, #244]	; (8000e4c <MX_GPIO_Init+0x214>)
 8000d56:	f001 fdb1 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d5a:	2316      	movs	r3, #22
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4833      	ldr	r0, [pc, #204]	; (8000e40 <MX_GPIO_Init+0x208>)
 8000d72:	f001 fbf9 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d76:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7c:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <MX_GPIO_Init+0x218>)
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	482e      	ldr	r0, [pc, #184]	; (8000e44 <MX_GPIO_Init+0x20c>)
 8000d8c:	f001 fbec 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4827      	ldr	r0, [pc, #156]	; (8000e44 <MX_GPIO_Init+0x20c>)
 8000da8:	f001 fbde 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000dac:	2320      	movs	r3, #32
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <MX_GPIO_Init+0x218>)
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4820      	ldr	r0, [pc, #128]	; (8000e40 <MX_GPIO_Init+0x208>)
 8000dc0:	f001 fbd2 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481f      	ldr	r0, [pc, #124]	; (8000e54 <MX_GPIO_Init+0x21c>)
 8000dd8:	f001 fbc6 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4815      	ldr	r0, [pc, #84]	; (8000e48 <MX_GPIO_Init+0x210>)
 8000df2:	f001 fbb9 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000df6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_GPIO_Init+0x210>)
 8000e10:	f001 fbaa 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e14:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4807      	ldr	r0, [pc, #28]	; (8000e4c <MX_GPIO_Init+0x214>)
 8000e2e:	f001 fb9b 	bl	8002568 <HAL_GPIO_Init>

}
 8000e32:	bf00      	nop
 8000e34:	3738      	adds	r7, #56	; 0x38
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	40021800 	.word	0x40021800
 8000e50:	10120000 	.word	0x10120000
 8000e54:	40020400 	.word	0x40020400

08000e58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000e60:	f00b f938 	bl	800c0d4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f008 ff54 	bl	8009d12 <osDelay>
 8000e6a:	e7fb      	b.n	8000e64 <StartDefaultTask+0xc>

08000e6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e7e:	f000 fd09 	bl	8001894 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40001000 	.word	0x40001000

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_MspInit+0x54>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a11      	ldr	r2, [pc, #68]	; (8000ef4 <HAL_MspInit+0x54>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_MspInit+0x54>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_MspInit+0x54>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_MspInit+0x54>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_MspInit+0x54>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	f06f 0001 	mvn.w	r0, #1
 8000ee6:	f001 f841 	bl	8001f6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_ADC_MspInit+0x7c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d127      	bne.n	8000f6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_ADC_MspInit+0x80>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <HAL_ADC_MspInit+0x80>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_ADC_MspInit+0x80>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_ADC_MspInit+0x80>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_ADC_MspInit+0x80>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_ADC_MspInit+0x80>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = OSCYLOSCOPE_IN_Pin;
 8000f52:	2308      	movs	r3, #8
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f56:	2303      	movs	r3, #3
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OSCYLOSCOPE_IN_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_ADC_MspInit+0x84>)
 8000f66:	f001 faff 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40012000 	.word	0x40012000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020800 	.word	0x40020800

08000f80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_CRC_MspInit+0x3c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10d      	bne.n	8000fae <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_CRC_MspInit+0x40>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <HAL_CRC_MspInit+0x40>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <HAL_CRC_MspInit+0x40>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023000 	.word	0x40023000
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <HAL_DAC_MspInit+0x8c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12f      	bne.n	8001046 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_DAC_MspInit+0x90>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_DAC_MspInit+0x90>)
 8000ff0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_DAC_MspInit+0x90>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_DAC_MspInit+0x90>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <HAL_DAC_MspInit+0x90>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_DAC_MspInit+0x90>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GENERATOR_OUT_Pin;
 800101e:	2320      	movs	r3, #32
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GENERATOR_OUT_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <HAL_DAC_MspInit+0x94>)
 8001032:	f001 fa99 	bl	8002568 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2036      	movs	r0, #54	; 0x36
 800103c:	f000 ff96 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001040:	2036      	movs	r0, #54	; 0x36
 8001042:	f000 ffaf 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40007400 	.word	0x40007400
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <HAL_DMA2D_MspInit+0x48>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d115      	bne.n	800109a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_DMA2D_MspInit+0x4c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <HAL_DMA2D_MspInit+0x4c>)
 8001078:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_DMA2D_MspInit+0x4c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2105      	movs	r1, #5
 800108e:	205a      	movs	r0, #90	; 0x5a
 8001090:	f000 ff6c 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001094:	205a      	movs	r0, #90	; 0x5a
 8001096:	f000 ff85 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	4002b000 	.word	0x4002b000
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a29      	ldr	r2, [pc, #164]	; (8001170 <HAL_I2C_MspInit+0xc4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d14b      	bne.n	8001166 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <HAL_I2C_MspInit+0xc8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a27      	ldr	r2, [pc, #156]	; (8001174 <HAL_I2C_MspInit+0xc8>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <HAL_I2C_MspInit+0xc8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_I2C_MspInit+0xc8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a20      	ldr	r2, [pc, #128]	; (8001174 <HAL_I2C_MspInit+0xc8>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_I2C_MspInit+0xc8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110c:	2312      	movs	r3, #18
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001110:	2301      	movs	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001118:	2304      	movs	r3, #4
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4815      	ldr	r0, [pc, #84]	; (8001178 <HAL_I2C_MspInit+0xcc>)
 8001124:	f001 fa20 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112e:	2312      	movs	r3, #18
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800113a:	2304      	movs	r3, #4
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <HAL_I2C_MspInit+0xd0>)
 8001146:	f001 fa0f 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_I2C_MspInit+0xc8>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_I2C_MspInit+0xc8>)
 8001154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_I2C_MspInit+0xc8>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40005c00 	.word	0x40005c00
 8001174:	40023800 	.word	0x40023800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020000 	.word	0x40020000

08001180 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	; 0x38
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a77      	ldr	r2, [pc, #476]	; (800137c <HAL_LTDC_MspInit+0x1fc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	f040 80e8 	bne.w	8001374 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	4b75      	ldr	r3, [pc, #468]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	4a74      	ldr	r2, [pc, #464]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011b2:	6453      	str	r3, [r2, #68]	; 0x44
 80011b4:	4b72      	ldr	r3, [pc, #456]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011bc:	623b      	str	r3, [r7, #32]
 80011be:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	4b6e      	ldr	r3, [pc, #440]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a6d      	ldr	r2, [pc, #436]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011ca:	f043 0320 	orr.w	r3, r3, #32
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b6b      	ldr	r3, [pc, #428]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0320 	and.w	r3, r3, #32
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a66      	ldr	r2, [pc, #408]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	4b60      	ldr	r3, [pc, #384]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a5f      	ldr	r2, [pc, #380]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
 8001208:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	4b59      	ldr	r3, [pc, #356]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 800121e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001222:	6313      	str	r3, [r2, #48]	; 0x30
 8001224:	4b56      	ldr	r3, [pc, #344]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	4b52      	ldr	r3, [pc, #328]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a51      	ldr	r2, [pc, #324]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <HAL_LTDC_MspInit+0x200>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800127a:	230e      	movs	r3, #14
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	483f      	ldr	r0, [pc, #252]	; (8001384 <HAL_LTDC_MspInit+0x204>)
 8001286:	f001 f96f 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800128a:	f641 0358 	movw	r3, #6232	; 0x1858
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800129c:	230e      	movs	r3, #14
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4838      	ldr	r0, [pc, #224]	; (8001388 <HAL_LTDC_MspInit+0x208>)
 80012a8:	f001 f95e 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80012ac:	2303      	movs	r3, #3
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012bc:	2309      	movs	r3, #9
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	4831      	ldr	r0, [pc, #196]	; (800138c <HAL_LTDC_MspInit+0x20c>)
 80012c8:	f001 f94e 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80012cc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012de:	230e      	movs	r3, #14
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4828      	ldr	r0, [pc, #160]	; (800138c <HAL_LTDC_MspInit+0x20c>)
 80012ea:	f001 f93d 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80012ee:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001300:	230e      	movs	r3, #14
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <HAL_LTDC_MspInit+0x210>)
 800130c:	f001 f92c 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001310:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001322:	230e      	movs	r3, #14
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	4819      	ldr	r0, [pc, #100]	; (8001394 <HAL_LTDC_MspInit+0x214>)
 800132e:	f001 f91b 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001332:	2348      	movs	r3, #72	; 0x48
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001342:	230e      	movs	r3, #14
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4812      	ldr	r0, [pc, #72]	; (8001398 <HAL_LTDC_MspInit+0x218>)
 800134e:	f001 f90b 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001352:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001364:	2309      	movs	r3, #9
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4808      	ldr	r0, [pc, #32]	; (8001390 <HAL_LTDC_MspInit+0x210>)
 8001370:	f001 f8fa 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	; 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40016800 	.word	0x40016800
 8001380:	40023800 	.word	0x40023800
 8001384:	40021400 	.word	0x40021400
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40021800 	.word	0x40021800
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00

0800139c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_SPI_MspInit+0x84>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12c      	bne.n	8001418 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_SPI_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80013f6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001408:	2305      	movs	r3, #5
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_SPI_MspInit+0x8c>)
 8001414:	f001 f8a8 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40015000 	.word	0x40015000
 8001424:	40023800 	.word	0x40023800
 8001428:	40021400 	.word	0x40021400

0800142c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_TIM_Base_MspInit+0x3c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d10d      	bne.n	800145a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_TIM_Base_MspInit+0x40>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <HAL_TIM_Base_MspInit+0x40>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <HAL_TIM_Base_MspInit+0x40>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40010000 	.word	0x40010000
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_UART_MspInit+0x84>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12c      	bne.n	80014ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_UART_MspInit+0x88>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_UART_MspInit+0x88>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_UART_MspInit+0x88>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_UART_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_UART_MspInit+0x88>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_UART_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014dc:	2307      	movs	r3, #7
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_UART_MspInit+0x8c>)
 80014e8:	f001 f83e 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000

08001500 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001514:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <HAL_FMC_MspInit+0x104>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d16f      	bne.n	80015fc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_FMC_MspInit+0x104>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_FMC_MspInit+0x108>)
 8001528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152a:	4a37      	ldr	r2, [pc, #220]	; (8001608 <HAL_FMC_MspInit+0x108>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6393      	str	r3, [r2, #56]	; 0x38
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <HAL_FMC_MspInit+0x108>)
 8001534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800153e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001542:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001550:	230c      	movs	r3, #12
 8001552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	482c      	ldr	r0, [pc, #176]	; (800160c <HAL_FMC_MspInit+0x10c>)
 800155a:	f001 f805 	bl	8002568 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800155e:	2301      	movs	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800156e:	230c      	movs	r3, #12
 8001570:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4826      	ldr	r0, [pc, #152]	; (8001610 <HAL_FMC_MspInit+0x110>)
 8001578:	f000 fff6 	bl	8002568 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800157c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001580:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800158e:	230c      	movs	r3, #12
 8001590:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	481f      	ldr	r0, [pc, #124]	; (8001614 <HAL_FMC_MspInit+0x114>)
 8001598:	f000 ffe6 	bl	8002568 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800159c:	f64f 7383 	movw	r3, #65411	; 0xff83
 80015a0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ae:	230c      	movs	r3, #12
 80015b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4818      	ldr	r0, [pc, #96]	; (8001618 <HAL_FMC_MspInit+0x118>)
 80015b8:	f000 ffd6 	bl	8002568 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80015bc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80015c0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ce:	230c      	movs	r3, #12
 80015d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4811      	ldr	r0, [pc, #68]	; (800161c <HAL_FMC_MspInit+0x11c>)
 80015d8:	f000 ffc6 	bl	8002568 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80015dc:	2360      	movs	r3, #96	; 0x60
 80015de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ec:	230c      	movs	r3, #12
 80015ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	480a      	ldr	r0, [pc, #40]	; (8001620 <HAL_FMC_MspInit+0x120>)
 80015f6:	f000 ffb7 	bl	8002568 <HAL_GPIO_Init>
 80015fa:	e000      	b.n	80015fe <HAL_FMC_MspInit+0xfe>
    return;
 80015fc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000308 	.word	0x20000308
 8001608:	40023800 	.word	0x40023800
 800160c:	40021400 	.word	0x40021400
 8001610:	40020800 	.word	0x40020800
 8001614:	40021800 	.word	0x40021800
 8001618:	40021000 	.word	0x40021000
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40020400 	.word	0x40020400

08001624 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800162c:	f7ff ff68 	bl	8001500 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	2036      	movs	r0, #54	; 0x36
 800164e:	f000 fc8d 	bl	8001f6c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001652:	2036      	movs	r0, #54	; 0x36
 8001654:	f000 fca6 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <HAL_InitTick+0xa4>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_InitTick+0xa4>)
 8001662:	f043 0310 	orr.w	r3, r3, #16
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_InitTick+0xa4>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001674:	f107 0210 	add.w	r2, r7, #16
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fee2 	bl	8005448 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001684:	f003 feb8 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8001688:	4603      	mov	r3, r0
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <HAL_InitTick+0xa8>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0c9b      	lsrs	r3, r3, #18
 8001698:	3b01      	subs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_InitTick+0xac>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <HAL_InitTick+0xb0>)
 80016a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_InitTick+0xac>)
 80016a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_InitTick+0xac>)
 80016ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_InitTick+0xac>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_InitTick+0xac>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <HAL_InitTick+0xac>)
 80016be:	f004 f94b 	bl	8005958 <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <HAL_InitTick+0xac>)
 80016ca:	f004 f970 	bl	80059ae <HAL_TIM_Base_Start_IT>
 80016ce:	4603      	mov	r3, r0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3730      	adds	r7, #48	; 0x30
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	2000871c 	.word	0x2000871c
 80016e8:	40001000 	.word	0x40001000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001724:	4803      	ldr	r0, [pc, #12]	; (8001734 <TIM6_DAC_IRQHandler+0x14>)
 8001726:	f000 fc89 	bl	800203c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800172a:	4803      	ldr	r0, [pc, #12]	; (8001738 <TIM6_DAC_IRQHandler+0x18>)
 800172c:	f004 f963 	bl	80059f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20008654 	.word	0x20008654
 8001738:	2000871c 	.word	0x2000871c

0800173c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <OTG_HS_IRQHandler+0x10>)
 8001742:	f001 fb63 	bl	8002e0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20008b44 	.word	0x20008b44

08001750 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA2D_IRQHandler+0x10>)
 8001756:	f000 fd65 	bl	8002224 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200086a8 	.word	0x200086a8

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f00a ffa6 	bl	800c6e4 <__errno>
 8001798:	4602      	mov	r2, r0
 800179a:	230c      	movs	r3, #12
 800179c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20030000 	.word	0x20030000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	2000030c 	.word	0x2000030c
 80017cc:	20008e10 	.word	0x20008e10

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <SystemInit+0x28>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <SystemInit+0x28>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SystemInit+0x28>)
 80017e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ea:	609a      	str	r2, [r3, #8]
#endif
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001800:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001802:	e003      	b.n	800180c <LoopCopyDataInit>

08001804 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001806:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001808:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800180a:	3104      	adds	r1, #4

0800180c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001810:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001812:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001814:	d3f6      	bcc.n	8001804 <CopyDataInit>
  ldr  r2, =_sbss
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001818:	e002      	b.n	8001820 <LoopFillZerobss>

0800181a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800181a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800181c:	f842 3b04 	str.w	r3, [r2], #4

08001820 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001822:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001824:	d3f9      	bcc.n	800181a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001826:	f7ff ffd3 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182a:	f00a ff61 	bl	800c6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7fe fe93 	bl	8000558 <main>
  bx  lr    
 8001832:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001834:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001838:	0800c9a0 	.word	0x0800c9a0
  ldr  r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001840:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001844:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001848:	20008e0c 	.word	0x20008e0c

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_Init+0x40>)
 800185a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <HAL_Init+0x40>)
 8001866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_Init+0x40>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 fb6c 	bl	8001f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff feda 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f7ff fb0c 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x20>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x24>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <HAL_IncTick+0x24>)
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008
 80018b8:	2000875c 	.word	0x2000875c

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000875c 	.word	0x2000875c

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff ffee 	bl	80018bc <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_Delay+0x40>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018fa:	bf00      	nop
 80018fc:	f7ff ffde 	bl	80018bc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000008 	.word	0x20000008

08001918 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e033      	b.n	8001996 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fade 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	d118      	bne.n	8001988 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800195e:	f023 0302 	bic.w	r3, r3, #2
 8001962:	f043 0202 	orr.w	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f94a 	bl	8001c04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
 8001986:	e001      	b.n	800198c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x1c>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e113      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x244>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	d925      	bls.n	8001a18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68d9      	ldr	r1, [r3, #12]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	3b1e      	subs	r3, #30
 80019e2:	2207      	movs	r2, #7
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43da      	mvns	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	400a      	ands	r2, r1
 80019f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68d9      	ldr	r1, [r3, #12]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4403      	add	r3, r0
 8001a0a:	3b1e      	subs	r3, #30
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	e022      	b.n	8001a5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6919      	ldr	r1, [r3, #16]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	400a      	ands	r2, r1
 8001a3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6919      	ldr	r1, [r3, #16]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4403      	add	r3, r0
 8001a54:	409a      	lsls	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d824      	bhi.n	8001ab0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	3b05      	subs	r3, #5
 8001a78:	221f      	movs	r2, #31
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	400a      	ands	r2, r1
 8001a86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	4618      	mov	r0, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b05      	subs	r3, #5
 8001aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
 8001aae:	e04c      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	d824      	bhi.n	8001b02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3b23      	subs	r3, #35	; 0x23
 8001aca:	221f      	movs	r2, #31
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	3b23      	subs	r3, #35	; 0x23
 8001af4:	fa00 f203 	lsl.w	r2, r0, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
 8001b00:	e023      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b41      	subs	r3, #65	; 0x41
 8001b14:	221f      	movs	r2, #31
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	400a      	ands	r2, r1
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b41      	subs	r3, #65	; 0x41
 8001b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b4a:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <HAL_ADC_ConfigChannel+0x250>)
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <HAL_ADC_ConfigChannel+0x254>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d10f      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x1d8>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b12      	cmp	r3, #18
 8001b5e:	d10b      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_ADC_ConfigChannel+0x254>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d12b      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x23a>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <HAL_ADC_ConfigChannel+0x258>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d003      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0x1f4>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b11      	cmp	r3, #17
 8001b92:	d122      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_ADC_ConfigChannel+0x258>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d111      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_ADC_ConfigChannel+0x25c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_ADC_ConfigChannel+0x260>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	0c9a      	lsrs	r2, r3, #18
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bcc:	e002      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f9      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40012300 	.word	0x40012300
 8001bf4:	40012000 	.word	0x40012000
 8001bf8:	10000012 	.word	0x10000012
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	431bde83 	.word	0x431bde83

08001c04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c0c:	4b79      	ldr	r3, [pc, #484]	; (8001df4 <ADC_Init+0x1f0>)
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	021a      	lsls	r2, r3, #8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6899      	ldr	r1, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <ADC_Init+0x1f4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d022      	beq.n	8001ce2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001caa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6899      	ldr	r1, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e00f      	b.n	8001d02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0202 	bic.w	r2, r2, #2
 8001d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6899      	ldr	r1, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7e1b      	ldrb	r3, [r3, #24]
 8001d1c:	005a      	lsls	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01b      	beq.n	8001d68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	035a      	lsls	r2, r3, #13
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	e007      	b.n	8001d78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	051a      	lsls	r2, r3, #20
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dba:	025a      	lsls	r2, r3, #9
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	029a      	lsls	r2, r3, #10
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40012300 	.word	0x40012300
 8001df8:	0f000001 	.word	0x0f000001

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60d3      	str	r3, [r2, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <__NVIC_EnableIRQ+0x38>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff4c 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7e:	f7ff ff61 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	6978      	ldr	r0, [r7, #20]
 8001f8a:	f7ff ffb1 	bl	8001ef0 <NVIC_EncodePriority>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff80 	bl	8001e9c <__NVIC_SetPriority>
}
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff54 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	795b      	ldrb	r3, [r3, #5]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d105      	bne.n	8001fe8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe ffcc 	bl	8000f80 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e014      	b.n	8002034 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	791b      	ldrb	r3, [r3, #4]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe ffd2 	bl	8000fc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800204e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002052:	d118      	bne.n	8002086 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2204      	movs	r2, #4
 8002058:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800207e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f825 	bl	80020d0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002094:	d118      	bne.n	80020c8 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2204      	movs	r2, #4
 800209a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f043 0202 	orr.w	r2, r3, #2
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80020c0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f85b 	bl	800217e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	795b      	ldrb	r3, [r3, #5]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_DAC_ConfigChannel+0x20>
 8002100:	2302      	movs	r3, #2
 8002102:	e036      	b.n	8002172 <HAL_DAC_ConfigChannel+0x8e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2202      	movs	r2, #2
 800210e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002118:	f640 72fe 	movw	r2, #4094	; 0xffe
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4013      	ands	r3, r2
 8002128:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	22c0      	movs	r2, #192	; 0xc0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	400a      	ands	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e03b      	b.n	800221c <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7fe ff4f 	bl	800105c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e2:	f023 0107 	bic.w	r1, r3, #7
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68d1      	ldr	r1, [r2, #12]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	430b      	orrs	r3, r1
 800220a:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d026      	beq.n	8002294 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d021      	beq.n	8002294 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800225e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2201      	movs	r2, #1
 8002272:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2204      	movs	r2, #4
 8002278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d026      	beq.n	80022ec <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d021      	beq.n	80022ec <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2220      	movs	r2, #32
 80022be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	f043 0202 	orr.w	r2, r3, #2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2204      	movs	r2, #4
 80022d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d026      	beq.n	8002344 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d021      	beq.n	8002344 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2208      	movs	r2, #8
 8002316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2204      	movs	r2, #4
 8002328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d013      	beq.n	8002376 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002366:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2204      	movs	r2, #4
 800236e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f853 	bl	800241c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d024      	beq.n	80023ca <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01f      	beq.n	80023ca <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002398:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2202      	movs	r2, #2
 80023a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01f      	beq.n	8002414 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01a      	beq.n	8002414 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2210      	movs	r2, #16
 80023f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f80e 	bl	8002430 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_DMA2D_ConfigLayer+0x20>
 8002460:	2302      	movs	r3, #2
 8002462:	e079      	b.n	8002558 <HAL_DMA2D_ConfigLayer+0x114>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	3318      	adds	r3, #24
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	041b      	lsls	r3, r3, #16
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800248e:	4b35      	ldr	r3, [pc, #212]	; (8002564 <HAL_DMA2D_ConfigLayer+0x120>)
 8002490:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b0a      	cmp	r3, #10
 8002498:	d003      	beq.n	80024a2 <HAL_DMA2D_ConfigLayer+0x5e>
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d107      	bne.n	80024b2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	e005      	b.n	80024be <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d120      	bne.n	8002506 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	ea02 0103 	and.w	r1, r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	430a      	orrs	r2, r1
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b0a      	cmp	r3, #10
 80024ec:	d003      	beq.n	80024f6 <HAL_DMA2D_ConfigLayer+0xb2>
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b09      	cmp	r3, #9
 80024f4:	d127      	bne.n	8002546 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
 8002504:	e01f      	b.n	8002546 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	ea02 0103 	and.w	r1, r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	430a      	orrs	r2, r1
 800251c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b0a      	cmp	r3, #10
 800252e:	d003      	beq.n	8002538 <HAL_DMA2D_ConfigLayer+0xf4>
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b09      	cmp	r3, #9
 8002536:	d106      	bne.n	8002546 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002544:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	ff03000f 	.word	0xff03000f

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e177      	b.n	8002874 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	429a      	cmp	r2, r3
 800259e:	f040 8166 	bne.w	800286e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d00b      	beq.n	80025c2 <HAL_GPIO_Init+0x5a>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d007      	beq.n	80025c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025b6:	2b11      	cmp	r3, #17
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b12      	cmp	r3, #18
 80025c0:	d130      	bne.n	8002624 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	2203      	movs	r2, #3
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025f8:	2201      	movs	r2, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0201 	and.w	r2, r3, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0xfc>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b12      	cmp	r3, #18
 8002662:	d123      	bne.n	80026ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	08da      	lsrs	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3208      	adds	r2, #8
 800266c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	08da      	lsrs	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3208      	adds	r2, #8
 80026a6:	69b9      	ldr	r1, [r7, #24]
 80026a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0203 	and.w	r2, r3, #3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80c0 	beq.w	800286e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_GPIO_Init+0x320>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a64      	ldr	r2, [pc, #400]	; (8002888 <HAL_GPIO_Init+0x320>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b62      	ldr	r3, [pc, #392]	; (8002888 <HAL_GPIO_Init+0x320>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800270a:	4a60      	ldr	r2, [pc, #384]	; (800288c <HAL_GPIO_Init+0x324>)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	220f      	movs	r2, #15
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <HAL_GPIO_Init+0x328>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d037      	beq.n	80027a6 <HAL_GPIO_Init+0x23e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a56      	ldr	r2, [pc, #344]	; (8002894 <HAL_GPIO_Init+0x32c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d031      	beq.n	80027a2 <HAL_GPIO_Init+0x23a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a55      	ldr	r2, [pc, #340]	; (8002898 <HAL_GPIO_Init+0x330>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02b      	beq.n	800279e <HAL_GPIO_Init+0x236>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a54      	ldr	r2, [pc, #336]	; (800289c <HAL_GPIO_Init+0x334>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d025      	beq.n	800279a <HAL_GPIO_Init+0x232>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a53      	ldr	r2, [pc, #332]	; (80028a0 <HAL_GPIO_Init+0x338>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01f      	beq.n	8002796 <HAL_GPIO_Init+0x22e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a52      	ldr	r2, [pc, #328]	; (80028a4 <HAL_GPIO_Init+0x33c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d019      	beq.n	8002792 <HAL_GPIO_Init+0x22a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a51      	ldr	r2, [pc, #324]	; (80028a8 <HAL_GPIO_Init+0x340>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0x226>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a50      	ldr	r2, [pc, #320]	; (80028ac <HAL_GPIO_Init+0x344>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_GPIO_Init+0x222>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4f      	ldr	r2, [pc, #316]	; (80028b0 <HAL_GPIO_Init+0x348>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x21e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4e      	ldr	r2, [pc, #312]	; (80028b4 <HAL_GPIO_Init+0x34c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_GPIO_Init+0x21a>
 800277e:	2309      	movs	r3, #9
 8002780:	e012      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002782:	230a      	movs	r3, #10
 8002784:	e010      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002786:	2308      	movs	r3, #8
 8002788:	e00e      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800278a:	2307      	movs	r3, #7
 800278c:	e00c      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800278e:	2306      	movs	r3, #6
 8002790:	e00a      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002792:	2305      	movs	r3, #5
 8002794:	e008      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 8002796:	2304      	movs	r3, #4
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800279a:	2303      	movs	r3, #3
 800279c:	e004      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 800279e:	2302      	movs	r3, #2
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x240>
 80027a6:	2300      	movs	r3, #0
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f002 0203 	and.w	r2, r2, #3
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	4093      	lsls	r3, r2
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b8:	4934      	ldr	r1, [pc, #208]	; (800288c <HAL_GPIO_Init+0x324>)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c6:	4b3c      	ldr	r3, [pc, #240]	; (80028b8 <HAL_GPIO_Init+0x350>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ea:	4a33      	ldr	r2, [pc, #204]	; (80028b8 <HAL_GPIO_Init+0x350>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027f0:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_GPIO_Init+0x350>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002814:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <HAL_GPIO_Init+0x350>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_GPIO_Init+0x350>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_GPIO_Init+0x350>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_GPIO_Init+0x350>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_GPIO_Init+0x350>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3301      	adds	r3, #1
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	f67f ae84 	bls.w	8002584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800287c:	bf00      	nop
 800287e:	3724      	adds	r7, #36	; 0x24
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40023800 	.word	0x40023800
 800288c:	40013800 	.word	0x40013800
 8002890:	40020000 	.word	0x40020000
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800
 800289c:	40020c00 	.word	0x40020c00
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40021400 	.word	0x40021400
 80028a8:	40021800 	.word	0x40021800
 80028ac:	40021c00 	.word	0x40021c00
 80028b0:	40022000 	.word	0x40022000
 80028b4:	40022400 	.word	0x40022400
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f0:	b08f      	sub	sp, #60	; 0x3c
 80028f2:	af0a      	add	r7, sp, #40	; 0x28
 80028f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e054      	b.n	80029aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f009 fc2e 	bl	800c17c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2203      	movs	r2, #3
 8002924:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f004 f938 	bl	8006bb4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	687e      	ldr	r6, [r7, #4]
 800294c:	466d      	mov	r5, sp
 800294e:	f106 0410 	add.w	r4, r6, #16
 8002952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800295e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002962:	1d33      	adds	r3, r6, #4
 8002964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	f004 f8b2 	bl	8006ad0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f004 f92f 	bl	8006bd6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	687e      	ldr	r6, [r7, #4]
 8002980:	466d      	mov	r5, sp
 8002982:	f106 0410 	add.w	r4, r6, #16
 8002986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002992:	e885 0003 	stmia.w	r5, {r0, r1}
 8002996:	1d33      	adds	r3, r6, #4
 8002998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f004 fa42 	bl	8006e24 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80029b2:	b590      	push	{r4, r7, lr}
 80029b4:	b089      	sub	sp, #36	; 0x24
 80029b6:	af04      	add	r7, sp, #16
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	4608      	mov	r0, r1
 80029bc:	4611      	mov	r1, r2
 80029be:	461a      	mov	r2, r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	70fb      	strb	r3, [r7, #3]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70bb      	strb	r3, [r7, #2]
 80029c8:	4613      	mov	r3, r2
 80029ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_HCD_HC_Init+0x28>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e07f      	b.n	8002ada <HAL_HCD_HC_Init+0x128>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	333d      	adds	r3, #61	; 0x3d
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	3338      	adds	r3, #56	; 0x38
 8002a06:	787a      	ldrb	r2, [r7, #1]
 8002a08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	3340      	adds	r3, #64	; 0x40
 8002a1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a1c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3339      	adds	r3, #57	; 0x39
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	333f      	adds	r3, #63	; 0x3f
 8002a42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	78bb      	ldrb	r3, [r7, #2]
 8002a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a50:	b2d8      	uxtb	r0, r3
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	333a      	adds	r3, #58	; 0x3a
 8002a60:	4602      	mov	r2, r0
 8002a62:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da0a      	bge.n	8002a82 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	333b      	adds	r3, #59	; 0x3b
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e009      	b.n	8002a96 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	333b      	adds	r3, #59	; 0x3b
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	333c      	adds	r3, #60	; 0x3c
 8002aa6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002aaa:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	787c      	ldrb	r4, [r7, #1]
 8002ab2:	78ba      	ldrb	r2, [r7, #2]
 8002ab4:	78f9      	ldrb	r1, [r7, #3]
 8002ab6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ab8:	9302      	str	r3, [sp, #8]
 8002aba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	f004 fb2e 	bl	8007128 <USB_HC_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd90      	pop	{r4, r7, pc}

08002ae2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_HCD_HC_Halt+0x1e>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e00f      	b.n	8002b20 <HAL_HCD_HC_Halt+0x3e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 fd6a 	bl	80075ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	4608      	mov	r0, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	461a      	mov	r2, r3
 8002b36:	4603      	mov	r3, r0
 8002b38:	70fb      	strb	r3, [r7, #3]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	70bb      	strb	r3, [r7, #2]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	333b      	adds	r3, #59	; 0x3b
 8002b52:	78ba      	ldrb	r2, [r7, #2]
 8002b54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	333f      	adds	r3, #63	; 0x3f
 8002b66:	787a      	ldrb	r2, [r7, #1]
 8002b68:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b6a:	7c3b      	ldrb	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d114      	bne.n	8002b9a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3342      	adds	r3, #66	; 0x42
 8002b80:	2203      	movs	r2, #3
 8002b82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	333d      	adds	r3, #61	; 0x3d
 8002b94:	7f3a      	ldrb	r2, [r7, #28]
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e009      	b.n	8002bae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3342      	adds	r3, #66	; 0x42
 8002baa:	2202      	movs	r2, #2
 8002bac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bae:	787b      	ldrb	r3, [r7, #1]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	f200 80d6 	bhi.w	8002d62 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <HAL_HCD_HC_SubmitRequest+0x94>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	08002d4d 	.word	0x08002d4d
 8002bc4:	08002c39 	.word	0x08002c39
 8002bc8:	08002cc3 	.word	0x08002cc3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002bcc:	7c3b      	ldrb	r3, [r7, #16]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	f040 80c9 	bne.w	8002d66 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002bd4:	78bb      	ldrb	r3, [r7, #2]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 80c5 	bne.w	8002d66 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002bdc:	8b3b      	ldrh	r3, [r7, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3351      	adds	r3, #81	; 0x51
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	3351      	adds	r3, #81	; 0x51
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	3342      	adds	r3, #66	; 0x42
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c20:	e0a1      	b.n	8002d66 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	3342      	adds	r3, #66	; 0x42
 8002c32:	2202      	movs	r2, #2
 8002c34:	701a      	strb	r2, [r3, #0]
      break;
 8002c36:	e096      	b.n	8002d66 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c38:	78bb      	ldrb	r3, [r7, #2]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d120      	bne.n	8002c80 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3351      	adds	r3, #81	; 0x51
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	3342      	adds	r3, #66	; 0x42
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c68:	e07e      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	3342      	adds	r3, #66	; 0x42
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]
      break;
 8002c7e:	e073      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3350      	adds	r3, #80	; 0x50
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3342      	adds	r3, #66	; 0x42
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
      break;
 8002caa:	e05d      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	3342      	adds	r3, #66	; 0x42
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	701a      	strb	r2, [r3, #0]
      break;
 8002cc0:	e052      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cc2:	78bb      	ldrb	r3, [r7, #2]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d120      	bne.n	8002d0a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3351      	adds	r3, #81	; 0x51
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	3342      	adds	r3, #66	; 0x42
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cf2:	e039      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	3342      	adds	r3, #66	; 0x42
 8002d04:	2202      	movs	r2, #2
 8002d06:	701a      	strb	r2, [r3, #0]
      break;
 8002d08:	e02e      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	3350      	adds	r3, #80	; 0x50
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3342      	adds	r3, #66	; 0x42
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
      break;
 8002d34:	e018      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	3342      	adds	r3, #66	; 0x42
 8002d46:	2202      	movs	r2, #2
 8002d48:	701a      	strb	r2, [r3, #0]
      break;
 8002d4a:	e00d      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	3342      	adds	r3, #66	; 0x42
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
      break;
 8002d60:	e002      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002d62:	bf00      	nop
 8002d64:	e000      	b.n	8002d68 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002d66:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	3344      	adds	r3, #68	; 0x44
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	8b39      	ldrh	r1, [r7, #24]
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4403      	add	r3, r0
 8002d8c:	3348      	adds	r3, #72	; 0x48
 8002d8e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	335c      	adds	r3, #92	; 0x5c
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	334c      	adds	r3, #76	; 0x4c
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3339      	adds	r3, #57	; 0x39
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	335d      	adds	r3, #93	; 0x5d
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	3338      	adds	r3, #56	; 0x38
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	18d1      	adds	r1, r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f004 fa9e 	bl	800733c <USB_HC_StartXfer>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop

08002e0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 ffbb 	bl	8006d9e <USB_GetMode>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	f040 80ef 	bne.w	800300e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 ff9f 	bl	8006d78 <USB_ReadInterrupts>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80e5 	beq.w	800300c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 ff96 	bl	8006d78 <USB_ReadInterrupts>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e56:	d104      	bne.n	8002e62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 ff86 	bl	8006d78 <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e76:	d104      	bne.n	8002e82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 ff76 	bl	8006d78 <USB_ReadInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e96:	d104      	bne.n	8002ea2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ea0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 ff66 	bl	8006d78 <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d103      	bne.n	8002ebe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 ff58 	bl	8006d78 <USB_ReadInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed2:	d115      	bne.n	8002f00 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002edc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f009 f9be 	bl	800c270 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 f84e 	bl	8006f9c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 ff37 	bl	8006d78 <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f14:	d102      	bne.n	8002f1c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f001 f966 	bl	80041e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 ff29 	bl	8006d78 <USB_ReadInterrupts>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d106      	bne.n	8002f3e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f009 f981 	bl	800c238 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 ff18 	bl	8006d78 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f52:	d138      	bne.n	8002fc6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f004 fb35 	bl	80075c8 <USB_HC_ReadInterrupt>
 8002f5e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e025      	b.n	8002fb2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d018      	beq.n	8002fac <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f90:	d106      	bne.n	8002fa0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f8cf 	bl	800313c <HCD_HC_IN_IRQHandler>
 8002f9e:	e005      	b.n	8002fac <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fcfd 	bl	80039a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3d4      	bcc.n	8002f66 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fed4 	bl	8006d78 <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d101      	bne.n	8002fde <HAL_HCD_IRQHandler+0x1d2>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_HCD_IRQHandler+0x1d4>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d014      	beq.n	800300e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f001 f84b 	bl	8004090 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0210 	orr.w	r2, r2, #16
 8003008:	619a      	str	r2, [r3, #24]
 800300a:	e000      	b.n	800300e <HAL_HCD_IRQHandler+0x202>
      return;
 800300c:	bf00      	nop
    }
  }
}
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_HCD_Start+0x16>
 8003026:	2302      	movs	r3, #2
 8003028:	e013      	b.n	8003052 <HAL_HCD_Start+0x3e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fdab 	bl	8006b92 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f004 f80e 	bl	8007064 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_HCD_Stop+0x16>
 800306c:	2302      	movs	r3, #2
 800306e:	e00d      	b.n	800308c <HAL_HCD_Stop+0x32>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f004 fbef 	bl	8007860 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 ffb5 	bl	8007010 <USB_ResetPort>
 80030a6:	4603      	mov	r3, r0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	440b      	add	r3, r1
 80030ca:	335c      	adds	r3, #92	; 0x5c
 80030cc:	781b      	ldrb	r3, [r3, #0]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	334c      	adds	r3, #76	; 0x4c
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f003 fff7 	bl	8007104 <USB_GetCurrentFrame>
 8003116:	4603      	mov	r3, r0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f003 ffd2 	bl	80070d6 <USB_GetHostSpeed>
 8003132:	4603      	mov	r3, r0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b04      	cmp	r3, #4
 800316a:	d119      	bne.n	80031a0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	461a      	mov	r2, r3
 800317a:	2304      	movs	r3, #4
 800317c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	0151      	lsls	r1, r2, #5
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	440a      	add	r2, r1
 8003194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	60d3      	str	r3, [r2, #12]
 800319e:	e0ce      	b.n	800333e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d12c      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c4:	461a      	mov	r2, r3
 80031c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	335d      	adds	r3, #93	; 0x5d
 80031dc:	2207      	movs	r2, #7
 80031de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	0151      	lsls	r1, r2, #5
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	440a      	add	r2, r1
 80031f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031fa:	f043 0302 	orr.w	r3, r3, #2
 80031fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f004 f9ed 	bl	80075ea <USB_HC_Halt>
 8003210:	e095      	b.n	800333e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b20      	cmp	r3, #32
 8003226:	d109      	bne.n	800323c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	2320      	movs	r3, #32
 8003238:	6093      	str	r3, [r2, #8]
 800323a:	e080      	b.n	800333e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b08      	cmp	r3, #8
 8003250:	d134      	bne.n	80032bc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	0151      	lsls	r1, r2, #5
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	440a      	add	r2, r1
 8003268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	335d      	adds	r3, #93	; 0x5d
 8003282:	2205      	movs	r2, #5
 8003284:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	2310      	movs	r3, #16
 8003296:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a4:	461a      	mov	r2, r3
 80032a6:	2308      	movs	r3, #8
 80032a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 f998 	bl	80075ea <USB_HC_Halt>
 80032ba:	e040      	b.n	800333e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d2:	d134      	bne.n	800333e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	0151      	lsls	r1, r2, #5
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	440a      	add	r2, r1
 80032ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 f973 	bl	80075ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	461a      	mov	r2, r3
 8003312:	2310      	movs	r3, #16
 8003314:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	335d      	adds	r3, #93	; 0x5d
 8003326:	2208      	movs	r2, #8
 8003328:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003336:	461a      	mov	r2, r3
 8003338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800333c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003354:	d122      	bne.n	800339c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	0151      	lsls	r1, r2, #5
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	440a      	add	r2, r1
 800336c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003370:	f043 0302 	orr.w	r3, r3, #2
 8003374:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f004 f932 	bl	80075ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4413      	add	r3, r2
 800338e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003392:	461a      	mov	r2, r3
 8003394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003398:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800339a:	e300      	b.n	800399e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	f040 80fd 	bne.w	80035ae <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01b      	beq.n	80033f4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	3348      	adds	r3, #72	; 0x48
 80033cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	0159      	lsls	r1, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80033e0:	1ad1      	subs	r1, r2, r3
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4403      	add	r3, r0
 80033f0:	334c      	adds	r3, #76	; 0x4c
 80033f2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	335d      	adds	r3, #93	; 0x5d
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	3358      	adds	r3, #88	; 0x58
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	461a      	mov	r2, r3
 800342a:	2301      	movs	r3, #1
 800342c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	333f      	adds	r3, #63	; 0x3f
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	333f      	adds	r3, #63	; 0x3f
 8003454:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003456:	2b02      	cmp	r3, #2
 8003458:	d121      	bne.n	800349e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4413      	add	r3, r2
 8003462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	0151      	lsls	r1, r2, #5
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	440a      	add	r2, r1
 8003470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003474:	f043 0302 	orr.w	r3, r3, #2
 8003478:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f004 f8b0 	bl	80075ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	461a      	mov	r2, r3
 8003498:	2310      	movs	r3, #16
 800349a:	6093      	str	r3, [r2, #8]
 800349c:	e070      	b.n	8003580 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	440b      	add	r3, r1
 80034ac:	333f      	adds	r3, #63	; 0x3f
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d12a      	bne.n	800350a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	0151      	lsls	r1, r2, #5
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	440a      	add	r2, r1
 80034ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	440b      	add	r3, r1
 80034e2:	335c      	adds	r3, #92	; 0x5c
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	b2d8      	uxtb	r0, r3
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	440b      	add	r3, r1
 80034fa:	335c      	adds	r3, #92	; 0x5c
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	4601      	mov	r1, r0
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f008 fec2 	bl	800c28c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003508:	e03a      	b.n	8003580 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	333f      	adds	r3, #63	; 0x3f
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d12f      	bne.n	8003580 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	440b      	add	r3, r1
 800352e:	335c      	adds	r3, #92	; 0x5c
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	3350      	adds	r3, #80	; 0x50
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	f083 0301 	eor.w	r3, r3, #1
 800354a:	b2d8      	uxtb	r0, r3
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	3350      	adds	r3, #80	; 0x50
 800355c:	4602      	mov	r2, r0
 800355e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	b2d8      	uxtb	r0, r3
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	335c      	adds	r3, #92	; 0x5c
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4601      	mov	r1, r0
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f008 fe86 	bl	800c28c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	3350      	adds	r3, #80	; 0x50
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	f083 0301 	eor.w	r3, r3, #1
 8003596:	b2d8      	uxtb	r0, r3
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	440b      	add	r3, r1
 80035a6:	3350      	adds	r3, #80	; 0x50
 80035a8:	4602      	mov	r2, r0
 80035aa:	701a      	strb	r2, [r3, #0]
}
 80035ac:	e1f7      	b.n	800399e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	f040 811a 	bne.w	80037fa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	0151      	lsls	r1, r2, #5
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	440a      	add	r2, r1
 80035dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035e0:	f023 0302 	bic.w	r3, r3, #2
 80035e4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	335d      	adds	r3, #93	; 0x5d
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d10a      	bne.n	8003612 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	440b      	add	r3, r1
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	e0d9      	b.n	80037c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	335d      	adds	r3, #93	; 0x5d
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b05      	cmp	r3, #5
 8003626:	d10a      	bne.n	800363e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	335c      	adds	r3, #92	; 0x5c
 8003638:	2205      	movs	r2, #5
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	e0c3      	b.n	80037c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	335d      	adds	r3, #93	; 0x5d
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b06      	cmp	r3, #6
 8003652:	d00a      	beq.n	800366a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	335d      	adds	r3, #93	; 0x5d
 8003664:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003666:	2b08      	cmp	r3, #8
 8003668:	d156      	bne.n	8003718 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	440b      	add	r3, r1
 8003678:	3358      	adds	r3, #88	; 0x58
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	1c59      	adds	r1, r3, #1
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4403      	add	r3, r0
 800368c:	3358      	adds	r3, #88	; 0x58
 800368e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	3358      	adds	r3, #88	; 0x58
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d914      	bls.n	80036d0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	3358      	adds	r3, #88	; 0x58
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	440b      	add	r3, r1
 80036c8:	335c      	adds	r3, #92	; 0x5c
 80036ca:	2204      	movs	r2, #4
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	e009      	b.n	80036e4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	440b      	add	r3, r1
 80036de:	335c      	adds	r3, #92	; 0x5c
 80036e0:	2202      	movs	r2, #2
 80036e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003702:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e056      	b.n	80037c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	335d      	adds	r3, #93	; 0x5d
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d123      	bne.n	8003776 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	440b      	add	r3, r1
 800373c:	335c      	adds	r3, #92	; 0x5c
 800373e:	2202      	movs	r2, #2
 8003740:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003758:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003760:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	e027      	b.n	80037c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	335d      	adds	r3, #93	; 0x5d
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b07      	cmp	r3, #7
 800378a:	d11c      	bne.n	80037c6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	440b      	add	r3, r1
 800379a:	3358      	adds	r3, #88	; 0x58
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	1c59      	adds	r1, r3, #1
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4403      	add	r3, r0
 80037ae:	3358      	adds	r3, #88	; 0x58
 80037b0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	440b      	add	r3, r1
 80037c0:	335c      	adds	r3, #92	; 0x5c
 80037c2:	2204      	movs	r2, #4
 80037c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	2302      	movs	r3, #2
 80037d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	b2d8      	uxtb	r0, r3
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	440b      	add	r3, r1
 80037ea:	335c      	adds	r3, #92	; 0x5c
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	4601      	mov	r1, r0
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f008 fd4a 	bl	800c28c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037f8:	e0d1      	b.n	800399e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4413      	add	r3, r2
 8003802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d13e      	bne.n	800388e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	440a      	add	r2, r1
 8003826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800382a:	f043 0302 	orr.w	r3, r3, #2
 800382e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	3358      	adds	r3, #88	; 0x58
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4403      	add	r3, r0
 8003852:	3358      	adds	r3, #88	; 0x58
 8003854:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	440b      	add	r3, r1
 8003864:	335d      	adds	r3, #93	; 0x5d
 8003866:	2206      	movs	r2, #6
 8003868:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f003 feb8 	bl	80075ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003886:	461a      	mov	r2, r3
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	6093      	str	r3, [r2, #8]
}
 800388c:	e087      	b.n	800399e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4413      	add	r3, r2
 8003896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d17c      	bne.n	800399e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	440b      	add	r3, r1
 80038b2:	333f      	adds	r3, #63	; 0x3f
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d122      	bne.n	8003900 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	3358      	adds	r3, #88	; 0x58
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	0151      	lsls	r1, r2, #5
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	440a      	add	r2, r1
 80038e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fe76 	bl	80075ea <USB_HC_Halt>
 80038fe:	e045      	b.n	800398c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	333f      	adds	r3, #63	; 0x3f
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	333f      	adds	r3, #63	; 0x3f
 8003926:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003928:	2b02      	cmp	r3, #2
 800392a:	d12f      	bne.n	800398c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	440b      	add	r3, r1
 800393a:	3358      	adds	r3, #88	; 0x58
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d121      	bne.n	800398c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	335d      	adds	r3, #93	; 0x5d
 8003958:	2203      	movs	r2, #3
 800395a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	0151      	lsls	r1, r2, #5
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	440a      	add	r2, r1
 8003972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003976:	f043 0302 	orr.w	r3, r3, #2
 800397a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f003 fe2f 	bl	80075ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	461a      	mov	r2, r3
 800399a:	2310      	movs	r3, #16
 800399c:	6093      	str	r3, [r2, #8]
}
 800399e:	bf00      	nop
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d119      	bne.n	8003a0a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	461a      	mov	r2, r3
 80039e4:	2304      	movs	r3, #4
 80039e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	0151      	lsls	r1, r2, #5
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	440a      	add	r2, r1
 80039fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a02:	f043 0302 	orr.w	r3, r3, #2
 8003a06:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003a08:	e33e      	b.n	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d141      	bne.n	8003aa4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2320      	movs	r3, #32
 8003a30:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	333d      	adds	r3, #61	; 0x3d
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	f040 831f 	bne.w	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	333d      	adds	r3, #61	; 0x3d
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	335c      	adds	r3, #92	; 0x5c
 8003a6e:	2202      	movs	r2, #2
 8003a70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	0151      	lsls	r1, r2, #5
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	440a      	add	r2, r1
 8003a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a8c:	f043 0302 	orr.w	r3, r3, #2
 8003a90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f003 fda4 	bl	80075ea <USB_HC_Halt>
}
 8003aa2:	e2f1      	b.n	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d13f      	bne.n	8003b3a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	335d      	adds	r3, #93	; 0x5d
 8003aca:	2204      	movs	r2, #4
 8003acc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	440b      	add	r3, r1
 8003adc:	333d      	adds	r3, #61	; 0x3d
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	440b      	add	r3, r1
 8003af0:	3358      	adds	r3, #88	; 0x58
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	0151      	lsls	r1, r2, #5
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	440a      	add	r2, r1
 8003b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fd62 	bl	80075ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b32:	461a      	mov	r2, r3
 8003b34:	2340      	movs	r3, #64	; 0x40
 8003b36:	6093      	str	r3, [r2, #8]
}
 8003b38:	e2a6      	b.n	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b50:	d122      	bne.n	8003b98 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	0151      	lsls	r1, r2, #5
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	440a      	add	r2, r1
 8003b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f003 fd34 	bl	80075ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b94:	6093      	str	r3, [r2, #8]
}
 8003b96:	e277      	b.n	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d135      	bne.n	8003c1a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	440b      	add	r3, r1
 8003bbc:	3358      	adds	r3, #88	; 0x58
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	0151      	lsls	r1, r2, #5
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f003 fcfc 	bl	80075ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2301      	movs	r3, #1
 8003c02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	440b      	add	r3, r1
 8003c12:	335d      	adds	r3, #93	; 0x5d
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
}
 8003c18:	e236      	b.n	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d12b      	bne.n	8003c88 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2308      	movs	r3, #8
 8003c40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	0151      	lsls	r1, r2, #5
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	440a      	add	r2, r1
 8003c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f003 fcbc 	bl	80075ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	440b      	add	r3, r1
 8003c80:	335d      	adds	r3, #93	; 0x5d
 8003c82:	2205      	movs	r2, #5
 8003c84:	701a      	strb	r2, [r3, #0]
}
 8003c86:	e1ff      	b.n	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d155      	bne.n	8003d4a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	3358      	adds	r3, #88	; 0x58
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	335d      	adds	r3, #93	; 0x5d
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	333d      	adds	r3, #61	; 0x3d
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d114      	bne.n	8003d06 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	440b      	add	r3, r1
 8003cea:	333c      	adds	r3, #60	; 0x3c
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	440b      	add	r3, r1
 8003d00:	333d      	adds	r3, #61	; 0x3d
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	0151      	lsls	r1, r2, #5
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	440a      	add	r2, r1
 8003d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d20:	f043 0302 	orr.w	r3, r3, #2
 8003d24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f003 fc5a 	bl	80075ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d42:	461a      	mov	r2, r3
 8003d44:	2310      	movs	r3, #16
 8003d46:	6093      	str	r3, [r2, #8]
}
 8003d48:	e19e      	b.n	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b80      	cmp	r3, #128	; 0x80
 8003d5e:	d12b      	bne.n	8003db8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 fc2d 	bl	80075ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	335d      	adds	r3, #93	; 0x5d
 8003da0:	2206      	movs	r2, #6
 8003da2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db0:	461a      	mov	r2, r3
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	6093      	str	r3, [r2, #8]
}
 8003db6:	e167      	b.n	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dce:	d135      	bne.n	8003e3c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	0151      	lsls	r1, r2, #5
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	440a      	add	r2, r1
 8003de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dea:	f043 0302 	orr.w	r3, r3, #2
 8003dee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f003 fbf5 	bl	80075ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2310      	movs	r3, #16
 8003e10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	440b      	add	r3, r1
 8003e34:	335d      	adds	r3, #93	; 0x5d
 8003e36:	2208      	movs	r2, #8
 8003e38:	701a      	strb	r2, [r3, #0]
}
 8003e3a:	e125      	b.n	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	f040 811a 	bne.w	8004088 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	0151      	lsls	r1, r2, #5
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	440a      	add	r2, r1
 8003e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e6e:	f023 0302 	bic.w	r3, r3, #2
 8003e72:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	440b      	add	r3, r1
 8003e82:	335d      	adds	r3, #93	; 0x5d
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d137      	bne.n	8003efa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	440b      	add	r3, r1
 8003e98:	335c      	adds	r3, #92	; 0x5c
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	333f      	adds	r3, #63	; 0x3f
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d00b      	beq.n	8003ecc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	440b      	add	r3, r1
 8003ec2:	333f      	adds	r3, #63	; 0x3f
 8003ec4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	f040 80c5 	bne.w	8004056 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	3351      	adds	r3, #81	; 0x51
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	f083 0301 	eor.w	r3, r3, #1
 8003ee2:	b2d8      	uxtb	r0, r3
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3351      	adds	r3, #81	; 0x51
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e0ad      	b.n	8004056 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	440b      	add	r3, r1
 8003f08:	335d      	adds	r3, #93	; 0x5d
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d10a      	bne.n	8003f26 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	440b      	add	r3, r1
 8003f1e:	335c      	adds	r3, #92	; 0x5c
 8003f20:	2202      	movs	r2, #2
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	e097      	b.n	8004056 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	335d      	adds	r3, #93	; 0x5d
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d10a      	bne.n	8003f52 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	335c      	adds	r3, #92	; 0x5c
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e081      	b.n	8004056 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	440b      	add	r3, r1
 8003f60:	335d      	adds	r3, #93	; 0x5d
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d10a      	bne.n	8003f7e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	440b      	add	r3, r1
 8003f76:	335c      	adds	r3, #92	; 0x5c
 8003f78:	2205      	movs	r2, #5
 8003f7a:	701a      	strb	r2, [r3, #0]
 8003f7c:	e06b      	b.n	8004056 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	335d      	adds	r3, #93	; 0x5d
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b06      	cmp	r3, #6
 8003f92:	d00a      	beq.n	8003faa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	440b      	add	r3, r1
 8003fa2:	335d      	adds	r3, #93	; 0x5d
 8003fa4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d155      	bne.n	8004056 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3358      	adds	r3, #88	; 0x58
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	1c59      	adds	r1, r3, #1
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4403      	add	r3, r0
 8003fcc:	3358      	adds	r3, #88	; 0x58
 8003fce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	440b      	add	r3, r1
 8003fde:	3358      	adds	r3, #88	; 0x58
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d914      	bls.n	8004010 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3358      	adds	r3, #88	; 0x58
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	440b      	add	r3, r1
 8004008:	335c      	adds	r3, #92	; 0x5c
 800400a:	2204      	movs	r2, #4
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e009      	b.n	8004024 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	335c      	adds	r3, #92	; 0x5c
 8004020:	2202      	movs	r2, #2
 8004022:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800403a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004042:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	461a      	mov	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004062:	461a      	mov	r2, r3
 8004064:	2302      	movs	r3, #2
 8004066:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	b2d8      	uxtb	r0, r3
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	440b      	add	r3, r1
 800407a:	335c      	adds	r3, #92	; 0x5c
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	4601      	mov	r1, r0
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f008 f902 	bl	800c28c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004088:	bf00      	nop
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	0c5b      	lsrs	r3, r3, #17
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040c4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d003      	beq.n	80040d4 <HCD_RXQLVL_IRQHandler+0x44>
 80040cc:	2b05      	cmp	r3, #5
 80040ce:	f000 8082 	beq.w	80041d6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040d2:	e083      	b.n	80041dc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d07f      	beq.n	80041da <HCD_RXQLVL_IRQHandler+0x14a>
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	3344      	adds	r3, #68	; 0x44
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d074      	beq.n	80041da <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	440b      	add	r3, r1
 8004102:	3344      	adds	r3, #68	; 0x44
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	b292      	uxth	r2, r2
 800410a:	4619      	mov	r1, r3
 800410c:	f002 fe0b 	bl	8006d26 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	440b      	add	r3, r1
 800411e:	3344      	adds	r3, #68	; 0x44
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	18d1      	adds	r1, r2, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4403      	add	r3, r0
 8004134:	3344      	adds	r3, #68	; 0x44
 8004136:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	440b      	add	r3, r1
 8004146:	334c      	adds	r3, #76	; 0x4c
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	18d1      	adds	r1, r2, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4403      	add	r3, r0
 800415c:	334c      	adds	r3, #76	; 0x4c
 800415e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HCD_RXQLVL_IRQHandler+0x154>)
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d031      	beq.n	80041da <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800418c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004194:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	3350      	adds	r3, #80	; 0x50
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	f083 0301 	eor.w	r3, r3, #1
 80041be:	b2d8      	uxtb	r0, r3
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	440b      	add	r3, r1
 80041ce:	3350      	adds	r3, #80	; 0x50
 80041d0:	4602      	mov	r2, r0
 80041d2:	701a      	strb	r2, [r3, #0]
      break;
 80041d4:	e001      	b.n	80041da <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80041da:	bf00      	nop
  }
}
 80041dc:	bf00      	nop
 80041de:	3728      	adds	r7, #40	; 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	1ff80000 	.word	0x1ff80000

080041e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004214:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	d10b      	bne.n	8004238 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d102      	bne.n	8004230 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f008 f812 	bl	800c254 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f043 0302 	orr.w	r3, r3, #2
 8004236:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b08      	cmp	r3, #8
 8004240:	d132      	bne.n	80042a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f043 0308 	orr.w	r3, r3, #8
 8004248:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b04      	cmp	r3, #4
 8004252:	d126      	bne.n	80042a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d113      	bne.n	8004284 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004266:	d106      	bne.n	8004276 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2102      	movs	r1, #2
 800426e:	4618      	mov	r0, r3
 8004270:	f002 fe94 	bl	8006f9c <USB_InitFSLSPClkSel>
 8004274:	e011      	b.n	800429a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f002 fe8d 	bl	8006f9c <USB_InitFSLSPClkSel>
 8004282:	e00a      	b.n	800429a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d106      	bne.n	800429a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004292:	461a      	mov	r2, r3
 8004294:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004298:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f008 f808 	bl	800c2b0 <HAL_HCD_PortEnabled_Callback>
 80042a0:	e002      	b.n	80042a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f008 f812 	bl	800c2cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d103      	bne.n	80042ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f043 0320 	orr.w	r3, r3, #32
 80042b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042c0:	461a      	mov	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6013      	str	r3, [r2, #0]
}
 80042c6:	bf00      	nop
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e11f      	b.n	8004522 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc fed8 	bl	80010ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	; 0x24
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004334:	f001 f860 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4a7b      	ldr	r2, [pc, #492]	; (800452c <HAL_I2C_Init+0x25c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d807      	bhi.n	8004354 <HAL_I2C_Init+0x84>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a7a      	ldr	r2, [pc, #488]	; (8004530 <HAL_I2C_Init+0x260>)
 8004348:	4293      	cmp	r3, r2
 800434a:	bf94      	ite	ls
 800434c:	2301      	movls	r3, #1
 800434e:	2300      	movhi	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e006      	b.n	8004362 <HAL_I2C_Init+0x92>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a77      	ldr	r2, [pc, #476]	; (8004534 <HAL_I2C_Init+0x264>)
 8004358:	4293      	cmp	r3, r2
 800435a:	bf94      	ite	ls
 800435c:	2301      	movls	r3, #1
 800435e:	2300      	movhi	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0db      	b.n	8004522 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a72      	ldr	r2, [pc, #456]	; (8004538 <HAL_I2C_Init+0x268>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	0c9b      	lsrs	r3, r3, #18
 8004374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a64      	ldr	r2, [pc, #400]	; (800452c <HAL_I2C_Init+0x25c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d802      	bhi.n	80043a4 <HAL_I2C_Init+0xd4>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3301      	adds	r3, #1
 80043a2:	e009      	b.n	80043b8 <HAL_I2C_Init+0xe8>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	4a63      	ldr	r2, [pc, #396]	; (800453c <HAL_I2C_Init+0x26c>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	3301      	adds	r3, #1
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	430b      	orrs	r3, r1
 80043be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4956      	ldr	r1, [pc, #344]	; (800452c <HAL_I2C_Init+0x25c>)
 80043d4:	428b      	cmp	r3, r1
 80043d6:	d80d      	bhi.n	80043f4 <HAL_I2C_Init+0x124>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1e59      	subs	r1, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	bf38      	it	cc
 80043f0:	2304      	movcc	r3, #4
 80043f2:	e04f      	b.n	8004494 <HAL_I2C_Init+0x1c4>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d111      	bne.n	8004420 <HAL_I2C_Init+0x150>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e012      	b.n	8004446 <HAL_I2C_Init+0x176>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1e58      	subs	r0, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	0099      	lsls	r1, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	fbb0 f3f3 	udiv	r3, r0, r3
 8004436:	3301      	adds	r3, #1
 8004438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Init+0x17e>
 800444a:	2301      	movs	r3, #1
 800444c:	e022      	b.n	8004494 <HAL_I2C_Init+0x1c4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10e      	bne.n	8004474 <HAL_I2C_Init+0x1a4>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e58      	subs	r0, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	440b      	add	r3, r1
 8004464:	fbb0 f3f3 	udiv	r3, r0, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004472:	e00f      	b.n	8004494 <HAL_I2C_Init+0x1c4>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1e58      	subs	r0, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	0099      	lsls	r1, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	fbb0 f3f3 	udiv	r3, r0, r3
 800448a:	3301      	adds	r3, #1
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	6809      	ldr	r1, [r1, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6911      	ldr	r1, [r2, #16]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	000186a0 	.word	0x000186a0
 8004530:	001e847f 	.word	0x001e847f
 8004534:	003d08ff 	.word	0x003d08ff
 8004538:	431bde83 	.word	0x431bde83
 800453c:	10624dd3 	.word	0x10624dd3

08004540 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b20      	cmp	r3, #32
 8004554:	d129      	bne.n	80045aa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2224      	movs	r2, #36	; 0x24
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0210 	bic.w	r2, r2, #16
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0201 	orr.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e000      	b.n	80045ac <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
  }
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d12a      	bne.n	8004628 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2224      	movs	r2, #36	; 0x24
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0201 	bic.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045f2:	89fb      	ldrh	r3, [r7, #14]
 80045f4:	f023 030f 	bic.w	r3, r3, #15
 80045f8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	89fb      	ldrh	r3, [r7, #14]
 8004600:	4313      	orrs	r3, r2
 8004602:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	89fa      	ldrh	r2, [r7, #14]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	e000      	b.n	800462a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004628:	2302      	movs	r3, #2
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0bf      	b.n	80047ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fc fd8e 	bl	8001180 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800467a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6999      	ldr	r1, [r3, #24]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004690:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6899      	ldr	r1, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b4a      	ldr	r3, [pc, #296]	; (80047d4 <HAL_LTDC_Init+0x19c>)
 80046ac:	400b      	ands	r3, r1
 80046ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68d9      	ldr	r1, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b3e      	ldr	r3, [pc, #248]	; (80047d4 <HAL_LTDC_Init+0x19c>)
 80046da:	400b      	ands	r3, r1
 80046dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68d9      	ldr	r1, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1a      	ldr	r2, [r3, #32]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6919      	ldr	r1, [r3, #16]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4b33      	ldr	r3, [pc, #204]	; (80047d4 <HAL_LTDC_Init+0x19c>)
 8004708:	400b      	ands	r3, r1
 800470a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	041b      	lsls	r3, r3, #16
 8004712:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6919      	ldr	r1, [r3, #16]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6959      	ldr	r1, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <HAL_LTDC_Init+0x19c>)
 8004736:	400b      	ands	r3, r1
 8004738:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6959      	ldr	r1, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0206 	orr.w	r2, r2, #6
 80047a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	f000f800 	.word	0xf000f800

080047d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047d8:	b5b0      	push	{r4, r5, r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_LTDC_ConfigLayer+0x1a>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e02c      	b.n	800484c <HAL_LTDC_ConfigLayer+0x74>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2202      	movs	r2, #2
 80047fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2134      	movs	r1, #52	; 0x34
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	4413      	add	r3, r2
 800480e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4614      	mov	r4, r2
 8004816:	461d      	mov	r5, r3
 8004818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800481a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800481c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800481e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f811 	bl	8004854 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bdb0      	pop	{r4, r5, r7, pc}

08004854 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	; 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004870:	4413      	add	r3, r2
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	01db      	lsls	r3, r3, #7
 8004880:	4413      	add	r3, r2
 8004882:	3384      	adds	r3, #132	; 0x84
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	4611      	mov	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	01d2      	lsls	r2, r2, #7
 8004890:	440a      	add	r2, r1
 8004892:	3284      	adds	r2, #132	; 0x84
 8004894:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004898:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048aa:	4413      	add	r3, r2
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4619      	mov	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	01db      	lsls	r3, r3, #7
 80048b8:	440b      	add	r3, r1
 80048ba:	3384      	adds	r3, #132	; 0x84
 80048bc:	4619      	mov	r1, r3
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048d2:	4413      	add	r3, r2
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	01db      	lsls	r3, r3, #7
 80048e2:	4413      	add	r3, r2
 80048e4:	3384      	adds	r3, #132	; 0x84
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	4611      	mov	r1, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	01d2      	lsls	r2, r2, #7
 80048f2:	440a      	add	r2, r1
 80048f4:	3284      	adds	r2, #132	; 0x84
 80048f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800490a:	4413      	add	r3, r2
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	01db      	lsls	r3, r3, #7
 8004918:	440b      	add	r3, r1
 800491a:	3384      	adds	r3, #132	; 0x84
 800491c:	4619      	mov	r1, r3
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4313      	orrs	r3, r2
 8004922:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	01db      	lsls	r3, r3, #7
 800492e:	4413      	add	r3, r2
 8004930:	3384      	adds	r3, #132	; 0x84
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	4611      	mov	r1, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	01d2      	lsls	r2, r2, #7
 800493e:	440a      	add	r2, r1
 8004940:	3284      	adds	r2, #132	; 0x84
 8004942:	f023 0307 	bic.w	r3, r3, #7
 8004946:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	01db      	lsls	r3, r3, #7
 8004952:	4413      	add	r3, r2
 8004954:	3384      	adds	r3, #132	; 0x84
 8004956:	461a      	mov	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	061b      	lsls	r3, r3, #24
 8004978:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	01db      	lsls	r3, r3, #7
 8004984:	4413      	add	r3, r2
 8004986:	3384      	adds	r3, #132	; 0x84
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	01db      	lsls	r3, r3, #7
 8004994:	4413      	add	r3, r2
 8004996:	3384      	adds	r3, #132	; 0x84
 8004998:	461a      	mov	r2, r3
 800499a:	2300      	movs	r3, #0
 800499c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049a4:	461a      	mov	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4619      	mov	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	01db      	lsls	r3, r3, #7
 80049b8:	440b      	add	r3, r1
 80049ba:	3384      	adds	r3, #132	; 0x84
 80049bc:	4619      	mov	r1, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	01db      	lsls	r3, r3, #7
 80049ce:	4413      	add	r3, r2
 80049d0:	3384      	adds	r3, #132	; 0x84
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	4611      	mov	r1, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	01d2      	lsls	r2, r2, #7
 80049de:	440a      	add	r2, r1
 80049e0:	3284      	adds	r2, #132	; 0x84
 80049e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	01db      	lsls	r3, r3, #7
 80049f2:	4413      	add	r3, r2
 80049f4:	3384      	adds	r3, #132	; 0x84
 80049f6:	461a      	mov	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	01db      	lsls	r3, r3, #7
 8004a08:	4413      	add	r3, r2
 8004a0a:	3384      	adds	r3, #132	; 0x84
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	4611      	mov	r1, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	01d2      	lsls	r2, r2, #7
 8004a18:	440a      	add	r2, r1
 8004a1a:	3284      	adds	r2, #132	; 0x84
 8004a1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a20:	f023 0307 	bic.w	r3, r3, #7
 8004a24:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	6809      	ldr	r1, [r1, #0]
 8004a32:	4608      	mov	r0, r1
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	01c9      	lsls	r1, r1, #7
 8004a38:	4401      	add	r1, r0
 8004a3a:	3184      	adds	r1, #132	; 0x84
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	01db      	lsls	r3, r3, #7
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3384      	adds	r3, #132	; 0x84
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	01db      	lsls	r3, r3, #7
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3384      	adds	r3, #132	; 0x84
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2300      	movs	r3, #0
 8004a62:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	01db      	lsls	r3, r3, #7
 8004a6e:	4413      	add	r3, r2
 8004a70:	3384      	adds	r3, #132	; 0x84
 8004a72:	461a      	mov	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004a82:	2304      	movs	r3, #4
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	e01b      	b.n	8004ac0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d102      	bne.n	8004a96 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a90:	2303      	movs	r3, #3
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	e014      	b.n	8004ac0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d00b      	beq.n	8004ab6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d007      	beq.n	8004ab6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d003      	beq.n	8004ab6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ab2:	2b07      	cmp	r3, #7
 8004ab4:	d102      	bne.n	8004abc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	e001      	b.n	8004ac0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004abc:	2301      	movs	r3, #1
 8004abe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	01db      	lsls	r3, r3, #7
 8004aca:	4413      	add	r3, r2
 8004acc:	3384      	adds	r3, #132	; 0x84
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	01d2      	lsls	r2, r2, #7
 8004ada:	440a      	add	r2, r1
 8004adc:	3284      	adds	r2, #132	; 0x84
 8004ade:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	041a      	lsls	r2, r3, #16
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1acb      	subs	r3, r1, r3
 8004afa:	69f9      	ldr	r1, [r7, #28]
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	3303      	adds	r3, #3
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	6809      	ldr	r1, [r1, #0]
 8004b06:	4608      	mov	r0, r1
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	01c9      	lsls	r1, r1, #7
 8004b0c:	4401      	add	r1, r0
 8004b0e:	3184      	adds	r1, #132	; 0x84
 8004b10:	4313      	orrs	r3, r2
 8004b12:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	01db      	lsls	r3, r3, #7
 8004b1e:	4413      	add	r3, r2
 8004b20:	3384      	adds	r3, #132	; 0x84
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	4611      	mov	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	01d2      	lsls	r2, r2, #7
 8004b2e:	440a      	add	r2, r1
 8004b30:	3284      	adds	r2, #132	; 0x84
 8004b32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	01db      	lsls	r3, r3, #7
 8004b46:	4413      	add	r3, r2
 8004b48:	3384      	adds	r3, #132	; 0x84
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	01db      	lsls	r3, r3, #7
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3384      	adds	r3, #132	; 0x84
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	4611      	mov	r1, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	01d2      	lsls	r2, r2, #7
 8004b6c:	440a      	add	r2, r1
 8004b6e:	3284      	adds	r2, #132	; 0x84
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	6013      	str	r3, [r2, #0]
}
 8004b76:	bf00      	nop
 8004b78:	3724      	adds	r7, #36	; 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e25b      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d075      	beq.n	8004c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ba2:	4ba3      	ldr	r3, [pc, #652]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d00c      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bae:	4ba0      	ldr	r3, [pc, #640]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d112      	bne.n	8004be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bba:	4b9d      	ldr	r3, [pc, #628]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc6:	d10b      	bne.n	8004be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	4b99      	ldr	r3, [pc, #612]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d05b      	beq.n	8004c8c <HAL_RCC_OscConfig+0x108>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d157      	bne.n	8004c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e236      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x74>
 8004bea:	4b91      	ldr	r3, [pc, #580]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a90      	ldr	r2, [pc, #576]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e01d      	b.n	8004c34 <HAL_RCC_OscConfig+0xb0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x98>
 8004c02:	4b8b      	ldr	r3, [pc, #556]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a8a      	ldr	r2, [pc, #552]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b88      	ldr	r3, [pc, #544]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a87      	ldr	r2, [pc, #540]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCC_OscConfig+0xb0>
 8004c1c:	4b84      	ldr	r3, [pc, #528]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a83      	ldr	r2, [pc, #524]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b81      	ldr	r3, [pc, #516]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a80      	ldr	r2, [pc, #512]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fc fe3e 	bl	80018bc <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c44:	f7fc fe3a 	bl	80018bc <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	; 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e1fb      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c56:	4b76      	ldr	r3, [pc, #472]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0xc0>
 8004c62:	e014      	b.n	8004c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fc fe2a 	bl	80018bc <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fc fe26 	bl	80018bc <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e1e7      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7e:	4b6c      	ldr	r3, [pc, #432]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0xe8>
 8004c8a:	e000      	b.n	8004c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d063      	beq.n	8004d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c9a:	4b65      	ldr	r3, [pc, #404]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ca6:	4b62      	ldr	r3, [pc, #392]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d11c      	bne.n	8004cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb2:	4b5f      	ldr	r3, [pc, #380]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d116      	bne.n	8004cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	4b5c      	ldr	r3, [pc, #368]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x152>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e1bb      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	4b56      	ldr	r3, [pc, #344]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4952      	ldr	r1, [pc, #328]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cea:	e03a      	b.n	8004d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf4:	4b4f      	ldr	r3, [pc, #316]	; (8004e34 <HAL_RCC_OscConfig+0x2b0>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fc fddf 	bl	80018bc <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d02:	f7fc fddb 	bl	80018bc <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e19c      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d14:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4940      	ldr	r1, [pc, #256]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
 8004d34:	e015      	b.n	8004d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d36:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <HAL_RCC_OscConfig+0x2b0>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fc fdbe 	bl	80018bc <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d44:	f7fc fdba 	bl	80018bc <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e17b      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d56:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d030      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d76:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <HAL_RCC_OscConfig+0x2b4>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fc fd9e 	bl	80018bc <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d84:	f7fc fd9a 	bl	80018bc <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e15b      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d96:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x200>
 8004da2:	e015      	b.n	8004dd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da4:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <HAL_RCC_OscConfig+0x2b4>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004daa:	f7fc fd87 	bl	80018bc <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db2:	f7fc fd83 	bl	80018bc <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e144      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc4:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80a0 	beq.w	8004f1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de2:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	4a0e      	ldr	r2, [pc, #56]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_OscConfig+0x2b8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d121      	bne.n	8004e5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e1a:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <HAL_RCC_OscConfig+0x2b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <HAL_RCC_OscConfig+0x2b8>)
 8004e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e26:	f7fc fd49 	bl	80018bc <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2c:	e011      	b.n	8004e52 <HAL_RCC_OscConfig+0x2ce>
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800
 8004e34:	42470000 	.word	0x42470000
 8004e38:	42470e80 	.word	0x42470e80
 8004e3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e40:	f7fc fd3c 	bl	80018bc <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e0fd      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e52:	4b81      	ldr	r3, [pc, #516]	; (8005058 <HAL_RCC_OscConfig+0x4d4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d106      	bne.n	8004e74 <HAL_RCC_OscConfig+0x2f0>
 8004e66:	4b7d      	ldr	r3, [pc, #500]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	4a7c      	ldr	r2, [pc, #496]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	6713      	str	r3, [r2, #112]	; 0x70
 8004e72:	e01c      	b.n	8004eae <HAL_RCC_OscConfig+0x32a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	d10c      	bne.n	8004e96 <HAL_RCC_OscConfig+0x312>
 8004e7c:	4b77      	ldr	r3, [pc, #476]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a76      	ldr	r2, [pc, #472]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004e82:	f043 0304 	orr.w	r3, r3, #4
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70
 8004e88:	4b74      	ldr	r3, [pc, #464]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4a73      	ldr	r2, [pc, #460]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6713      	str	r3, [r2, #112]	; 0x70
 8004e94:	e00b      	b.n	8004eae <HAL_RCC_OscConfig+0x32a>
 8004e96:	4b71      	ldr	r3, [pc, #452]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	4a70      	ldr	r2, [pc, #448]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea2:	4b6e      	ldr	r3, [pc, #440]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a6d      	ldr	r2, [pc, #436]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004ea8:	f023 0304 	bic.w	r3, r3, #4
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d015      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb6:	f7fc fd01 	bl	80018bc <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fc fcfd 	bl	80018bc <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e0bc      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	4b61      	ldr	r3, [pc, #388]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ee      	beq.n	8004ebe <HAL_RCC_OscConfig+0x33a>
 8004ee0:	e014      	b.n	8004f0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee2:	f7fc fceb 	bl	80018bc <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fc fce7 	bl	80018bc <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0a6      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f00:	4b56      	ldr	r3, [pc, #344]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1ee      	bne.n	8004eea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f12:	4b52      	ldr	r3, [pc, #328]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	4a51      	ldr	r2, [pc, #324]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8092 	beq.w	800504c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f28:	4b4c      	ldr	r3, [pc, #304]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d05c      	beq.n	8004fee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d141      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3c:	4b48      	ldr	r3, [pc, #288]	; (8005060 <HAL_RCC_OscConfig+0x4dc>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fc fcbb 	bl	80018bc <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4a:	f7fc fcb7 	bl	80018bc <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e078      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5c:	4b3f      	ldr	r3, [pc, #252]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f0      	bne.n	8004f4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	019b      	lsls	r3, r3, #6
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	3b01      	subs	r3, #1
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	061b      	lsls	r3, r3, #24
 8004f8c:	4933      	ldr	r1, [pc, #204]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f92:	4b33      	ldr	r3, [pc, #204]	; (8005060 <HAL_RCC_OscConfig+0x4dc>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fc fc90 	bl	80018bc <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fc fc8c 	bl	80018bc <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e04d      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x41c>
 8004fbe:	e045      	b.n	800504c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc0:	4b27      	ldr	r3, [pc, #156]	; (8005060 <HAL_RCC_OscConfig+0x4dc>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc6:	f7fc fc79 	bl	80018bc <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fce:	f7fc fc75 	bl	80018bc <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e036      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f0      	bne.n	8004fce <HAL_RCC_OscConfig+0x44a>
 8004fec:	e02e      	b.n	800504c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e029      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ffa:	4b18      	ldr	r3, [pc, #96]	; (800505c <HAL_RCC_OscConfig+0x4d8>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	429a      	cmp	r2, r3
 800500c:	d11c      	bne.n	8005048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005018:	429a      	cmp	r2, r3
 800501a:	d115      	bne.n	8005048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005022:	4013      	ands	r3, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005028:	4293      	cmp	r3, r2
 800502a:	d10d      	bne.n	8005048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005036:	429a      	cmp	r2, r3
 8005038:	d106      	bne.n	8005048 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40007000 	.word	0x40007000
 800505c:	40023800 	.word	0x40023800
 8005060:	42470060 	.word	0x42470060

08005064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0cc      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b68      	ldr	r3, [pc, #416]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d90c      	bls.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b65      	ldr	r3, [pc, #404]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b63      	ldr	r3, [pc, #396]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0b8      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b8:	4b59      	ldr	r3, [pc, #356]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a58      	ldr	r2, [pc, #352]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0308 	and.w	r3, r3, #8
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d0:	4b53      	ldr	r3, [pc, #332]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a52      	ldr	r2, [pc, #328]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050dc:	4b50      	ldr	r3, [pc, #320]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	494d      	ldr	r1, [pc, #308]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d044      	beq.n	8005184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005102:	4b47      	ldr	r3, [pc, #284]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d119      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e07f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d003      	beq.n	8005122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800511e:	2b03      	cmp	r3, #3
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005122:	4b3f      	ldr	r3, [pc, #252]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e06f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005132:	4b3b      	ldr	r3, [pc, #236]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e067      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005142:	4b37      	ldr	r3, [pc, #220]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f023 0203 	bic.w	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4934      	ldr	r1, [pc, #208]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	4313      	orrs	r3, r2
 8005152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005154:	f7fc fbb2 	bl	80018bc <HAL_GetTick>
 8005158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	e00a      	b.n	8005172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515c:	f7fc fbae 	bl	80018bc <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	; 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e04f      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 020c 	and.w	r2, r3, #12
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	429a      	cmp	r2, r3
 8005182:	d1eb      	bne.n	800515c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d20c      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b22      	ldr	r3, [pc, #136]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <HAL_RCC_ClockConfig+0x1b8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e032      	b.n	8005212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4916      	ldr	r1, [pc, #88]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	490e      	ldr	r1, [pc, #56]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ea:	f000 f821 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 80051ee:	4601      	mov	r1, r0
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	4a0a      	ldr	r2, [pc, #40]	; (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 80051fc:	5cd3      	ldrb	r3, [r2, r3]
 80051fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_ClockConfig+0x1c8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fc fa14 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40023c00 	.word	0x40023c00
 8005220:	40023800 	.word	0x40023800
 8005224:	0800c978 	.word	0x0800c978
 8005228:	20000000 	.word	0x20000000
 800522c:	20000004 	.word	0x20000004

08005230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	607b      	str	r3, [r7, #4]
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	2300      	movs	r3, #0
 8005240:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005246:	4b63      	ldr	r3, [pc, #396]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b04      	cmp	r3, #4
 8005250:	d007      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0x32>
 8005252:	2b08      	cmp	r3, #8
 8005254:	d008      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x38>
 8005256:	2b00      	cmp	r3, #0
 8005258:	f040 80b4 	bne.w	80053c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b5e      	ldr	r3, [pc, #376]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800525e:	60bb      	str	r3, [r7, #8]
       break;
 8005260:	e0b3      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005262:	4b5e      	ldr	r3, [pc, #376]	; (80053dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005264:	60bb      	str	r3, [r7, #8]
      break;
 8005266:	e0b0      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005268:	4b5a      	ldr	r3, [pc, #360]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005270:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005272:	4b58      	ldr	r3, [pc, #352]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d04a      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527e:	4b55      	ldr	r3, [pc, #340]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	099b      	lsrs	r3, r3, #6
 8005284:	f04f 0400 	mov.w	r4, #0
 8005288:	f240 11ff 	movw	r1, #511	; 0x1ff
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	ea03 0501 	and.w	r5, r3, r1
 8005294:	ea04 0602 	and.w	r6, r4, r2
 8005298:	4629      	mov	r1, r5
 800529a:	4632      	mov	r2, r6
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	f04f 0400 	mov.w	r4, #0
 80052a4:	0154      	lsls	r4, r2, #5
 80052a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052aa:	014b      	lsls	r3, r1, #5
 80052ac:	4619      	mov	r1, r3
 80052ae:	4622      	mov	r2, r4
 80052b0:	1b49      	subs	r1, r1, r5
 80052b2:	eb62 0206 	sbc.w	r2, r2, r6
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	f04f 0400 	mov.w	r4, #0
 80052be:	0194      	lsls	r4, r2, #6
 80052c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052c4:	018b      	lsls	r3, r1, #6
 80052c6:	1a5b      	subs	r3, r3, r1
 80052c8:	eb64 0402 	sbc.w	r4, r4, r2
 80052cc:	f04f 0100 	mov.w	r1, #0
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	00e2      	lsls	r2, r4, #3
 80052d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052da:	00d9      	lsls	r1, r3, #3
 80052dc:	460b      	mov	r3, r1
 80052de:	4614      	mov	r4, r2
 80052e0:	195b      	adds	r3, r3, r5
 80052e2:	eb44 0406 	adc.w	r4, r4, r6
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	0262      	lsls	r2, r4, #9
 80052f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80052f4:	0259      	lsls	r1, r3, #9
 80052f6:	460b      	mov	r3, r1
 80052f8:	4614      	mov	r4, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	4621      	mov	r1, r4
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f04f 0400 	mov.w	r4, #0
 8005304:	461a      	mov	r2, r3
 8005306:	4623      	mov	r3, r4
 8005308:	f7fa ff72 	bl	80001f0 <__aeabi_uldivmod>
 800530c:	4603      	mov	r3, r0
 800530e:	460c      	mov	r4, r1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e049      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005314:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	099b      	lsrs	r3, r3, #6
 800531a:	f04f 0400 	mov.w	r4, #0
 800531e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	ea03 0501 	and.w	r5, r3, r1
 800532a:	ea04 0602 	and.w	r6, r4, r2
 800532e:	4629      	mov	r1, r5
 8005330:	4632      	mov	r2, r6
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	f04f 0400 	mov.w	r4, #0
 800533a:	0154      	lsls	r4, r2, #5
 800533c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005340:	014b      	lsls	r3, r1, #5
 8005342:	4619      	mov	r1, r3
 8005344:	4622      	mov	r2, r4
 8005346:	1b49      	subs	r1, r1, r5
 8005348:	eb62 0206 	sbc.w	r2, r2, r6
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	f04f 0400 	mov.w	r4, #0
 8005354:	0194      	lsls	r4, r2, #6
 8005356:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800535a:	018b      	lsls	r3, r1, #6
 800535c:	1a5b      	subs	r3, r3, r1
 800535e:	eb64 0402 	sbc.w	r4, r4, r2
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	00e2      	lsls	r2, r4, #3
 800536c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005370:	00d9      	lsls	r1, r3, #3
 8005372:	460b      	mov	r3, r1
 8005374:	4614      	mov	r4, r2
 8005376:	195b      	adds	r3, r3, r5
 8005378:	eb44 0406 	adc.w	r4, r4, r6
 800537c:	f04f 0100 	mov.w	r1, #0
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	02a2      	lsls	r2, r4, #10
 8005386:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800538a:	0299      	lsls	r1, r3, #10
 800538c:	460b      	mov	r3, r1
 800538e:	4614      	mov	r4, r2
 8005390:	4618      	mov	r0, r3
 8005392:	4621      	mov	r1, r4
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	461a      	mov	r2, r3
 800539c:	4623      	mov	r3, r4
 800539e:	f7fa ff27 	bl	80001f0 <__aeabi_uldivmod>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	3301      	adds	r3, #1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	60bb      	str	r3, [r7, #8]
      break;
 80053c2:	e002      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80053c6:	60bb      	str	r3, [r7, #8]
      break;
 80053c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ca:	68bb      	ldr	r3, [r7, #8]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d4:	40023800 	.word	0x40023800
 80053d8:	00f42400 	.word	0x00f42400
 80053dc:	007a1200 	.word	0x007a1200

080053e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000000 	.word	0x20000000

080053f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053fc:	f7ff fff0 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005400:	4601      	mov	r1, r0
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	0a9b      	lsrs	r3, r3, #10
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4a03      	ldr	r2, [pc, #12]	; (800541c <HAL_RCC_GetPCLK1Freq+0x24>)
 800540e:	5cd3      	ldrb	r3, [r2, r3]
 8005410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40023800 	.word	0x40023800
 800541c:	0800c988 	.word	0x0800c988

08005420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005424:	f7ff ffdc 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005428:	4601      	mov	r1, r0
 800542a:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0b5b      	lsrs	r3, r3, #13
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4a03      	ldr	r2, [pc, #12]	; (8005444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005436:	5cd3      	ldrb	r3, [r2, r3]
 8005438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40023800 	.word	0x40023800
 8005444:	0800c988 	.word	0x0800c988

08005448 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	220f      	movs	r2, #15
 8005456:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005458:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <HAL_RCC_GetClockConfig+0x5c>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0203 	and.w	r2, r3, #3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005464:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005470:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCC_GetClockConfig+0x5c>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	08db      	lsrs	r3, r3, #3
 8005482:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <HAL_RCC_GetClockConfig+0x60>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 020f 	and.w	r2, r3, #15
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40023c00 	.word	0x40023c00

080054ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10b      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d105      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d075      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054e0:	4bad      	ldr	r3, [pc, #692]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054e6:	f7fc f9e9 	bl	80018bc <HAL_GetTick>
 80054ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054ee:	f7fc f9e5 	bl	80018bc <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e18b      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005500:	4ba6      	ldr	r3, [pc, #664]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d009      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	019a      	lsls	r2, r3, #6
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	071b      	lsls	r3, r3, #28
 8005524:	499d      	ldr	r1, [pc, #628]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01f      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005538:	4b98      	ldr	r3, [pc, #608]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800553a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800553e:	0f1b      	lsrs	r3, r3, #28
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	019a      	lsls	r2, r3, #6
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	431a      	orrs	r2, r3
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	071b      	lsls	r3, r3, #28
 8005558:	4990      	ldr	r1, [pc, #576]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005560:	4b8e      	ldr	r3, [pc, #568]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005566:	f023 021f 	bic.w	r2, r3, #31
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	3b01      	subs	r3, #1
 8005570:	498a      	ldr	r1, [pc, #552]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	019a      	lsls	r2, r3, #6
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	061b      	lsls	r3, r3, #24
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	071b      	lsls	r3, r3, #28
 8005598:	4980      	ldr	r1, [pc, #512]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055a0:	4b7d      	ldr	r3, [pc, #500]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055a6:	f7fc f989 	bl	80018bc <HAL_GetTick>
 80055aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055ac:	e008      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055ae:	f7fc f985 	bl	80018bc <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e12b      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055c0:	4b76      	ldr	r3, [pc, #472]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d105      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d079      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055e4:	4b6e      	ldr	r3, [pc, #440]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055ea:	f7fc f967 	bl	80018bc <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80055f2:	f7fc f963 	bl	80018bc <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e109      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005604:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800560c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005610:	d0ef      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	d020      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800561e:	4b5f      	ldr	r3, [pc, #380]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005624:	0f1b      	lsrs	r3, r3, #28
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	019a      	lsls	r2, r3, #6
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	061b      	lsls	r3, r3, #24
 8005638:	431a      	orrs	r2, r3
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	071b      	lsls	r3, r3, #28
 800563e:	4957      	ldr	r1, [pc, #348]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005646:	4b55      	ldr	r3, [pc, #340]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	3b01      	subs	r3, #1
 8005656:	021b      	lsls	r3, r3, #8
 8005658:	4950      	ldr	r1, [pc, #320]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01e      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800566c:	4b4b      	ldr	r3, [pc, #300]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	0e1b      	lsrs	r3, r3, #24
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	019a      	lsls	r2, r3, #6
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	061b      	lsls	r3, r3, #24
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	071b      	lsls	r3, r3, #28
 800568c:	4943      	ldr	r1, [pc, #268]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005694:	4b41      	ldr	r3, [pc, #260]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800569a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	493e      	ldr	r1, [pc, #248]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056aa:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056ac:	2201      	movs	r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056b0:	f7fc f904 	bl	80018bc <HAL_GetTick>
 80056b4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80056b8:	f7fc f900 	bl	80018bc <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0a6      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056ca:	4b34      	ldr	r3, [pc, #208]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d6:	d1ef      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 808d 	beq.w	8005800 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	4b2c      	ldr	r3, [pc, #176]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	4a2b      	ldr	r2, [pc, #172]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f4:	6413      	str	r3, [r2, #64]	; 0x40
 80056f6:	4b29      	ldr	r3, [pc, #164]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005702:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a27      	ldr	r2, [pc, #156]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800570e:	f7fc f8d5 	bl	80018bc <HAL_GetTick>
 8005712:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005714:	e008      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005716:	f7fc f8d1 	bl	80018bc <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e077      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005728:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f0      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005734:	4b19      	ldr	r3, [pc, #100]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d039      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	429a      	cmp	r2, r3
 8005750:	d032      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800575c:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005768:	4a0c      	ldr	r2, [pc, #48]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800576e:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b01      	cmp	r3, #1
 8005778:	d11e      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800577a:	f7fc f89f 	bl	80018bc <HAL_GetTick>
 800577e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005780:	e014      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fc f89b 	bl	80018bc <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d90b      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e03f      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005798:	42470068 	.word	0x42470068
 800579c:	40023800 	.word	0x40023800
 80057a0:	42470070 	.word	0x42470070
 80057a4:	40007000 	.word	0x40007000
 80057a8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ac:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0e4      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c4:	d10d      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80057c6:	4b16      	ldr	r3, [pc, #88]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057da:	4911      	ldr	r1, [pc, #68]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	608b      	str	r3, [r1, #8]
 80057e0:	e005      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80057e2:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	4a0e      	ldr	r2, [pc, #56]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057ec:	6093      	str	r3, [r2, #8]
 80057ee:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057fa:	4909      	ldr	r1, [pc, #36]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005812:	4b04      	ldr	r3, [pc, #16]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005814:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	424711e0 	.word	0x424711e0

08005828 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e025      	b.n	8005888 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7fb fee7 	bl	8001624 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3304      	adds	r3, #4
 8005866:	4619      	mov	r1, r3
 8005868:	4610      	mov	r0, r2
 800586a:	f001 f83f 	bl	80068ec <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	461a      	mov	r2, r3
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	f001 f8aa 	bl	80069d2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e056      	b.n	8005950 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fb fd6d 	bl	800139c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	ea42 0103 	orr.w	r1, r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	f003 0104 	and.w	r1, r3, #4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800593e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e01d      	b.n	80059a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fd54 	bl	800142c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f000 fa14 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b06      	cmp	r3, #6
 80059d6:	d007      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d122      	bne.n	8005a52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d11b      	bne.n	8005a52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f06f 0202 	mvn.w	r2, #2
 8005a22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f9a5 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005a3e:	e005      	b.n	8005a4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f997 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f9a8 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d122      	bne.n	8005aa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d11b      	bne.n	8005aa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f06f 0204 	mvn.w	r2, #4
 8005a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f97b 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005a92:	e005      	b.n	8005aa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f96d 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f97e 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d122      	bne.n	8005afa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d11b      	bne.n	8005afa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f06f 0208 	mvn.w	r2, #8
 8005aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2204      	movs	r2, #4
 8005ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f003 0303 	and.w	r3, r3, #3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f951 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005ae6:	e005      	b.n	8005af4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f943 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f954 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d122      	bne.n	8005b4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b10      	cmp	r3, #16
 8005b14:	d11b      	bne.n	8005b4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f06f 0210 	mvn.w	r2, #16
 8005b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2208      	movs	r2, #8
 8005b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f927 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005b3a:	e005      	b.n	8005b48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f919 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f92a 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d10e      	bne.n	8005b7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d107      	bne.n	8005b7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f06f 0201 	mvn.w	r2, #1
 8005b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fb f979 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	2b80      	cmp	r3, #128	; 0x80
 8005b86:	d10e      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	2b80      	cmp	r3, #128	; 0x80
 8005b94:	d107      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 facf 	bl	8006144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d10e      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d107      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f8ef 	bl	8005db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d10e      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d107      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0220 	mvn.w	r2, #32
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fa99 	bl	8006130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_TIM_ConfigClockSource+0x18>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e0a6      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x166>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c44:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d067      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x120>
 8005c56:	2b40      	cmp	r3, #64	; 0x40
 8005c58:	d80b      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x6c>
 8005c5a:	2b10      	cmp	r3, #16
 8005c5c:	d073      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x140>
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d802      	bhi.n	8005c68 <HAL_TIM_ConfigClockSource+0x62>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d06f      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c66:	e078      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d06c      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x140>
 8005c6c:	2b30      	cmp	r3, #48	; 0x30
 8005c6e:	d06a      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005c70:	e073      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c72:	2b70      	cmp	r3, #112	; 0x70
 8005c74:	d00d      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0x8c>
 8005c76:	2b70      	cmp	r3, #112	; 0x70
 8005c78:	d804      	bhi.n	8005c84 <HAL_TIM_ConfigClockSource+0x7e>
 8005c7a:	2b50      	cmp	r3, #80	; 0x50
 8005c7c:	d033      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0xe0>
 8005c7e:	2b60      	cmp	r3, #96	; 0x60
 8005c80:	d041      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005c82:	e06a      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	d066      	beq.n	8005d58 <HAL_TIM_ConfigClockSource+0x152>
 8005c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8e:	d017      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c90:	e063      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f000 f9a9 	bl	8005ff8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	609a      	str	r2, [r3, #8]
      break;
 8005cbe:	e04c      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	6899      	ldr	r1, [r3, #8]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f000 f992 	bl	8005ff8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce2:	609a      	str	r2, [r3, #8]
      break;
 8005ce4:	e039      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 f906 	bl	8005f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2150      	movs	r1, #80	; 0x50
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 f95f 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d04:	e029      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 f925 	bl	8005f62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2160      	movs	r1, #96	; 0x60
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f94f 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d24:	e019      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f000 f8e6 	bl	8005f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2140      	movs	r1, #64	; 0x40
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f93f 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d44:	e009      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f000 f936 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d56:	e000      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005d58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a40      	ldr	r2, [pc, #256]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d00f      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a3d      	ldr	r2, [pc, #244]	; (8005edc <TIM_Base_SetConfig+0x118>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3c      	ldr	r2, [pc, #240]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3b      	ldr	r2, [pc, #236]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3a      	ldr	r2, [pc, #232]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d108      	bne.n	8005e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2f      	ldr	r2, [pc, #188]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d02b      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d027      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2c      	ldr	r2, [pc, #176]	; (8005edc <TIM_Base_SetConfig+0x118>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d023      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2b      	ldr	r2, [pc, #172]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01f      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01b      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a29      	ldr	r2, [pc, #164]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d017      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a28      	ldr	r2, [pc, #160]	; (8005eec <TIM_Base_SetConfig+0x128>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <TIM_Base_SetConfig+0x12c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00f      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a26      	ldr	r2, [pc, #152]	; (8005ef4 <TIM_Base_SetConfig+0x130>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a25      	ldr	r2, [pc, #148]	; (8005ef8 <TIM_Base_SetConfig+0x134>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a24      	ldr	r2, [pc, #144]	; (8005efc <TIM_Base_SetConfig+0x138>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <TIM_Base_SetConfig+0x13c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d108      	bne.n	8005e88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_Base_SetConfig+0xf8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d103      	bne.n	8005ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	615a      	str	r2, [r3, #20]
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40010400 	.word	0x40010400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800
 8005ef8:	40001800 	.word	0x40001800
 8005efc:	40001c00 	.word	0x40001c00
 8005f00:	40002000 	.word	0x40002000

08005f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0201 	bic.w	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f023 030a 	bic.w	r3, r3, #10
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b087      	sub	sp, #28
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0210 	bic.w	r2, r3, #16
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	031b      	lsls	r3, r3, #12
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f043 0307 	orr.w	r3, r3, #7
 8005fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	609a      	str	r2, [r3, #8]
}
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	021a      	lsls	r2, r3, #8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	431a      	orrs	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4313      	orrs	r3, r2
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	609a      	str	r2, [r3, #8]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e05a      	b.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a21      	ldr	r2, [pc, #132]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d022      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609c:	d01d      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1a      	ldr	r2, [pc, #104]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a18      	ldr	r2, [pc, #96]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a15      	ldr	r2, [pc, #84]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10c      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40010400 	.word	0x40010400
 8006128:	40014000 	.word	0x40014000
 800612c:	40001800 	.word	0x40001800

08006130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e03f      	b.n	80061ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fb f976 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	; 0x24
 8006188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800619a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f829 	bl	80061f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f8:	b085      	sub	sp, #20
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006236:	f023 030c 	bic.w	r3, r3, #12
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	68f9      	ldr	r1, [r7, #12]
 8006240:	430b      	orrs	r3, r1
 8006242:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006262:	f040 818b 	bne.w	800657c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4ac1      	ldr	r2, [pc, #772]	; (8006570 <UART_SetConfig+0x37c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d005      	beq.n	800627c <UART_SetConfig+0x88>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4abf      	ldr	r2, [pc, #764]	; (8006574 <UART_SetConfig+0x380>)
 8006276:	4293      	cmp	r3, r2
 8006278:	f040 80bd 	bne.w	80063f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800627c:	f7ff f8d0 	bl	8005420 <HAL_RCC_GetPCLK2Freq>
 8006280:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	461d      	mov	r5, r3
 8006286:	f04f 0600 	mov.w	r6, #0
 800628a:	46a8      	mov	r8, r5
 800628c:	46b1      	mov	r9, r6
 800628e:	eb18 0308 	adds.w	r3, r8, r8
 8006292:	eb49 0409 	adc.w	r4, r9, r9
 8006296:	4698      	mov	r8, r3
 8006298:	46a1      	mov	r9, r4
 800629a:	eb18 0805 	adds.w	r8, r8, r5
 800629e:	eb49 0906 	adc.w	r9, r9, r6
 80062a2:	f04f 0100 	mov.w	r1, #0
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062b6:	4688      	mov	r8, r1
 80062b8:	4691      	mov	r9, r2
 80062ba:	eb18 0005 	adds.w	r0, r8, r5
 80062be:	eb49 0106 	adc.w	r1, r9, r6
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	461d      	mov	r5, r3
 80062c8:	f04f 0600 	mov.w	r6, #0
 80062cc:	196b      	adds	r3, r5, r5
 80062ce:	eb46 0406 	adc.w	r4, r6, r6
 80062d2:	461a      	mov	r2, r3
 80062d4:	4623      	mov	r3, r4
 80062d6:	f7f9 ff8b 	bl	80001f0 <__aeabi_uldivmod>
 80062da:	4603      	mov	r3, r0
 80062dc:	460c      	mov	r4, r1
 80062de:	461a      	mov	r2, r3
 80062e0:	4ba5      	ldr	r3, [pc, #660]	; (8006578 <UART_SetConfig+0x384>)
 80062e2:	fba3 2302 	umull	r2, r3, r3, r2
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	461d      	mov	r5, r3
 80062f0:	f04f 0600 	mov.w	r6, #0
 80062f4:	46a9      	mov	r9, r5
 80062f6:	46b2      	mov	sl, r6
 80062f8:	eb19 0309 	adds.w	r3, r9, r9
 80062fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006300:	4699      	mov	r9, r3
 8006302:	46a2      	mov	sl, r4
 8006304:	eb19 0905 	adds.w	r9, r9, r5
 8006308:	eb4a 0a06 	adc.w	sl, sl, r6
 800630c:	f04f 0100 	mov.w	r1, #0
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006318:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800631c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006320:	4689      	mov	r9, r1
 8006322:	4692      	mov	sl, r2
 8006324:	eb19 0005 	adds.w	r0, r9, r5
 8006328:	eb4a 0106 	adc.w	r1, sl, r6
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	461d      	mov	r5, r3
 8006332:	f04f 0600 	mov.w	r6, #0
 8006336:	196b      	adds	r3, r5, r5
 8006338:	eb46 0406 	adc.w	r4, r6, r6
 800633c:	461a      	mov	r2, r3
 800633e:	4623      	mov	r3, r4
 8006340:	f7f9 ff56 	bl	80001f0 <__aeabi_uldivmod>
 8006344:	4603      	mov	r3, r0
 8006346:	460c      	mov	r4, r1
 8006348:	461a      	mov	r2, r3
 800634a:	4b8b      	ldr	r3, [pc, #556]	; (8006578 <UART_SetConfig+0x384>)
 800634c:	fba3 1302 	umull	r1, r3, r3, r2
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	2164      	movs	r1, #100	; 0x64
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	3332      	adds	r3, #50	; 0x32
 800635e:	4a86      	ldr	r2, [pc, #536]	; (8006578 <UART_SetConfig+0x384>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800636c:	4498      	add	r8, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	461d      	mov	r5, r3
 8006372:	f04f 0600 	mov.w	r6, #0
 8006376:	46a9      	mov	r9, r5
 8006378:	46b2      	mov	sl, r6
 800637a:	eb19 0309 	adds.w	r3, r9, r9
 800637e:	eb4a 040a 	adc.w	r4, sl, sl
 8006382:	4699      	mov	r9, r3
 8006384:	46a2      	mov	sl, r4
 8006386:	eb19 0905 	adds.w	r9, r9, r5
 800638a:	eb4a 0a06 	adc.w	sl, sl, r6
 800638e:	f04f 0100 	mov.w	r1, #0
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800639a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800639e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063a2:	4689      	mov	r9, r1
 80063a4:	4692      	mov	sl, r2
 80063a6:	eb19 0005 	adds.w	r0, r9, r5
 80063aa:	eb4a 0106 	adc.w	r1, sl, r6
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	461d      	mov	r5, r3
 80063b4:	f04f 0600 	mov.w	r6, #0
 80063b8:	196b      	adds	r3, r5, r5
 80063ba:	eb46 0406 	adc.w	r4, r6, r6
 80063be:	461a      	mov	r2, r3
 80063c0:	4623      	mov	r3, r4
 80063c2:	f7f9 ff15 	bl	80001f0 <__aeabi_uldivmod>
 80063c6:	4603      	mov	r3, r0
 80063c8:	460c      	mov	r4, r1
 80063ca:	461a      	mov	r2, r3
 80063cc:	4b6a      	ldr	r3, [pc, #424]	; (8006578 <UART_SetConfig+0x384>)
 80063ce:	fba3 1302 	umull	r1, r3, r3, r2
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	2164      	movs	r1, #100	; 0x64
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	3332      	adds	r3, #50	; 0x32
 80063e0:	4a65      	ldr	r2, [pc, #404]	; (8006578 <UART_SetConfig+0x384>)
 80063e2:	fba2 2303 	umull	r2, r3, r2, r3
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	f003 0207 	and.w	r2, r3, #7
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4442      	add	r2, r8
 80063f2:	609a      	str	r2, [r3, #8]
 80063f4:	e26f      	b.n	80068d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063f6:	f7fe ffff 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 80063fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	461d      	mov	r5, r3
 8006400:	f04f 0600 	mov.w	r6, #0
 8006404:	46a8      	mov	r8, r5
 8006406:	46b1      	mov	r9, r6
 8006408:	eb18 0308 	adds.w	r3, r8, r8
 800640c:	eb49 0409 	adc.w	r4, r9, r9
 8006410:	4698      	mov	r8, r3
 8006412:	46a1      	mov	r9, r4
 8006414:	eb18 0805 	adds.w	r8, r8, r5
 8006418:	eb49 0906 	adc.w	r9, r9, r6
 800641c:	f04f 0100 	mov.w	r1, #0
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006428:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800642c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006430:	4688      	mov	r8, r1
 8006432:	4691      	mov	r9, r2
 8006434:	eb18 0005 	adds.w	r0, r8, r5
 8006438:	eb49 0106 	adc.w	r1, r9, r6
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	461d      	mov	r5, r3
 8006442:	f04f 0600 	mov.w	r6, #0
 8006446:	196b      	adds	r3, r5, r5
 8006448:	eb46 0406 	adc.w	r4, r6, r6
 800644c:	461a      	mov	r2, r3
 800644e:	4623      	mov	r3, r4
 8006450:	f7f9 fece 	bl	80001f0 <__aeabi_uldivmod>
 8006454:	4603      	mov	r3, r0
 8006456:	460c      	mov	r4, r1
 8006458:	461a      	mov	r2, r3
 800645a:	4b47      	ldr	r3, [pc, #284]	; (8006578 <UART_SetConfig+0x384>)
 800645c:	fba3 2302 	umull	r2, r3, r3, r2
 8006460:	095b      	lsrs	r3, r3, #5
 8006462:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	461d      	mov	r5, r3
 800646a:	f04f 0600 	mov.w	r6, #0
 800646e:	46a9      	mov	r9, r5
 8006470:	46b2      	mov	sl, r6
 8006472:	eb19 0309 	adds.w	r3, r9, r9
 8006476:	eb4a 040a 	adc.w	r4, sl, sl
 800647a:	4699      	mov	r9, r3
 800647c:	46a2      	mov	sl, r4
 800647e:	eb19 0905 	adds.w	r9, r9, r5
 8006482:	eb4a 0a06 	adc.w	sl, sl, r6
 8006486:	f04f 0100 	mov.w	r1, #0
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006492:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006496:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800649a:	4689      	mov	r9, r1
 800649c:	4692      	mov	sl, r2
 800649e:	eb19 0005 	adds.w	r0, r9, r5
 80064a2:	eb4a 0106 	adc.w	r1, sl, r6
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	461d      	mov	r5, r3
 80064ac:	f04f 0600 	mov.w	r6, #0
 80064b0:	196b      	adds	r3, r5, r5
 80064b2:	eb46 0406 	adc.w	r4, r6, r6
 80064b6:	461a      	mov	r2, r3
 80064b8:	4623      	mov	r3, r4
 80064ba:	f7f9 fe99 	bl	80001f0 <__aeabi_uldivmod>
 80064be:	4603      	mov	r3, r0
 80064c0:	460c      	mov	r4, r1
 80064c2:	461a      	mov	r2, r3
 80064c4:	4b2c      	ldr	r3, [pc, #176]	; (8006578 <UART_SetConfig+0x384>)
 80064c6:	fba3 1302 	umull	r1, r3, r3, r2
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2164      	movs	r1, #100	; 0x64
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	3332      	adds	r3, #50	; 0x32
 80064d8:	4a27      	ldr	r2, [pc, #156]	; (8006578 <UART_SetConfig+0x384>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e6:	4498      	add	r8, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	461d      	mov	r5, r3
 80064ec:	f04f 0600 	mov.w	r6, #0
 80064f0:	46a9      	mov	r9, r5
 80064f2:	46b2      	mov	sl, r6
 80064f4:	eb19 0309 	adds.w	r3, r9, r9
 80064f8:	eb4a 040a 	adc.w	r4, sl, sl
 80064fc:	4699      	mov	r9, r3
 80064fe:	46a2      	mov	sl, r4
 8006500:	eb19 0905 	adds.w	r9, r9, r5
 8006504:	eb4a 0a06 	adc.w	sl, sl, r6
 8006508:	f04f 0100 	mov.w	r1, #0
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006514:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006518:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800651c:	4689      	mov	r9, r1
 800651e:	4692      	mov	sl, r2
 8006520:	eb19 0005 	adds.w	r0, r9, r5
 8006524:	eb4a 0106 	adc.w	r1, sl, r6
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	461d      	mov	r5, r3
 800652e:	f04f 0600 	mov.w	r6, #0
 8006532:	196b      	adds	r3, r5, r5
 8006534:	eb46 0406 	adc.w	r4, r6, r6
 8006538:	461a      	mov	r2, r3
 800653a:	4623      	mov	r3, r4
 800653c:	f7f9 fe58 	bl	80001f0 <__aeabi_uldivmod>
 8006540:	4603      	mov	r3, r0
 8006542:	460c      	mov	r4, r1
 8006544:	461a      	mov	r2, r3
 8006546:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <UART_SetConfig+0x384>)
 8006548:	fba3 1302 	umull	r1, r3, r3, r2
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	2164      	movs	r1, #100	; 0x64
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	3332      	adds	r3, #50	; 0x32
 800655a:	4a07      	ldr	r2, [pc, #28]	; (8006578 <UART_SetConfig+0x384>)
 800655c:	fba2 2303 	umull	r2, r3, r2, r3
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	f003 0207 	and.w	r2, r3, #7
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4442      	add	r2, r8
 800656c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800656e:	e1b2      	b.n	80068d6 <UART_SetConfig+0x6e2>
 8006570:	40011000 	.word	0x40011000
 8006574:	40011400 	.word	0x40011400
 8006578:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4ad7      	ldr	r2, [pc, #860]	; (80068e0 <UART_SetConfig+0x6ec>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d005      	beq.n	8006592 <UART_SetConfig+0x39e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4ad6      	ldr	r2, [pc, #856]	; (80068e4 <UART_SetConfig+0x6f0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	f040 80d1 	bne.w	8006734 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006592:	f7fe ff45 	bl	8005420 <HAL_RCC_GetPCLK2Freq>
 8006596:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	469a      	mov	sl, r3
 800659c:	f04f 0b00 	mov.w	fp, #0
 80065a0:	46d0      	mov	r8, sl
 80065a2:	46d9      	mov	r9, fp
 80065a4:	eb18 0308 	adds.w	r3, r8, r8
 80065a8:	eb49 0409 	adc.w	r4, r9, r9
 80065ac:	4698      	mov	r8, r3
 80065ae:	46a1      	mov	r9, r4
 80065b0:	eb18 080a 	adds.w	r8, r8, sl
 80065b4:	eb49 090b 	adc.w	r9, r9, fp
 80065b8:	f04f 0100 	mov.w	r1, #0
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065cc:	4688      	mov	r8, r1
 80065ce:	4691      	mov	r9, r2
 80065d0:	eb1a 0508 	adds.w	r5, sl, r8
 80065d4:	eb4b 0609 	adc.w	r6, fp, r9
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4619      	mov	r1, r3
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	f04f 0300 	mov.w	r3, #0
 80065e6:	f04f 0400 	mov.w	r4, #0
 80065ea:	0094      	lsls	r4, r2, #2
 80065ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065f0:	008b      	lsls	r3, r1, #2
 80065f2:	461a      	mov	r2, r3
 80065f4:	4623      	mov	r3, r4
 80065f6:	4628      	mov	r0, r5
 80065f8:	4631      	mov	r1, r6
 80065fa:	f7f9 fdf9 	bl	80001f0 <__aeabi_uldivmod>
 80065fe:	4603      	mov	r3, r0
 8006600:	460c      	mov	r4, r1
 8006602:	461a      	mov	r2, r3
 8006604:	4bb8      	ldr	r3, [pc, #736]	; (80068e8 <UART_SetConfig+0x6f4>)
 8006606:	fba3 2302 	umull	r2, r3, r3, r2
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	469b      	mov	fp, r3
 8006614:	f04f 0c00 	mov.w	ip, #0
 8006618:	46d9      	mov	r9, fp
 800661a:	46e2      	mov	sl, ip
 800661c:	eb19 0309 	adds.w	r3, r9, r9
 8006620:	eb4a 040a 	adc.w	r4, sl, sl
 8006624:	4699      	mov	r9, r3
 8006626:	46a2      	mov	sl, r4
 8006628:	eb19 090b 	adds.w	r9, r9, fp
 800662c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006630:	f04f 0100 	mov.w	r1, #0
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800663c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006640:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006644:	4689      	mov	r9, r1
 8006646:	4692      	mov	sl, r2
 8006648:	eb1b 0509 	adds.w	r5, fp, r9
 800664c:	eb4c 060a 	adc.w	r6, ip, sl
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4619      	mov	r1, r3
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	f04f 0400 	mov.w	r4, #0
 8006662:	0094      	lsls	r4, r2, #2
 8006664:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006668:	008b      	lsls	r3, r1, #2
 800666a:	461a      	mov	r2, r3
 800666c:	4623      	mov	r3, r4
 800666e:	4628      	mov	r0, r5
 8006670:	4631      	mov	r1, r6
 8006672:	f7f9 fdbd 	bl	80001f0 <__aeabi_uldivmod>
 8006676:	4603      	mov	r3, r0
 8006678:	460c      	mov	r4, r1
 800667a:	461a      	mov	r2, r3
 800667c:	4b9a      	ldr	r3, [pc, #616]	; (80068e8 <UART_SetConfig+0x6f4>)
 800667e:	fba3 1302 	umull	r1, r3, r3, r2
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	2164      	movs	r1, #100	; 0x64
 8006686:	fb01 f303 	mul.w	r3, r1, r3
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	3332      	adds	r3, #50	; 0x32
 8006690:	4a95      	ldr	r2, [pc, #596]	; (80068e8 <UART_SetConfig+0x6f4>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800669c:	4498      	add	r8, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	469b      	mov	fp, r3
 80066a2:	f04f 0c00 	mov.w	ip, #0
 80066a6:	46d9      	mov	r9, fp
 80066a8:	46e2      	mov	sl, ip
 80066aa:	eb19 0309 	adds.w	r3, r9, r9
 80066ae:	eb4a 040a 	adc.w	r4, sl, sl
 80066b2:	4699      	mov	r9, r3
 80066b4:	46a2      	mov	sl, r4
 80066b6:	eb19 090b 	adds.w	r9, r9, fp
 80066ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066be:	f04f 0100 	mov.w	r1, #0
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066d2:	4689      	mov	r9, r1
 80066d4:	4692      	mov	sl, r2
 80066d6:	eb1b 0509 	adds.w	r5, fp, r9
 80066da:	eb4c 060a 	adc.w	r6, ip, sl
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	4619      	mov	r1, r3
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	f04f 0400 	mov.w	r4, #0
 80066f0:	0094      	lsls	r4, r2, #2
 80066f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066f6:	008b      	lsls	r3, r1, #2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4623      	mov	r3, r4
 80066fc:	4628      	mov	r0, r5
 80066fe:	4631      	mov	r1, r6
 8006700:	f7f9 fd76 	bl	80001f0 <__aeabi_uldivmod>
 8006704:	4603      	mov	r3, r0
 8006706:	460c      	mov	r4, r1
 8006708:	461a      	mov	r2, r3
 800670a:	4b77      	ldr	r3, [pc, #476]	; (80068e8 <UART_SetConfig+0x6f4>)
 800670c:	fba3 1302 	umull	r1, r3, r3, r2
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	2164      	movs	r1, #100	; 0x64
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	3332      	adds	r3, #50	; 0x32
 800671e:	4a72      	ldr	r2, [pc, #456]	; (80068e8 <UART_SetConfig+0x6f4>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	f003 020f 	and.w	r2, r3, #15
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4442      	add	r2, r8
 8006730:	609a      	str	r2, [r3, #8]
 8006732:	e0d0      	b.n	80068d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006734:	f7fe fe60 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8006738:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	469a      	mov	sl, r3
 800673e:	f04f 0b00 	mov.w	fp, #0
 8006742:	46d0      	mov	r8, sl
 8006744:	46d9      	mov	r9, fp
 8006746:	eb18 0308 	adds.w	r3, r8, r8
 800674a:	eb49 0409 	adc.w	r4, r9, r9
 800674e:	4698      	mov	r8, r3
 8006750:	46a1      	mov	r9, r4
 8006752:	eb18 080a 	adds.w	r8, r8, sl
 8006756:	eb49 090b 	adc.w	r9, r9, fp
 800675a:	f04f 0100 	mov.w	r1, #0
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006766:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800676a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800676e:	4688      	mov	r8, r1
 8006770:	4691      	mov	r9, r2
 8006772:	eb1a 0508 	adds.w	r5, sl, r8
 8006776:	eb4b 0609 	adc.w	r6, fp, r9
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	4619      	mov	r1, r3
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	f04f 0400 	mov.w	r4, #0
 800678c:	0094      	lsls	r4, r2, #2
 800678e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006792:	008b      	lsls	r3, r1, #2
 8006794:	461a      	mov	r2, r3
 8006796:	4623      	mov	r3, r4
 8006798:	4628      	mov	r0, r5
 800679a:	4631      	mov	r1, r6
 800679c:	f7f9 fd28 	bl	80001f0 <__aeabi_uldivmod>
 80067a0:	4603      	mov	r3, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	461a      	mov	r2, r3
 80067a6:	4b50      	ldr	r3, [pc, #320]	; (80068e8 <UART_SetConfig+0x6f4>)
 80067a8:	fba3 2302 	umull	r2, r3, r3, r2
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	469b      	mov	fp, r3
 80067b6:	f04f 0c00 	mov.w	ip, #0
 80067ba:	46d9      	mov	r9, fp
 80067bc:	46e2      	mov	sl, ip
 80067be:	eb19 0309 	adds.w	r3, r9, r9
 80067c2:	eb4a 040a 	adc.w	r4, sl, sl
 80067c6:	4699      	mov	r9, r3
 80067c8:	46a2      	mov	sl, r4
 80067ca:	eb19 090b 	adds.w	r9, r9, fp
 80067ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067d2:	f04f 0100 	mov.w	r1, #0
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067e6:	4689      	mov	r9, r1
 80067e8:	4692      	mov	sl, r2
 80067ea:	eb1b 0509 	adds.w	r5, fp, r9
 80067ee:	eb4c 060a 	adc.w	r6, ip, sl
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4619      	mov	r1, r3
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	f04f 0400 	mov.w	r4, #0
 8006804:	0094      	lsls	r4, r2, #2
 8006806:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800680a:	008b      	lsls	r3, r1, #2
 800680c:	461a      	mov	r2, r3
 800680e:	4623      	mov	r3, r4
 8006810:	4628      	mov	r0, r5
 8006812:	4631      	mov	r1, r6
 8006814:	f7f9 fcec 	bl	80001f0 <__aeabi_uldivmod>
 8006818:	4603      	mov	r3, r0
 800681a:	460c      	mov	r4, r1
 800681c:	461a      	mov	r2, r3
 800681e:	4b32      	ldr	r3, [pc, #200]	; (80068e8 <UART_SetConfig+0x6f4>)
 8006820:	fba3 1302 	umull	r1, r3, r3, r2
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	2164      	movs	r1, #100	; 0x64
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	3332      	adds	r3, #50	; 0x32
 8006832:	4a2d      	ldr	r2, [pc, #180]	; (80068e8 <UART_SetConfig+0x6f4>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800683e:	4498      	add	r8, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	469b      	mov	fp, r3
 8006844:	f04f 0c00 	mov.w	ip, #0
 8006848:	46d9      	mov	r9, fp
 800684a:	46e2      	mov	sl, ip
 800684c:	eb19 0309 	adds.w	r3, r9, r9
 8006850:	eb4a 040a 	adc.w	r4, sl, sl
 8006854:	4699      	mov	r9, r3
 8006856:	46a2      	mov	sl, r4
 8006858:	eb19 090b 	adds.w	r9, r9, fp
 800685c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006860:	f04f 0100 	mov.w	r1, #0
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800686c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006870:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006874:	4689      	mov	r9, r1
 8006876:	4692      	mov	sl, r2
 8006878:	eb1b 0509 	adds.w	r5, fp, r9
 800687c:	eb4c 060a 	adc.w	r6, ip, sl
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4619      	mov	r1, r3
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	f04f 0400 	mov.w	r4, #0
 8006892:	0094      	lsls	r4, r2, #2
 8006894:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006898:	008b      	lsls	r3, r1, #2
 800689a:	461a      	mov	r2, r3
 800689c:	4623      	mov	r3, r4
 800689e:	4628      	mov	r0, r5
 80068a0:	4631      	mov	r1, r6
 80068a2:	f7f9 fca5 	bl	80001f0 <__aeabi_uldivmod>
 80068a6:	4603      	mov	r3, r0
 80068a8:	460c      	mov	r4, r1
 80068aa:	461a      	mov	r2, r3
 80068ac:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <UART_SetConfig+0x6f4>)
 80068ae:	fba3 1302 	umull	r1, r3, r3, r2
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	2164      	movs	r1, #100	; 0x64
 80068b6:	fb01 f303 	mul.w	r3, r1, r3
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	3332      	adds	r3, #50	; 0x32
 80068c0:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <UART_SetConfig+0x6f4>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	f003 020f 	and.w	r2, r3, #15
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4442      	add	r2, r8
 80068d2:	609a      	str	r2, [r3, #8]
}
 80068d4:	e7ff      	b.n	80068d6 <UART_SetConfig+0x6e2>
 80068d6:	bf00      	nop
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e0:	40011000 	.word	0x40011000
 80068e4:	40011400 	.word	0x40011400
 80068e8:	51eb851f 	.word	0x51eb851f

080068ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d029      	beq.n	800695a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006912:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006916:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006920:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006926:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800692c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006932:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006938:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800693e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006944:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800694a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e034      	b.n	80069c4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006966:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006970:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006976:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800698a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800698e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006998:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800699e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80069a4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80069aa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80069b0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b087      	sub	sp, #28
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d02e      	beq.n	8006a4a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069f8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a08:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006a12:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006a1c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a26:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006a30:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	609a      	str	r2, [r3, #8]
 8006a48:	e03b      	b.n	8006ac2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a5a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a80:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a90:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006a9a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006aa4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	f107 001c 	add.w	r0, r7, #28
 8006ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d122      	bne.n	8006b2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d105      	bne.n	8006b22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f94a 	bl	8006dbc <USB_CoreReset>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	e01a      	b.n	8006b64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f93e 	bl	8006dbc <USB_CoreReset>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38
 8006b56:	e005      	b.n	8006b64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d10b      	bne.n	8006b82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f043 0206 	orr.w	r2, r3, #6
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f043 0220 	orr.w	r2, r3, #32
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b8e:	b004      	add	sp, #16
 8006b90:	4770      	bx	lr

08006b92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f043 0201 	orr.w	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f023 0201 	bic.w	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d106      	bne.n	8006c02 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	60da      	str	r2, [r3, #12]
 8006c00:	e00b      	b.n	8006c1a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d106      	bne.n	8006c16 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60da      	str	r2, [r3, #12]
 8006c14:	e001      	b.n	8006c1a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e003      	b.n	8006c22 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c1a:	2032      	movs	r0, #50	; 0x32
 8006c1c:	f7fa fe5a 	bl	80018d4 <HAL_Delay>

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	019b      	lsls	r3, r3, #6
 8006c3e:	f043 0220 	orr.w	r2, r3, #32
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a09      	ldr	r2, [pc, #36]	; (8006c74 <USB_FlushTxFifo+0x48>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d901      	bls.n	8006c58 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e006      	b.n	8006c66 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d0f0      	beq.n	8006c46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	00030d40 	.word	0x00030d40

08006c78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2210      	movs	r2, #16
 8006c88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <USB_FlushRxFifo+0x40>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e006      	b.n	8006caa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	2b10      	cmp	r3, #16
 8006ca6:	d0f0      	beq.n	8006c8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	00030d40 	.word	0x00030d40

08006cbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	; 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	461a      	mov	r2, r3
 8006cca:	460b      	mov	r3, r1
 8006ccc:	71fb      	strb	r3, [r7, #7]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006cda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d11a      	bne.n	8006d18 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ce2:	88bb      	ldrh	r3, [r7, #4]
 8006ce4:	3303      	adds	r3, #3
 8006ce6:	089b      	lsrs	r3, r3, #2
 8006ce8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	e00f      	b.n	8006d10 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	031a      	lsls	r2, r3, #12
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	3304      	adds	r3, #4
 8006d08:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d3eb      	bcc.n	8006cf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3724      	adds	r7, #36	; 0x24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b089      	sub	sp, #36	; 0x24
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	4613      	mov	r3, r2
 8006d32:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	3303      	adds	r3, #3
 8006d40:	089b      	lsrs	r3, r3, #2
 8006d42:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006d44:	2300      	movs	r3, #0
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	e00b      	b.n	8006d62 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d3ef      	bcc.n	8006d4a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006d6a:	69fb      	ldr	r3, [r7, #28]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3724      	adds	r7, #36	; 0x24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d90:	68fb      	ldr	r3, [r7, #12]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f003 0301 	and.w	r3, r3, #1
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <USB_CoreReset+0x64>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e01b      	b.n	8006e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	daf2      	bge.n	8006dc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f043 0201 	orr.w	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <USB_CoreReset+0x64>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d901      	bls.n	8006e04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e006      	b.n	8006e12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d0f0      	beq.n	8006df2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	00030d40 	.word	0x00030d40

08006e24 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e24:	b084      	sub	sp, #16
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	f107 001c 	add.w	r0, r7, #28
 8006e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e40:	461a      	mov	r2, r3
 8006e42:	2300      	movs	r3, #0
 8006e44:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d018      	beq.n	8006ea8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d10a      	bne.n	8006e92 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e8a:	f043 0304 	orr.w	r3, r3, #4
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	e014      	b.n	8006ebc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ea0:	f023 0304 	bic.w	r3, r3, #4
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e009      	b.n	8006ebc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006eb6:	f023 0304 	bic.w	r3, r3, #4
 8006eba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006ebc:	2110      	movs	r1, #16
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff feb4 	bl	8006c2c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff fed7 	bl	8006c78 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	e015      	b.n	8006efc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006edc:	461a      	mov	r2, r3
 8006ede:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d3e5      	bcc.n	8006ed0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006f04:	2101      	movs	r1, #1
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f8ac 	bl	8007064 <USB_DriveVbus>

  HAL_Delay(200U);
 8006f0c:	20c8      	movs	r0, #200	; 0xc8
 8006f0e:	f7fa fce1 	bl	80018d4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f32:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a14      	ldr	r2, [pc, #80]	; (8006f88 <USB_HostInit+0x164>)
 8006f38:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a13      	ldr	r2, [pc, #76]	; (8006f8c <USB_HostInit+0x168>)
 8006f3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006f42:	e009      	b.n	8006f58 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2280      	movs	r2, #128	; 0x80
 8006f48:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a10      	ldr	r2, [pc, #64]	; (8006f90 <USB_HostInit+0x16c>)
 8006f4e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a10      	ldr	r2, [pc, #64]	; (8006f94 <USB_HostInit+0x170>)
 8006f54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d105      	bne.n	8006f6a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f043 0210 	orr.w	r2, r3, #16
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <USB_HostInit+0x174>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f82:	b004      	add	sp, #16
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	01000200 	.word	0x01000200
 8006f8c:	00e00300 	.word	0x00e00300
 8006f90:	00600080 	.word	0x00600080
 8006f94:	004000e0 	.word	0x004000e0
 8006f98:	a3200008 	.word	0xa3200008

08006f9c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fba:	f023 0303 	bic.w	r3, r3, #3
 8006fbe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	68f9      	ldr	r1, [r7, #12]
 8006fd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d107      	bne.n	8006fee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006fea:	6053      	str	r3, [r2, #4]
 8006fec:	e009      	b.n	8007002 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006fee:	78fb      	ldrb	r3, [r7, #3]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d106      	bne.n	8007002 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f241 7370 	movw	r3, #6000	; 0x1770
 8007000:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007030:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800703a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007040:	2064      	movs	r0, #100	; 0x64
 8007042:	f7fa fc47 	bl	80018d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800704e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007052:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007054:	200a      	movs	r0, #10
 8007056:	f7fa fc3d 	bl	80018d4 <HAL_Delay>

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007088:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d109      	bne.n	80070a8 <USB_DriveVbus+0x44>
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d106      	bne.n	80070a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b2:	d109      	bne.n	80070c8 <USB_DriveVbus+0x64>
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b085      	sub	sp, #20
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	0c5b      	lsrs	r3, r3, #17
 80070f4:	f003 0303 	and.w	r3, r3, #3
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	b29b      	uxth	r3, r3
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	4608      	mov	r0, r1
 8007132:	4611      	mov	r1, r2
 8007134:	461a      	mov	r2, r3
 8007136:	4603      	mov	r3, r0
 8007138:	70fb      	strb	r3, [r7, #3]
 800713a:	460b      	mov	r3, r1
 800713c:	70bb      	strb	r3, [r7, #2]
 800713e:	4613      	mov	r3, r2
 8007140:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	4413      	add	r3, r2
 8007152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007156:	461a      	mov	r2, r3
 8007158:	f04f 33ff 	mov.w	r3, #4294967295
 800715c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800715e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007162:	2b03      	cmp	r3, #3
 8007164:	d87e      	bhi.n	8007264 <USB_HC_Init+0x13c>
 8007166:	a201      	add	r2, pc, #4	; (adr r2, 800716c <USB_HC_Init+0x44>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	0800717d 	.word	0x0800717d
 8007170:	08007227 	.word	0x08007227
 8007174:	0800717d 	.word	0x0800717d
 8007178:	080071e9 	.word	0x080071e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4413      	add	r3, r2
 8007184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007188:	461a      	mov	r2, r3
 800718a:	f240 439d 	movw	r3, #1181	; 0x49d
 800718e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007190:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007194:	2b00      	cmp	r3, #0
 8007196:	da10      	bge.n	80071ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	78fa      	ldrb	r2, [r7, #3]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80071b8:	e057      	b.n	800726a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d051      	beq.n	800726a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80071c6:	78fb      	ldrb	r3, [r7, #3]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	78fa      	ldrb	r2, [r7, #3]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80071e4:	60d3      	str	r3, [r2, #12]
      break;
 80071e6:	e040      	b.n	800726a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f4:	461a      	mov	r2, r3
 80071f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80071fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80071fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007200:	2b00      	cmp	r3, #0
 8007202:	da34      	bge.n	800726e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4413      	add	r3, r2
 800720c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	440a      	add	r2, r1
 800721a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800721e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007222:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007224:	e023      	b.n	800726e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007232:	461a      	mov	r2, r3
 8007234:	f240 2325 	movw	r3, #549	; 0x225
 8007238:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800723a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800723e:	2b00      	cmp	r3, #0
 8007240:	da17      	bge.n	8007272 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	4413      	add	r3, r2
 800724a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	78fa      	ldrb	r2, [r7, #3]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	440a      	add	r2, r1
 8007258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800725c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007260:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007262:	e006      	b.n	8007272 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
      break;
 8007268:	e004      	b.n	8007274 <USB_HC_Init+0x14c>
      break;
 800726a:	bf00      	nop
 800726c:	e002      	b.n	8007274 <USB_HC_Init+0x14c>
      break;
 800726e:	bf00      	nop
 8007270:	e000      	b.n	8007274 <USB_HC_Init+0x14c>
      break;
 8007272:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	2101      	movs	r1, #1
 8007284:	fa01 f303 	lsl.w	r3, r1, r3
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800728e:	4313      	orrs	r3, r2
 8007290:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800729e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	da03      	bge.n	80072ae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80072a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	e001      	b.n	80072b2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80072b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d103      	bne.n	80072c2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80072ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e001      	b.n	80072c6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072c6:	787b      	ldrb	r3, [r7, #1]
 80072c8:	059b      	lsls	r3, r3, #22
 80072ca:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80072ce:	78bb      	ldrb	r3, [r7, #2]
 80072d0:	02db      	lsls	r3, r3, #11
 80072d2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80072d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072dc:	049b      	lsls	r3, r3, #18
 80072de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80072e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80072e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80072ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	0159      	lsls	r1, r3, #5
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	440b      	add	r3, r1
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007302:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007304:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007308:	2b03      	cmp	r3, #3
 800730a:	d10f      	bne.n	800732c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4413      	add	r3, r2
 8007314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	440a      	add	r2, r1
 8007322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800732a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800732c:	7dfb      	ldrb	r3, [r7, #23]
}
 800732e:	4618      	mov	r0, r3
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop

0800733c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08c      	sub	sp, #48	; 0x30
 8007340:	af02      	add	r7, sp, #8
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	4613      	mov	r3, r2
 8007348:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	785b      	ldrb	r3, [r3, #1]
 8007352:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007358:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007362:	2b00      	cmp	r3, #0
 8007364:	d028      	beq.n	80073b8 <USB_HC_StartXfer+0x7c>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	791b      	ldrb	r3, [r3, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d124      	bne.n	80073b8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10b      	bne.n	800738c <USB_HC_StartXfer+0x50>
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	795b      	ldrb	r3, [r3, #5]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d107      	bne.n	800738c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	4619      	mov	r1, r3
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fa30 	bl	80077e8 <USB_DoPing>
      return HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e114      	b.n	80075b6 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d112      	bne.n	80073b8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	4413      	add	r3, r2
 800739a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	6a3a      	ldr	r2, [r7, #32]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80073b0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2200      	movs	r2, #0
 80073b6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d018      	beq.n	80073f2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	8912      	ldrh	r2, [r2, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	3b01      	subs	r3, #1
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	8912      	ldrh	r2, [r2, #8]
 80073d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80073d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80073d8:	8b7b      	ldrh	r3, [r7, #26]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d90b      	bls.n	80073f6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80073de:	8b7b      	ldrh	r3, [r7, #26]
 80073e0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80073e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	8912      	ldrh	r2, [r2, #8]
 80073e8:	fb02 f203 	mul.w	r2, r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	611a      	str	r2, [r3, #16]
 80073f0:	e001      	b.n	80073f6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80073f2:	2301      	movs	r3, #1
 80073f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	78db      	ldrb	r3, [r3, #3]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d006      	beq.n	800740c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80073fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	8912      	ldrh	r2, [r2, #8]
 8007404:	fb02 f203 	mul.w	r2, r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007414:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007416:	04d9      	lsls	r1, r3, #19
 8007418:	4b69      	ldr	r3, [pc, #420]	; (80075c0 <USB_HC_StartXfer+0x284>)
 800741a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800741c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	7a9b      	ldrb	r3, [r3, #10]
 8007422:	075b      	lsls	r3, r3, #29
 8007424:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007428:	69f9      	ldr	r1, [r7, #28]
 800742a:	0148      	lsls	r0, r1, #5
 800742c:	6a39      	ldr	r1, [r7, #32]
 800742e:	4401      	add	r1, r0
 8007430:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007434:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007436:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d009      	beq.n	8007452 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	68d9      	ldr	r1, [r3, #12]
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744e:	460a      	mov	r2, r1
 8007450:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf0c      	ite	eq
 8007462:	2301      	moveq	r3, #1
 8007464:	2300      	movne	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	6a3a      	ldr	r2, [r7, #32]
 800747e:	440a      	add	r2, r1
 8007480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007484:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007488:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	4413      	add	r3, r2
 8007492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	7e7b      	ldrb	r3, [r7, #25]
 800749a:	075b      	lsls	r3, r3, #29
 800749c:	69f9      	ldr	r1, [r7, #28]
 800749e:	0148      	lsls	r0, r1, #5
 80074a0:	6a39      	ldr	r1, [r7, #32]
 80074a2:	4401      	add	r1, r0
 80074a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80074a8:	4313      	orrs	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a42      	ldr	r2, [pc, #264]	; (80075c4 <USB_HC_StartXfer+0x288>)
 80074bc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074be:	4b41      	ldr	r3, [pc, #260]	; (80075c4 <USB_HC_StartXfer+0x288>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074c6:	4a3f      	ldr	r2, [pc, #252]	; (80075c4 <USB_HC_StartXfer+0x288>)
 80074c8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	78db      	ldrb	r3, [r3, #3]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d006      	beq.n	80074e0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80074d2:	4b3c      	ldr	r3, [pc, #240]	; (80075c4 <USB_HC_StartXfer+0x288>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074da:	4a3a      	ldr	r2, [pc, #232]	; (80075c4 <USB_HC_StartXfer+0x288>)
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e005      	b.n	80074ec <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80074e0:	4b38      	ldr	r3, [pc, #224]	; (80075c4 <USB_HC_StartXfer+0x288>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074e8:	4a36      	ldr	r2, [pc, #216]	; (80075c4 <USB_HC_StartXfer+0x288>)
 80074ea:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074ec:	4b35      	ldr	r3, [pc, #212]	; (80075c4 <USB_HC_StartXfer+0x288>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074f4:	4a33      	ldr	r2, [pc, #204]	; (80075c4 <USB_HC_StartXfer+0x288>)
 80074f6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007504:	461a      	mov	r2, r3
 8007506:	4b2f      	ldr	r3, [pc, #188]	; (80075c4 <USB_HC_StartXfer+0x288>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	e04f      	b.n	80075b6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	78db      	ldrb	r3, [r3, #3]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d14a      	bne.n	80075b4 <USB_HC_StartXfer+0x278>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d046      	beq.n	80075b4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	79db      	ldrb	r3, [r3, #7]
 800752a:	2b03      	cmp	r3, #3
 800752c:	d830      	bhi.n	8007590 <USB_HC_StartXfer+0x254>
 800752e:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <USB_HC_StartXfer+0x1f8>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007545 	.word	0x08007545
 8007538:	08007569 	.word	0x08007569
 800753c:	08007545 	.word	0x08007545
 8007540:	08007569 	.word	0x08007569
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	3303      	adds	r3, #3
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800754e:	8afa      	ldrh	r2, [r7, #22]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	b29b      	uxth	r3, r3
 8007556:	429a      	cmp	r2, r3
 8007558:	d91c      	bls.n	8007594 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f043 0220 	orr.w	r2, r3, #32
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	619a      	str	r2, [r3, #24]
        }
        break;
 8007566:	e015      	b.n	8007594 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	3303      	adds	r3, #3
 800756e:	089b      	lsrs	r3, r3, #2
 8007570:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007572:	8afa      	ldrh	r2, [r7, #22]
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	b29b      	uxth	r3, r3
 800757e:	429a      	cmp	r2, r3
 8007580:	d90a      	bls.n	8007598 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	619a      	str	r2, [r3, #24]
        }
        break;
 800758e:	e003      	b.n	8007598 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007590:	bf00      	nop
 8007592:	e002      	b.n	800759a <USB_HC_StartXfer+0x25e>
        break;
 8007594:	bf00      	nop
 8007596:	e000      	b.n	800759a <USB_HC_StartXfer+0x25e>
        break;
 8007598:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	68d9      	ldr	r1, [r3, #12]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	785a      	ldrb	r2, [r3, #1]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	b298      	uxth	r0, r3
 80075a8:	2300      	movs	r3, #0
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	4603      	mov	r3, r0
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fb84 	bl	8006cbc <USB_WritePacket>
  }

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3728      	adds	r7, #40	; 0x28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	1ff80000 	.word	0x1ff80000
 80075c4:	20000310 	.word	0x20000310

080075c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	b29b      	uxth	r3, r3
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b087      	sub	sp, #28
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80075fa:	78fb      	ldrb	r3, [r7, #3]
 80075fc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4413      	add	r3, r2
 800760a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	0c9b      	lsrs	r3, r3, #18
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <USB_HC_Halt+0x3a>
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d16c      	bne.n	80076fe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4413      	add	r3, r2
 800762c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	440a      	add	r2, r1
 800763a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800763e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007642:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d143      	bne.n	80076d8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	440a      	add	r2, r1
 8007666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800766a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800766e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4413      	add	r3, r2
 8007678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	440a      	add	r2, r1
 8007686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800768a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800768e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	4413      	add	r3, r2
 8007698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	3301      	adds	r3, #1
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076bc:	d81d      	bhi.n	80076fa <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076d4:	d0ec      	beq.n	80076b0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076d6:	e080      	b.n	80077da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076f6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076f8:	e06f      	b.n	80077da <USB_HC_Halt+0x1f0>
          break;
 80076fa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076fc:	e06d      	b.n	80077da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	4413      	add	r3, r2
 8007706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	440a      	add	r2, r1
 8007714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800771c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d143      	bne.n	80077b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	4413      	add	r3, r2
 8007736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	440a      	add	r2, r1
 8007744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800774c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	4413      	add	r3, r2
 8007756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	440a      	add	r2, r1
 8007764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800776c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	4413      	add	r3, r2
 8007776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	0151      	lsls	r1, r2, #5
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	440a      	add	r2, r1
 8007784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800778c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	3301      	adds	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800779a:	d81d      	bhi.n	80077d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077b2:	d0ec      	beq.n	800778e <USB_HC_Halt+0x1a4>
 80077b4:	e011      	b.n	80077da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e000      	b.n	80077da <USB_HC_Halt+0x1f0>
          break;
 80077d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	371c      	adds	r7, #28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80077fc:	2301      	movs	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	04da      	lsls	r2, r3, #19
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <USB_DoPing+0x74>)
 8007806:	4013      	ands	r3, r2
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	0151      	lsls	r1, r2, #5
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	440a      	add	r2, r1
 8007810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007818:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	4413      	add	r3, r2
 8007822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007830:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007838:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	4413      	add	r3, r2
 8007842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007846:	461a      	mov	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	1ff80000 	.word	0x1ff80000

08007860 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff f99f 	bl	8006bb4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007876:	2110      	movs	r1, #16
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff f9d7 	bl	8006c2c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff f9fa 	bl	8006c78 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007884:	2300      	movs	r3, #0
 8007886:	613b      	str	r3, [r7, #16]
 8007888:	e01f      	b.n	80078ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4413      	add	r3, r2
 8007892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078be:	461a      	mov	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3301      	adds	r3, #1
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b0f      	cmp	r3, #15
 80078ce:	d9dc      	bls.n	800788a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	e034      	b.n	8007940 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4413      	add	r3, r2
 8007906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790a:	461a      	mov	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	3301      	adds	r3, #1
 8007914:	617b      	str	r3, [r7, #20]
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800791c:	d80c      	bhi.n	8007938 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007934:	d0ec      	beq.n	8007910 <USB_StopHost+0xb0>
 8007936:	e000      	b.n	800793a <USB_StopHost+0xda>
        break;
 8007938:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3301      	adds	r3, #1
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b0f      	cmp	r3, #15
 8007944:	d9c7      	bls.n	80078d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800794c:	461a      	mov	r2, r3
 800794e:	f04f 33ff 	mov.w	r3, #4294967295
 8007952:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f04f 32ff 	mov.w	r2, #4294967295
 800795a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff f918 	bl	8006b92 <USB_EnableGlobalInt>

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b089      	sub	sp, #36	; 0x24
 8007970:	af04      	add	r7, sp, #16
 8007972:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007974:	2301      	movs	r3, #1
 8007976:	2202      	movs	r2, #2
 8007978:	2102      	movs	r1, #2
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fcba 	bl	80082f4 <USBH_FindInterface>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	2bff      	cmp	r3, #255	; 0xff
 8007988:	d002      	beq.n	8007990 <USBH_CDC_InterfaceInit+0x24>
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d901      	bls.n	8007994 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007990:	2302      	movs	r3, #2
 8007992:	e13d      	b.n	8007c10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fc8f 	bl	80082bc <USBH_SelectInterface>
 800799e:	4603      	mov	r3, r0
 80079a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80079a8:	2302      	movs	r3, #2
 80079aa:	e131      	b.n	8007c10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80079b2:	2050      	movs	r0, #80	; 0x50
 80079b4:	f004 fec0 	bl	800c738 <malloc>
 80079b8:	4603      	mov	r3, r0
 80079ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80079cc:	2302      	movs	r3, #2
 80079ce:	e11f      	b.n	8007c10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80079d0:	2250      	movs	r2, #80	; 0x50
 80079d2:	2100      	movs	r1, #0
 80079d4:	68b8      	ldr	r0, [r7, #8]
 80079d6:	f004 feca 	bl	800c76e <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	211a      	movs	r1, #26
 80079e0:	fb01 f303 	mul.w	r3, r1, r3
 80079e4:	4413      	add	r3, r2
 80079e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	b25b      	sxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	da15      	bge.n	8007a1e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	211a      	movs	r1, #26
 80079f8:	fb01 f303 	mul.w	r3, r1, r3
 80079fc:	4413      	add	r3, r2
 80079fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a02:	781a      	ldrb	r2, [r3, #0]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	211a      	movs	r1, #26
 8007a0e:	fb01 f303 	mul.w	r3, r1, r3
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007a18:	881a      	ldrh	r2, [r3, #0]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f002 f894 	bl	8009b52 <USBH_AllocPipe>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	7819      	ldrb	r1, [r3, #0]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	7858      	ldrb	r0, [r3, #1]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	8952      	ldrh	r2, [r2, #10]
 8007a4a:	9202      	str	r2, [sp, #8]
 8007a4c:	2203      	movs	r2, #3
 8007a4e:	9201      	str	r2, [sp, #4]
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	4623      	mov	r3, r4
 8007a54:	4602      	mov	r2, r0
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f002 f84c 	bl	8009af4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2200      	movs	r2, #0
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f004 fdb7 	bl	800c5d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	210a      	movs	r1, #10
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fc3f 	bl	80082f4 <USBH_FindInterface>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2bff      	cmp	r3, #255	; 0xff
 8007a7e:	d002      	beq.n	8007a86 <USBH_CDC_InterfaceInit+0x11a>
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d901      	bls.n	8007a8a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a86:	2302      	movs	r3, #2
 8007a88:	e0c2      	b.n	8007c10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	211a      	movs	r1, #26
 8007a90:	fb01 f303 	mul.w	r3, r1, r3
 8007a94:	4413      	add	r3, r2
 8007a96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	b25b      	sxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da16      	bge.n	8007ad0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	211a      	movs	r1, #26
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	4413      	add	r3, r2
 8007aae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ab2:	781a      	ldrb	r2, [r3, #0]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	211a      	movs	r1, #26
 8007abe:	fb01 f303 	mul.w	r3, r1, r3
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ac8:	881a      	ldrh	r2, [r3, #0]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	835a      	strh	r2, [r3, #26]
 8007ace:	e015      	b.n	8007afc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	211a      	movs	r1, #26
 8007ad6:	fb01 f303 	mul.w	r3, r1, r3
 8007ada:	4413      	add	r3, r2
 8007adc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ae0:	781a      	ldrb	r2, [r3, #0]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	211a      	movs	r1, #26
 8007aec:	fb01 f303 	mul.w	r3, r1, r3
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007af6:	881a      	ldrh	r2, [r3, #0]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	211a      	movs	r1, #26
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b25b      	sxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	da16      	bge.n	8007b42 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	211a      	movs	r1, #26
 8007b1a:	fb01 f303 	mul.w	r3, r1, r3
 8007b1e:	4413      	add	r3, r2
 8007b20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b24:	781a      	ldrb	r2, [r3, #0]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	211a      	movs	r1, #26
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007b3a:	881a      	ldrh	r2, [r3, #0]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	835a      	strh	r2, [r3, #26]
 8007b40:	e015      	b.n	8007b6e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	211a      	movs	r1, #26
 8007b48:	fb01 f303 	mul.w	r3, r1, r3
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b52:	781a      	ldrb	r2, [r3, #0]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	211a      	movs	r1, #26
 8007b5e:	fb01 f303 	mul.w	r3, r1, r3
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007b68:	881a      	ldrh	r2, [r3, #0]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	7b9b      	ldrb	r3, [r3, #14]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 ffec 	bl	8009b52 <USBH_AllocPipe>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	7bdb      	ldrb	r3, [r3, #15]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 ffe2 	bl	8009b52 <USBH_AllocPipe>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	461a      	mov	r2, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	7b59      	ldrb	r1, [r3, #13]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	7b98      	ldrb	r0, [r3, #14]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	8b12      	ldrh	r2, [r2, #24]
 8007bae:	9202      	str	r2, [sp, #8]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	9201      	str	r2, [sp, #4]
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4623      	mov	r3, r4
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 ff9a 	bl	8009af4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	7b19      	ldrb	r1, [r3, #12]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	7bd8      	ldrb	r0, [r3, #15]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	8b52      	ldrh	r2, [r2, #26]
 8007bd8:	9202      	str	r2, [sp, #8]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	9201      	str	r2, [sp, #4]
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	4623      	mov	r3, r4
 8007be2:	4602      	mov	r2, r0
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 ff85 	bl	8009af4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	7b5b      	ldrb	r3, [r3, #13]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f004 fcec 	bl	800c5d8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	7b1b      	ldrb	r3, [r3, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f004 fce5 	bl	800c5d8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd90      	pop	{r4, r7, pc}

08007c18 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00e      	beq.n	8007c50 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 ff7a 	bl	8009b32 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 ffa5 	bl	8009b94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	7b1b      	ldrb	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00e      	beq.n	8007c76 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	7b1b      	ldrb	r3, [r3, #12]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 ff67 	bl	8009b32 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	7b1b      	ldrb	r3, [r3, #12]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 ff92 	bl	8009b94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	7b5b      	ldrb	r3, [r3, #13]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00e      	beq.n	8007c9c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	7b5b      	ldrb	r3, [r3, #13]
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 ff54 	bl	8009b32 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	7b5b      	ldrb	r3, [r3, #13]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 ff7f 	bl	8009b94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f004 fd49 	bl	800c748 <free>
    phost->pActiveClass->pData = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3340      	adds	r3, #64	; 0x40
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f8b1 	bl	8007e4a <GetLineCoding>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d105      	bne.n	8007cfe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d877      	bhi.n	8007e1c <USBH_CDC_Process+0x114>
 8007d2c:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <USBH_CDC_Process+0x2c>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d49 	.word	0x08007d49
 8007d38:	08007d4f 	.word	0x08007d4f
 8007d3c:	08007d7f 	.word	0x08007d7f
 8007d40:	08007df3 	.word	0x08007df3
 8007d44:	08007e01 	.word	0x08007e01
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d4c:	e06d      	b.n	8007e2a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f897 	bl	8007e88 <SetLineCoding>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d104      	bne.n	8007d6e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007d6c:	e058      	b.n	8007e20 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d055      	beq.n	8007e20 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2204      	movs	r2, #4
 8007d78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007d7c:	e050      	b.n	8007e20 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	3340      	adds	r3, #64	; 0x40
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f860 	bl	8007e4a <GetLineCoding>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d126      	bne.n	8007de2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da6:	791b      	ldrb	r3, [r3, #4]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d13b      	bne.n	8007e24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007db6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d133      	bne.n	8007e24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d12b      	bne.n	8007e24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d124      	bne.n	8007e24 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f984 	bl	80080e8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007de0:	e020      	b.n	8007e24 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007de2:	7bbb      	ldrb	r3, [r7, #14]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d01d      	beq.n	8007e24 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2204      	movs	r2, #4
 8007dec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007df0:	e018      	b.n	8007e24 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f867 	bl	8007ec6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f8f8 	bl	8007fee <CDC_ProcessReception>
      break;
 8007dfe:	e014      	b.n	8007e2a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007e00:	2100      	movs	r1, #0
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 f953 	bl	80090ae <USBH_ClrFeature>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007e1a:	e005      	b.n	8007e28 <USBH_CDC_Process+0x120>

    default:
      break;
 8007e1c:	bf00      	nop
 8007e1e:	e004      	b.n	8007e2a <USBH_CDC_Process+0x122>
      break;
 8007e20:	bf00      	nop
 8007e22:	e002      	b.n	8007e2a <USBH_CDC_Process+0x122>
      break;
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <USBH_CDC_Process+0x122>
      break;
 8007e28:	bf00      	nop

  }

  return status;
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	22a1      	movs	r2, #161	; 0xa1
 8007e58:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2221      	movs	r2, #33	; 0x21
 8007e5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2207      	movs	r2, #7
 8007e70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2207      	movs	r2, #7
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 faf8 	bl	800946e <USBH_CtlReq>
 8007e7e:	4603      	mov	r3, r0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2221      	movs	r2, #33	; 0x21
 8007e96:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2207      	movs	r2, #7
 8007eae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2207      	movs	r2, #7
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fad9 	bl	800946e <USBH_CtlReq>
 8007ebc:	4603      	mov	r3, r0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af02      	add	r7, sp, #8
 8007ecc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d002      	beq.n	8007eec <CDC_ProcessTransmission+0x26>
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d025      	beq.n	8007f36 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007eea:	e07c      	b.n	8007fe6 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	8b12      	ldrh	r2, [r2, #24]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d90c      	bls.n	8007f12 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	69d9      	ldr	r1, [r3, #28]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8b1a      	ldrh	r2, [r3, #24]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	7b58      	ldrb	r0, [r3, #13]
 8007f04:	2301      	movs	r3, #1
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	4603      	mov	r3, r0
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 fdaf 	bl	8009a6e <USBH_BulkSendData>
 8007f10:	e00c      	b.n	8007f2c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	7b58      	ldrb	r0, [r3, #13]
 8007f20:	2301      	movs	r3, #1
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	4603      	mov	r3, r0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fda1 	bl	8009a6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007f34:	e057      	b.n	8007fe6 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	7b5b      	ldrb	r3, [r3, #13]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f004 fb21 	bl	800c584 <USBH_LL_GetURBState>
 8007f42:	4603      	mov	r3, r0
 8007f44:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d136      	bne.n	8007fba <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	8b12      	ldrh	r2, [r2, #24]
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d90e      	bls.n	8007f76 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	8b12      	ldrh	r2, [r2, #24]
 8007f60:	1a9a      	subs	r2, r3, r2
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	8b12      	ldrh	r2, [r2, #24]
 8007f6e:	441a      	add	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	61da      	str	r2, [r3, #28]
 8007f74:	e002      	b.n	8007f7c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007f8c:	e006      	b.n	8007f9c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f892 	bl	80080c0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2204      	movs	r2, #4
 8007fa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f001 feea 	bl	8009d8c <osMessagePut>
      break;
 8007fb8:	e014      	b.n	8007fe4 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d111      	bne.n	8007fe4 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2204      	movs	r2, #4
 8007fcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4619      	mov	r1, r3
 8007fe0:	f001 fed4 	bl	8009d8c <osMessagePut>
      break;
 8007fe4:	bf00      	nop
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b086      	sub	sp, #24
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008000:	2300      	movs	r3, #0
 8008002:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800800a:	2b03      	cmp	r3, #3
 800800c:	d002      	beq.n	8008014 <CDC_ProcessReception+0x26>
 800800e:	2b04      	cmp	r3, #4
 8008010:	d00e      	beq.n	8008030 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008012:	e051      	b.n	80080b8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	6a19      	ldr	r1, [r3, #32]
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	8b5a      	ldrh	r2, [r3, #26]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	7b1b      	ldrb	r3, [r3, #12]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 fd49 	bl	8009ab8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2204      	movs	r2, #4
 800802a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800802e:	e043      	b.n	80080b8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	7b1b      	ldrb	r3, [r3, #12]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f004 faa4 	bl	800c584 <USBH_LL_GetURBState>
 800803c:	4603      	mov	r3, r0
 800803e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008040:	7cfb      	ldrb	r3, [r7, #19]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d137      	bne.n	80080b6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	7b1b      	ldrb	r3, [r3, #12]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f004 fa07 	bl	800c460 <USBH_LL_GetLastXferSize>
 8008052:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	429a      	cmp	r2, r3
 800805c:	d016      	beq.n	800808c <CDC_ProcessReception+0x9e>
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	8b5b      	ldrh	r3, [r3, #26]
 8008062:	461a      	mov	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4293      	cmp	r3, r2
 8008068:	d910      	bls.n	800808c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1ad2      	subs	r2, r2, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6a1a      	ldr	r2, [r3, #32]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	441a      	add	r2, r3
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2203      	movs	r2, #3
 8008086:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800808a:	e006      	b.n	800809a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f81d 	bl	80080d4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2204      	movs	r2, #4
 800809e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080ae:	2200      	movs	r2, #0
 80080b0:	4619      	mov	r1, r3
 80080b2:	f001 fe6b 	bl	8009d8c <osMessagePut>
      break;
 80080b6:	bf00      	nop
  }
}
 80080b8:	bf00      	nop
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80080fc:	b5b0      	push	{r4, r5, r7, lr}
 80080fe:	b090      	sub	sp, #64	; 0x40
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008110:	2302      	movs	r3, #2
 8008112:	e04d      	b.n	80081b0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	79fa      	ldrb	r2, [r7, #7]
 8008118:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 f847 	bl	80081c0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008160:	4b15      	ldr	r3, [pc, #84]	; (80081b8 <USBH_Init+0xbc>)
 8008162:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8008166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800816c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008170:	2100      	movs	r1, #0
 8008172:	4618      	mov	r0, r3
 8008174:	f001 fde1 	bl	8009d3a <osMessageCreate>
 8008178:	4602      	mov	r2, r0
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008180:	4b0e      	ldr	r3, [pc, #56]	; (80081bc <USBH_Init+0xc0>)
 8008182:	f107 0414 	add.w	r4, r7, #20
 8008186:	461d      	mov	r5, r3
 8008188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800818a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800818c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008194:	f107 0314 	add.w	r3, r7, #20
 8008198:	68f9      	ldr	r1, [r7, #12]
 800819a:	4618      	mov	r0, r3
 800819c:	f001 fd6d 	bl	8009c7a <osThreadCreate>
 80081a0:	4602      	mov	r2, r0
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f004 f89d 	bl	800c2e8 <USBH_LL_Init>

  return USBH_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3740      	adds	r7, #64	; 0x40
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bdb0      	pop	{r4, r5, r7, pc}
 80081b8:	0800c938 	.word	0x0800c938
 80081bc:	0800c954 	.word	0x0800c954

080081c0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081cc:	2300      	movs	r3, #0
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	e009      	b.n	80081e6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	33e0      	adds	r3, #224	; 0xe0
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	2200      	movs	r2, #0
 80081de:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3301      	adds	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b0e      	cmp	r3, #14
 80081ea:	d9f2      	bls.n	80081d2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e009      	b.n	8008206 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800820c:	d3f1      	bcc.n	80081f2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2240      	movs	r2, #64	; 0x40
 8008232:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d016      	beq.n	80082aa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10e      	bne.n	80082a4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800828c:	1c59      	adds	r1, r3, #1
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	33de      	adds	r3, #222	; 0xde
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]
 80082a2:	e004      	b.n	80082ae <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80082a4:	2302      	movs	r3, #2
 80082a6:	73fb      	strb	r3, [r7, #15]
 80082a8:	e001      	b.n	80082ae <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80082aa:	2302      	movs	r3, #2
 80082ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80082d2:	78fa      	ldrb	r2, [r7, #3]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d204      	bcs.n	80082e2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	78fa      	ldrb	r2, [r7, #3]
 80082dc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80082e0:	e001      	b.n	80082e6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80082e2:	2302      	movs	r3, #2
 80082e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	4608      	mov	r0, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	461a      	mov	r2, r3
 8008302:	4603      	mov	r3, r0
 8008304:	70fb      	strb	r3, [r7, #3]
 8008306:	460b      	mov	r3, r1
 8008308:	70bb      	strb	r3, [r7, #2]
 800830a:	4613      	mov	r3, r2
 800830c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008312:	2300      	movs	r3, #0
 8008314:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800831c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800831e:	e025      	b.n	800836c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	221a      	movs	r2, #26
 8008324:	fb02 f303 	mul.w	r3, r2, r3
 8008328:	3308      	adds	r3, #8
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4413      	add	r3, r2
 800832e:	3302      	adds	r3, #2
 8008330:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	795b      	ldrb	r3, [r3, #5]
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	429a      	cmp	r2, r3
 800833a:	d002      	beq.n	8008342 <USBH_FindInterface+0x4e>
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	2bff      	cmp	r3, #255	; 0xff
 8008340:	d111      	bne.n	8008366 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008346:	78ba      	ldrb	r2, [r7, #2]
 8008348:	429a      	cmp	r2, r3
 800834a:	d002      	beq.n	8008352 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800834c:	78bb      	ldrb	r3, [r7, #2]
 800834e:	2bff      	cmp	r3, #255	; 0xff
 8008350:	d109      	bne.n	8008366 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008356:	787a      	ldrb	r2, [r7, #1]
 8008358:	429a      	cmp	r2, r3
 800835a:	d002      	beq.n	8008362 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800835c:	787b      	ldrb	r3, [r7, #1]
 800835e:	2bff      	cmp	r3, #255	; 0xff
 8008360:	d101      	bne.n	8008366 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	e006      	b.n	8008374 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	3301      	adds	r3, #1
 800836a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d9d6      	bls.n	8008320 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008372:	23ff      	movs	r3, #255	; 0xff
}
 8008374:	4618      	mov	r0, r3
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f003 fff3 	bl	800c374 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800838e:	2101      	movs	r1, #1
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f004 f90a 	bl	800c5aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af04      	add	r7, sp, #16
 80083a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80083a8:	2302      	movs	r3, #2
 80083aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d102      	bne.n	80083c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2203      	movs	r2, #3
 80083c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b0b      	cmp	r3, #11
 80083ca:	f200 823c 	bhi.w	8008846 <USBH_Process+0x4a6>
 80083ce:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <USBH_Process+0x34>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	08008405 	.word	0x08008405
 80083d8:	08008453 	.word	0x08008453
 80083dc:	080084d7 	.word	0x080084d7
 80083e0:	080087c5 	.word	0x080087c5
 80083e4:	08008847 	.word	0x08008847
 80083e8:	08008597 	.word	0x08008597
 80083ec:	0800874f 	.word	0x0800874f
 80083f0:	080085e9 	.word	0x080085e9
 80083f4:	08008625 	.word	0x08008625
 80083f8:	0800865f 	.word	0x0800865f
 80083fc:	080086a7 	.word	0x080086a7
 8008400:	080087ad 	.word	0x080087ad
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 821c 	beq.w	800884a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008418:	20c8      	movs	r0, #200	; 0xc8
 800841a:	f004 f910 	bl	800c63e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f004 f803 	bl	800c42a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008448:	2200      	movs	r2, #0
 800844a:	4619      	mov	r1, r3
 800844c:	f001 fc9e 	bl	8009d8c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008450:	e1fb      	b.n	800884a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008458:	2b01      	cmp	r3, #1
 800845a:	d107      	bne.n	800846c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2202      	movs	r2, #2
 8008468:	701a      	strb	r2, [r3, #0]
 800846a:	e025      	b.n	80084b8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008476:	d914      	bls.n	80084a2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800847e:	3301      	adds	r3, #1
 8008480:	b2da      	uxtb	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800848e:	2b03      	cmp	r3, #3
 8008490:	d903      	bls.n	800849a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	220d      	movs	r2, #13
 8008496:	701a      	strb	r2, [r3, #0]
 8008498:	e00e      	b.n	80084b8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	e00a      	b.n	80084b8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80084a8:	f103 020a 	add.w	r2, r3, #10
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80084b2:	200a      	movs	r0, #10
 80084b4:	f004 f8c3 	bl	800c63e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084cc:	2200      	movs	r2, #0
 80084ce:	4619      	mov	r1, r3
 80084d0:	f001 fc5c 	bl	8009d8c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084d4:	e1c0      	b.n	8008858 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084e6:	2104      	movs	r1, #4
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80084ec:	2064      	movs	r0, #100	; 0x64
 80084ee:	f004 f8a6 	bl	800c63e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f003 ff74 	bl	800c3e0 <USBH_LL_GetSpeed>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2205      	movs	r2, #5
 8008506:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008508:	2100      	movs	r1, #0
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fb21 	bl	8009b52 <USBH_AllocPipe>
 8008510:	4603      	mov	r3, r0
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008518:	2180      	movs	r1, #128	; 0x80
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 fb19 	bl	8009b52 <USBH_AllocPipe>
 8008520:	4603      	mov	r3, r0
 8008522:	461a      	mov	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7919      	ldrb	r1, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800853c:	b292      	uxth	r2, r2
 800853e:	9202      	str	r2, [sp, #8]
 8008540:	2200      	movs	r2, #0
 8008542:	9201      	str	r2, [sp, #4]
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	4603      	mov	r3, r0
 8008548:	2280      	movs	r2, #128	; 0x80
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 fad2 	bl	8009af4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	7959      	ldrb	r1, [r3, #5]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008564:	b292      	uxth	r2, r2
 8008566:	9202      	str	r2, [sp, #8]
 8008568:	2200      	movs	r2, #0
 800856a:	9201      	str	r2, [sp, #4]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	4603      	mov	r3, r0
 8008570:	2200      	movs	r2, #0
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 fabe 	bl	8009af4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800858c:	2200      	movs	r2, #0
 800858e:	4619      	mov	r1, r3
 8008590:	f001 fbfc 	bl	8009d8c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008594:	e160      	b.n	8008858 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f964 	bl	8008864 <USBH_HandleEnum>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f040 8152 	bne.w	800884e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d103      	bne.n	80085c4 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2208      	movs	r2, #8
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	e002      	b.n	80085ca <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2207      	movs	r2, #7
 80085c8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2205      	movs	r2, #5
 80085ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085de:	2200      	movs	r2, #0
 80085e0:	4619      	mov	r1, r3
 80085e2:	f001 fbd3 	bl	8009d8c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80085e6:	e132      	b.n	800884e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 812f 	beq.w	8008852 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085fa:	2101      	movs	r1, #1
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2208      	movs	r2, #8
 8008604:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2205      	movs	r2, #5
 800860a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800861a:	2200      	movs	r2, #0
 800861c:	4619      	mov	r1, r3
 800861e:	f001 fbb5 	bl	8009d8c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008622:	e116      	b.n	8008852 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800862a:	b29b      	uxth	r3, r3
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fcf6 	bl	8009020 <USBH_SetCfg>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2209      	movs	r2, #9
 800863e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008654:	2200      	movs	r2, #0
 8008656:	4619      	mov	r1, r3
 8008658:	f001 fb98 	bl	8009d8c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800865c:	e0fc      	b.n	8008858 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00a      	beq.n	8008682 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800866c:	2101      	movs	r1, #1
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fcf9 	bl	8009066 <USBH_SetFeature>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	220a      	movs	r2, #10
 800867e:	701a      	strb	r2, [r3, #0]
 8008680:	e002      	b.n	8008688 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	220a      	movs	r2, #10
 8008686:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800869c:	2200      	movs	r2, #0
 800869e:	4619      	mov	r1, r3
 80086a0:	f001 fb74 	bl	8009d8c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80086a4:	e0d8      	b.n	8008858 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d03f      	beq.n	8008730 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
 80086bc:	e016      	b.n	80086ec <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80086be:	7bfa      	ldrb	r2, [r7, #15]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	32de      	adds	r2, #222	; 0xde
 80086c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c8:	791a      	ldrb	r2, [r3, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d108      	bne.n	80086e6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80086d4:	7bfa      	ldrb	r2, [r7, #15]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	32de      	adds	r2, #222	; 0xde
 80086da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80086e4:	e005      	b.n	80086f2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
 80086e8:	3301      	adds	r3, #1
 80086ea:	73fb      	strb	r3, [r7, #15]
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0e5      	beq.n	80086be <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d016      	beq.n	800872a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	4798      	blx	r3
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2206      	movs	r2, #6
 8008712:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800871a:	2103      	movs	r1, #3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	4798      	blx	r3
 8008720:	e006      	b.n	8008730 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	220d      	movs	r2, #13
 8008726:	701a      	strb	r2, [r3, #0]
 8008728:	e002      	b.n	8008730 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	220d      	movs	r2, #13
 800872e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2205      	movs	r2, #5
 8008734:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008744:	2200      	movs	r2, #0
 8008746:	4619      	mov	r1, r3
 8008748:	f001 fb20 	bl	8009d8c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800874c:	e084      	b.n	8008858 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008754:	2b00      	cmp	r3, #0
 8008756:	d017      	beq.n	8008788 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
 8008764:	4603      	mov	r3, r0
 8008766:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d103      	bne.n	8008778 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	220b      	movs	r2, #11
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	e00a      	b.n	800878e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d106      	bne.n	800878e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	220d      	movs	r2, #13
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	e002      	b.n	800878e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	220d      	movs	r2, #13
 800878c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2205      	movs	r2, #5
 8008792:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087a2:	2200      	movs	r2, #0
 80087a4:	4619      	mov	r1, r3
 80087a6:	f001 faf1 	bl	8009d8c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087aa:	e055      	b.n	8008858 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d04f      	beq.n	8008856 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	4798      	blx	r3
      }
      break;
 80087c2:	e048      	b.n	8008856 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff fcf7 	bl	80081c0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d009      	beq.n	80087f0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008800:	2105      	movs	r1, #5
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b01      	cmp	r3, #1
 8008810:	d107      	bne.n	8008822 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff fdb0 	bl	8008380 <USBH_Start>
 8008820:	e002      	b.n	8008828 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f003 fda6 	bl	800c374 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800883c:	2200      	movs	r2, #0
 800883e:	4619      	mov	r1, r3
 8008840:	f001 faa4 	bl	8009d8c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008844:	e008      	b.n	8008858 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008846:	bf00      	nop
 8008848:	e006      	b.n	8008858 <USBH_Process+0x4b8>
      break;
 800884a:	bf00      	nop
 800884c:	e004      	b.n	8008858 <USBH_Process+0x4b8>
      break;
 800884e:	bf00      	nop
 8008850:	e002      	b.n	8008858 <USBH_Process+0x4b8>
    break;
 8008852:	bf00      	nop
 8008854:	e000      	b.n	8008858 <USBH_Process+0x4b8>
      break;
 8008856:	bf00      	nop
  }
  return USBH_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop

08008864 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af04      	add	r7, sp, #16
 800886a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800886c:	2301      	movs	r3, #1
 800886e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008870:	2301      	movs	r3, #1
 8008872:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	785b      	ldrb	r3, [r3, #1]
 8008878:	2b07      	cmp	r3, #7
 800887a:	f200 8208 	bhi.w	8008c8e <USBH_HandleEnum+0x42a>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <USBH_HandleEnum+0x20>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088a5 	.word	0x080088a5
 8008888:	08008963 	.word	0x08008963
 800888c:	080089cd 	.word	0x080089cd
 8008890:	08008a5b 	.word	0x08008a5b
 8008894:	08008ac5 	.word	0x08008ac5
 8008898:	08008b35 	.word	0x08008b35
 800889c:	08008bd1 	.word	0x08008bd1
 80088a0:	08008c4f 	.word	0x08008c4f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80088a4:	2108      	movs	r1, #8
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 faea 	bl	8008e80 <USBH_Get_DevDesc>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d130      	bne.n	8008918 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	7919      	ldrb	r1, [r3, #4]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80088da:	b292      	uxth	r2, r2
 80088dc:	9202      	str	r2, [sp, #8]
 80088de:	2200      	movs	r2, #0
 80088e0:	9201      	str	r2, [sp, #4]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	4603      	mov	r3, r0
 80088e6:	2280      	movs	r2, #128	; 0x80
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f903 	bl	8009af4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	7959      	ldrb	r1, [r3, #5]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008902:	b292      	uxth	r2, r2
 8008904:	9202      	str	r2, [sp, #8]
 8008906:	2200      	movs	r2, #0
 8008908:	9201      	str	r2, [sp, #4]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	4603      	mov	r3, r0
 800890e:	2200      	movs	r2, #0
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f8ef 	bl	8009af4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008916:	e1bc      	b.n	8008c92 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	2b03      	cmp	r3, #3
 800891c:	f040 81b9 	bne.w	8008c92 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008926:	3301      	adds	r3, #1
 8008928:	b2da      	uxtb	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008936:	2b03      	cmp	r3, #3
 8008938:	d903      	bls.n	8008942 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	220d      	movs	r2, #13
 800893e:	701a      	strb	r2, [r3, #0]
      break;
 8008940:	e1a7      	b.n	8008c92 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	795b      	ldrb	r3, [r3, #5]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 f923 	bl	8009b94 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	791b      	ldrb	r3, [r3, #4]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 f91d 	bl	8009b94 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
      break;
 8008960:	e197      	b.n	8008c92 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008962:	2112      	movs	r1, #18
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fa8b 	bl	8008e80 <USBH_Get_DevDesc>
 800896a:	4603      	mov	r3, r0
 800896c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800896e:	7bbb      	ldrb	r3, [r7, #14]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d103      	bne.n	800897c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800897a:	e18c      	b.n	8008c96 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	2b03      	cmp	r3, #3
 8008980:	f040 8189 	bne.w	8008c96 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800898a:	3301      	adds	r3, #1
 800898c:	b2da      	uxtb	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800899a:	2b03      	cmp	r3, #3
 800899c:	d903      	bls.n	80089a6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	220d      	movs	r2, #13
 80089a2:	701a      	strb	r2, [r3, #0]
      break;
 80089a4:	e177      	b.n	8008c96 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	795b      	ldrb	r3, [r3, #5]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 f8f1 	bl	8009b94 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	791b      	ldrb	r3, [r3, #4]
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 f8eb 	bl	8009b94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	701a      	strb	r2, [r3, #0]
      break;
 80089ca:	e164      	b.n	8008c96 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80089cc:	2101      	movs	r1, #1
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fb02 	bl	8008fd8 <USBH_SetAddress>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d132      	bne.n	8008a44 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80089de:	2002      	movs	r0, #2
 80089e0:	f003 fe2d 	bl	800c63e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2203      	movs	r2, #3
 80089f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	7919      	ldrb	r1, [r3, #4]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a06:	b292      	uxth	r2, r2
 8008a08:	9202      	str	r2, [sp, #8]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	9201      	str	r2, [sp, #4]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	4603      	mov	r3, r0
 8008a12:	2280      	movs	r2, #128	; 0x80
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f86d 	bl	8009af4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	7959      	ldrb	r1, [r3, #5]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	9202      	str	r2, [sp, #8]
 8008a32:	2200      	movs	r2, #0
 8008a34:	9201      	str	r2, [sp, #4]
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 f859 	bl	8009af4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a42:	e12a      	b.n	8008c9a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	f040 8127 	bne.w	8008c9a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	220d      	movs	r2, #13
 8008a50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	705a      	strb	r2, [r3, #1]
      break;
 8008a58:	e11f      	b.n	8008c9a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008a5a:	2109      	movs	r1, #9
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fa37 	bl	8008ed0 <USBH_Get_CfgDesc>
 8008a62:	4603      	mov	r3, r0
 8008a64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d103      	bne.n	8008a74 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2204      	movs	r2, #4
 8008a70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a72:	e114      	b.n	8008c9e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	f040 8111 	bne.w	8008c9e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a82:	3301      	adds	r3, #1
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d903      	bls.n	8008a9e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	220d      	movs	r2, #13
 8008a9a:	701a      	strb	r2, [r3, #0]
      break;
 8008a9c:	e0ff      	b.n	8008c9e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	795b      	ldrb	r3, [r3, #5]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f001 f875 	bl	8009b94 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	791b      	ldrb	r3, [r3, #4]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f86f 	bl	8009b94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	701a      	strb	r2, [r3, #0]
      break;
 8008ac2:	e0ec      	b.n	8008c9e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f9ff 	bl	8008ed0 <USBH_Get_CfgDesc>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d103      	bne.n	8008ae4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2205      	movs	r2, #5
 8008ae0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ae2:	e0de      	b.n	8008ca2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	f040 80db 	bne.w	8008ca2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008af2:	3301      	adds	r3, #1
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d903      	bls.n	8008b0e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	220d      	movs	r2, #13
 8008b0a:	701a      	strb	r2, [r3, #0]
      break;
 8008b0c:	e0c9      	b.n	8008ca2 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	795b      	ldrb	r3, [r3, #5]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f83d 	bl	8009b94 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	791b      	ldrb	r3, [r3, #4]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 f837 	bl	8009b94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	701a      	strb	r2, [r3, #0]
      break;
 8008b32:	e0b6      	b.n	8008ca2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d036      	beq.n	8008bac <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008b4a:	23ff      	movs	r3, #255	; 0xff
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f9e3 	bl	8008f18 <USBH_Get_StringDesc>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d111      	bne.n	8008b80 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2206      	movs	r2, #6
 8008b60:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2205      	movs	r2, #5
 8008b66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b76:	2200      	movs	r2, #0
 8008b78:	4619      	mov	r1, r3
 8008b7a:	f001 f907 	bl	8009d8c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b7e:	e092      	b.n	8008ca6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	f040 808f 	bne.w	8008ca6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2206      	movs	r2, #6
 8008b8c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2205      	movs	r2, #5
 8008b92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	f001 f8f1 	bl	8009d8c <osMessagePut>
      break;
 8008baa:	e07c      	b.n	8008ca6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2206      	movs	r2, #6
 8008bb0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2205      	movs	r2, #5
 8008bb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f001 f8df 	bl	8009d8c <osMessagePut>
      break;
 8008bce:	e06a      	b.n	8008ca6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d027      	beq.n	8008c2a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008be6:	23ff      	movs	r3, #255	; 0xff
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f995 	bl	8008f18 <USBH_Get_StringDesc>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d103      	bne.n	8008c00 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2207      	movs	r2, #7
 8008bfc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008bfe:	e054      	b.n	8008caa <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d151      	bne.n	8008caa <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2207      	movs	r2, #7
 8008c0a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2205      	movs	r2, #5
 8008c10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c20:	2200      	movs	r2, #0
 8008c22:	4619      	mov	r1, r3
 8008c24:	f001 f8b2 	bl	8009d8c <osMessagePut>
      break;
 8008c28:	e03f      	b.n	8008caa <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2207      	movs	r2, #7
 8008c2e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2205      	movs	r2, #5
 8008c34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c44:	2200      	movs	r2, #0
 8008c46:	4619      	mov	r1, r3
 8008c48:	f001 f8a0 	bl	8009d8c <osMessagePut>
      break;
 8008c4c:	e02d      	b.n	8008caa <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d017      	beq.n	8008c88 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c64:	23ff      	movs	r3, #255	; 0xff
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f956 	bl	8008f18 <USBH_Get_StringDesc>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008c7a:	e018      	b.n	8008cae <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d115      	bne.n	8008cae <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
      break;
 8008c86:	e012      	b.n	8008cae <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c8c:	e00f      	b.n	8008cae <USBH_HandleEnum+0x44a>

    default:
      break;
 8008c8e:	bf00      	nop
 8008c90:	e00e      	b.n	8008cb0 <USBH_HandleEnum+0x44c>
      break;
 8008c92:	bf00      	nop
 8008c94:	e00c      	b.n	8008cb0 <USBH_HandleEnum+0x44c>
      break;
 8008c96:	bf00      	nop
 8008c98:	e00a      	b.n	8008cb0 <USBH_HandleEnum+0x44c>
      break;
 8008c9a:	bf00      	nop
 8008c9c:	e008      	b.n	8008cb0 <USBH_HandleEnum+0x44c>
      break;
 8008c9e:	bf00      	nop
 8008ca0:	e006      	b.n	8008cb0 <USBH_HandleEnum+0x44c>
      break;
 8008ca2:	bf00      	nop
 8008ca4:	e004      	b.n	8008cb0 <USBH_HandleEnum+0x44c>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e002      	b.n	8008cb0 <USBH_HandleEnum+0x44c>
      break;
 8008caa:	bf00      	nop
 8008cac:	e000      	b.n	8008cb0 <USBH_HandleEnum+0x44c>
      break;
 8008cae:	bf00      	nop
  }
  return Status;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop

08008cbc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008cce:	bf00      	nop
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f804 	bl	8008cfe <USBH_HandleSof>
}
 8008cf6:	bf00      	nop
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b0b      	cmp	r3, #11
 8008d0e:	d10a      	bne.n	8008d26 <USBH_HandleSof+0x28>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d005      	beq.n	8008d26 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	4798      	blx	r3
  }
}
 8008d26:	bf00      	nop
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d52:	2200      	movs	r2, #0
 8008d54:	4619      	mov	r1, r3
 8008d56:	f001 f819 	bl	8009d8c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008d5a:	bf00      	nop
}
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008d72:	bf00      	nop
}
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008db2:	2200      	movs	r2, #0
 8008db4:	4619      	mov	r1, r3
 8008db6:	f000 ffe9 	bl	8009d8c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f003 fae0 	bl	800c3aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	791b      	ldrb	r3, [r3, #4]
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fecf 	bl	8009b94 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	795b      	ldrb	r3, [r3, #5]
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fec9 	bl	8009b94 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e16:	2200      	movs	r2, #0
 8008e18:	4619      	mov	r1, r3
 8008e1a:	f000 ffb7 	bl	8009d8c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8008e36:	f107 030c 	add.w	r3, r7, #12
 8008e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 ffe4 	bl	8009e0c <osMessageGet>
    if (event.status == osEventMessage)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b10      	cmp	r3, #16
 8008e48:	d1f2      	bne.n	8008e30 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff faa8 	bl	80083a0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008e50:	e7ee      	b.n	8008e30 <USBH_Process_OS+0x8>

08008e52 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b082      	sub	sp, #8
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e6e:	2200      	movs	r2, #0
 8008e70:	4619      	mov	r1, r3
 8008e72:	f000 ff8b 	bl	8009d8c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008e92:	78fb      	ldrb	r3, [r7, #3]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f864 	bl	8008f6e <USBH_GetDescriptor>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	73fb      	strb	r3, [r7, #15]
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ebc:	78fa      	ldrb	r2, [r7, #3]
 8008ebe:	b292      	uxth	r2, r2
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f000 f918 	bl	80090f6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af02      	add	r7, sp, #8
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	331c      	adds	r3, #28
 8008ee0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ee2:	887b      	ldrh	r3, [r7, #2]
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eec:	2100      	movs	r1, #0
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f83d 	bl	8008f6e <USBH_GetDescriptor>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	72fb      	strb	r3, [r7, #11]
 8008ef8:	7afb      	ldrb	r3, [r7, #11]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d107      	bne.n	8008f0e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008f04:	887a      	ldrh	r2, [r7, #2]
 8008f06:	68f9      	ldr	r1, [r7, #12]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 f964 	bl	80091d6 <USBH_ParseCfgDesc>
  }

  return status;
 8008f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	607a      	str	r2, [r7, #4]
 8008f22:	461a      	mov	r2, r3
 8008f24:	460b      	mov	r3, r1
 8008f26:	72fb      	strb	r3, [r7, #11]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008f34:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008f3c:	893b      	ldrh	r3, [r7, #8]
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	460b      	mov	r3, r1
 8008f42:	2100      	movs	r1, #0
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 f812 	bl	8008f6e <USBH_GetDescriptor>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	75fb      	strb	r3, [r7, #23]
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d107      	bne.n	8008f64 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f5a:	893a      	ldrh	r2, [r7, #8]
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fa37 	bl	80093d2 <USBH_ParseStringDesc>
  }

  return status;
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	607b      	str	r3, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	72fb      	strb	r3, [r7, #11]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	789b      	ldrb	r3, [r3, #2]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d11c      	bne.n	8008fc2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008f88:	7afb      	ldrb	r3, [r7, #11]
 8008f8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2206      	movs	r2, #6
 8008f98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	893a      	ldrh	r2, [r7, #8]
 8008f9e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008fa0:	893b      	ldrh	r3, [r7, #8]
 8008fa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008faa:	d104      	bne.n	8008fb6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f240 4209 	movw	r2, #1033	; 0x409
 8008fb2:	829a      	strh	r2, [r3, #20]
 8008fb4:	e002      	b.n	8008fbc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8b3a      	ldrh	r2, [r7, #24]
 8008fc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008fc2:	8b3b      	ldrh	r3, [r7, #24]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 fa50 	bl	800946e <USBH_CtlReq>
 8008fce:	4603      	mov	r3, r0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	789b      	ldrb	r3, [r3, #2]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d10f      	bne.n	800900c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2205      	movs	r2, #5
 8008ff6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800900c:	2200      	movs	r2, #0
 800900e:	2100      	movs	r1, #0
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fa2c 	bl	800946e <USBH_CtlReq>
 8009016:	4603      	mov	r3, r0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	789b      	ldrb	r3, [r3, #2]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d10e      	bne.n	8009052 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2209      	movs	r2, #9
 800903e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	887a      	ldrh	r2, [r7, #2]
 8009044:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009052:	2200      	movs	r2, #0
 8009054:	2100      	movs	r1, #0
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa09 	bl	800946e <USBH_CtlReq>
 800905c:	4603      	mov	r3, r0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	789b      	ldrb	r3, [r3, #2]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d10f      	bne.n	800909a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2203      	movs	r2, #3
 8009084:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009086:	78fb      	ldrb	r3, [r7, #3]
 8009088:	b29a      	uxth	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f9e5 	bl	800946e <USBH_CtlReq>
 80090a4:	4603      	mov	r3, r0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	789b      	ldrb	r3, [r3, #2]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d10f      	bne.n	80090e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80090e2:	2200      	movs	r2, #0
 80090e4:	2100      	movs	r1, #0
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f9c1 	bl	800946e <USBH_CtlReq>
 80090ec:	4603      	mov	r3, r0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	4613      	mov	r3, r2
 8009102:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	781a      	ldrb	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	785a      	ldrb	r2, [r3, #1]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	3302      	adds	r3, #2
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	b29a      	uxth	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	3303      	adds	r3, #3
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	b29b      	uxth	r3, r3
 8009124:	021b      	lsls	r3, r3, #8
 8009126:	b29b      	uxth	r3, r3
 8009128:	4313      	orrs	r3, r2
 800912a:	b29a      	uxth	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	791a      	ldrb	r2, [r3, #4]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	795a      	ldrb	r2, [r3, #5]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	799a      	ldrb	r2, [r3, #6]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	79da      	ldrb	r2, [r3, #7]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009150:	88fb      	ldrh	r3, [r7, #6]
 8009152:	2b08      	cmp	r3, #8
 8009154:	d939      	bls.n	80091ca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	3308      	adds	r3, #8
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	b29a      	uxth	r2, r3
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	3309      	adds	r3, #9
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	021b      	lsls	r3, r3, #8
 8009168:	b29b      	uxth	r3, r3
 800916a:	4313      	orrs	r3, r2
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	330a      	adds	r3, #10
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	b29a      	uxth	r2, r3
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	330b      	adds	r3, #11
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	b29b      	uxth	r3, r3
 8009182:	021b      	lsls	r3, r3, #8
 8009184:	b29b      	uxth	r3, r3
 8009186:	4313      	orrs	r3, r2
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	330c      	adds	r3, #12
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	b29a      	uxth	r2, r3
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	330d      	adds	r3, #13
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	021b      	lsls	r3, r3, #8
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	4313      	orrs	r3, r2
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	7b9a      	ldrb	r2, [r3, #14]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	7bda      	ldrb	r2, [r3, #15]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	7c1a      	ldrb	r2, [r3, #16]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	7c5a      	ldrb	r2, [r3, #17]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	745a      	strb	r2, [r3, #17]
  }
}
 80091ca:	bf00      	nop
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b08a      	sub	sp, #40	; 0x28
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	4613      	mov	r3, r2
 80091e2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	781a      	ldrb	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	785a      	ldrb	r2, [r3, #1]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	3302      	adds	r3, #2
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	b29a      	uxth	r2, r3
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	3303      	adds	r3, #3
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	b29b      	uxth	r3, r3
 800921c:	4313      	orrs	r3, r2
 800921e:	b29a      	uxth	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	791a      	ldrb	r2, [r3, #4]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	795a      	ldrb	r2, [r3, #5]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	799a      	ldrb	r2, [r3, #6]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	79da      	ldrb	r2, [r3, #7]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	7a1a      	ldrb	r2, [r3, #8]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800924c:	88fb      	ldrh	r3, [r7, #6]
 800924e:	2b09      	cmp	r3, #9
 8009250:	d95f      	bls.n	8009312 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009252:	2309      	movs	r3, #9
 8009254:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009256:	2300      	movs	r3, #0
 8009258:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800925a:	e051      	b.n	8009300 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800925c:	f107 0316 	add.w	r3, r7, #22
 8009260:	4619      	mov	r1, r3
 8009262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009264:	f000 f8e8 	bl	8009438 <USBH_GetNextDesc>
 8009268:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	785b      	ldrb	r3, [r3, #1]
 800926e:	2b04      	cmp	r3, #4
 8009270:	d146      	bne.n	8009300 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009272:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009276:	221a      	movs	r2, #26
 8009278:	fb02 f303 	mul.w	r3, r2, r3
 800927c:	3308      	adds	r3, #8
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	4413      	add	r3, r2
 8009282:	3302      	adds	r3, #2
 8009284:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009288:	69f8      	ldr	r0, [r7, #28]
 800928a:	f000 f846 	bl	800931a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009294:	2300      	movs	r3, #0
 8009296:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009298:	e022      	b.n	80092e0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800929a:	f107 0316 	add.w	r3, r7, #22
 800929e:	4619      	mov	r1, r3
 80092a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092a2:	f000 f8c9 	bl	8009438 <USBH_GetNextDesc>
 80092a6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	785b      	ldrb	r3, [r3, #1]
 80092ac:	2b05      	cmp	r3, #5
 80092ae:	d117      	bne.n	80092e0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80092b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80092b8:	3201      	adds	r2, #1
 80092ba:	00d2      	lsls	r2, r2, #3
 80092bc:	211a      	movs	r1, #26
 80092be:	fb01 f303 	mul.w	r3, r1, r3
 80092c2:	4413      	add	r3, r2
 80092c4:	3308      	adds	r3, #8
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	3304      	adds	r3, #4
 80092cc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80092ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092d0:	69b8      	ldr	r0, [r7, #24]
 80092d2:	f000 f851 	bl	8009378 <USBH_ParseEPDesc>
            ep_ix++;
 80092d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80092da:	3301      	adds	r3, #1
 80092dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	791b      	ldrb	r3, [r3, #4]
 80092e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d204      	bcs.n	80092f6 <USBH_ParseCfgDesc+0x120>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	885a      	ldrh	r2, [r3, #2]
 80092f0:	8afb      	ldrh	r3, [r7, #22]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d8d1      	bhi.n	800929a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80092f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092fa:	3301      	adds	r3, #1
 80092fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009304:	2b01      	cmp	r3, #1
 8009306:	d804      	bhi.n	8009312 <USBH_ParseCfgDesc+0x13c>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	885a      	ldrh	r2, [r3, #2]
 800930c:	8afb      	ldrh	r3, [r7, #22]
 800930e:	429a      	cmp	r2, r3
 8009310:	d8a4      	bhi.n	800925c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009312:	bf00      	nop
 8009314:	3728      	adds	r7, #40	; 0x28
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	785a      	ldrb	r2, [r3, #1]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	789a      	ldrb	r2, [r3, #2]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	78da      	ldrb	r2, [r3, #3]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	791a      	ldrb	r2, [r3, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	795a      	ldrb	r2, [r3, #5]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	799a      	ldrb	r2, [r3, #6]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	79da      	ldrb	r2, [r3, #7]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	7a1a      	ldrb	r2, [r3, #8]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	721a      	strb	r2, [r3, #8]
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	781a      	ldrb	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	785a      	ldrb	r2, [r3, #1]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	789a      	ldrb	r2, [r3, #2]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	78da      	ldrb	r2, [r3, #3]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	3304      	adds	r3, #4
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	3305      	adds	r3, #5
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4313      	orrs	r3, r2
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	799a      	ldrb	r2, [r3, #6]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	719a      	strb	r2, [r3, #6]
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b087      	sub	sp, #28
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	60f8      	str	r0, [r7, #12]
 80093da:	60b9      	str	r1, [r7, #8]
 80093dc:	4613      	mov	r3, r2
 80093de:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3301      	adds	r3, #1
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d120      	bne.n	800942c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	1e9a      	subs	r2, r3, #2
 80093f0:	88fb      	ldrh	r3, [r7, #6]
 80093f2:	4293      	cmp	r3, r2
 80093f4:	bf28      	it	cs
 80093f6:	4613      	movcs	r3, r2
 80093f8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3302      	adds	r3, #2
 80093fe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009400:	2300      	movs	r3, #0
 8009402:	82fb      	strh	r3, [r7, #22]
 8009404:	e00b      	b.n	800941e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009406:	8afb      	ldrh	r3, [r7, #22]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4413      	add	r3, r2
 800940c:	781a      	ldrb	r2, [r3, #0]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	3301      	adds	r3, #1
 8009416:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009418:	8afb      	ldrh	r3, [r7, #22]
 800941a:	3302      	adds	r3, #2
 800941c:	82fb      	strh	r3, [r7, #22]
 800941e:	8afa      	ldrh	r2, [r7, #22]
 8009420:	8abb      	ldrh	r3, [r7, #20]
 8009422:	429a      	cmp	r2, r3
 8009424:	d3ef      	bcc.n	8009406 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2200      	movs	r2, #0
 800942a:	701a      	strb	r2, [r3, #0]
  }
}
 800942c:	bf00      	nop
 800942e:	371c      	adds	r7, #28
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	881a      	ldrh	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	4413      	add	r3, r2
 800944e:	b29a      	uxth	r2, r3
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4413      	add	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009460:	68fb      	ldr	r3, [r7, #12]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b086      	sub	sp, #24
 8009472:	af00      	add	r7, sp, #0
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	60b9      	str	r1, [r7, #8]
 8009478:	4613      	mov	r3, r2
 800947a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800947c:	2301      	movs	r3, #1
 800947e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	789b      	ldrb	r3, [r3, #2]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d002      	beq.n	800948e <USBH_CtlReq+0x20>
 8009488:	2b02      	cmp	r3, #2
 800948a:	d01d      	beq.n	80094c8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800948c:	e043      	b.n	8009516 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	88fa      	ldrh	r2, [r7, #6]
 8009498:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2202      	movs	r2, #2
 80094a4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80094a6:	2301      	movs	r3, #1
 80094a8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2203      	movs	r2, #3
 80094ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094be:	2200      	movs	r2, #0
 80094c0:	4619      	mov	r1, r3
 80094c2:	f000 fc63 	bl	8009d8c <osMessagePut>
      break;
 80094c6:	e026      	b.n	8009516 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 f829 	bl	8009520 <USBH_HandleControl>
 80094ce:	4603      	mov	r3, r0
 80094d0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <USBH_CtlReq+0x70>
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d106      	bne.n	80094ec <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	761a      	strb	r2, [r3, #24]
 80094ea:	e005      	b.n	80094f8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d102      	bne.n	80094f8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2203      	movs	r2, #3
 80094fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800950c:	2200      	movs	r2, #0
 800950e:	4619      	mov	r1, r3
 8009510:	f000 fc3c 	bl	8009d8c <osMessagePut>
      break;
 8009514:	bf00      	nop
  }
  return status;
 8009516:	7dfb      	ldrb	r3, [r7, #23]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af02      	add	r7, sp, #8
 8009526:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009528:	2301      	movs	r3, #1
 800952a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800952c:	2300      	movs	r3, #0
 800952e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7e1b      	ldrb	r3, [r3, #24]
 8009534:	3b01      	subs	r3, #1
 8009536:	2b0a      	cmp	r3, #10
 8009538:	f200 822b 	bhi.w	8009992 <USBH_HandleControl+0x472>
 800953c:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <USBH_HandleControl+0x24>)
 800953e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009542:	bf00      	nop
 8009544:	08009571 	.word	0x08009571
 8009548:	0800958b 	.word	0x0800958b
 800954c:	0800962d 	.word	0x0800962d
 8009550:	08009653 	.word	0x08009653
 8009554:	080096df 	.word	0x080096df
 8009558:	0800970b 	.word	0x0800970b
 800955c:	080097cd 	.word	0x080097cd
 8009560:	080097ef 	.word	0x080097ef
 8009564:	08009881 	.word	0x08009881
 8009568:	080098a9 	.word	0x080098a9
 800956c:	0800993b 	.word	0x0800993b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f103 0110 	add.w	r1, r3, #16
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	795b      	ldrb	r3, [r3, #5]
 800957a:	461a      	mov	r2, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fa19 	bl	80099b4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2202      	movs	r2, #2
 8009586:	761a      	strb	r2, [r3, #24]
      break;
 8009588:	e20e      	b.n	80099a8 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	795b      	ldrb	r3, [r3, #5]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f002 fff7 	bl	800c584 <USBH_LL_GetURBState>
 8009596:	4603      	mov	r3, r0
 8009598:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800959a:	7bbb      	ldrb	r3, [r7, #14]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d12c      	bne.n	80095fa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	7c1b      	ldrb	r3, [r3, #16]
 80095a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	8adb      	ldrh	r3, [r3, #22]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80095b2:	7b7b      	ldrb	r3, [r7, #13]
 80095b4:	2b80      	cmp	r3, #128	; 0x80
 80095b6:	d103      	bne.n	80095c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2203      	movs	r2, #3
 80095bc:	761a      	strb	r2, [r3, #24]
 80095be:	e00d      	b.n	80095dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2205      	movs	r2, #5
 80095c4:	761a      	strb	r2, [r3, #24]
 80095c6:	e009      	b.n	80095dc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80095c8:	7b7b      	ldrb	r3, [r7, #13]
 80095ca:	2b80      	cmp	r3, #128	; 0x80
 80095cc:	d103      	bne.n	80095d6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2209      	movs	r2, #9
 80095d2:	761a      	strb	r2, [r3, #24]
 80095d4:	e002      	b.n	80095dc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2207      	movs	r2, #7
 80095da:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2203      	movs	r2, #3
 80095e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80095f0:	2200      	movs	r2, #0
 80095f2:	4619      	mov	r1, r3
 80095f4:	f000 fbca 	bl	8009d8c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80095f8:	e1cd      	b.n	8009996 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	d003      	beq.n	8009608 <USBH_HandleControl+0xe8>
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	2b02      	cmp	r3, #2
 8009604:	f040 81c7 	bne.w	8009996 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	220b      	movs	r2, #11
 800960c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2203      	movs	r2, #3
 8009612:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009622:	2200      	movs	r2, #0
 8009624:	4619      	mov	r1, r3
 8009626:	f000 fbb1 	bl	8009d8c <osMessagePut>
      break;
 800962a:	e1b4      	b.n	8009996 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6899      	ldr	r1, [r3, #8]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	899a      	ldrh	r2, [r3, #12]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	791b      	ldrb	r3, [r3, #4]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f9f4 	bl	8009a32 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2204      	movs	r2, #4
 800964e:	761a      	strb	r2, [r3, #24]
      break;
 8009650:	e1aa      	b.n	80099a8 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	791b      	ldrb	r3, [r3, #4]
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f002 ff93 	bl	800c584 <USBH_LL_GetURBState>
 800965e:	4603      	mov	r3, r0
 8009660:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009662:	7bbb      	ldrb	r3, [r7, #14]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d110      	bne.n	800968a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2209      	movs	r2, #9
 800966c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2203      	movs	r2, #3
 8009672:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009682:	2200      	movs	r2, #0
 8009684:	4619      	mov	r1, r3
 8009686:	f000 fb81 	bl	8009d8c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	2b05      	cmp	r3, #5
 800968e:	d110      	bne.n	80096b2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009690:	2303      	movs	r3, #3
 8009692:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2203      	movs	r2, #3
 8009698:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096a8:	2200      	movs	r2, #0
 80096aa:	4619      	mov	r1, r3
 80096ac:	f000 fb6e 	bl	8009d8c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80096b0:	e173      	b.n	800999a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	2b04      	cmp	r3, #4
 80096b6:	f040 8170 	bne.w	800999a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	220b      	movs	r2, #11
 80096be:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2203      	movs	r2, #3
 80096c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096d4:	2200      	movs	r2, #0
 80096d6:	4619      	mov	r1, r3
 80096d8:	f000 fb58 	bl	8009d8c <osMessagePut>
      break;
 80096dc:	e15d      	b.n	800999a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6899      	ldr	r1, [r3, #8]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	899a      	ldrh	r2, [r3, #12]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	7958      	ldrb	r0, [r3, #5]
 80096ea:	2301      	movs	r3, #1
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	4603      	mov	r3, r0
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f979 	bl	80099e8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2206      	movs	r2, #6
 8009706:	761a      	strb	r2, [r3, #24]
      break;
 8009708:	e14e      	b.n	80099a8 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	795b      	ldrb	r3, [r3, #5]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f002 ff37 	bl	800c584 <USBH_LL_GetURBState>
 8009716:	4603      	mov	r3, r0
 8009718:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800971a:	7bbb      	ldrb	r3, [r7, #14]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d111      	bne.n	8009744 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2207      	movs	r2, #7
 8009724:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2203      	movs	r2, #3
 800972a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800973a:	2200      	movs	r2, #0
 800973c:	4619      	mov	r1, r3
 800973e:	f000 fb25 	bl	8009d8c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009742:	e12c      	b.n	800999e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b05      	cmp	r3, #5
 8009748:	d113      	bne.n	8009772 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	220c      	movs	r2, #12
 800974e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009750:	2303      	movs	r3, #3
 8009752:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2203      	movs	r2, #3
 8009758:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009768:	2200      	movs	r2, #0
 800976a:	4619      	mov	r1, r3
 800976c:	f000 fb0e 	bl	8009d8c <osMessagePut>
      break;
 8009770:	e115      	b.n	800999e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d111      	bne.n	800979c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2205      	movs	r2, #5
 800977c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2203      	movs	r2, #3
 8009782:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009792:	2200      	movs	r2, #0
 8009794:	4619      	mov	r1, r3
 8009796:	f000 faf9 	bl	8009d8c <osMessagePut>
      break;
 800979a:	e100      	b.n	800999e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	2b04      	cmp	r3, #4
 80097a0:	f040 80fd 	bne.w	800999e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	220b      	movs	r2, #11
 80097a8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80097aa:	2302      	movs	r3, #2
 80097ac:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2203      	movs	r2, #3
 80097b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097c2:	2200      	movs	r2, #0
 80097c4:	4619      	mov	r1, r3
 80097c6:	f000 fae1 	bl	8009d8c <osMessagePut>
      break;
 80097ca:	e0e8      	b.n	800999e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	791b      	ldrb	r3, [r3, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	2100      	movs	r1, #0
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f92c 	bl	8009a32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2208      	movs	r2, #8
 80097ea:	761a      	strb	r2, [r3, #24]

      break;
 80097ec:	e0dc      	b.n	80099a8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	791b      	ldrb	r3, [r3, #4]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f002 fec5 	bl	800c584 <USBH_LL_GetURBState>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d113      	bne.n	800982c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	220d      	movs	r2, #13
 8009808:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2203      	movs	r2, #3
 8009812:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009822:	2200      	movs	r2, #0
 8009824:	4619      	mov	r1, r3
 8009826:	f000 fab1 	bl	8009d8c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800982a:	e0ba      	b.n	80099a2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b04      	cmp	r3, #4
 8009830:	d111      	bne.n	8009856 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	220b      	movs	r2, #11
 8009836:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2203      	movs	r2, #3
 800983c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800984c:	2200      	movs	r2, #0
 800984e:	4619      	mov	r1, r3
 8009850:	f000 fa9c 	bl	8009d8c <osMessagePut>
      break;
 8009854:	e0a5      	b.n	80099a2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b05      	cmp	r3, #5
 800985a:	f040 80a2 	bne.w	80099a2 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800985e:	2303      	movs	r3, #3
 8009860:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2203      	movs	r2, #3
 8009866:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009876:	2200      	movs	r2, #0
 8009878:	4619      	mov	r1, r3
 800987a:	f000 fa87 	bl	8009d8c <osMessagePut>
      break;
 800987e:	e090      	b.n	80099a2 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	795a      	ldrb	r2, [r3, #5]
 8009884:	2301      	movs	r3, #1
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	4613      	mov	r3, r2
 800988a:	2200      	movs	r2, #0
 800988c:	2100      	movs	r1, #0
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f8aa 	bl	80099e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800989a:	b29a      	uxth	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	220a      	movs	r2, #10
 80098a4:	761a      	strb	r2, [r3, #24]
      break;
 80098a6:	e07f      	b.n	80099a8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	795b      	ldrb	r3, [r3, #5]
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f002 fe68 	bl	800c584 <USBH_LL_GetURBState>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d113      	bne.n	80098e6 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	220d      	movs	r2, #13
 80098c6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2203      	movs	r2, #3
 80098cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80098dc:	2200      	movs	r2, #0
 80098de:	4619      	mov	r1, r3
 80098e0:	f000 fa54 	bl	8009d8c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80098e4:	e05f      	b.n	80099a6 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d111      	bne.n	8009910 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2209      	movs	r2, #9
 80098f0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2203      	movs	r2, #3
 80098f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009906:	2200      	movs	r2, #0
 8009908:	4619      	mov	r1, r3
 800990a:	f000 fa3f 	bl	8009d8c <osMessagePut>
      break;
 800990e:	e04a      	b.n	80099a6 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	2b04      	cmp	r3, #4
 8009914:	d147      	bne.n	80099a6 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	220b      	movs	r2, #11
 800991a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2203      	movs	r2, #3
 8009920:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009930:	2200      	movs	r2, #0
 8009932:	4619      	mov	r1, r3
 8009934:	f000 fa2a 	bl	8009d8c <osMessagePut>
      break;
 8009938:	e035      	b.n	80099a6 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	7e5b      	ldrb	r3, [r3, #25]
 800993e:	3301      	adds	r3, #1
 8009940:	b2da      	uxtb	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	765a      	strb	r2, [r3, #25]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	7e5b      	ldrb	r3, [r3, #25]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d806      	bhi.n	800995c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800995a:	e025      	b.n	80099a8 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009962:	2106      	movs	r1, #6
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	795b      	ldrb	r3, [r3, #5]
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f90d 	bl	8009b94 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	791b      	ldrb	r3, [r3, #4]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f907 	bl	8009b94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800998c:	2302      	movs	r3, #2
 800998e:	73fb      	strb	r3, [r7, #15]
      break;
 8009990:	e00a      	b.n	80099a8 <USBH_HandleControl+0x488>

    default:
      break;
 8009992:	bf00      	nop
 8009994:	e008      	b.n	80099a8 <USBH_HandleControl+0x488>
      break;
 8009996:	bf00      	nop
 8009998:	e006      	b.n	80099a8 <USBH_HandleControl+0x488>
      break;
 800999a:	bf00      	nop
 800999c:	e004      	b.n	80099a8 <USBH_HandleControl+0x488>
      break;
 800999e:	bf00      	nop
 80099a0:	e002      	b.n	80099a8 <USBH_HandleControl+0x488>
      break;
 80099a2:	bf00      	nop
 80099a4:	e000      	b.n	80099a8 <USBH_HandleControl+0x488>
      break;
 80099a6:	bf00      	nop
  }

  return status;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop

080099b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af04      	add	r7, sp, #16
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	4613      	mov	r3, r2
 80099c0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80099c2:	79f9      	ldrb	r1, [r7, #7]
 80099c4:	2300      	movs	r3, #0
 80099c6:	9303      	str	r3, [sp, #12]
 80099c8:	2308      	movs	r3, #8
 80099ca:	9302      	str	r3, [sp, #8]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	9301      	str	r3, [sp, #4]
 80099d0:	2300      	movs	r3, #0
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	2200      	movs	r2, #0
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f002 fda2 	bl	800c522 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af04      	add	r7, sp, #16
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	4611      	mov	r1, r2
 80099f4:	461a      	mov	r2, r3
 80099f6:	460b      	mov	r3, r1
 80099f8:	80fb      	strh	r3, [r7, #6]
 80099fa:	4613      	mov	r3, r2
 80099fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009a0c:	7979      	ldrb	r1, [r7, #5]
 8009a0e:	7e3b      	ldrb	r3, [r7, #24]
 8009a10:	9303      	str	r3, [sp, #12]
 8009a12:	88fb      	ldrh	r3, [r7, #6]
 8009a14:	9302      	str	r3, [sp, #8]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	2200      	movs	r2, #0
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f002 fd7d 	bl	800c522 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b088      	sub	sp, #32
 8009a36:	af04      	add	r7, sp, #16
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	461a      	mov	r2, r3
 8009a40:	460b      	mov	r3, r1
 8009a42:	80fb      	strh	r3, [r7, #6]
 8009a44:	4613      	mov	r3, r2
 8009a46:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009a48:	7979      	ldrb	r1, [r7, #5]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9303      	str	r3, [sp, #12]
 8009a4e:	88fb      	ldrh	r3, [r7, #6]
 8009a50:	9302      	str	r3, [sp, #8]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	9301      	str	r3, [sp, #4]
 8009a56:	2301      	movs	r3, #1
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f002 fd5f 	bl	800c522 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009a64:	2300      	movs	r3, #0

}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b088      	sub	sp, #32
 8009a72:	af04      	add	r7, sp, #16
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	4611      	mov	r1, r2
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	80fb      	strh	r3, [r7, #6]
 8009a80:	4613      	mov	r3, r2
 8009a82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009a92:	7979      	ldrb	r1, [r7, #5]
 8009a94:	7e3b      	ldrb	r3, [r7, #24]
 8009a96:	9303      	str	r3, [sp, #12]
 8009a98:	88fb      	ldrh	r3, [r7, #6]
 8009a9a:	9302      	str	r3, [sp, #8]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f002 fd3a 	bl	800c522 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af04      	add	r7, sp, #16
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	80fb      	strh	r3, [r7, #6]
 8009aca:	4613      	mov	r3, r2
 8009acc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ace:	7979      	ldrb	r1, [r7, #5]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9303      	str	r3, [sp, #12]
 8009ad4:	88fb      	ldrh	r3, [r7, #6]
 8009ad6:	9302      	str	r3, [sp, #8]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	9301      	str	r3, [sp, #4]
 8009adc:	2301      	movs	r3, #1
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f002 fd1c 	bl	800c522 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af04      	add	r7, sp, #16
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	461a      	mov	r2, r3
 8009b02:	4603      	mov	r3, r0
 8009b04:	70fb      	strb	r3, [r7, #3]
 8009b06:	460b      	mov	r3, r1
 8009b08:	70bb      	strb	r3, [r7, #2]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009b0e:	7878      	ldrb	r0, [r7, #1]
 8009b10:	78ba      	ldrb	r2, [r7, #2]
 8009b12:	78f9      	ldrb	r1, [r7, #3]
 8009b14:	8b3b      	ldrh	r3, [r7, #24]
 8009b16:	9302      	str	r3, [sp, #8]
 8009b18:	7d3b      	ldrb	r3, [r7, #20]
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	7c3b      	ldrb	r3, [r7, #16]
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	4603      	mov	r3, r0
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f002 fcaf 	bl	800c486 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b082      	sub	sp, #8
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f002 fcce 	bl	800c4e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f836 	bl	8009bd0 <USBH_GetFreePipe>
 8009b64:	4603      	mov	r3, r0
 8009b66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009b68:	89fb      	ldrh	r3, [r7, #14]
 8009b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d00a      	beq.n	8009b88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009b72:	78fa      	ldrb	r2, [r7, #3]
 8009b74:	89fb      	ldrh	r3, [r7, #14]
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	33e0      	adds	r3, #224	; 0xe0
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	440b      	add	r3, r1
 8009b86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009b88:	89fb      	ldrh	r3, [r7, #14]
 8009b8a:	b2db      	uxtb	r3, r3
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009ba0:	78fb      	ldrb	r3, [r7, #3]
 8009ba2:	2b0a      	cmp	r3, #10
 8009ba4:	d80d      	bhi.n	8009bc2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	33e0      	adds	r3, #224	; 0xe0
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	33e0      	adds	r3, #224	; 0xe0
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	440b      	add	r3, r1
 8009bc0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
 8009be0:	e00f      	b.n	8009c02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	33e0      	adds	r3, #224	; 0xe0
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d102      	bne.n	8009bfc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	e007      	b.n	8009c0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	73fb      	strb	r3, [r7, #15]
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	2b0a      	cmp	r3, #10
 8009c06:	d9ec      	bls.n	8009be2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c2a:	2b84      	cmp	r3, #132	; 0x84
 8009c2c:	d005      	beq.n	8009c3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	3303      	adds	r3, #3
 8009c38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c4e:	f3ef 8305 	mrs	r3, IPSR
 8009c52:	607b      	str	r3, [r7, #4]
  return(result);
 8009c54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	bf14      	ite	ne
 8009c5a:	2301      	movne	r3, #1
 8009c5c:	2300      	moveq	r3, #0
 8009c5e:	b2db      	uxtb	r3, r3
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c70:	f001 f8f4 	bl	800ae5c <vTaskStartScheduler>
  
  return osOK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c7c:	b089      	sub	sp, #36	; 0x24
 8009c7e:	af04      	add	r7, sp, #16
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d020      	beq.n	8009cce <osThreadCreate+0x54>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d01c      	beq.n	8009cce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685c      	ldr	r4, [r3, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681d      	ldr	r5, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	691e      	ldr	r6, [r3, #16]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff ffb6 	bl	8009c18 <makeFreeRtosPriority>
 8009cac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cb6:	9202      	str	r2, [sp, #8]
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	9100      	str	r1, [sp, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 fefb 	bl	800aabe <xTaskCreateStatic>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	e01c      	b.n	8009d08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685c      	ldr	r4, [r3, #4]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cda:	b29e      	uxth	r6, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff ff98 	bl	8009c18 <makeFreeRtosPriority>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	f107 030c 	add.w	r3, r7, #12
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	9200      	str	r2, [sp, #0]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	4632      	mov	r2, r6
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 ff3a 	bl	800ab72 <xTaskCreate>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d001      	beq.n	8009d08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009d04:	2300      	movs	r3, #0
 8009d06:	e000      	b.n	8009d0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009d08:	68fb      	ldr	r3, [r7, #12]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b084      	sub	sp, #16
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <osDelay+0x16>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	e000      	b.n	8009d2a <osDelay+0x18>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f001 f862 	bl	800adf4 <vTaskDelay>
  
  return osOK;
 8009d30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009d3a:	b590      	push	{r4, r7, lr}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af02      	add	r7, sp, #8
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d012      	beq.n	8009d72 <osMessageCreate+0x38>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00e      	beq.n	8009d72 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6859      	ldr	r1, [r3, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68dc      	ldr	r4, [r3, #12]
 8009d64:	2300      	movs	r3, #0
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	4623      	mov	r3, r4
 8009d6a:	f000 f9df 	bl	800a12c <xQueueGenericCreateStatic>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	e008      	b.n	8009d84 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6818      	ldr	r0, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	f000 fa48 	bl	800a212 <xQueueGenericCreate>
 8009d82:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd90      	pop	{r4, r7, pc}

08009d8c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <osMessagePut+0x1e>
    ticks = 1;
 8009da6:	2301      	movs	r3, #1
 8009da8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009daa:	f7ff ff4d 	bl	8009c48 <inHandlerMode>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d018      	beq.n	8009de6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009db4:	f107 0210 	add.w	r2, r7, #16
 8009db8:	f107 0108 	add.w	r1, r7, #8
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f000 fb80 	bl	800a4c4 <xQueueGenericSendFromISR>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d001      	beq.n	8009dce <osMessagePut+0x42>
      return osErrorOS;
 8009dca:	23ff      	movs	r3, #255	; 0xff
 8009dcc:	e018      	b.n	8009e00 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d014      	beq.n	8009dfe <osMessagePut+0x72>
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <osMessagePut+0x7c>)
 8009dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	e00b      	b.n	8009dfe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009de6:	f107 0108 	add.w	r1, r7, #8
 8009dea:	2300      	movs	r3, #0
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 fa6e 	bl	800a2d0 <xQueueGenericSend>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d001      	beq.n	8009dfe <osMessagePut+0x72>
      return osErrorOS;
 8009dfa:	23ff      	movs	r3, #255	; 0xff
 8009dfc:	e000      	b.n	8009e00 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009e0c:	b590      	push	{r4, r7, lr}
 8009e0e:	b08b      	sub	sp, #44	; 0x2c
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009e26:	2380      	movs	r3, #128	; 0x80
 8009e28:	617b      	str	r3, [r7, #20]
    return event;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	461c      	mov	r4, r3
 8009e2e:	f107 0314 	add.w	r3, r7, #20
 8009e32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e3a:	e054      	b.n	8009ee6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4a:	d103      	bne.n	8009e54 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e50:	627b      	str	r3, [r7, #36]	; 0x24
 8009e52:	e009      	b.n	8009e68 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d006      	beq.n	8009e68 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <osMessageGet+0x5c>
      ticks = 1;
 8009e64:	2301      	movs	r3, #1
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009e68:	f7ff feee 	bl	8009c48 <inHandlerMode>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d01c      	beq.n	8009eac <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009e72:	f107 0220 	add.w	r2, r7, #32
 8009e76:	f107 0314 	add.w	r3, r7, #20
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	68b8      	ldr	r0, [r7, #8]
 8009e80:	f000 fc90 	bl	800a7a4 <xQueueReceiveFromISR>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d102      	bne.n	8009e90 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009e8a:	2310      	movs	r3, #16
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	e001      	b.n	8009e94 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01d      	beq.n	8009ed6 <osMessageGet+0xca>
 8009e9a:	4b15      	ldr	r3, [pc, #84]	; (8009ef0 <osMessageGet+0xe4>)
 8009e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	e014      	b.n	8009ed6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009eac:	f107 0314 	add.w	r3, r7, #20
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	68b8      	ldr	r0, [r7, #8]
 8009eb8:	f000 fb98 	bl	800a5ec <xQueueReceive>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d102      	bne.n	8009ec8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009ec2:	2310      	movs	r3, #16
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	e006      	b.n	8009ed6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <osMessageGet+0xc6>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e000      	b.n	8009ed4 <osMessageGet+0xc8>
 8009ed2:	2340      	movs	r3, #64	; 0x40
 8009ed4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	461c      	mov	r4, r3
 8009eda:	f107 0314 	add.w	r3, r7, #20
 8009ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	372c      	adds	r7, #44	; 0x2c
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd90      	pop	{r4, r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	e000ed04 	.word	0xe000ed04

08009ef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f103 0208 	add.w	r2, r3, #8
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f103 0208 	add.w	r2, r3, #8
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f103 0208 	add.w	r2, r3, #8
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b085      	sub	sp, #20
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	1c5a      	adds	r2, r3, #1
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	601a      	str	r2, [r3, #0]
}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f96:	b480      	push	{r7}
 8009f98:	b085      	sub	sp, #20
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fac:	d103      	bne.n	8009fb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e00c      	b.n	8009fd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	e002      	b.n	8009fc4 <vListInsert+0x2e>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d2f6      	bcs.n	8009fbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	601a      	str	r2, [r3, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6892      	ldr	r2, [r2, #8]
 800a01e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	6852      	ldr	r2, [r2, #4]
 800a028:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	429a      	cmp	r2, r3
 800a032:	d103      	bne.n	800a03c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	689a      	ldr	r2, [r3, #8]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	1e5a      	subs	r2, r3, #1
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	60bb      	str	r3, [r7, #8]
 800a082:	e7fe      	b.n	800a082 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a084:	f001 fd32 	bl	800baec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a090:	68f9      	ldr	r1, [r7, #12]
 800a092:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a094:	fb01 f303 	mul.w	r3, r1, r3
 800a098:	441a      	add	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	68f9      	ldr	r1, [r7, #12]
 800a0b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0ba:	fb01 f303 	mul.w	r3, r1, r3
 800a0be:	441a      	add	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	22ff      	movs	r2, #255	; 0xff
 800a0c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	22ff      	movs	r2, #255	; 0xff
 800a0d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d114      	bne.n	800a104 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d01a      	beq.n	800a118 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3310      	adds	r3, #16
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 f91c 	bl	800b324 <xTaskRemoveFromEventList>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d012      	beq.n	800a118 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0f2:	4b0d      	ldr	r3, [pc, #52]	; (800a128 <xQueueGenericReset+0xcc>)
 800a0f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	e009      	b.n	800a118 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3310      	adds	r3, #16
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff fef3 	bl	8009ef4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	3324      	adds	r3, #36	; 0x24
 800a112:	4618      	mov	r0, r3
 800a114:	f7ff feee 	bl	8009ef4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a118:	f001 fd16 	bl	800bb48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a11c:	2301      	movs	r3, #1
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	e000ed04 	.word	0xe000ed04

0800a12c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08e      	sub	sp, #56	; 0x38
 800a130:	af02      	add	r7, sp, #8
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d109      	bne.n	800a154 <xQueueGenericCreateStatic+0x28>
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	62bb      	str	r3, [r7, #40]	; 0x28
 800a152:	e7fe      	b.n	800a152 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d109      	bne.n	800a16e <xQueueGenericCreateStatic+0x42>
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
 800a16c:	e7fe      	b.n	800a16c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <xQueueGenericCreateStatic+0x4e>
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <xQueueGenericCreateStatic+0x52>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e000      	b.n	800a180 <xQueueGenericCreateStatic+0x54>
 800a17e:	2300      	movs	r3, #0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d109      	bne.n	800a198 <xQueueGenericCreateStatic+0x6c>
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	623b      	str	r3, [r7, #32]
 800a196:	e7fe      	b.n	800a196 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d102      	bne.n	800a1a4 <xQueueGenericCreateStatic+0x78>
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <xQueueGenericCreateStatic+0x7c>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e000      	b.n	800a1aa <xQueueGenericCreateStatic+0x7e>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d109      	bne.n	800a1c2 <xQueueGenericCreateStatic+0x96>
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	61fb      	str	r3, [r7, #28]
 800a1c0:	e7fe      	b.n	800a1c0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1c2:	2348      	movs	r3, #72	; 0x48
 800a1c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	2b48      	cmp	r3, #72	; 0x48
 800a1ca:	d009      	beq.n	800a1e0 <xQueueGenericCreateStatic+0xb4>
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	61bb      	str	r3, [r7, #24]
 800a1de:	e7fe      	b.n	800a1de <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00d      	beq.n	800a208 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	68b9      	ldr	r1, [r7, #8]
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 f844 	bl	800a290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3730      	adds	r7, #48	; 0x30
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a212:	b580      	push	{r7, lr}
 800a214:	b08a      	sub	sp, #40	; 0x28
 800a216:	af02      	add	r7, sp, #8
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	4613      	mov	r3, r2
 800a21e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <xQueueGenericCreate+0x28>
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	613b      	str	r3, [r7, #16]
 800a238:	e7fe      	b.n	800a238 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d102      	bne.n	800a246 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a240:	2300      	movs	r3, #0
 800a242:	61fb      	str	r3, [r7, #28]
 800a244:	e004      	b.n	800a250 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	fb02 f303 	mul.w	r3, r2, r3
 800a24e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	3348      	adds	r3, #72	; 0x48
 800a254:	4618      	mov	r0, r3
 800a256:	f001 fd63 	bl	800bd20 <pvPortMalloc>
 800a25a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d011      	beq.n	800a286 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	3348      	adds	r3, #72	; 0x48
 800a26a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a274:	79fa      	ldrb	r2, [r7, #7]
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	4613      	mov	r3, r2
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 f805 	bl	800a290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a286:	69bb      	ldr	r3, [r7, #24]
	}
 800a288:	4618      	mov	r0, r3
 800a28a:	3720      	adds	r7, #32
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
 800a29c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d103      	bne.n	800a2ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	e002      	b.n	800a2b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2be:	2101      	movs	r1, #1
 800a2c0:	69b8      	ldr	r0, [r7, #24]
 800a2c2:	f7ff fecb 	bl	800a05c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2c6:	bf00      	nop
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b08e      	sub	sp, #56	; 0x38
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d109      	bne.n	800a300 <xQueueGenericSend+0x30>
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2fe:	e7fe      	b.n	800a2fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d103      	bne.n	800a30e <xQueueGenericSend+0x3e>
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <xQueueGenericSend+0x42>
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <xQueueGenericSend+0x44>
 800a312:	2300      	movs	r3, #0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d109      	bne.n	800a32c <xQueueGenericSend+0x5c>
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
 800a32a:	e7fe      	b.n	800a32a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d103      	bne.n	800a33a <xQueueGenericSend+0x6a>
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a336:	2b01      	cmp	r3, #1
 800a338:	d101      	bne.n	800a33e <xQueueGenericSend+0x6e>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <xQueueGenericSend+0x70>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d109      	bne.n	800a358 <xQueueGenericSend+0x88>
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	623b      	str	r3, [r7, #32]
 800a356:	e7fe      	b.n	800a356 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a358:	f001 f99c 	bl	800b694 <xTaskGetSchedulerState>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d102      	bne.n	800a368 <xQueueGenericSend+0x98>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <xQueueGenericSend+0x9c>
 800a368:	2301      	movs	r3, #1
 800a36a:	e000      	b.n	800a36e <xQueueGenericSend+0x9e>
 800a36c:	2300      	movs	r3, #0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d109      	bne.n	800a386 <xQueueGenericSend+0xb6>
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	e7fe      	b.n	800a384 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a386:	f001 fbb1 	bl	800baec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a392:	429a      	cmp	r2, r3
 800a394:	d302      	bcc.n	800a39c <xQueueGenericSend+0xcc>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d129      	bne.n	800a3f0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	68b9      	ldr	r1, [r7, #8]
 800a3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3a2:	f000 fa7c 	bl	800a89e <prvCopyDataToQueue>
 800a3a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d010      	beq.n	800a3d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	3324      	adds	r3, #36	; 0x24
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 ffb5 	bl	800b324 <xTaskRemoveFromEventList>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d013      	beq.n	800a3e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3c0:	4b3f      	ldr	r3, [pc, #252]	; (800a4c0 <xQueueGenericSend+0x1f0>)
 800a3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	e00a      	b.n	800a3e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d007      	beq.n	800a3e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3d8:	4b39      	ldr	r3, [pc, #228]	; (800a4c0 <xQueueGenericSend+0x1f0>)
 800a3da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3e8:	f001 fbae 	bl	800bb48 <vPortExitCritical>
				return pdPASS;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e063      	b.n	800a4b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d103      	bne.n	800a3fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3f6:	f001 fba7 	bl	800bb48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	e05c      	b.n	800a4b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a404:	f107 0314 	add.w	r3, r7, #20
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 ffed 	bl	800b3e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a40e:	2301      	movs	r3, #1
 800a410:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a412:	f001 fb99 	bl	800bb48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a416:	f000 fd7f 	bl	800af18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a41a:	f001 fb67 	bl	800baec <vPortEnterCritical>
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a424:	b25b      	sxtb	r3, r3
 800a426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42a:	d103      	bne.n	800a434 <xQueueGenericSend+0x164>
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a43a:	b25b      	sxtb	r3, r3
 800a43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a440:	d103      	bne.n	800a44a <xQueueGenericSend+0x17a>
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a44a:	f001 fb7d 	bl	800bb48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a44e:	1d3a      	adds	r2, r7, #4
 800a450:	f107 0314 	add.w	r3, r7, #20
 800a454:	4611      	mov	r1, r2
 800a456:	4618      	mov	r0, r3
 800a458:	f000 ffdc 	bl	800b414 <xTaskCheckForTimeOut>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d124      	bne.n	800a4ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a464:	f000 fb13 	bl	800aa8e <prvIsQueueFull>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d018      	beq.n	800a4a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a470:	3310      	adds	r3, #16
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	4611      	mov	r1, r2
 800a476:	4618      	mov	r0, r3
 800a478:	f000 ff30 	bl	800b2dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a47e:	f000 fa9e 	bl	800a9be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a482:	f000 fd57 	bl	800af34 <xTaskResumeAll>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f47f af7c 	bne.w	800a386 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <xQueueGenericSend+0x1f0>)
 800a490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	e772      	b.n	800a386 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4a2:	f000 fa8c 	bl	800a9be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4a6:	f000 fd45 	bl	800af34 <xTaskResumeAll>
 800a4aa:	e76c      	b.n	800a386 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4ae:	f000 fa86 	bl	800a9be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4b2:	f000 fd3f 	bl	800af34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3738      	adds	r7, #56	; 0x38
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	e000ed04 	.word	0xe000ed04

0800a4c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b08e      	sub	sp, #56	; 0x38
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d109      	bne.n	800a4f0 <xQueueGenericSendFromISR+0x2c>
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ee:	e7fe      	b.n	800a4ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d103      	bne.n	800a4fe <xQueueGenericSendFromISR+0x3a>
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <xQueueGenericSendFromISR+0x3e>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e000      	b.n	800a504 <xQueueGenericSendFromISR+0x40>
 800a502:	2300      	movs	r3, #0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d109      	bne.n	800a51c <xQueueGenericSendFromISR+0x58>
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	623b      	str	r3, [r7, #32]
 800a51a:	e7fe      	b.n	800a51a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d103      	bne.n	800a52a <xQueueGenericSendFromISR+0x66>
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a526:	2b01      	cmp	r3, #1
 800a528:	d101      	bne.n	800a52e <xQueueGenericSendFromISR+0x6a>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <xQueueGenericSendFromISR+0x6c>
 800a52e:	2300      	movs	r3, #0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d109      	bne.n	800a548 <xQueueGenericSendFromISR+0x84>
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	61fb      	str	r3, [r7, #28]
 800a546:	e7fe      	b.n	800a546 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a548:	f001 fbac 	bl	800bca4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a54c:	f3ef 8211 	mrs	r2, BASEPRI
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	61ba      	str	r2, [r7, #24]
 800a562:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a564:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a566:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a570:	429a      	cmp	r2, r3
 800a572:	d302      	bcc.n	800a57a <xQueueGenericSendFromISR+0xb6>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b02      	cmp	r3, #2
 800a578:	d12c      	bne.n	800a5d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	68b9      	ldr	r1, [r7, #8]
 800a588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a58a:	f000 f988 	bl	800a89e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a58e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a596:	d112      	bne.n	800a5be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d016      	beq.n	800a5ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a2:	3324      	adds	r3, #36	; 0x24
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 febd 	bl	800b324 <xTaskRemoveFromEventList>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00e      	beq.n	800a5ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00b      	beq.n	800a5ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	e007      	b.n	800a5ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	b25a      	sxtb	r2, r3
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a5d2:	e001      	b.n	800a5d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3738      	adds	r7, #56	; 0x38
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08c      	sub	sp, #48	; 0x30
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	2b00      	cmp	r3, #0
 800a604:	d109      	bne.n	800a61a <xQueueReceive+0x2e>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	623b      	str	r3, [r7, #32]
 800a618:	e7fe      	b.n	800a618 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d103      	bne.n	800a628 <xQueueReceive+0x3c>
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <xQueueReceive+0x40>
 800a628:	2301      	movs	r3, #1
 800a62a:	e000      	b.n	800a62e <xQueueReceive+0x42>
 800a62c:	2300      	movs	r3, #0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d109      	bne.n	800a646 <xQueueReceive+0x5a>
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	61fb      	str	r3, [r7, #28]
 800a644:	e7fe      	b.n	800a644 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a646:	f001 f825 	bl	800b694 <xTaskGetSchedulerState>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d102      	bne.n	800a656 <xQueueReceive+0x6a>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <xQueueReceive+0x6e>
 800a656:	2301      	movs	r3, #1
 800a658:	e000      	b.n	800a65c <xQueueReceive+0x70>
 800a65a:	2300      	movs	r3, #0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d109      	bne.n	800a674 <xQueueReceive+0x88>
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	61bb      	str	r3, [r7, #24]
 800a672:	e7fe      	b.n	800a672 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a674:	f001 fa3a 	bl	800baec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d01f      	beq.n	800a6c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a684:	68b9      	ldr	r1, [r7, #8]
 800a686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a688:	f000 f973 	bl	800a972 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	1e5a      	subs	r2, r3, #1
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00f      	beq.n	800a6bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	3310      	adds	r3, #16
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 fe3f 	bl	800b324 <xTaskRemoveFromEventList>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d007      	beq.n	800a6bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6ac:	4b3c      	ldr	r3, [pc, #240]	; (800a7a0 <xQueueReceive+0x1b4>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6bc:	f001 fa44 	bl	800bb48 <vPortExitCritical>
				return pdPASS;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e069      	b.n	800a798 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d103      	bne.n	800a6d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6ca:	f001 fa3d 	bl	800bb48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e062      	b.n	800a798 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d8:	f107 0310 	add.w	r3, r7, #16
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 fe83 	bl	800b3e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e6:	f001 fa2f 	bl	800bb48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ea:	f000 fc15 	bl	800af18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ee:	f001 f9fd 	bl	800baec <vPortEnterCritical>
 800a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f8:	b25b      	sxtb	r3, r3
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fe:	d103      	bne.n	800a708 <xQueueReceive+0x11c>
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a70e:	b25b      	sxtb	r3, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a714:	d103      	bne.n	800a71e <xQueueReceive+0x132>
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a71e:	f001 fa13 	bl	800bb48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a722:	1d3a      	adds	r2, r7, #4
 800a724:	f107 0310 	add.w	r3, r7, #16
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 fe72 	bl	800b414 <xTaskCheckForTimeOut>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d123      	bne.n	800a77e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a738:	f000 f993 	bl	800aa62 <prvIsQueueEmpty>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d017      	beq.n	800a772 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a744:	3324      	adds	r3, #36	; 0x24
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 fdc6 	bl	800b2dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a752:	f000 f934 	bl	800a9be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a756:	f000 fbed 	bl	800af34 <xTaskResumeAll>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d189      	bne.n	800a674 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a760:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <xQueueReceive+0x1b4>)
 800a762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a766:	601a      	str	r2, [r3, #0]
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	e780      	b.n	800a674 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a774:	f000 f923 	bl	800a9be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a778:	f000 fbdc 	bl	800af34 <xTaskResumeAll>
 800a77c:	e77a      	b.n	800a674 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a780:	f000 f91d 	bl	800a9be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a784:	f000 fbd6 	bl	800af34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a78a:	f000 f96a 	bl	800aa62 <prvIsQueueEmpty>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	f43f af6f 	beq.w	800a674 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a796:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3730      	adds	r7, #48	; 0x30
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	e000ed04 	.word	0xe000ed04

0800a7a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08e      	sub	sp, #56	; 0x38
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <xQueueReceiveFromISR+0x2a>
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	623b      	str	r3, [r7, #32]
 800a7cc:	e7fe      	b.n	800a7cc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d103      	bne.n	800a7dc <xQueueReceiveFromISR+0x38>
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <xQueueReceiveFromISR+0x3c>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e000      	b.n	800a7e2 <xQueueReceiveFromISR+0x3e>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d109      	bne.n	800a7fa <xQueueReceiveFromISR+0x56>
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	61fb      	str	r3, [r7, #28]
 800a7f8:	e7fe      	b.n	800a7f8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7fa:	f001 fa53 	bl	800bca4 <vPortValidateInterruptPriority>
	__asm volatile
 800a7fe:	f3ef 8211 	mrs	r2, BASEPRI
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	61ba      	str	r2, [r7, #24]
 800a814:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a816:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	2b00      	cmp	r3, #0
 800a824:	d02f      	beq.n	800a886 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a830:	68b9      	ldr	r1, [r7, #8]
 800a832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a834:	f000 f89d 	bl	800a972 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	1e5a      	subs	r2, r3, #1
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a848:	d112      	bne.n	800a870 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d016      	beq.n	800a880 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	3310      	adds	r3, #16
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fd64 	bl	800b324 <xTaskRemoveFromEventList>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00e      	beq.n	800a880 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00b      	beq.n	800a880 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	e007      	b.n	800a880 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a874:	3301      	adds	r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	b25a      	sxtb	r2, r3
 800a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a880:	2301      	movs	r3, #1
 800a882:	637b      	str	r3, [r7, #52]	; 0x34
 800a884:	e001      	b.n	800a88a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a886:	2300      	movs	r3, #0
 800a888:	637b      	str	r3, [r7, #52]	; 0x34
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a896:	4618      	mov	r0, r3
 800a898:	3738      	adds	r7, #56	; 0x38
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b086      	sub	sp, #24
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	60f8      	str	r0, [r7, #12]
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10d      	bne.n	800a8d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d14d      	bne.n	800a960 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 ff01 	bl	800b6d0 <xTaskPriorityDisinherit>
 800a8ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	609a      	str	r2, [r3, #8]
 800a8d6:	e043      	b.n	800a960 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d119      	bne.n	800a912 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6858      	ldr	r0, [r3, #4]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	68b9      	ldr	r1, [r7, #8]
 800a8ea:	f001 ff35 	bl	800c758 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	685a      	ldr	r2, [r3, #4]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	441a      	add	r2, r3
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	429a      	cmp	r2, r3
 800a906:	d32b      	bcc.n	800a960 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	605a      	str	r2, [r3, #4]
 800a910:	e026      	b.n	800a960 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	68d8      	ldr	r0, [r3, #12]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91a:	461a      	mov	r2, r3
 800a91c:	68b9      	ldr	r1, [r7, #8]
 800a91e:	f001 ff1b 	bl	800c758 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92a:	425b      	negs	r3, r3
 800a92c:	441a      	add	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d207      	bcs.n	800a94e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	689a      	ldr	r2, [r3, #8]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a946:	425b      	negs	r3, r3
 800a948:	441a      	add	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2b02      	cmp	r3, #2
 800a952:	d105      	bne.n	800a960 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a968:	697b      	ldr	r3, [r7, #20]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3718      	adds	r7, #24
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a980:	2b00      	cmp	r3, #0
 800a982:	d018      	beq.n	800a9b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68da      	ldr	r2, [r3, #12]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98c:	441a      	add	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d303      	bcc.n	800a9a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68d9      	ldr	r1, [r3, #12]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	6838      	ldr	r0, [r7, #0]
 800a9b2:	f001 fed1 	bl	800c758 <memcpy>
	}
}
 800a9b6:	bf00      	nop
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a9c6:	f001 f891 	bl	800baec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9d2:	e011      	b.n	800a9f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d012      	beq.n	800aa02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3324      	adds	r3, #36	; 0x24
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 fc9f 	bl	800b324 <xTaskRemoveFromEventList>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9ec:	f000 fd72 	bl	800b4d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dce9      	bgt.n	800a9d4 <prvUnlockQueue+0x16>
 800aa00:	e000      	b.n	800aa04 <prvUnlockQueue+0x46>
					break;
 800aa02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	22ff      	movs	r2, #255	; 0xff
 800aa08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa0c:	f001 f89c 	bl	800bb48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa10:	f001 f86c 	bl	800baec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa1c:	e011      	b.n	800aa42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d012      	beq.n	800aa4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	3310      	adds	r3, #16
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fc7a 	bl	800b324 <xTaskRemoveFromEventList>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa36:	f000 fd4d 	bl	800b4d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	dce9      	bgt.n	800aa1e <prvUnlockQueue+0x60>
 800aa4a:	e000      	b.n	800aa4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	22ff      	movs	r2, #255	; 0xff
 800aa52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa56:	f001 f877 	bl	800bb48 <vPortExitCritical>
}
 800aa5a:	bf00      	nop
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa6a:	f001 f83f 	bl	800baec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d102      	bne.n	800aa7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa76:	2301      	movs	r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	e001      	b.n	800aa80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa80:	f001 f862 	bl	800bb48 <vPortExitCritical>

	return xReturn;
 800aa84:	68fb      	ldr	r3, [r7, #12]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa96:	f001 f829 	bl	800baec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d102      	bne.n	800aaac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	e001      	b.n	800aab0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aaac:	2300      	movs	r3, #0
 800aaae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aab0:	f001 f84a 	bl	800bb48 <vPortExitCritical>

	return xReturn;
 800aab4:	68fb      	ldr	r3, [r7, #12]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b08e      	sub	sp, #56	; 0x38
 800aac2:	af04      	add	r7, sp, #16
 800aac4:	60f8      	str	r0, [r7, #12]
 800aac6:	60b9      	str	r1, [r7, #8]
 800aac8:	607a      	str	r2, [r7, #4]
 800aaca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d109      	bne.n	800aae6 <xTaskCreateStatic+0x28>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	623b      	str	r3, [r7, #32]
 800aae4:	e7fe      	b.n	800aae4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800aae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d109      	bne.n	800ab00 <xTaskCreateStatic+0x42>
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	61fb      	str	r3, [r7, #28]
 800aafe:	e7fe      	b.n	800aafe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab00:	2358      	movs	r3, #88	; 0x58
 800ab02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	2b58      	cmp	r3, #88	; 0x58
 800ab08:	d009      	beq.n	800ab1e <xTaskCreateStatic+0x60>
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	61bb      	str	r3, [r7, #24]
 800ab1c:	e7fe      	b.n	800ab1c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d01e      	beq.n	800ab64 <xTaskCreateStatic+0xa6>
 800ab26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d01b      	beq.n	800ab64 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	2202      	movs	r2, #2
 800ab3a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab3e:	2300      	movs	r3, #0
 800ab40:	9303      	str	r3, [sp, #12]
 800ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab44:	9302      	str	r3, [sp, #8]
 800ab46:	f107 0314 	add.w	r3, r7, #20
 800ab4a:	9301      	str	r3, [sp, #4]
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	68b9      	ldr	r1, [r7, #8]
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f000 f850 	bl	800abfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab5e:	f000 f8df 	bl	800ad20 <prvAddNewTaskToReadyList>
 800ab62:	e001      	b.n	800ab68 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ab64:	2300      	movs	r3, #0
 800ab66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab68:	697b      	ldr	r3, [r7, #20]
	}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3728      	adds	r7, #40	; 0x28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b08c      	sub	sp, #48	; 0x30
 800ab76:	af04      	add	r7, sp, #16
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	603b      	str	r3, [r7, #0]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab82:	88fb      	ldrh	r3, [r7, #6]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4618      	mov	r0, r3
 800ab88:	f001 f8ca 	bl	800bd20 <pvPortMalloc>
 800ab8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00e      	beq.n	800abb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab94:	2058      	movs	r0, #88	; 0x58
 800ab96:	f001 f8c3 	bl	800bd20 <pvPortMalloc>
 800ab9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	697a      	ldr	r2, [r7, #20]
 800aba6:	631a      	str	r2, [r3, #48]	; 0x30
 800aba8:	e005      	b.n	800abb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abaa:	6978      	ldr	r0, [r7, #20]
 800abac:	f001 f97e 	bl	800beac <vPortFree>
 800abb0:	e001      	b.n	800abb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d017      	beq.n	800abec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abc4:	88fa      	ldrh	r2, [r7, #6]
 800abc6:	2300      	movs	r3, #0
 800abc8:	9303      	str	r3, [sp, #12]
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	9302      	str	r3, [sp, #8]
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f000 f80e 	bl	800abfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abe0:	69f8      	ldr	r0, [r7, #28]
 800abe2:	f000 f89d 	bl	800ad20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abe6:	2301      	movs	r3, #1
 800abe8:	61bb      	str	r3, [r7, #24]
 800abea:	e002      	b.n	800abf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abec:	f04f 33ff 	mov.w	r3, #4294967295
 800abf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abf2:	69bb      	ldr	r3, [r7, #24]
	}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3720      	adds	r7, #32
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	461a      	mov	r2, r3
 800ac14:	21a5      	movs	r1, #165	; 0xa5
 800ac16:	f001 fdaa 	bl	800c76e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac24:	3b01      	subs	r3, #1
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	f023 0307 	bic.w	r3, r3, #7
 800ac32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d009      	beq.n	800ac52 <prvInitialiseNewTask+0x56>
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	617b      	str	r3, [r7, #20]
 800ac50:	e7fe      	b.n	800ac50 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d01f      	beq.n	800ac98 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac58:	2300      	movs	r3, #0
 800ac5a:	61fb      	str	r3, [r7, #28]
 800ac5c:	e012      	b.n	800ac84 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	4413      	add	r3, r2
 800ac64:	7819      	ldrb	r1, [r3, #0]
 800ac66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	3334      	adds	r3, #52	; 0x34
 800ac6e:	460a      	mov	r2, r1
 800ac70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	4413      	add	r3, r2
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d006      	beq.n	800ac8c <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	3301      	adds	r3, #1
 800ac82:	61fb      	str	r3, [r7, #28]
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	2b0f      	cmp	r3, #15
 800ac88:	d9e9      	bls.n	800ac5e <prvInitialiseNewTask+0x62>
 800ac8a:	e000      	b.n	800ac8e <prvInitialiseNewTask+0x92>
			{
				break;
 800ac8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac96:	e003      	b.n	800aca0 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	2b06      	cmp	r3, #6
 800aca4:	d901      	bls.n	800acaa <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aca6:	2306      	movs	r3, #6
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	2200      	movs	r2, #0
 800acba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbe:	3304      	adds	r3, #4
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff f937 	bl	8009f34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc8:	3318      	adds	r3, #24
 800acca:	4618      	mov	r0, r3
 800accc:	f7ff f932 	bl	8009f34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	f1c3 0207 	rsb	r2, r3, #7
 800acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	2200      	movs	r2, #0
 800acea:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	2200      	movs	r2, #0
 800acf0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	68f9      	ldr	r1, [r7, #12]
 800acfe:	69b8      	ldr	r0, [r7, #24]
 800ad00:	f000 fdd0 	bl	800b8a4 <pxPortInitialiseStack>
 800ad04:	4602      	mov	r2, r0
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad16:	bf00      	nop
 800ad18:	3720      	adds	r7, #32
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad28:	f000 fee0 	bl	800baec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad2c:	4b2a      	ldr	r3, [pc, #168]	; (800add8 <prvAddNewTaskToReadyList+0xb8>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3301      	adds	r3, #1
 800ad32:	4a29      	ldr	r2, [pc, #164]	; (800add8 <prvAddNewTaskToReadyList+0xb8>)
 800ad34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad36:	4b29      	ldr	r3, [pc, #164]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad3e:	4a27      	ldr	r2, [pc, #156]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad44:	4b24      	ldr	r3, [pc, #144]	; (800add8 <prvAddNewTaskToReadyList+0xb8>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d110      	bne.n	800ad6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad4c:	f000 fbe8 	bl	800b520 <prvInitialiseTaskLists>
 800ad50:	e00d      	b.n	800ad6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad52:	4b23      	ldr	r3, [pc, #140]	; (800ade0 <prvAddNewTaskToReadyList+0xc0>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d109      	bne.n	800ad6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad5a:	4b20      	ldr	r3, [pc, #128]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d802      	bhi.n	800ad6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad68:	4a1c      	ldr	r2, [pc, #112]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad6e:	4b1d      	ldr	r3, [pc, #116]	; (800ade4 <prvAddNewTaskToReadyList+0xc4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	4a1b      	ldr	r2, [pc, #108]	; (800ade4 <prvAddNewTaskToReadyList+0xc4>)
 800ad76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	409a      	lsls	r2, r3
 800ad80:	4b19      	ldr	r3, [pc, #100]	; (800ade8 <prvAddNewTaskToReadyList+0xc8>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	4a18      	ldr	r2, [pc, #96]	; (800ade8 <prvAddNewTaskToReadyList+0xc8>)
 800ad88:	6013      	str	r3, [r2, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4a15      	ldr	r2, [pc, #84]	; (800adec <prvAddNewTaskToReadyList+0xcc>)
 800ad98:	441a      	add	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4610      	mov	r0, r2
 800ada2:	f7ff f8d4 	bl	8009f4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ada6:	f000 fecf 	bl	800bb48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800adaa:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <prvAddNewTaskToReadyList+0xc0>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00e      	beq.n	800add0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adb2:	4b0a      	ldr	r3, [pc, #40]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d207      	bcs.n	800add0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adc0:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <prvAddNewTaskToReadyList+0xd0>)
 800adc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	20000414 	.word	0x20000414
 800addc:	20000314 	.word	0x20000314
 800ade0:	20000420 	.word	0x20000420
 800ade4:	20000430 	.word	0x20000430
 800ade8:	2000041c 	.word	0x2000041c
 800adec:	20000318 	.word	0x20000318
 800adf0:	e000ed04 	.word	0xe000ed04

0800adf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adfc:	2300      	movs	r3, #0
 800adfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d016      	beq.n	800ae34 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae06:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <vTaskDelay+0x60>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d009      	beq.n	800ae22 <vTaskDelay+0x2e>
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	60bb      	str	r3, [r7, #8]
 800ae20:	e7fe      	b.n	800ae20 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ae22:	f000 f879 	bl	800af18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae26:	2100      	movs	r1, #0
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fcd5 	bl	800b7d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae2e:	f000 f881 	bl	800af34 <xTaskResumeAll>
 800ae32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d107      	bne.n	800ae4a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ae3a:	4b07      	ldr	r3, [pc, #28]	; (800ae58 <vTaskDelay+0x64>)
 800ae3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae4a:	bf00      	nop
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	2000043c 	.word	0x2000043c
 800ae58:	e000ed04 	.word	0xe000ed04

0800ae5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b08a      	sub	sp, #40	; 0x28
 800ae60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae6a:	463a      	mov	r2, r7
 800ae6c:	1d39      	adds	r1, r7, #4
 800ae6e:	f107 0308 	add.w	r3, r7, #8
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7f5 fb56 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	9202      	str	r2, [sp, #8]
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	2300      	movs	r3, #0
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	2300      	movs	r3, #0
 800ae88:	460a      	mov	r2, r1
 800ae8a:	491d      	ldr	r1, [pc, #116]	; (800af00 <vTaskStartScheduler+0xa4>)
 800ae8c:	481d      	ldr	r0, [pc, #116]	; (800af04 <vTaskStartScheduler+0xa8>)
 800ae8e:	f7ff fe16 	bl	800aabe <xTaskCreateStatic>
 800ae92:	4602      	mov	r2, r0
 800ae94:	4b1c      	ldr	r3, [pc, #112]	; (800af08 <vTaskStartScheduler+0xac>)
 800ae96:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae98:	4b1b      	ldr	r3, [pc, #108]	; (800af08 <vTaskStartScheduler+0xac>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aea0:	2301      	movs	r3, #1
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e001      	b.n	800aeaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d115      	bne.n	800aedc <vTaskStartScheduler+0x80>
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aec2:	4b12      	ldr	r3, [pc, #72]	; (800af0c <vTaskStartScheduler+0xb0>)
 800aec4:	f04f 32ff 	mov.w	r2, #4294967295
 800aec8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aeca:	4b11      	ldr	r3, [pc, #68]	; (800af10 <vTaskStartScheduler+0xb4>)
 800aecc:	2201      	movs	r2, #1
 800aece:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aed0:	4b10      	ldr	r3, [pc, #64]	; (800af14 <vTaskStartScheduler+0xb8>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aed6:	f000 fd6b 	bl	800b9b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aeda:	e00d      	b.n	800aef8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee2:	d109      	bne.n	800aef8 <vTaskStartScheduler+0x9c>
 800aee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	60fb      	str	r3, [r7, #12]
 800aef6:	e7fe      	b.n	800aef6 <vTaskStartScheduler+0x9a>
}
 800aef8:	bf00      	nop
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	0800c970 	.word	0x0800c970
 800af04:	0800b4ed 	.word	0x0800b4ed
 800af08:	20000438 	.word	0x20000438
 800af0c:	20000434 	.word	0x20000434
 800af10:	20000420 	.word	0x20000420
 800af14:	20000418 	.word	0x20000418

0800af18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af18:	b480      	push	{r7}
 800af1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800af1c:	4b04      	ldr	r3, [pc, #16]	; (800af30 <vTaskSuspendAll+0x18>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3301      	adds	r3, #1
 800af22:	4a03      	ldr	r2, [pc, #12]	; (800af30 <vTaskSuspendAll+0x18>)
 800af24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800af26:	bf00      	nop
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	2000043c 	.word	0x2000043c

0800af34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af3e:	2300      	movs	r3, #0
 800af40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af42:	4b41      	ldr	r3, [pc, #260]	; (800b048 <xTaskResumeAll+0x114>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d109      	bne.n	800af5e <xTaskResumeAll+0x2a>
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	e7fe      	b.n	800af5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af5e:	f000 fdc5 	bl	800baec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af62:	4b39      	ldr	r3, [pc, #228]	; (800b048 <xTaskResumeAll+0x114>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3b01      	subs	r3, #1
 800af68:	4a37      	ldr	r2, [pc, #220]	; (800b048 <xTaskResumeAll+0x114>)
 800af6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af6c:	4b36      	ldr	r3, [pc, #216]	; (800b048 <xTaskResumeAll+0x114>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d161      	bne.n	800b038 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af74:	4b35      	ldr	r3, [pc, #212]	; (800b04c <xTaskResumeAll+0x118>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d05d      	beq.n	800b038 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af7c:	e02e      	b.n	800afdc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af7e:	4b34      	ldr	r3, [pc, #208]	; (800b050 <xTaskResumeAll+0x11c>)
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3318      	adds	r3, #24
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff f83c 	bl	800a008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3304      	adds	r3, #4
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff f837 	bl	800a008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9e:	2201      	movs	r2, #1
 800afa0:	409a      	lsls	r2, r3
 800afa2:	4b2c      	ldr	r3, [pc, #176]	; (800b054 <xTaskResumeAll+0x120>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	4a2a      	ldr	r2, [pc, #168]	; (800b054 <xTaskResumeAll+0x120>)
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb0:	4613      	mov	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4a27      	ldr	r2, [pc, #156]	; (800b058 <xTaskResumeAll+0x124>)
 800afba:	441a      	add	r2, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	3304      	adds	r3, #4
 800afc0:	4619      	mov	r1, r3
 800afc2:	4610      	mov	r0, r2
 800afc4:	f7fe ffc3 	bl	8009f4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afcc:	4b23      	ldr	r3, [pc, #140]	; (800b05c <xTaskResumeAll+0x128>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d302      	bcc.n	800afdc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800afd6:	4b22      	ldr	r3, [pc, #136]	; (800b060 <xTaskResumeAll+0x12c>)
 800afd8:	2201      	movs	r2, #1
 800afda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afdc:	4b1c      	ldr	r3, [pc, #112]	; (800b050 <xTaskResumeAll+0x11c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1cc      	bne.n	800af7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800afea:	f000 fb33 	bl	800b654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800afee:	4b1d      	ldr	r3, [pc, #116]	; (800b064 <xTaskResumeAll+0x130>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d010      	beq.n	800b01c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800affa:	f000 f837 	bl	800b06c <xTaskIncrementTick>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b004:	4b16      	ldr	r3, [pc, #88]	; (800b060 <xTaskResumeAll+0x12c>)
 800b006:	2201      	movs	r2, #1
 800b008:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	3b01      	subs	r3, #1
 800b00e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1f1      	bne.n	800affa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b016:	4b13      	ldr	r3, [pc, #76]	; (800b064 <xTaskResumeAll+0x130>)
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b01c:	4b10      	ldr	r3, [pc, #64]	; (800b060 <xTaskResumeAll+0x12c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d009      	beq.n	800b038 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b024:	2301      	movs	r3, #1
 800b026:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b028:	4b0f      	ldr	r3, [pc, #60]	; (800b068 <xTaskResumeAll+0x134>)
 800b02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b038:	f000 fd86 	bl	800bb48 <vPortExitCritical>

	return xAlreadyYielded;
 800b03c:	68bb      	ldr	r3, [r7, #8]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	2000043c 	.word	0x2000043c
 800b04c:	20000414 	.word	0x20000414
 800b050:	200003d4 	.word	0x200003d4
 800b054:	2000041c 	.word	0x2000041c
 800b058:	20000318 	.word	0x20000318
 800b05c:	20000314 	.word	0x20000314
 800b060:	20000428 	.word	0x20000428
 800b064:	20000424 	.word	0x20000424
 800b068:	e000ed04 	.word	0xe000ed04

0800b06c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b086      	sub	sp, #24
 800b070:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b072:	2300      	movs	r3, #0
 800b074:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b076:	4b4e      	ldr	r3, [pc, #312]	; (800b1b0 <xTaskIncrementTick+0x144>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f040 8087 	bne.w	800b18e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b080:	4b4c      	ldr	r3, [pc, #304]	; (800b1b4 <xTaskIncrementTick+0x148>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3301      	adds	r3, #1
 800b086:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b088:	4a4a      	ldr	r2, [pc, #296]	; (800b1b4 <xTaskIncrementTick+0x148>)
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d11f      	bne.n	800b0d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b094:	4b48      	ldr	r3, [pc, #288]	; (800b1b8 <xTaskIncrementTick+0x14c>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <xTaskIncrementTick+0x46>
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	e7fe      	b.n	800b0b0 <xTaskIncrementTick+0x44>
 800b0b2:	4b41      	ldr	r3, [pc, #260]	; (800b1b8 <xTaskIncrementTick+0x14c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	4b40      	ldr	r3, [pc, #256]	; (800b1bc <xTaskIncrementTick+0x150>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a3e      	ldr	r2, [pc, #248]	; (800b1b8 <xTaskIncrementTick+0x14c>)
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	4a3e      	ldr	r2, [pc, #248]	; (800b1bc <xTaskIncrementTick+0x150>)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	4b3e      	ldr	r3, [pc, #248]	; (800b1c0 <xTaskIncrementTick+0x154>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	4a3c      	ldr	r2, [pc, #240]	; (800b1c0 <xTaskIncrementTick+0x154>)
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	f000 fac0 	bl	800b654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0d4:	4b3b      	ldr	r3, [pc, #236]	; (800b1c4 <xTaskIncrementTick+0x158>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d348      	bcc.n	800b170 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0de:	4b36      	ldr	r3, [pc, #216]	; (800b1b8 <xTaskIncrementTick+0x14c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d104      	bne.n	800b0f2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0e8:	4b36      	ldr	r3, [pc, #216]	; (800b1c4 <xTaskIncrementTick+0x158>)
 800b0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ee:	601a      	str	r2, [r3, #0]
					break;
 800b0f0:	e03e      	b.n	800b170 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0f2:	4b31      	ldr	r3, [pc, #196]	; (800b1b8 <xTaskIncrementTick+0x14c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	429a      	cmp	r2, r3
 800b108:	d203      	bcs.n	800b112 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b10a:	4a2e      	ldr	r2, [pc, #184]	; (800b1c4 <xTaskIncrementTick+0x158>)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b110:	e02e      	b.n	800b170 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	3304      	adds	r3, #4
 800b116:	4618      	mov	r0, r3
 800b118:	f7fe ff76 	bl	800a008 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b120:	2b00      	cmp	r3, #0
 800b122:	d004      	beq.n	800b12e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	3318      	adds	r3, #24
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fe ff6d 	bl	800a008 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b132:	2201      	movs	r2, #1
 800b134:	409a      	lsls	r2, r3
 800b136:	4b24      	ldr	r3, [pc, #144]	; (800b1c8 <xTaskIncrementTick+0x15c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	4a22      	ldr	r2, [pc, #136]	; (800b1c8 <xTaskIncrementTick+0x15c>)
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b144:	4613      	mov	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4a1f      	ldr	r2, [pc, #124]	; (800b1cc <xTaskIncrementTick+0x160>)
 800b14e:	441a      	add	r2, r3
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	3304      	adds	r3, #4
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f7fe fef9 	bl	8009f4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <xTaskIncrementTick+0x164>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b166:	429a      	cmp	r2, r3
 800b168:	d3b9      	bcc.n	800b0de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b16a:	2301      	movs	r3, #1
 800b16c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b16e:	e7b6      	b.n	800b0de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b170:	4b17      	ldr	r3, [pc, #92]	; (800b1d0 <xTaskIncrementTick+0x164>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b176:	4915      	ldr	r1, [pc, #84]	; (800b1cc <xTaskIncrementTick+0x160>)
 800b178:	4613      	mov	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	440b      	add	r3, r1
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d907      	bls.n	800b198 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b188:	2301      	movs	r3, #1
 800b18a:	617b      	str	r3, [r7, #20]
 800b18c:	e004      	b.n	800b198 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b18e:	4b11      	ldr	r3, [pc, #68]	; (800b1d4 <xTaskIncrementTick+0x168>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	3301      	adds	r3, #1
 800b194:	4a0f      	ldr	r2, [pc, #60]	; (800b1d4 <xTaskIncrementTick+0x168>)
 800b196:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b198:	4b0f      	ldr	r3, [pc, #60]	; (800b1d8 <xTaskIncrementTick+0x16c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b1a4:	697b      	ldr	r3, [r7, #20]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	2000043c 	.word	0x2000043c
 800b1b4:	20000418 	.word	0x20000418
 800b1b8:	200003cc 	.word	0x200003cc
 800b1bc:	200003d0 	.word	0x200003d0
 800b1c0:	2000042c 	.word	0x2000042c
 800b1c4:	20000434 	.word	0x20000434
 800b1c8:	2000041c 	.word	0x2000041c
 800b1cc:	20000318 	.word	0x20000318
 800b1d0:	20000314 	.word	0x20000314
 800b1d4:	20000424 	.word	0x20000424
 800b1d8:	20000428 	.word	0x20000428

0800b1dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1e2:	4b39      	ldr	r3, [pc, #228]	; (800b2c8 <vTaskSwitchContext+0xec>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1ea:	4b38      	ldr	r3, [pc, #224]	; (800b2cc <vTaskSwitchContext+0xf0>)
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1f0:	e065      	b.n	800b2be <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800b1f2:	4b36      	ldr	r3, [pc, #216]	; (800b2cc <vTaskSwitchContext+0xf0>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b1f8:	4b35      	ldr	r3, [pc, #212]	; (800b2d0 <vTaskSwitchContext+0xf4>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1fe:	61fb      	str	r3, [r7, #28]
 800b200:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b204:	61bb      	str	r3, [r7, #24]
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	69ba      	ldr	r2, [r7, #24]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d111      	bne.n	800b234 <vTaskSwitchContext+0x58>
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	3304      	adds	r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d10b      	bne.n	800b234 <vTaskSwitchContext+0x58>
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	3308      	adds	r3, #8
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	429a      	cmp	r2, r3
 800b226:	d105      	bne.n	800b234 <vTaskSwitchContext+0x58>
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	330c      	adds	r3, #12
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	69ba      	ldr	r2, [r7, #24]
 800b230:	429a      	cmp	r2, r3
 800b232:	d008      	beq.n	800b246 <vTaskSwitchContext+0x6a>
 800b234:	4b26      	ldr	r3, [pc, #152]	; (800b2d0 <vTaskSwitchContext+0xf4>)
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	4b25      	ldr	r3, [pc, #148]	; (800b2d0 <vTaskSwitchContext+0xf4>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3334      	adds	r3, #52	; 0x34
 800b23e:	4619      	mov	r1, r3
 800b240:	4610      	mov	r0, r2
 800b242:	f7f5 f95c 	bl	80004fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b246:	4b23      	ldr	r3, [pc, #140]	; (800b2d4 <vTaskSwitchContext+0xf8>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	fab3 f383 	clz	r3, r3
 800b252:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b254:	7afb      	ldrb	r3, [r7, #11]
 800b256:	f1c3 031f 	rsb	r3, r3, #31
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	491e      	ldr	r1, [pc, #120]	; (800b2d8 <vTaskSwitchContext+0xfc>)
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	440b      	add	r3, r1
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d109      	bne.n	800b284 <vTaskSwitchContext+0xa8>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	607b      	str	r3, [r7, #4]
 800b282:	e7fe      	b.n	800b282 <vTaskSwitchContext+0xa6>
 800b284:	697a      	ldr	r2, [r7, #20]
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4a12      	ldr	r2, [pc, #72]	; (800b2d8 <vTaskSwitchContext+0xfc>)
 800b290:	4413      	add	r3, r2
 800b292:	613b      	str	r3, [r7, #16]
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	605a      	str	r2, [r3, #4]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	3308      	adds	r3, #8
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d104      	bne.n	800b2b4 <vTaskSwitchContext+0xd8>
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	605a      	str	r2, [r3, #4]
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	4a05      	ldr	r2, [pc, #20]	; (800b2d0 <vTaskSwitchContext+0xf4>)
 800b2bc:	6013      	str	r3, [r2, #0]
}
 800b2be:	bf00      	nop
 800b2c0:	3720      	adds	r7, #32
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	2000043c 	.word	0x2000043c
 800b2cc:	20000428 	.word	0x20000428
 800b2d0:	20000314 	.word	0x20000314
 800b2d4:	2000041c 	.word	0x2000041c
 800b2d8:	20000318 	.word	0x20000318

0800b2dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d109      	bne.n	800b300 <vTaskPlaceOnEventList+0x24>
 800b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	e7fe      	b.n	800b2fe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b300:	4b07      	ldr	r3, [pc, #28]	; (800b320 <vTaskPlaceOnEventList+0x44>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3318      	adds	r3, #24
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7fe fe44 	bl	8009f96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b30e:	2101      	movs	r1, #1
 800b310:	6838      	ldr	r0, [r7, #0]
 800b312:	f000 fa61 	bl	800b7d8 <prvAddCurrentTaskToDelayedList>
}
 800b316:	bf00      	nop
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20000314 	.word	0x20000314

0800b324 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d109      	bne.n	800b34e <xTaskRemoveFromEventList+0x2a>
 800b33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	e7fe      	b.n	800b34c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	3318      	adds	r3, #24
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fe58 	bl	800a008 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b358:	4b1d      	ldr	r3, [pc, #116]	; (800b3d0 <xTaskRemoveFromEventList+0xac>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d11c      	bne.n	800b39a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	3304      	adds	r3, #4
 800b364:	4618      	mov	r0, r3
 800b366:	f7fe fe4f 	bl	800a008 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36e:	2201      	movs	r2, #1
 800b370:	409a      	lsls	r2, r3
 800b372:	4b18      	ldr	r3, [pc, #96]	; (800b3d4 <xTaskRemoveFromEventList+0xb0>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4313      	orrs	r3, r2
 800b378:	4a16      	ldr	r2, [pc, #88]	; (800b3d4 <xTaskRemoveFromEventList+0xb0>)
 800b37a:	6013      	str	r3, [r2, #0]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b380:	4613      	mov	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	4a13      	ldr	r2, [pc, #76]	; (800b3d8 <xTaskRemoveFromEventList+0xb4>)
 800b38a:	441a      	add	r2, r3
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	3304      	adds	r3, #4
 800b390:	4619      	mov	r1, r3
 800b392:	4610      	mov	r0, r2
 800b394:	f7fe fddb 	bl	8009f4e <vListInsertEnd>
 800b398:	e005      	b.n	800b3a6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	3318      	adds	r3, #24
 800b39e:	4619      	mov	r1, r3
 800b3a0:	480e      	ldr	r0, [pc, #56]	; (800b3dc <xTaskRemoveFromEventList+0xb8>)
 800b3a2:	f7fe fdd4 	bl	8009f4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	; (800b3e0 <xTaskRemoveFromEventList+0xbc>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d905      	bls.n	800b3c0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3b8:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <xTaskRemoveFromEventList+0xc0>)
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	e001      	b.n	800b3c4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3c4:	697b      	ldr	r3, [r7, #20]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	2000043c 	.word	0x2000043c
 800b3d4:	2000041c 	.word	0x2000041c
 800b3d8:	20000318 	.word	0x20000318
 800b3dc:	200003d4 	.word	0x200003d4
 800b3e0:	20000314 	.word	0x20000314
 800b3e4:	20000428 	.word	0x20000428

0800b3e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3f0:	4b06      	ldr	r3, [pc, #24]	; (800b40c <vTaskInternalSetTimeOutState+0x24>)
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3f8:	4b05      	ldr	r3, [pc, #20]	; (800b410 <vTaskInternalSetTimeOutState+0x28>)
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	605a      	str	r2, [r3, #4]
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr
 800b40c:	2000042c 	.word	0x2000042c
 800b410:	20000418 	.word	0x20000418

0800b414 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d109      	bne.n	800b438 <xTaskCheckForTimeOut+0x24>
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	613b      	str	r3, [r7, #16]
 800b436:	e7fe      	b.n	800b436 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d109      	bne.n	800b452 <xTaskCheckForTimeOut+0x3e>
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	e7fe      	b.n	800b450 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b452:	f000 fb4b 	bl	800baec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b456:	4b1d      	ldr	r3, [pc, #116]	; (800b4cc <xTaskCheckForTimeOut+0xb8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46e:	d102      	bne.n	800b476 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b470:	2300      	movs	r3, #0
 800b472:	61fb      	str	r3, [r7, #28]
 800b474:	e023      	b.n	800b4be <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	4b15      	ldr	r3, [pc, #84]	; (800b4d0 <xTaskCheckForTimeOut+0xbc>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d007      	beq.n	800b492 <xTaskCheckForTimeOut+0x7e>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	69ba      	ldr	r2, [r7, #24]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d302      	bcc.n	800b492 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	61fb      	str	r3, [r7, #28]
 800b490:	e015      	b.n	800b4be <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d20b      	bcs.n	800b4b4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	1ad2      	subs	r2, r2, r3
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7ff ff9d 	bl	800b3e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	61fb      	str	r3, [r7, #28]
 800b4b2:	e004      	b.n	800b4be <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4be:	f000 fb43 	bl	800bb48 <vPortExitCritical>

	return xReturn;
 800b4c2:	69fb      	ldr	r3, [r7, #28]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3720      	adds	r7, #32
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	20000418 	.word	0x20000418
 800b4d0:	2000042c 	.word	0x2000042c

0800b4d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4d8:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <vTaskMissedYield+0x14>)
 800b4da:	2201      	movs	r2, #1
 800b4dc:	601a      	str	r2, [r3, #0]
}
 800b4de:	bf00      	nop
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	20000428 	.word	0x20000428

0800b4ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4f4:	f000 f854 	bl	800b5a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4f8:	4b07      	ldr	r3, [pc, #28]	; (800b518 <prvIdleTask+0x2c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d907      	bls.n	800b510 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b500:	4b06      	ldr	r3, [pc, #24]	; (800b51c <prvIdleTask+0x30>)
 800b502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b506:	601a      	str	r2, [r3, #0]
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b510:	f7f4 ffee 	bl	80004f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b514:	e7ee      	b.n	800b4f4 <prvIdleTask+0x8>
 800b516:	bf00      	nop
 800b518:	20000318 	.word	0x20000318
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b526:	2300      	movs	r3, #0
 800b528:	607b      	str	r3, [r7, #4]
 800b52a:	e00c      	b.n	800b546 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4a12      	ldr	r2, [pc, #72]	; (800b580 <prvInitialiseTaskLists+0x60>)
 800b538:	4413      	add	r3, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe fcda 	bl	8009ef4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3301      	adds	r3, #1
 800b544:	607b      	str	r3, [r7, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2b06      	cmp	r3, #6
 800b54a:	d9ef      	bls.n	800b52c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b54c:	480d      	ldr	r0, [pc, #52]	; (800b584 <prvInitialiseTaskLists+0x64>)
 800b54e:	f7fe fcd1 	bl	8009ef4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b552:	480d      	ldr	r0, [pc, #52]	; (800b588 <prvInitialiseTaskLists+0x68>)
 800b554:	f7fe fcce 	bl	8009ef4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b558:	480c      	ldr	r0, [pc, #48]	; (800b58c <prvInitialiseTaskLists+0x6c>)
 800b55a:	f7fe fccb 	bl	8009ef4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b55e:	480c      	ldr	r0, [pc, #48]	; (800b590 <prvInitialiseTaskLists+0x70>)
 800b560:	f7fe fcc8 	bl	8009ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b564:	480b      	ldr	r0, [pc, #44]	; (800b594 <prvInitialiseTaskLists+0x74>)
 800b566:	f7fe fcc5 	bl	8009ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b56a:	4b0b      	ldr	r3, [pc, #44]	; (800b598 <prvInitialiseTaskLists+0x78>)
 800b56c:	4a05      	ldr	r2, [pc, #20]	; (800b584 <prvInitialiseTaskLists+0x64>)
 800b56e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b570:	4b0a      	ldr	r3, [pc, #40]	; (800b59c <prvInitialiseTaskLists+0x7c>)
 800b572:	4a05      	ldr	r2, [pc, #20]	; (800b588 <prvInitialiseTaskLists+0x68>)
 800b574:	601a      	str	r2, [r3, #0]
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	20000318 	.word	0x20000318
 800b584:	200003a4 	.word	0x200003a4
 800b588:	200003b8 	.word	0x200003b8
 800b58c:	200003d4 	.word	0x200003d4
 800b590:	200003e8 	.word	0x200003e8
 800b594:	20000400 	.word	0x20000400
 800b598:	200003cc 	.word	0x200003cc
 800b59c:	200003d0 	.word	0x200003d0

0800b5a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5a6:	e019      	b.n	800b5dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5a8:	f000 faa0 	bl	800baec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ac:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <prvCheckTasksWaitingTermination+0x4c>)
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fe fd25 	bl	800a008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5be:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <prvCheckTasksWaitingTermination+0x50>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	4a0a      	ldr	r2, [pc, #40]	; (800b5f0 <prvCheckTasksWaitingTermination+0x50>)
 800b5c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5c8:	4b0a      	ldr	r3, [pc, #40]	; (800b5f4 <prvCheckTasksWaitingTermination+0x54>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	4a09      	ldr	r2, [pc, #36]	; (800b5f4 <prvCheckTasksWaitingTermination+0x54>)
 800b5d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5d2:	f000 fab9 	bl	800bb48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f80e 	bl	800b5f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5dc:	4b05      	ldr	r3, [pc, #20]	; (800b5f4 <prvCheckTasksWaitingTermination+0x54>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e1      	bne.n	800b5a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	200003e8 	.word	0x200003e8
 800b5f0:	20000414 	.word	0x20000414
 800b5f4:	200003fc 	.word	0x200003fc

0800b5f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b606:	2b00      	cmp	r3, #0
 800b608:	d108      	bne.n	800b61c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fc4c 	bl	800beac <vPortFree>
				vPortFree( pxTCB );
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fc49 	bl	800beac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b61a:	e017      	b.n	800b64c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b622:	2b01      	cmp	r3, #1
 800b624:	d103      	bne.n	800b62e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 fc40 	bl	800beac <vPortFree>
	}
 800b62c:	e00e      	b.n	800b64c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b634:	2b02      	cmp	r3, #2
 800b636:	d009      	beq.n	800b64c <prvDeleteTCB+0x54>
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	60fb      	str	r3, [r7, #12]
 800b64a:	e7fe      	b.n	800b64a <prvDeleteTCB+0x52>
	}
 800b64c:	bf00      	nop
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b65a:	4b0c      	ldr	r3, [pc, #48]	; (800b68c <prvResetNextTaskUnblockTime+0x38>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d104      	bne.n	800b66e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b664:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <prvResetNextTaskUnblockTime+0x3c>)
 800b666:	f04f 32ff 	mov.w	r2, #4294967295
 800b66a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b66c:	e008      	b.n	800b680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b66e:	4b07      	ldr	r3, [pc, #28]	; (800b68c <prvResetNextTaskUnblockTime+0x38>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	4a04      	ldr	r2, [pc, #16]	; (800b690 <prvResetNextTaskUnblockTime+0x3c>)
 800b67e:	6013      	str	r3, [r2, #0]
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	200003cc 	.word	0x200003cc
 800b690:	20000434 	.word	0x20000434

0800b694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b69a:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <xTaskGetSchedulerState+0x34>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d102      	bne.n	800b6a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	607b      	str	r3, [r7, #4]
 800b6a6:	e008      	b.n	800b6ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a8:	4b08      	ldr	r3, [pc, #32]	; (800b6cc <xTaskGetSchedulerState+0x38>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d102      	bne.n	800b6b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	607b      	str	r3, [r7, #4]
 800b6b4:	e001      	b.n	800b6ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6ba:	687b      	ldr	r3, [r7, #4]
	}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	20000420 	.word	0x20000420
 800b6cc:	2000043c 	.word	0x2000043c

0800b6d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d06c      	beq.n	800b7c0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6e6:	4b39      	ldr	r3, [pc, #228]	; (800b7cc <xTaskPriorityDisinherit+0xfc>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d009      	beq.n	800b704 <xTaskPriorityDisinherit+0x34>
 800b6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	e7fe      	b.n	800b702 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d109      	bne.n	800b720 <xTaskPriorityDisinherit+0x50>
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	60bb      	str	r3, [r7, #8]
 800b71e:	e7fe      	b.n	800b71e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b724:	1e5a      	subs	r2, r3, #1
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b732:	429a      	cmp	r2, r3
 800b734:	d044      	beq.n	800b7c0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d140      	bne.n	800b7c0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	3304      	adds	r3, #4
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe fc60 	bl	800a008 <uxListRemove>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d115      	bne.n	800b77a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b752:	491f      	ldr	r1, [pc, #124]	; (800b7d0 <xTaskPriorityDisinherit+0x100>)
 800b754:	4613      	mov	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	440b      	add	r3, r1
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <xTaskPriorityDisinherit+0xaa>
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	2201      	movs	r2, #1
 800b76a:	fa02 f303 	lsl.w	r3, r2, r3
 800b76e:	43da      	mvns	r2, r3
 800b770:	4b18      	ldr	r3, [pc, #96]	; (800b7d4 <xTaskPriorityDisinherit+0x104>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4013      	ands	r3, r2
 800b776:	4a17      	ldr	r2, [pc, #92]	; (800b7d4 <xTaskPriorityDisinherit+0x104>)
 800b778:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b786:	f1c3 0207 	rsb	r2, r3, #7
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b792:	2201      	movs	r2, #1
 800b794:	409a      	lsls	r2, r3
 800b796:	4b0f      	ldr	r3, [pc, #60]	; (800b7d4 <xTaskPriorityDisinherit+0x104>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	4a0d      	ldr	r2, [pc, #52]	; (800b7d4 <xTaskPriorityDisinherit+0x104>)
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4a08      	ldr	r2, [pc, #32]	; (800b7d0 <xTaskPriorityDisinherit+0x100>)
 800b7ae:	441a      	add	r2, r3
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4610      	mov	r0, r2
 800b7b8:	f7fe fbc9 	bl	8009f4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7c0:	697b      	ldr	r3, [r7, #20]
	}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3718      	adds	r7, #24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20000314 	.word	0x20000314
 800b7d0:	20000318 	.word	0x20000318
 800b7d4:	2000041c 	.word	0x2000041c

0800b7d8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7e2:	4b29      	ldr	r3, [pc, #164]	; (800b888 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7e8:	4b28      	ldr	r3, [pc, #160]	; (800b88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe fc0a 	bl	800a008 <uxListRemove>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10b      	bne.n	800b812 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b7fa:	4b24      	ldr	r3, [pc, #144]	; (800b88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	2201      	movs	r2, #1
 800b802:	fa02 f303 	lsl.w	r3, r2, r3
 800b806:	43da      	mvns	r2, r3
 800b808:	4b21      	ldr	r3, [pc, #132]	; (800b890 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4013      	ands	r3, r2
 800b80e:	4a20      	ldr	r2, [pc, #128]	; (800b890 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b810:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b818:	d10a      	bne.n	800b830 <prvAddCurrentTaskToDelayedList+0x58>
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d007      	beq.n	800b830 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b820:	4b1a      	ldr	r3, [pc, #104]	; (800b88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3304      	adds	r3, #4
 800b826:	4619      	mov	r1, r3
 800b828:	481a      	ldr	r0, [pc, #104]	; (800b894 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b82a:	f7fe fb90 	bl	8009f4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b82e:	e026      	b.n	800b87e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4413      	add	r3, r2
 800b836:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b838:	4b14      	ldr	r3, [pc, #80]	; (800b88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	429a      	cmp	r2, r3
 800b846:	d209      	bcs.n	800b85c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b848:	4b13      	ldr	r3, [pc, #76]	; (800b898 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	4b0f      	ldr	r3, [pc, #60]	; (800b88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3304      	adds	r3, #4
 800b852:	4619      	mov	r1, r3
 800b854:	4610      	mov	r0, r2
 800b856:	f7fe fb9e 	bl	8009f96 <vListInsert>
}
 800b85a:	e010      	b.n	800b87e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b85c:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3304      	adds	r3, #4
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f7fe fb94 	bl	8009f96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b86e:	4b0c      	ldr	r3, [pc, #48]	; (800b8a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	429a      	cmp	r2, r3
 800b876:	d202      	bcs.n	800b87e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b878:	4a09      	ldr	r2, [pc, #36]	; (800b8a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	6013      	str	r3, [r2, #0]
}
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	20000418 	.word	0x20000418
 800b88c:	20000314 	.word	0x20000314
 800b890:	2000041c 	.word	0x2000041c
 800b894:	20000400 	.word	0x20000400
 800b898:	200003d0 	.word	0x200003d0
 800b89c:	200003cc 	.word	0x200003cc
 800b8a0:	20000434 	.word	0x20000434

0800b8a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3b04      	subs	r3, #4
 800b8b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b8bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3b04      	subs	r3, #4
 800b8c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	f023 0201 	bic.w	r2, r3, #1
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3b04      	subs	r3, #4
 800b8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8d4:	4a0c      	ldr	r2, [pc, #48]	; (800b908 <pxPortInitialiseStack+0x64>)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3b14      	subs	r3, #20
 800b8de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	3b04      	subs	r3, #4
 800b8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f06f 0202 	mvn.w	r2, #2
 800b8f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	3b20      	subs	r3, #32
 800b8f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3714      	adds	r7, #20
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	0800b90d 	.word	0x0800b90d

0800b90c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b916:	4b11      	ldr	r3, [pc, #68]	; (800b95c <prvTaskExitError+0x50>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91e:	d009      	beq.n	800b934 <prvTaskExitError+0x28>
 800b920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	e7fe      	b.n	800b932 <prvTaskExitError+0x26>
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b946:	bf00      	nop
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d0fc      	beq.n	800b948 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b94e:	bf00      	nop
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	2000002c 	.word	0x2000002c

0800b960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b960:	4b07      	ldr	r3, [pc, #28]	; (800b980 <pxCurrentTCBConst2>)
 800b962:	6819      	ldr	r1, [r3, #0]
 800b964:	6808      	ldr	r0, [r1, #0]
 800b966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96a:	f380 8809 	msr	PSP, r0
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f04f 0000 	mov.w	r0, #0
 800b976:	f380 8811 	msr	BASEPRI, r0
 800b97a:	4770      	bx	lr
 800b97c:	f3af 8000 	nop.w

0800b980 <pxCurrentTCBConst2>:
 800b980:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop

0800b988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b988:	4808      	ldr	r0, [pc, #32]	; (800b9ac <prvPortStartFirstTask+0x24>)
 800b98a:	6800      	ldr	r0, [r0, #0]
 800b98c:	6800      	ldr	r0, [r0, #0]
 800b98e:	f380 8808 	msr	MSP, r0
 800b992:	f04f 0000 	mov.w	r0, #0
 800b996:	f380 8814 	msr	CONTROL, r0
 800b99a:	b662      	cpsie	i
 800b99c:	b661      	cpsie	f
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	df00      	svc	0
 800b9a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b9aa:	bf00      	nop
 800b9ac:	e000ed08 	.word	0xe000ed08

0800b9b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9b6:	4b44      	ldr	r3, [pc, #272]	; (800bac8 <xPortStartScheduler+0x118>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a44      	ldr	r2, [pc, #272]	; (800bacc <xPortStartScheduler+0x11c>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d109      	bne.n	800b9d4 <xPortStartScheduler+0x24>
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	613b      	str	r3, [r7, #16]
 800b9d2:	e7fe      	b.n	800b9d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b9d4:	4b3c      	ldr	r3, [pc, #240]	; (800bac8 <xPortStartScheduler+0x118>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a3d      	ldr	r2, [pc, #244]	; (800bad0 <xPortStartScheduler+0x120>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d109      	bne.n	800b9f2 <xPortStartScheduler+0x42>
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	e7fe      	b.n	800b9f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b9f2:	4b38      	ldr	r3, [pc, #224]	; (800bad4 <xPortStartScheduler+0x124>)
 800b9f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	22ff      	movs	r2, #255	; 0xff
 800ba02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba0c:	78fb      	ldrb	r3, [r7, #3]
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	4b30      	ldr	r3, [pc, #192]	; (800bad8 <xPortStartScheduler+0x128>)
 800ba18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba1a:	4b30      	ldr	r3, [pc, #192]	; (800badc <xPortStartScheduler+0x12c>)
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba20:	e009      	b.n	800ba36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ba22:	4b2e      	ldr	r3, [pc, #184]	; (800badc <xPortStartScheduler+0x12c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3b01      	subs	r3, #1
 800ba28:	4a2c      	ldr	r2, [pc, #176]	; (800badc <xPortStartScheduler+0x12c>)
 800ba2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba2c:	78fb      	ldrb	r3, [r7, #3]
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	005b      	lsls	r3, r3, #1
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba36:	78fb      	ldrb	r3, [r7, #3]
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba3e:	2b80      	cmp	r3, #128	; 0x80
 800ba40:	d0ef      	beq.n	800ba22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba42:	4b26      	ldr	r3, [pc, #152]	; (800badc <xPortStartScheduler+0x12c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f1c3 0307 	rsb	r3, r3, #7
 800ba4a:	2b04      	cmp	r3, #4
 800ba4c:	d009      	beq.n	800ba62 <xPortStartScheduler+0xb2>
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	60bb      	str	r3, [r7, #8]
 800ba60:	e7fe      	b.n	800ba60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba62:	4b1e      	ldr	r3, [pc, #120]	; (800badc <xPortStartScheduler+0x12c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	021b      	lsls	r3, r3, #8
 800ba68:	4a1c      	ldr	r2, [pc, #112]	; (800badc <xPortStartScheduler+0x12c>)
 800ba6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba6c:	4b1b      	ldr	r3, [pc, #108]	; (800badc <xPortStartScheduler+0x12c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba74:	4a19      	ldr	r2, [pc, #100]	; (800badc <xPortStartScheduler+0x12c>)
 800ba76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	b2da      	uxtb	r2, r3
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba80:	4b17      	ldr	r3, [pc, #92]	; (800bae0 <xPortStartScheduler+0x130>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a16      	ldr	r2, [pc, #88]	; (800bae0 <xPortStartScheduler+0x130>)
 800ba86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba8c:	4b14      	ldr	r3, [pc, #80]	; (800bae0 <xPortStartScheduler+0x130>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a13      	ldr	r2, [pc, #76]	; (800bae0 <xPortStartScheduler+0x130>)
 800ba92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba98:	f000 f8d6 	bl	800bc48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba9c:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <xPortStartScheduler+0x134>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800baa2:	f000 f8f5 	bl	800bc90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800baa6:	4b10      	ldr	r3, [pc, #64]	; (800bae8 <xPortStartScheduler+0x138>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a0f      	ldr	r2, [pc, #60]	; (800bae8 <xPortStartScheduler+0x138>)
 800baac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bab0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bab2:	f7ff ff69 	bl	800b988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bab6:	f7ff fb91 	bl	800b1dc <vTaskSwitchContext>
	prvTaskExitError();
 800baba:	f7ff ff27 	bl	800b90c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	e000ed00 	.word	0xe000ed00
 800bacc:	410fc271 	.word	0x410fc271
 800bad0:	410fc270 	.word	0x410fc270
 800bad4:	e000e400 	.word	0xe000e400
 800bad8:	20000440 	.word	0x20000440
 800badc:	20000444 	.word	0x20000444
 800bae0:	e000ed20 	.word	0xe000ed20
 800bae4:	2000002c 	.word	0x2000002c
 800bae8:	e000ef34 	.word	0xe000ef34

0800baec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb04:	4b0e      	ldr	r3, [pc, #56]	; (800bb40 <vPortEnterCritical+0x54>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	4a0d      	ldr	r2, [pc, #52]	; (800bb40 <vPortEnterCritical+0x54>)
 800bb0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb0e:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <vPortEnterCritical+0x54>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d10e      	bne.n	800bb34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb16:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <vPortEnterCritical+0x58>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d009      	beq.n	800bb34 <vPortEnterCritical+0x48>
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	603b      	str	r3, [r7, #0]
 800bb32:	e7fe      	b.n	800bb32 <vPortEnterCritical+0x46>
	}
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	2000002c 	.word	0x2000002c
 800bb44:	e000ed04 	.word	0xe000ed04

0800bb48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb4e:	4b11      	ldr	r3, [pc, #68]	; (800bb94 <vPortExitCritical+0x4c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d109      	bne.n	800bb6a <vPortExitCritical+0x22>
 800bb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	607b      	str	r3, [r7, #4]
 800bb68:	e7fe      	b.n	800bb68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bb6a:	4b0a      	ldr	r3, [pc, #40]	; (800bb94 <vPortExitCritical+0x4c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	4a08      	ldr	r2, [pc, #32]	; (800bb94 <vPortExitCritical+0x4c>)
 800bb72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb74:	4b07      	ldr	r3, [pc, #28]	; (800bb94 <vPortExitCritical+0x4c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d104      	bne.n	800bb86 <vPortExitCritical+0x3e>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb86:	bf00      	nop
 800bb88:	370c      	adds	r7, #12
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	2000002c 	.word	0x2000002c
	...

0800bba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bba0:	f3ef 8009 	mrs	r0, PSP
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	4b15      	ldr	r3, [pc, #84]	; (800bc00 <pxCurrentTCBConst>)
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	f01e 0f10 	tst.w	lr, #16
 800bbb0:	bf08      	it	eq
 800bbb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bbb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbba:	6010      	str	r0, [r2, #0]
 800bbbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bbc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bbc4:	f380 8811 	msr	BASEPRI, r0
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f7ff fb04 	bl	800b1dc <vTaskSwitchContext>
 800bbd4:	f04f 0000 	mov.w	r0, #0
 800bbd8:	f380 8811 	msr	BASEPRI, r0
 800bbdc:	bc09      	pop	{r0, r3}
 800bbde:	6819      	ldr	r1, [r3, #0]
 800bbe0:	6808      	ldr	r0, [r1, #0]
 800bbe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe6:	f01e 0f10 	tst.w	lr, #16
 800bbea:	bf08      	it	eq
 800bbec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bbf0:	f380 8809 	msr	PSP, r0
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	f3af 8000 	nop.w

0800bc00 <pxCurrentTCBConst>:
 800bc00:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop

0800bc08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc20:	f7ff fa24 	bl	800b06c <xTaskIncrementTick>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc2a:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <SysTick_Handler+0x3c>)
 800bc2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	2300      	movs	r3, #0
 800bc34:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	e000ed04 	.word	0xe000ed04

0800bc48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc4c:	4b0b      	ldr	r3, [pc, #44]	; (800bc7c <vPortSetupTimerInterrupt+0x34>)
 800bc4e:	2200      	movs	r2, #0
 800bc50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc52:	4b0b      	ldr	r3, [pc, #44]	; (800bc80 <vPortSetupTimerInterrupt+0x38>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc58:	4b0a      	ldr	r3, [pc, #40]	; (800bc84 <vPortSetupTimerInterrupt+0x3c>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a0a      	ldr	r2, [pc, #40]	; (800bc88 <vPortSetupTimerInterrupt+0x40>)
 800bc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc62:	099b      	lsrs	r3, r3, #6
 800bc64:	4a09      	ldr	r2, [pc, #36]	; (800bc8c <vPortSetupTimerInterrupt+0x44>)
 800bc66:	3b01      	subs	r3, #1
 800bc68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc6a:	4b04      	ldr	r3, [pc, #16]	; (800bc7c <vPortSetupTimerInterrupt+0x34>)
 800bc6c:	2207      	movs	r2, #7
 800bc6e:	601a      	str	r2, [r3, #0]
}
 800bc70:	bf00      	nop
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	e000e010 	.word	0xe000e010
 800bc80:	e000e018 	.word	0xe000e018
 800bc84:	20000000 	.word	0x20000000
 800bc88:	10624dd3 	.word	0x10624dd3
 800bc8c:	e000e014 	.word	0xe000e014

0800bc90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bca0 <vPortEnableVFP+0x10>
 800bc94:	6801      	ldr	r1, [r0, #0]
 800bc96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bc9a:	6001      	str	r1, [r0, #0]
 800bc9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc9e:	bf00      	nop
 800bca0:	e000ed88 	.word	0xe000ed88

0800bca4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bcaa:	f3ef 8305 	mrs	r3, IPSR
 800bcae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b0f      	cmp	r3, #15
 800bcb4:	d913      	bls.n	800bcde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bcb6:	4a16      	ldr	r2, [pc, #88]	; (800bd10 <vPortValidateInterruptPriority+0x6c>)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	4413      	add	r3, r2
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bcc0:	4b14      	ldr	r3, [pc, #80]	; (800bd14 <vPortValidateInterruptPriority+0x70>)
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	7afa      	ldrb	r2, [r7, #11]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d209      	bcs.n	800bcde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	607b      	str	r3, [r7, #4]
 800bcdc:	e7fe      	b.n	800bcdc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bcde:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <vPortValidateInterruptPriority+0x74>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bce6:	4b0d      	ldr	r3, [pc, #52]	; (800bd1c <vPortValidateInterruptPriority+0x78>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d909      	bls.n	800bd02 <vPortValidateInterruptPriority+0x5e>
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	603b      	str	r3, [r7, #0]
 800bd00:	e7fe      	b.n	800bd00 <vPortValidateInterruptPriority+0x5c>
	}
 800bd02:	bf00      	nop
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	e000e3f0 	.word	0xe000e3f0
 800bd14:	20000440 	.word	0x20000440
 800bd18:	e000ed0c 	.word	0xe000ed0c
 800bd1c:	20000444 	.word	0x20000444

0800bd20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08a      	sub	sp, #40	; 0x28
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd2c:	f7ff f8f4 	bl	800af18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd30:	4b59      	ldr	r3, [pc, #356]	; (800be98 <pvPortMalloc+0x178>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d101      	bne.n	800bd3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd38:	f000 f910 	bl	800bf5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd3c:	4b57      	ldr	r3, [pc, #348]	; (800be9c <pvPortMalloc+0x17c>)
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4013      	ands	r3, r2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f040 808c 	bne.w	800be62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d01c      	beq.n	800bd8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800bd50:	2208      	movs	r2, #8
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4413      	add	r3, r2
 800bd56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f003 0307 	and.w	r3, r3, #7
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d013      	beq.n	800bd8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f023 0307 	bic.w	r3, r3, #7
 800bd68:	3308      	adds	r3, #8
 800bd6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f003 0307 	and.w	r3, r3, #7
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d009      	beq.n	800bd8a <pvPortMalloc+0x6a>
 800bd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7a:	f383 8811 	msr	BASEPRI, r3
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f3bf 8f4f 	dsb	sy
 800bd86:	617b      	str	r3, [r7, #20]
 800bd88:	e7fe      	b.n	800bd88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d068      	beq.n	800be62 <pvPortMalloc+0x142>
 800bd90:	4b43      	ldr	r3, [pc, #268]	; (800bea0 <pvPortMalloc+0x180>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d863      	bhi.n	800be62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd9a:	4b42      	ldr	r3, [pc, #264]	; (800bea4 <pvPortMalloc+0x184>)
 800bd9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd9e:	4b41      	ldr	r3, [pc, #260]	; (800bea4 <pvPortMalloc+0x184>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bda4:	e004      	b.n	800bdb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800bda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d903      	bls.n	800bdc2 <pvPortMalloc+0xa2>
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1f1      	bne.n	800bda6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bdc2:	4b35      	ldr	r3, [pc, #212]	; (800be98 <pvPortMalloc+0x178>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d04a      	beq.n	800be62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2208      	movs	r2, #8
 800bdd2:	4413      	add	r3, r2
 800bdd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	1ad2      	subs	r2, r2, r3
 800bde6:	2308      	movs	r3, #8
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d91e      	bls.n	800be2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bdee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	f003 0307 	and.w	r3, r3, #7
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d009      	beq.n	800be14 <pvPortMalloc+0xf4>
 800be00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	613b      	str	r3, [r7, #16]
 800be12:	e7fe      	b.n	800be12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	1ad2      	subs	r2, r2, r3
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be26:	69b8      	ldr	r0, [r7, #24]
 800be28:	f000 f8fa 	bl	800c020 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be2c:	4b1c      	ldr	r3, [pc, #112]	; (800bea0 <pvPortMalloc+0x180>)
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	4a1a      	ldr	r2, [pc, #104]	; (800bea0 <pvPortMalloc+0x180>)
 800be38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be3a:	4b19      	ldr	r3, [pc, #100]	; (800bea0 <pvPortMalloc+0x180>)
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	4b1a      	ldr	r3, [pc, #104]	; (800bea8 <pvPortMalloc+0x188>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	429a      	cmp	r2, r3
 800be44:	d203      	bcs.n	800be4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be46:	4b16      	ldr	r3, [pc, #88]	; (800bea0 <pvPortMalloc+0x180>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <pvPortMalloc+0x188>)
 800be4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	685a      	ldr	r2, [r3, #4]
 800be52:	4b12      	ldr	r3, [pc, #72]	; (800be9c <pvPortMalloc+0x17c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	431a      	orrs	r2, r3
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	2200      	movs	r2, #0
 800be60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be62:	f7ff f867 	bl	800af34 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800be6c:	f7f4 fb52 	bl	8000514 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	f003 0307 	and.w	r3, r3, #7
 800be76:	2b00      	cmp	r3, #0
 800be78:	d009      	beq.n	800be8e <pvPortMalloc+0x16e>
 800be7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7e:	f383 8811 	msr	BASEPRI, r3
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	f3bf 8f4f 	dsb	sy
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	e7fe      	b.n	800be8c <pvPortMalloc+0x16c>
	return pvReturn;
 800be8e:	69fb      	ldr	r3, [r7, #28]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3728      	adds	r7, #40	; 0x28
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20008450 	.word	0x20008450
 800be9c:	2000845c 	.word	0x2000845c
 800bea0:	20008454 	.word	0x20008454
 800bea4:	20008448 	.word	0x20008448
 800bea8:	20008458 	.word	0x20008458

0800beac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d046      	beq.n	800bf4c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bebe:	2308      	movs	r3, #8
 800bec0:	425b      	negs	r3, r3
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	4413      	add	r3, r2
 800bec6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	685a      	ldr	r2, [r3, #4]
 800bed0:	4b20      	ldr	r3, [pc, #128]	; (800bf54 <vPortFree+0xa8>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4013      	ands	r3, r2
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d109      	bne.n	800beee <vPortFree+0x42>
 800beda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	e7fe      	b.n	800beec <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d009      	beq.n	800bf0a <vPortFree+0x5e>
 800bef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	60bb      	str	r3, [r7, #8]
 800bf08:	e7fe      	b.n	800bf08 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	4b11      	ldr	r3, [pc, #68]	; (800bf54 <vPortFree+0xa8>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4013      	ands	r3, r2
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d019      	beq.n	800bf4c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d115      	bne.n	800bf4c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	4b0b      	ldr	r3, [pc, #44]	; (800bf54 <vPortFree+0xa8>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	43db      	mvns	r3, r3
 800bf2a:	401a      	ands	r2, r3
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf30:	f7fe fff2 	bl	800af18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <vPortFree+0xac>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	4a06      	ldr	r2, [pc, #24]	; (800bf58 <vPortFree+0xac>)
 800bf40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf42:	6938      	ldr	r0, [r7, #16]
 800bf44:	f000 f86c 	bl	800c020 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bf48:	f7fe fff4 	bl	800af34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf4c:	bf00      	nop
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	2000845c 	.word	0x2000845c
 800bf58:	20008454 	.word	0x20008454

0800bf5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf68:	4b27      	ldr	r3, [pc, #156]	; (800c008 <prvHeapInit+0xac>)
 800bf6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f003 0307 	and.w	r3, r3, #7
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00c      	beq.n	800bf90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3307      	adds	r3, #7
 800bf7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f023 0307 	bic.w	r3, r3, #7
 800bf82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	4a1f      	ldr	r2, [pc, #124]	; (800c008 <prvHeapInit+0xac>)
 800bf8c:	4413      	add	r3, r2
 800bf8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf94:	4a1d      	ldr	r2, [pc, #116]	; (800c00c <prvHeapInit+0xb0>)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf9a:	4b1c      	ldr	r3, [pc, #112]	; (800c00c <prvHeapInit+0xb0>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bfa8:	2208      	movs	r2, #8
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	1a9b      	subs	r3, r3, r2
 800bfae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f023 0307 	bic.w	r3, r3, #7
 800bfb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4a15      	ldr	r2, [pc, #84]	; (800c010 <prvHeapInit+0xb4>)
 800bfbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bfbe:	4b14      	ldr	r3, [pc, #80]	; (800c010 <prvHeapInit+0xb4>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bfc6:	4b12      	ldr	r3, [pc, #72]	; (800c010 <prvHeapInit+0xb4>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	1ad2      	subs	r2, r2, r3
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bfdc:	4b0c      	ldr	r3, [pc, #48]	; (800c010 <prvHeapInit+0xb4>)
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	4a0a      	ldr	r2, [pc, #40]	; (800c014 <prvHeapInit+0xb8>)
 800bfea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	4a09      	ldr	r2, [pc, #36]	; (800c018 <prvHeapInit+0xbc>)
 800bff2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bff4:	4b09      	ldr	r3, [pc, #36]	; (800c01c <prvHeapInit+0xc0>)
 800bff6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bffa:	601a      	str	r2, [r3, #0]
}
 800bffc:	bf00      	nop
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	20000448 	.word	0x20000448
 800c00c:	20008448 	.word	0x20008448
 800c010:	20008450 	.word	0x20008450
 800c014:	20008458 	.word	0x20008458
 800c018:	20008454 	.word	0x20008454
 800c01c:	2000845c 	.word	0x2000845c

0800c020 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c028:	4b28      	ldr	r3, [pc, #160]	; (800c0cc <prvInsertBlockIntoFreeList+0xac>)
 800c02a:	60fb      	str	r3, [r7, #12]
 800c02c:	e002      	b.n	800c034 <prvInsertBlockIntoFreeList+0x14>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	60fb      	str	r3, [r7, #12]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d8f7      	bhi.n	800c02e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	4413      	add	r3, r2
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d108      	bne.n	800c062 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	441a      	add	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	441a      	add	r2, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	429a      	cmp	r2, r3
 800c074:	d118      	bne.n	800c0a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	4b15      	ldr	r3, [pc, #84]	; (800c0d0 <prvInsertBlockIntoFreeList+0xb0>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d00d      	beq.n	800c09e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	685a      	ldr	r2, [r3, #4]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	441a      	add	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	e008      	b.n	800c0b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c09e:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <prvInsertBlockIntoFreeList+0xb0>)
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	e003      	b.n	800c0b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d002      	beq.n	800c0be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0be:	bf00      	nop
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	20008448 	.word	0x20008448
 800c0d0:	20008450 	.word	0x20008450

0800c0d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	490e      	ldr	r1, [pc, #56]	; (800c114 <MX_USB_HOST_Init+0x40>)
 800c0dc:	480e      	ldr	r0, [pc, #56]	; (800c118 <MX_USB_HOST_Init+0x44>)
 800c0de:	f7fc f80d 	bl	80080fc <USBH_Init>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c0e8:	f7f4 fed2 	bl	8000e90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800c0ec:	490b      	ldr	r1, [pc, #44]	; (800c11c <MX_USB_HOST_Init+0x48>)
 800c0ee:	480a      	ldr	r0, [pc, #40]	; (800c118 <MX_USB_HOST_Init+0x44>)
 800c0f0:	f7fc f8ba 	bl	8008268 <USBH_RegisterClass>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d001      	beq.n	800c0fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c0fa:	f7f4 fec9 	bl	8000e90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c0fe:	4806      	ldr	r0, [pc, #24]	; (800c118 <MX_USB_HOST_Init+0x44>)
 800c100:	f7fc f93e 	bl	8008380 <USBH_Start>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c10a:	f7f4 fec1 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c10e:	bf00      	nop
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	0800c121 	.word	0x0800c121
 800c118:	20008760 	.word	0x20008760
 800c11c:	2000000c 	.word	0x2000000c

0800c120 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c12c:	78fb      	ldrb	r3, [r7, #3]
 800c12e:	3b01      	subs	r3, #1
 800c130:	2b04      	cmp	r3, #4
 800c132:	d819      	bhi.n	800c168 <USBH_UserProcess+0x48>
 800c134:	a201      	add	r2, pc, #4	; (adr r2, 800c13c <USBH_UserProcess+0x1c>)
 800c136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13a:	bf00      	nop
 800c13c:	0800c169 	.word	0x0800c169
 800c140:	0800c159 	.word	0x0800c159
 800c144:	0800c169 	.word	0x0800c169
 800c148:	0800c161 	.word	0x0800c161
 800c14c:	0800c151 	.word	0x0800c151
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c150:	4b09      	ldr	r3, [pc, #36]	; (800c178 <USBH_UserProcess+0x58>)
 800c152:	2203      	movs	r2, #3
 800c154:	701a      	strb	r2, [r3, #0]
  break;
 800c156:	e008      	b.n	800c16a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c158:	4b07      	ldr	r3, [pc, #28]	; (800c178 <USBH_UserProcess+0x58>)
 800c15a:	2202      	movs	r2, #2
 800c15c:	701a      	strb	r2, [r3, #0]
  break;
 800c15e:	e004      	b.n	800c16a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c160:	4b05      	ldr	r3, [pc, #20]	; (800c178 <USBH_UserProcess+0x58>)
 800c162:	2201      	movs	r2, #1
 800c164:	701a      	strb	r2, [r3, #0]
  break;
 800c166:	e000      	b.n	800c16a <USBH_UserProcess+0x4a>

  default:
  break;
 800c168:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c16a:	bf00      	nop
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	20008460 	.word	0x20008460

0800c17c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b08a      	sub	sp, #40	; 0x28
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c184:	f107 0314 	add.w	r3, r7, #20
 800c188:	2200      	movs	r2, #0
 800c18a:	601a      	str	r2, [r3, #0]
 800c18c:	605a      	str	r2, [r3, #4]
 800c18e:	609a      	str	r2, [r3, #8]
 800c190:	60da      	str	r2, [r3, #12]
 800c192:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a24      	ldr	r2, [pc, #144]	; (800c22c <HAL_HCD_MspInit+0xb0>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d141      	bne.n	800c222 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c19e:	2300      	movs	r3, #0
 800c1a0:	613b      	str	r3, [r7, #16]
 800c1a2:	4b23      	ldr	r3, [pc, #140]	; (800c230 <HAL_HCD_MspInit+0xb4>)
 800c1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a6:	4a22      	ldr	r2, [pc, #136]	; (800c230 <HAL_HCD_MspInit+0xb4>)
 800c1a8:	f043 0302 	orr.w	r3, r3, #2
 800c1ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c1ae:	4b20      	ldr	r3, [pc, #128]	; (800c230 <HAL_HCD_MspInit+0xb4>)
 800c1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b2:	f003 0302 	and.w	r3, r3, #2
 800c1b6:	613b      	str	r3, [r7, #16]
 800c1b8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800c1ba:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800c1be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800c1cc:	230c      	movs	r3, #12
 800c1ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1d0:	f107 0314 	add.w	r3, r7, #20
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4817      	ldr	r0, [pc, #92]	; (800c234 <HAL_HCD_MspInit+0xb8>)
 800c1d8:	f7f6 f9c6 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800c1dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800c1ea:	f107 0314 	add.w	r3, r7, #20
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4810      	ldr	r0, [pc, #64]	; (800c234 <HAL_HCD_MspInit+0xb8>)
 800c1f2:	f7f6 f9b9 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60fb      	str	r3, [r7, #12]
 800c1fa:	4b0d      	ldr	r3, [pc, #52]	; (800c230 <HAL_HCD_MspInit+0xb4>)
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fe:	4a0c      	ldr	r2, [pc, #48]	; (800c230 <HAL_HCD_MspInit+0xb4>)
 800c200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c204:	6313      	str	r3, [r2, #48]	; 0x30
 800c206:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <HAL_HCD_MspInit+0xb4>)
 800c208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c20a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800c212:	2200      	movs	r2, #0
 800c214:	2100      	movs	r1, #0
 800c216:	204d      	movs	r0, #77	; 0x4d
 800c218:	f7f5 fea8 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c21c:	204d      	movs	r0, #77	; 0x4d
 800c21e:	f7f5 fec1 	bl	8001fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c222:	bf00      	nop
 800c224:	3728      	adds	r7, #40	; 0x28
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	40040000 	.word	0x40040000
 800c230:	40023800 	.word	0x40023800
 800c234:	40020400 	.word	0x40020400

0800c238 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c246:	4618      	mov	r0, r3
 800c248:	f7fc fd47 	bl	8008cda <USBH_LL_IncTimer>
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c262:	4618      	mov	r0, r3
 800c264:	f7fc fd8b 	bl	8008d7e <USBH_LL_Connect>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fc fda0 	bl	8008dc4 <USBH_LL_Disconnect>
}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	70fb      	strb	r3, [r7, #3]
 800c298:	4613      	mov	r3, r2
 800c29a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fc fdd5 	bl	8008e52 <USBH_LL_NotifyURBChange>
#endif
}
 800c2a8:	bf00      	nop
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fc fd35 	bl	8008d2e <USBH_LL_PortEnabled>
}
 800c2c4:	bf00      	nop
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fc fd41 	bl	8008d62 <USBH_LL_PortDisabled>
}
 800c2e0:	bf00      	nop
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d132      	bne.n	800c360 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800c2fa:	4a1c      	ldr	r2, [pc, #112]	; (800c36c <USBH_LL_Init+0x84>)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a19      	ldr	r2, [pc, #100]	; (800c36c <USBH_LL_Init+0x84>)
 800c306:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c30a:	4b18      	ldr	r3, [pc, #96]	; (800c36c <USBH_LL_Init+0x84>)
 800c30c:	4a18      	ldr	r2, [pc, #96]	; (800c370 <USBH_LL_Init+0x88>)
 800c30e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800c310:	4b16      	ldr	r3, [pc, #88]	; (800c36c <USBH_LL_Init+0x84>)
 800c312:	220c      	movs	r2, #12
 800c314:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800c316:	4b15      	ldr	r3, [pc, #84]	; (800c36c <USBH_LL_Init+0x84>)
 800c318:	2201      	movs	r2, #1
 800c31a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c31c:	4b13      	ldr	r3, [pc, #76]	; (800c36c <USBH_LL_Init+0x84>)
 800c31e:	2200      	movs	r2, #0
 800c320:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c322:	4b12      	ldr	r3, [pc, #72]	; (800c36c <USBH_LL_Init+0x84>)
 800c324:	2202      	movs	r2, #2
 800c326:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c328:	4b10      	ldr	r3, [pc, #64]	; (800c36c <USBH_LL_Init+0x84>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c32e:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <USBH_LL_Init+0x84>)
 800c330:	2200      	movs	r2, #0
 800c332:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c334:	4b0d      	ldr	r3, [pc, #52]	; (800c36c <USBH_LL_Init+0x84>)
 800c336:	2200      	movs	r2, #0
 800c338:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c33a:	4b0c      	ldr	r3, [pc, #48]	; (800c36c <USBH_LL_Init+0x84>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800c340:	480a      	ldr	r0, [pc, #40]	; (800c36c <USBH_LL_Init+0x84>)
 800c342:	f7f6 fad4 	bl	80028ee <HAL_HCD_Init>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800c34c:	f7f4 fda0 	bl	8000e90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800c350:	4806      	ldr	r0, [pc, #24]	; (800c36c <USBH_LL_Init+0x84>)
 800c352:	f7f6 fed7 	bl	8003104 <HAL_HCD_GetCurrentFrame>
 800c356:	4603      	mov	r3, r0
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7fc fcae 	bl	8008cbc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	20008b44 	.word	0x20008b44
 800c370:	40040000 	.word	0x40040000

0800c374 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c37c:	2300      	movs	r3, #0
 800c37e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7f6 fe42 	bl	8003014 <HAL_HCD_Start>
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c394:	7bfb      	ldrb	r3, [r7, #15]
 800c396:	4618      	mov	r0, r3
 800c398:	f000 f95c 	bl	800c654 <USBH_Get_USB_Status>
 800c39c:	4603      	mov	r3, r0
 800c39e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7f6 fe4a 	bl	800305a <HAL_HCD_Stop>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 f941 	bl	800c654 <USBH_Get_USB_Status>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7f6 fe94 	bl	8003120 <HAL_HCD_GetCurrentSpeed>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d007      	beq.n	800c40e <USBH_LL_GetSpeed+0x2e>
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d302      	bcc.n	800c408 <USBH_LL_GetSpeed+0x28>
 800c402:	2b02      	cmp	r3, #2
 800c404:	d006      	beq.n	800c414 <USBH_LL_GetSpeed+0x34>
 800c406:	e008      	b.n	800c41a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c408:	2300      	movs	r3, #0
 800c40a:	73fb      	strb	r3, [r7, #15]
    break;
 800c40c:	e008      	b.n	800c420 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c40e:	2301      	movs	r3, #1
 800c410:	73fb      	strb	r3, [r7, #15]
    break;
 800c412:	e005      	b.n	800c420 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c414:	2302      	movs	r3, #2
 800c416:	73fb      	strb	r3, [r7, #15]
    break;
 800c418:	e002      	b.n	800c420 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c41a:	2301      	movs	r3, #1
 800c41c:	73fb      	strb	r3, [r7, #15]
    break;
 800c41e:	bf00      	nop
  }
  return  speed;
 800c420:	7bfb      	ldrb	r3, [r7, #15]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c440:	4618      	mov	r0, r3
 800c442:	f7f6 fe27 	bl	8003094 <HAL_HCD_ResetPort>
 800c446:	4603      	mov	r3, r0
 800c448:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f000 f901 	bl	800c654 <USBH_Get_USB_Status>
 800c452:	4603      	mov	r3, r0
 800c454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c456:	7bbb      	ldrb	r3, [r7, #14]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	460b      	mov	r3, r1
 800c46a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c472:	78fa      	ldrb	r2, [r7, #3]
 800c474:	4611      	mov	r1, r2
 800c476:	4618      	mov	r0, r3
 800c478:	f7f6 fe2f 	bl	80030da <HAL_HCD_HC_GetXferCount>
 800c47c:	4603      	mov	r3, r0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c486:	b590      	push	{r4, r7, lr}
 800c488:	b089      	sub	sp, #36	; 0x24
 800c48a:	af04      	add	r7, sp, #16
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	4608      	mov	r0, r1
 800c490:	4611      	mov	r1, r2
 800c492:	461a      	mov	r2, r3
 800c494:	4603      	mov	r3, r0
 800c496:	70fb      	strb	r3, [r7, #3]
 800c498:	460b      	mov	r3, r1
 800c49a:	70bb      	strb	r3, [r7, #2]
 800c49c:	4613      	mov	r3, r2
 800c49e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c4ae:	787c      	ldrb	r4, [r7, #1]
 800c4b0:	78ba      	ldrb	r2, [r7, #2]
 800c4b2:	78f9      	ldrb	r1, [r7, #3]
 800c4b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c4b6:	9302      	str	r3, [sp, #8]
 800c4b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c4bc:	9301      	str	r3, [sp, #4]
 800c4be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	4623      	mov	r3, r4
 800c4c6:	f7f6 fa74 	bl	80029b2 <HAL_HCD_HC_Init>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 f8bf 	bl	800c654 <USBH_Get_USB_Status>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd90      	pop	{r4, r7, pc}

0800c4e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c4fe:	78fa      	ldrb	r2, [r7, #3]
 800c500:	4611      	mov	r1, r2
 800c502:	4618      	mov	r0, r3
 800c504:	f7f6 faed 	bl	8002ae2 <HAL_HCD_HC_Halt>
 800c508:	4603      	mov	r3, r0
 800c50a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c50c:	7bfb      	ldrb	r3, [r7, #15]
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 f8a0 	bl	800c654 <USBH_Get_USB_Status>
 800c514:	4603      	mov	r3, r0
 800c516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c518:	7bbb      	ldrb	r3, [r7, #14]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c522:	b590      	push	{r4, r7, lr}
 800c524:	b089      	sub	sp, #36	; 0x24
 800c526:	af04      	add	r7, sp, #16
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	4608      	mov	r0, r1
 800c52c:	4611      	mov	r1, r2
 800c52e:	461a      	mov	r2, r3
 800c530:	4603      	mov	r3, r0
 800c532:	70fb      	strb	r3, [r7, #3]
 800c534:	460b      	mov	r3, r1
 800c536:	70bb      	strb	r3, [r7, #2]
 800c538:	4613      	mov	r3, r2
 800c53a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c53c:	2300      	movs	r3, #0
 800c53e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c54a:	787c      	ldrb	r4, [r7, #1]
 800c54c:	78ba      	ldrb	r2, [r7, #2]
 800c54e:	78f9      	ldrb	r1, [r7, #3]
 800c550:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c554:	9303      	str	r3, [sp, #12]
 800c556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c558:	9302      	str	r3, [sp, #8]
 800c55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	4623      	mov	r3, r4
 800c566:	f7f6 fadf 	bl	8002b28 <HAL_HCD_HC_SubmitRequest>
 800c56a:	4603      	mov	r3, r0
 800c56c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
 800c570:	4618      	mov	r0, r3
 800c572:	f000 f86f 	bl	800c654 <USBH_Get_USB_Status>
 800c576:	4603      	mov	r3, r0
 800c578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	bd90      	pop	{r4, r7, pc}

0800c584 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c596:	78fa      	ldrb	r2, [r7, #3]
 800c598:	4611      	mov	r1, r2
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7f6 fd88 	bl	80030b0 <HAL_HCD_HC_GetURBState>
 800c5a0:	4603      	mov	r3, r0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d103      	bne.n	800c5c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800c5c0:	78fb      	ldrb	r3, [r7, #3]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f000 f872 	bl	800c6ac <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c5c8:	20c8      	movs	r0, #200	; 0xc8
 800c5ca:	f7f5 f983 	bl	80018d4 <HAL_Delay>
  return USBH_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	70fb      	strb	r3, [r7, #3]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c5f0:	78fa      	ldrb	r2, [r7, #3]
 800c5f2:	68f9      	ldr	r1, [r7, #12]
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	440b      	add	r3, r1
 800c5fe:	333b      	adds	r3, #59	; 0x3b
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00a      	beq.n	800c61c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c606:	78fa      	ldrb	r2, [r7, #3]
 800c608:	68f9      	ldr	r1, [r7, #12]
 800c60a:	4613      	mov	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	00db      	lsls	r3, r3, #3
 800c612:	440b      	add	r3, r1
 800c614:	3350      	adds	r3, #80	; 0x50
 800c616:	78ba      	ldrb	r2, [r7, #2]
 800c618:	701a      	strb	r2, [r3, #0]
 800c61a:	e009      	b.n	800c630 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c61c:	78fa      	ldrb	r2, [r7, #3]
 800c61e:	68f9      	ldr	r1, [r7, #12]
 800c620:	4613      	mov	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	440b      	add	r3, r1
 800c62a:	3351      	adds	r3, #81	; 0x51
 800c62c:	78ba      	ldrb	r2, [r7, #2]
 800c62e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b082      	sub	sp, #8
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7f5 f944 	bl	80018d4 <HAL_Delay>
}
 800c64c:	bf00      	nop
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	4603      	mov	r3, r0
 800c65c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	2b03      	cmp	r3, #3
 800c666:	d817      	bhi.n	800c698 <USBH_Get_USB_Status+0x44>
 800c668:	a201      	add	r2, pc, #4	; (adr r2, 800c670 <USBH_Get_USB_Status+0x1c>)
 800c66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66e:	bf00      	nop
 800c670:	0800c681 	.word	0x0800c681
 800c674:	0800c687 	.word	0x0800c687
 800c678:	0800c68d 	.word	0x0800c68d
 800c67c:	0800c693 	.word	0x0800c693
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c680:	2300      	movs	r3, #0
 800c682:	73fb      	strb	r3, [r7, #15]
    break;
 800c684:	e00b      	b.n	800c69e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c686:	2302      	movs	r3, #2
 800c688:	73fb      	strb	r3, [r7, #15]
    break;
 800c68a:	e008      	b.n	800c69e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c68c:	2301      	movs	r3, #1
 800c68e:	73fb      	strb	r3, [r7, #15]
    break;
 800c690:	e005      	b.n	800c69e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c692:	2302      	movs	r3, #2
 800c694:	73fb      	strb	r3, [r7, #15]
    break;
 800c696:	e002      	b.n	800c69e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c698:	2302      	movs	r3, #2
 800c69a:	73fb      	strb	r3, [r7, #15]
    break;
 800c69c:	bf00      	nop
  }
  return usb_status;
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c6b6:	79fb      	ldrb	r3, [r7, #7]
 800c6b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d102      	bne.n	800c6c6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	73fb      	strb	r3, [r7, #15]
 800c6c4:	e001      	b.n	800c6ca <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800c6ca:	7bfb      	ldrb	r3, [r7, #15]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	2110      	movs	r1, #16
 800c6d0:	4803      	ldr	r0, [pc, #12]	; (800c6e0 <MX_DriverVbusHS+0x34>)
 800c6d2:	f7f6 f8f3 	bl	80028bc <HAL_GPIO_WritePin>
}
 800c6d6:	bf00      	nop
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	40020800 	.word	0x40020800

0800c6e4 <__errno>:
 800c6e4:	4b01      	ldr	r3, [pc, #4]	; (800c6ec <__errno+0x8>)
 800c6e6:	6818      	ldr	r0, [r3, #0]
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	20000030 	.word	0x20000030

0800c6f0 <__libc_init_array>:
 800c6f0:	b570      	push	{r4, r5, r6, lr}
 800c6f2:	4e0d      	ldr	r6, [pc, #52]	; (800c728 <__libc_init_array+0x38>)
 800c6f4:	4c0d      	ldr	r4, [pc, #52]	; (800c72c <__libc_init_array+0x3c>)
 800c6f6:	1ba4      	subs	r4, r4, r6
 800c6f8:	10a4      	asrs	r4, r4, #2
 800c6fa:	2500      	movs	r5, #0
 800c6fc:	42a5      	cmp	r5, r4
 800c6fe:	d109      	bne.n	800c714 <__libc_init_array+0x24>
 800c700:	4e0b      	ldr	r6, [pc, #44]	; (800c730 <__libc_init_array+0x40>)
 800c702:	4c0c      	ldr	r4, [pc, #48]	; (800c734 <__libc_init_array+0x44>)
 800c704:	f000 f8f6 	bl	800c8f4 <_init>
 800c708:	1ba4      	subs	r4, r4, r6
 800c70a:	10a4      	asrs	r4, r4, #2
 800c70c:	2500      	movs	r5, #0
 800c70e:	42a5      	cmp	r5, r4
 800c710:	d105      	bne.n	800c71e <__libc_init_array+0x2e>
 800c712:	bd70      	pop	{r4, r5, r6, pc}
 800c714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c718:	4798      	blx	r3
 800c71a:	3501      	adds	r5, #1
 800c71c:	e7ee      	b.n	800c6fc <__libc_init_array+0xc>
 800c71e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c722:	4798      	blx	r3
 800c724:	3501      	adds	r5, #1
 800c726:	e7f2      	b.n	800c70e <__libc_init_array+0x1e>
 800c728:	0800c998 	.word	0x0800c998
 800c72c:	0800c998 	.word	0x0800c998
 800c730:	0800c998 	.word	0x0800c998
 800c734:	0800c99c 	.word	0x0800c99c

0800c738 <malloc>:
 800c738:	4b02      	ldr	r3, [pc, #8]	; (800c744 <malloc+0xc>)
 800c73a:	4601      	mov	r1, r0
 800c73c:	6818      	ldr	r0, [r3, #0]
 800c73e:	f000 b86d 	b.w	800c81c <_malloc_r>
 800c742:	bf00      	nop
 800c744:	20000030 	.word	0x20000030

0800c748 <free>:
 800c748:	4b02      	ldr	r3, [pc, #8]	; (800c754 <free+0xc>)
 800c74a:	4601      	mov	r1, r0
 800c74c:	6818      	ldr	r0, [r3, #0]
 800c74e:	f000 b817 	b.w	800c780 <_free_r>
 800c752:	bf00      	nop
 800c754:	20000030 	.word	0x20000030

0800c758 <memcpy>:
 800c758:	b510      	push	{r4, lr}
 800c75a:	1e43      	subs	r3, r0, #1
 800c75c:	440a      	add	r2, r1
 800c75e:	4291      	cmp	r1, r2
 800c760:	d100      	bne.n	800c764 <memcpy+0xc>
 800c762:	bd10      	pop	{r4, pc}
 800c764:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c76c:	e7f7      	b.n	800c75e <memcpy+0x6>

0800c76e <memset>:
 800c76e:	4402      	add	r2, r0
 800c770:	4603      	mov	r3, r0
 800c772:	4293      	cmp	r3, r2
 800c774:	d100      	bne.n	800c778 <memset+0xa>
 800c776:	4770      	bx	lr
 800c778:	f803 1b01 	strb.w	r1, [r3], #1
 800c77c:	e7f9      	b.n	800c772 <memset+0x4>
	...

0800c780 <_free_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4605      	mov	r5, r0
 800c784:	2900      	cmp	r1, #0
 800c786:	d045      	beq.n	800c814 <_free_r+0x94>
 800c788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c78c:	1f0c      	subs	r4, r1, #4
 800c78e:	2b00      	cmp	r3, #0
 800c790:	bfb8      	it	lt
 800c792:	18e4      	addlt	r4, r4, r3
 800c794:	f000 f8ac 	bl	800c8f0 <__malloc_lock>
 800c798:	4a1f      	ldr	r2, [pc, #124]	; (800c818 <_free_r+0x98>)
 800c79a:	6813      	ldr	r3, [r2, #0]
 800c79c:	4610      	mov	r0, r2
 800c79e:	b933      	cbnz	r3, 800c7ae <_free_r+0x2e>
 800c7a0:	6063      	str	r3, [r4, #4]
 800c7a2:	6014      	str	r4, [r2, #0]
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7aa:	f000 b8a2 	b.w	800c8f2 <__malloc_unlock>
 800c7ae:	42a3      	cmp	r3, r4
 800c7b0:	d90c      	bls.n	800c7cc <_free_r+0x4c>
 800c7b2:	6821      	ldr	r1, [r4, #0]
 800c7b4:	1862      	adds	r2, r4, r1
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	bf04      	itt	eq
 800c7ba:	681a      	ldreq	r2, [r3, #0]
 800c7bc:	685b      	ldreq	r3, [r3, #4]
 800c7be:	6063      	str	r3, [r4, #4]
 800c7c0:	bf04      	itt	eq
 800c7c2:	1852      	addeq	r2, r2, r1
 800c7c4:	6022      	streq	r2, [r4, #0]
 800c7c6:	6004      	str	r4, [r0, #0]
 800c7c8:	e7ec      	b.n	800c7a4 <_free_r+0x24>
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	685a      	ldr	r2, [r3, #4]
 800c7ce:	b10a      	cbz	r2, 800c7d4 <_free_r+0x54>
 800c7d0:	42a2      	cmp	r2, r4
 800c7d2:	d9fa      	bls.n	800c7ca <_free_r+0x4a>
 800c7d4:	6819      	ldr	r1, [r3, #0]
 800c7d6:	1858      	adds	r0, r3, r1
 800c7d8:	42a0      	cmp	r0, r4
 800c7da:	d10b      	bne.n	800c7f4 <_free_r+0x74>
 800c7dc:	6820      	ldr	r0, [r4, #0]
 800c7de:	4401      	add	r1, r0
 800c7e0:	1858      	adds	r0, r3, r1
 800c7e2:	4282      	cmp	r2, r0
 800c7e4:	6019      	str	r1, [r3, #0]
 800c7e6:	d1dd      	bne.n	800c7a4 <_free_r+0x24>
 800c7e8:	6810      	ldr	r0, [r2, #0]
 800c7ea:	6852      	ldr	r2, [r2, #4]
 800c7ec:	605a      	str	r2, [r3, #4]
 800c7ee:	4401      	add	r1, r0
 800c7f0:	6019      	str	r1, [r3, #0]
 800c7f2:	e7d7      	b.n	800c7a4 <_free_r+0x24>
 800c7f4:	d902      	bls.n	800c7fc <_free_r+0x7c>
 800c7f6:	230c      	movs	r3, #12
 800c7f8:	602b      	str	r3, [r5, #0]
 800c7fa:	e7d3      	b.n	800c7a4 <_free_r+0x24>
 800c7fc:	6820      	ldr	r0, [r4, #0]
 800c7fe:	1821      	adds	r1, r4, r0
 800c800:	428a      	cmp	r2, r1
 800c802:	bf04      	itt	eq
 800c804:	6811      	ldreq	r1, [r2, #0]
 800c806:	6852      	ldreq	r2, [r2, #4]
 800c808:	6062      	str	r2, [r4, #4]
 800c80a:	bf04      	itt	eq
 800c80c:	1809      	addeq	r1, r1, r0
 800c80e:	6021      	streq	r1, [r4, #0]
 800c810:	605c      	str	r4, [r3, #4]
 800c812:	e7c7      	b.n	800c7a4 <_free_r+0x24>
 800c814:	bd38      	pop	{r3, r4, r5, pc}
 800c816:	bf00      	nop
 800c818:	20008464 	.word	0x20008464

0800c81c <_malloc_r>:
 800c81c:	b570      	push	{r4, r5, r6, lr}
 800c81e:	1ccd      	adds	r5, r1, #3
 800c820:	f025 0503 	bic.w	r5, r5, #3
 800c824:	3508      	adds	r5, #8
 800c826:	2d0c      	cmp	r5, #12
 800c828:	bf38      	it	cc
 800c82a:	250c      	movcc	r5, #12
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	4606      	mov	r6, r0
 800c830:	db01      	blt.n	800c836 <_malloc_r+0x1a>
 800c832:	42a9      	cmp	r1, r5
 800c834:	d903      	bls.n	800c83e <_malloc_r+0x22>
 800c836:	230c      	movs	r3, #12
 800c838:	6033      	str	r3, [r6, #0]
 800c83a:	2000      	movs	r0, #0
 800c83c:	bd70      	pop	{r4, r5, r6, pc}
 800c83e:	f000 f857 	bl	800c8f0 <__malloc_lock>
 800c842:	4a21      	ldr	r2, [pc, #132]	; (800c8c8 <_malloc_r+0xac>)
 800c844:	6814      	ldr	r4, [r2, #0]
 800c846:	4621      	mov	r1, r4
 800c848:	b991      	cbnz	r1, 800c870 <_malloc_r+0x54>
 800c84a:	4c20      	ldr	r4, [pc, #128]	; (800c8cc <_malloc_r+0xb0>)
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	b91b      	cbnz	r3, 800c858 <_malloc_r+0x3c>
 800c850:	4630      	mov	r0, r6
 800c852:	f000 f83d 	bl	800c8d0 <_sbrk_r>
 800c856:	6020      	str	r0, [r4, #0]
 800c858:	4629      	mov	r1, r5
 800c85a:	4630      	mov	r0, r6
 800c85c:	f000 f838 	bl	800c8d0 <_sbrk_r>
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	d124      	bne.n	800c8ae <_malloc_r+0x92>
 800c864:	230c      	movs	r3, #12
 800c866:	6033      	str	r3, [r6, #0]
 800c868:	4630      	mov	r0, r6
 800c86a:	f000 f842 	bl	800c8f2 <__malloc_unlock>
 800c86e:	e7e4      	b.n	800c83a <_malloc_r+0x1e>
 800c870:	680b      	ldr	r3, [r1, #0]
 800c872:	1b5b      	subs	r3, r3, r5
 800c874:	d418      	bmi.n	800c8a8 <_malloc_r+0x8c>
 800c876:	2b0b      	cmp	r3, #11
 800c878:	d90f      	bls.n	800c89a <_malloc_r+0x7e>
 800c87a:	600b      	str	r3, [r1, #0]
 800c87c:	50cd      	str	r5, [r1, r3]
 800c87e:	18cc      	adds	r4, r1, r3
 800c880:	4630      	mov	r0, r6
 800c882:	f000 f836 	bl	800c8f2 <__malloc_unlock>
 800c886:	f104 000b 	add.w	r0, r4, #11
 800c88a:	1d23      	adds	r3, r4, #4
 800c88c:	f020 0007 	bic.w	r0, r0, #7
 800c890:	1ac3      	subs	r3, r0, r3
 800c892:	d0d3      	beq.n	800c83c <_malloc_r+0x20>
 800c894:	425a      	negs	r2, r3
 800c896:	50e2      	str	r2, [r4, r3]
 800c898:	e7d0      	b.n	800c83c <_malloc_r+0x20>
 800c89a:	428c      	cmp	r4, r1
 800c89c:	684b      	ldr	r3, [r1, #4]
 800c89e:	bf16      	itet	ne
 800c8a0:	6063      	strne	r3, [r4, #4]
 800c8a2:	6013      	streq	r3, [r2, #0]
 800c8a4:	460c      	movne	r4, r1
 800c8a6:	e7eb      	b.n	800c880 <_malloc_r+0x64>
 800c8a8:	460c      	mov	r4, r1
 800c8aa:	6849      	ldr	r1, [r1, #4]
 800c8ac:	e7cc      	b.n	800c848 <_malloc_r+0x2c>
 800c8ae:	1cc4      	adds	r4, r0, #3
 800c8b0:	f024 0403 	bic.w	r4, r4, #3
 800c8b4:	42a0      	cmp	r0, r4
 800c8b6:	d005      	beq.n	800c8c4 <_malloc_r+0xa8>
 800c8b8:	1a21      	subs	r1, r4, r0
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	f000 f808 	bl	800c8d0 <_sbrk_r>
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	d0cf      	beq.n	800c864 <_malloc_r+0x48>
 800c8c4:	6025      	str	r5, [r4, #0]
 800c8c6:	e7db      	b.n	800c880 <_malloc_r+0x64>
 800c8c8:	20008464 	.word	0x20008464
 800c8cc:	20008468 	.word	0x20008468

0800c8d0 <_sbrk_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4c06      	ldr	r4, [pc, #24]	; (800c8ec <_sbrk_r+0x1c>)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	4608      	mov	r0, r1
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	f7f4 ff42 	bl	8001764 <_sbrk>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d102      	bne.n	800c8ea <_sbrk_r+0x1a>
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	b103      	cbz	r3, 800c8ea <_sbrk_r+0x1a>
 800c8e8:	602b      	str	r3, [r5, #0]
 800c8ea:	bd38      	pop	{r3, r4, r5, pc}
 800c8ec:	20008e08 	.word	0x20008e08

0800c8f0 <__malloc_lock>:
 800c8f0:	4770      	bx	lr

0800c8f2 <__malloc_unlock>:
 800c8f2:	4770      	bx	lr

0800c8f4 <_init>:
 800c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f6:	bf00      	nop
 800c8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8fa:	bc08      	pop	{r3}
 800c8fc:	469e      	mov	lr, r3
 800c8fe:	4770      	bx	lr

0800c900 <_fini>:
 800c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c902:	bf00      	nop
 800c904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c906:	bc08      	pop	{r3}
 800c908:	469e      	mov	lr, r3
 800c90a:	4770      	bx	lr
