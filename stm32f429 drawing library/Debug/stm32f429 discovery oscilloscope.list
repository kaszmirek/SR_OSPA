
stm32f429 discovery oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012640  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002cd90  080127f0  080127f0  000227f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803f580  0803f580  000500f4  2**0
                  CONTENTS
  4 .ARM          00000008  0803f580  0803f580  0004f580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803f588  0803f588  000500f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803f588  0803f588  0004f588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803f58c  0803f58c  0004f58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0803f590  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003520  200000f4  0803f684  000500f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000024  20003614  0803f684  00053614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e3d5  00000000  00000000  00050124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006395  00000000  00000000  0007e4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e98  00000000  00000000  00084890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd8  00000000  00000000  00086728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1b6  00000000  00000000  00088300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e773  00000000  00000000  000b54b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f768c  00000000  00000000  000e3c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001db2b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008254  00000000  00000000  001db308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080127d8 	.word	0x080127d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	080127d8 	.word	0x080127d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96e 	b.w	8000e50 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9d08      	ldr	r5, [sp, #32]
 8000b92:	4604      	mov	r4, r0
 8000b94:	468c      	mov	ip, r1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8083 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4617      	mov	r7, r2
 8000ba0:	d947      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba2:	fab2 f282 	clz	r2, r2
 8000ba6:	b142      	cbz	r2, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	f1c2 0020 	rsb	r0, r2, #32
 8000bac:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb0:	4091      	lsls	r1, r2
 8000bb2:	4097      	lsls	r7, r2
 8000bb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bc4:	fa1f fe87 	uxth.w	lr, r7
 8000bc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x60>
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 8119 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 8116 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	443b      	add	r3, r7
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x8c>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0a:	f080 8105 	bcs.w	8000e18 <__udivmoddi4+0x28c>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	f240 8102 	bls.w	8000e18 <__udivmoddi4+0x28c>
 8000c14:	3802      	subs	r0, #2
 8000c16:	443c      	add	r4, r7
 8000c18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa0>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d150      	bne.n	8000ce0 <__udivmoddi4+0x154>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2601      	movs	r6, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c21      	lsrs	r1, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	f200 80e9 	bhi.w	8000e40 <__udivmoddi4+0x2b4>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1ac9      	subs	r1, r1, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d9 	bhi.w	8000e48 <__udivmoddi4+0x2bc>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7bf      	b.n	8000c22 <__udivmoddi4+0x96>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x12e>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80b1 	beq.w	8000e0e <__udivmoddi4+0x282>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0x140>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80b8 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0103 	sbc.w	r1, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0a8      	beq.n	8000c2c <__udivmoddi4+0xa0>
 8000cda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cde:	e7a5      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce8:	4097      	lsls	r7, r2
 8000cea:	fa01 f002 	lsl.w	r0, r1, r2
 8000cee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf2:	40d9      	lsrs	r1, r3
 8000cf4:	4330      	orrs	r0, r6
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cfc:	fa1f f887 	uxth.w	r8, r7
 8000d00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d08:	fb06 f108 	mul.w	r1, r6, r8
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d1a:	f080 808d 	bcs.w	8000e38 <__udivmoddi4+0x2ac>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 808a 	bls.w	8000e38 <__udivmoddi4+0x2ac>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b281      	uxth	r1, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	1879      	adds	r1, r7, r1
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d273      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d971      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4439      	add	r1, r7
 8000d50:	1acb      	subs	r3, r1, r3
 8000d52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c6 0c20 	rsb	ip, r6, #32
 8000d5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d64:	431c      	orrs	r4, r3
 8000d66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d76:	431f      	orrs	r7, r3
 8000d78:	0c3b      	lsrs	r3, r7, #16
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fa1f f884 	uxth.w	r8, r4
 8000d82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8e:	458a      	cmp	sl, r1
 8000d90:	fa02 f206 	lsl.w	r2, r2, r6
 8000d94:	fa00 f306 	lsl.w	r3, r0, r6
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x220>
 8000d9a:	1861      	adds	r1, r4, r1
 8000d9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da0:	d248      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000da2:	458a      	cmp	sl, r1
 8000da4:	d946      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000da6:	f1a9 0902 	sub.w	r9, r9, #2
 8000daa:	4421      	add	r1, r4
 8000dac:	eba1 010a 	sub.w	r1, r1, sl
 8000db0:	b2bf      	uxth	r7, r7
 8000db2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dbe:	fb00 f808 	mul.w	r8, r0, r8
 8000dc2:	45b8      	cmp	r8, r7
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x24a>
 8000dc6:	19e7      	adds	r7, r4, r7
 8000dc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dcc:	d22e      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000dce:	45b8      	cmp	r8, r7
 8000dd0:	d92c      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4427      	add	r7, r4
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	eba7 0708 	sub.w	r7, r7, r8
 8000dde:	fba0 8902 	umull	r8, r9, r0, r2
 8000de2:	454f      	cmp	r7, r9
 8000de4:	46c6      	mov	lr, r8
 8000de6:	4649      	mov	r1, r9
 8000de8:	d31a      	bcc.n	8000e20 <__udivmoddi4+0x294>
 8000dea:	d017      	beq.n	8000e1c <__udivmoddi4+0x290>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x27a>
 8000dee:	ebb3 020e 	subs.w	r2, r3, lr
 8000df2:	eb67 0701 	sbc.w	r7, r7, r1
 8000df6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dfa:	40f2      	lsrs	r2, r6
 8000dfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000e00:	40f7      	lsrs	r7, r6
 8000e02:	e9c5 2700 	strd	r2, r7, [r5]
 8000e06:	2600      	movs	r6, #0
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	462e      	mov	r6, r5
 8000e10:	4628      	mov	r0, r5
 8000e12:	e70b      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000e14:	4606      	mov	r6, r0
 8000e16:	e6e9      	b.n	8000bec <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fd      	b.n	8000c18 <__udivmoddi4+0x8c>
 8000e1c:	4543      	cmp	r3, r8
 8000e1e:	d2e5      	bcs.n	8000dec <__udivmoddi4+0x260>
 8000e20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e24:	eb69 0104 	sbc.w	r1, r9, r4
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e7df      	b.n	8000dec <__udivmoddi4+0x260>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e7d2      	b.n	8000dd6 <__udivmoddi4+0x24a>
 8000e30:	4660      	mov	r0, ip
 8000e32:	e78d      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e34:	4681      	mov	r9, r0
 8000e36:	e7b9      	b.n	8000dac <__udivmoddi4+0x220>
 8000e38:	4666      	mov	r6, ip
 8000e3a:	e775      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	e74a      	b.n	8000cd6 <__udivmoddi4+0x14a>
 8000e40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e44:	4439      	add	r1, r7
 8000e46:	e713      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	443c      	add	r4, r7
 8000e4c:	e724      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <ADC_Init_ALL>:
//--------------------------------------------------------------
// init vom ADC1 und ADC2 im DMA Mode
// und starten der zyklischen Wandlung
//--------------------------------------------------------------
void ADC_Init_ALL(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  // init aller Variablen
  ADC_UB.status=ADC_VORLAUF;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <ADC_Init_ALL+0x2c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
  ADC_UB.trigger_pos=0;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <ADC_Init_ALL+0x2c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  ADC_UB.trigger_quarter=0;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <ADC_Init_ALL+0x2c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  ADC_UB.dma_status=0;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <ADC_Init_ALL+0x2c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]

  P_ADC_Clear();
 8000e70:	f000 f9da 	bl	8001228 <P_ADC_Clear>
  P_ADC_InitADC();
 8000e74:	f000 fa1a 	bl	80012ac <P_ADC_InitADC>
  P_ADC_Start();
 8000e78:	f000 fa2a 	bl	80012d0 <P_ADC_Start>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20001dfc 	.word	0x20001dfc

08000e84 <ADC_change_Frq>:
// (Timebase der Abtastrate)
//
// n : [0...16]
//--------------------------------------------------------------
void ADC_change_Frq(uint8_t n)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]

  uint32_t prescaler, period;

  // Timer anhalten
  __HAL_TIM_DISABLE(&ADC_TIM);
 8000e8e:	4b70      	ldr	r3, [pc, #448]	; (8001050 <ADC_change_Frq+0x1cc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6a1a      	ldr	r2, [r3, #32]
 8000e94:	f241 1311 	movw	r3, #4369	; 0x1111
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10f      	bne.n	8000ebe <ADC_change_Frq+0x3a>
 8000e9e:	4b6c      	ldr	r3, [pc, #432]	; (8001050 <ADC_change_Frq+0x1cc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6a1a      	ldr	r2, [r3, #32]
 8000ea4:	f240 4344 	movw	r3, #1092	; 0x444
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d107      	bne.n	8000ebe <ADC_change_Frq+0x3a>
 8000eae:	4b68      	ldr	r3, [pc, #416]	; (8001050 <ADC_change_Frq+0x1cc>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b66      	ldr	r3, [pc, #408]	; (8001050 <ADC_change_Frq+0x1cc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
  switch(n) {
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b10      	cmp	r3, #16
 8000ec2:	f200 8090 	bhi.w	8000fe6 <ADC_change_Frq+0x162>
 8000ec6:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <ADC_change_Frq+0x48>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000f11 	.word	0x08000f11
 8000ed0:	08000f1f 	.word	0x08000f1f
 8000ed4:	08000f2d 	.word	0x08000f2d
 8000ed8:	08000f3b 	.word	0x08000f3b
 8000edc:	08000f49 	.word	0x08000f49
 8000ee0:	08000f57 	.word	0x08000f57
 8000ee4:	08000f65 	.word	0x08000f65
 8000ee8:	08000f73 	.word	0x08000f73
 8000eec:	08000f7f 	.word	0x08000f7f
 8000ef0:	08000f8b 	.word	0x08000f8b
 8000ef4:	08000f97 	.word	0x08000f97
 8000ef8:	08000fa3 	.word	0x08000fa3
 8000efc:	08000faf 	.word	0x08000faf
 8000f00:	08000fbb 	.word	0x08000fbb
 8000f04:	08000fc7 	.word	0x08000fc7
 8000f08:	08000fd3 	.word	0x08000fd3
 8000f0c:	08000fdd 	.word	0x08000fdd
    case 0 : // 5s=>5Hz=5s
      prescaler=499;period=35999;
 8000f10:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	f648 439f 	movw	r3, #35999	; 0x8c9f
 8000f1a:	60bb      	str	r3, [r7, #8]
    break;
 8000f1c:	e068      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 1 : // 2s=>12,5Hz=80ms
      prescaler=499;period=14399;
 8000f1e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	f643 033f 	movw	r3, #14399	; 0x383f
 8000f28:	60bb      	str	r3, [r7, #8]
    break;
 8000f2a:	e061      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 2 : // 1s=>25Hz=40ms
      prescaler=499;period=7199;
 8000f2c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8000f36:	60bb      	str	r3, [r7, #8]
    break;
 8000f38:	e05a      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 3 : // 500ms=>50Hz=20ms
      prescaler=499;period=3599;
 8000f3a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	f640 630f 	movw	r3, #3599	; 0xe0f
 8000f44:	60bb      	str	r3, [r7, #8]
    break;
 8000f46:	e053      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 4 : // 200ms=>125Hz=8ms
      prescaler=499;period=1439;
 8000f48:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	f240 539f 	movw	r3, #1439	; 0x59f
 8000f52:	60bb      	str	r3, [r7, #8]
    break;
 8000f54:	e04c      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 5 : // 100ms=>250Hz=4ms
      prescaler=499;period=719;
 8000f56:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	f240 23cf 	movw	r3, #719	; 0x2cf
 8000f60:	60bb      	str	r3, [r7, #8]
    break;
 8000f62:	e045      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 6 : // 50ms=>500Hz=2ms
      prescaler=499;period=359;
 8000f64:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	f240 1367 	movw	r3, #359	; 0x167
 8000f6e:	60bb      	str	r3, [r7, #8]
    break;
 8000f70:	e03e      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 7 : // 20ms=>1,25kHz=800us
      prescaler=499;period=143;
 8000f72:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	238f      	movs	r3, #143	; 0x8f
 8000f7a:	60bb      	str	r3, [r7, #8]
    break;
 8000f7c:	e038      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 8 : // 10ms=>2,5kHz400us
      prescaler=499;period=71;
 8000f7e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	2347      	movs	r3, #71	; 0x47
 8000f86:	60bb      	str	r3, [r7, #8]
    break;
 8000f88:	e032      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 9 : // 5ms=>5kHz=200us
      prescaler=499;period=35;
 8000f8a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	2323      	movs	r3, #35	; 0x23
 8000f92:	60bb      	str	r3, [r7, #8]
    break;
 8000f94:	e02c      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 10 : // 2ms=>12,5kHz=80us
      prescaler=0;period=7199;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8000f9e:	60bb      	str	r3, [r7, #8]
    break;
 8000fa0:	e026      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 11 : // 1ms=>25kHz=40us
      prescaler=0;period=3599;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	f640 630f 	movw	r3, #3599	; 0xe0f
 8000faa:	60bb      	str	r3, [r7, #8]
    break;
 8000fac:	e020      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 12 : // 500us=>50kHz=20us
      prescaler=0;period=1799;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	f240 7307 	movw	r3, #1799	; 0x707
 8000fb6:	60bb      	str	r3, [r7, #8]
    break;
 8000fb8:	e01a      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 13 : // 200us=>125kHz=8us
      prescaler=0;period=719;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	f240 23cf 	movw	r3, #719	; 0x2cf
 8000fc2:	60bb      	str	r3, [r7, #8]
    break;
 8000fc4:	e014      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 14 : // 100us=>250kHz=4us
      prescaler=0;period=359;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	f240 1367 	movw	r3, #359	; 0x167
 8000fce:	60bb      	str	r3, [r7, #8]
    break;
 8000fd0:	e00e      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 15 : // 50us=>500kHz=2us
      prescaler=0;period=179;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	23b3      	movs	r3, #179	; 0xb3
 8000fd8:	60bb      	str	r3, [r7, #8]
    break;
 8000fda:	e009      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    case 16 : // 25us=>1MHz=1us
      prescaler=0;period=89;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	2359      	movs	r3, #89	; 0x59
 8000fe2:	60bb      	str	r3, [r7, #8]
    break;
 8000fe4:	e004      	b.n	8000ff0 <ADC_change_Frq+0x16c>
    default :
      prescaler=OSZI_TIM2_PRESCALE;
 8000fe6:	2353      	movs	r3, #83	; 0x53
 8000fe8:	60fb      	str	r3, [r7, #12]
      period=OSZI_TIM2_PERIODE;
 8000fea:	f240 132b 	movw	r3, #299	; 0x12b
 8000fee:	60bb      	str	r3, [r7, #8]
  }

  // einstellen der neuen datae
  	  ADC_TIM.Instance = TIM2;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <ADC_change_Frq+0x1cc>)
 8000ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff6:	601a      	str	r2, [r3, #0]
  	  ADC_TIM.Init.Prescaler = prescaler;
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <ADC_change_Frq+0x1cc>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6053      	str	r3, [r2, #4]
  	  ADC_TIM.Init.Period = period;
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <ADC_change_Frq+0x1cc>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
  	  ADC_TIM.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <ADC_change_Frq+0x1cc>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  	  ADC_TIM.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <ADC_change_Frq+0x1cc>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  	  ADC_TIM.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <ADC_change_Frq+0x1cc>)
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	619a      	str	r2, [r3, #24]

  	  __HAL_TIM_CLEAR_FLAG(&ADC_TIM,TIM_FLAG_UPDATE);
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <ADC_change_Frq+0x1cc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f06f 0201 	mvn.w	r2, #1
 800101e:	611a      	str	r2, [r3, #16]
  	  if (HAL_TIM_Base_Init(&ADC_TIM) != HAL_OK)
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <ADC_change_Frq+0x1cc>)
 8001022:	f00e f945 	bl	800f2b0 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <ADC_change_Frq+0x1ac>
  	  {
  	    Error_Handler();
 800102c:	f001 f9ce 	bl	80023cc <Error_Handler>
  	  }

  // Timer wieder starten, falls notwendig
  if(ADC_UB.status!=ADC_READY) {
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <ADC_change_Frq+0x1d0>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d007      	beq.n	8001048 <ADC_change_Frq+0x1c4>
    // Timer2 enable
    __HAL_TIM_ENABLE(&ADC_TIM);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <ADC_change_Frq+0x1cc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <ADC_change_Frq+0x1cc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
  }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20003510 	.word	0x20003510
 8001054:	20001dfc 	.word	0x20001dfc

08001058 <ADC_change_Mode>:
//--------------------------------------------------------------
// �ndern vom Mode des DMA
// n != 1 => Double-Buffer-Mode
// n = 1  => Single-Buffer-Mode
//--------------------------------------------------------------
void ADC_change_Mode(uint8_t mode){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]

	// Merker setzen
	ADC_UB.dma_status=1;
 8001062:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <ADC_change_Mode+0x1a0>)
 8001064:	2201      	movs	r2, #1
 8001066:	60da      	str	r2, [r3, #12]

	// Stop Timer2 triggering the ADC
	__HAL_TIM_DISABLE(&ADC_TIM);
 8001068:	4b64      	ldr	r3, [pc, #400]	; (80011fc <ADC_change_Mode+0x1a4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6a1a      	ldr	r2, [r3, #32]
 800106e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10f      	bne.n	8001098 <ADC_change_Mode+0x40>
 8001078:	4b60      	ldr	r3, [pc, #384]	; (80011fc <ADC_change_Mode+0x1a4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	f240 4344 	movw	r3, #1092	; 0x444
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d107      	bne.n	8001098 <ADC_change_Mode+0x40>
 8001088:	4b5c      	ldr	r3, [pc, #368]	; (80011fc <ADC_change_Mode+0x1a4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b5b      	ldr	r3, [pc, #364]	; (80011fc <ADC_change_Mode+0x1a4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

	// Disable interrupts
	__HAL_DMA_DISABLE_IT(hadc1.DMA_Handle,(DMA_IT_HT | DMA_IT_TC));
 8001098:	4b59      	ldr	r3, [pc, #356]	; (8001200 <ADC_change_Mode+0x1a8>)
 800109a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b57      	ldr	r3, [pc, #348]	; (8001200 <ADC_change_Mode+0x1a8>)
 80010a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0218 	bic.w	r2, r2, #24
 80010aa:	601a      	str	r2, [r3, #0]

	// Stop DMA and ADC if already running
	if( (HAL_DMA_GetState(hadc1.DMA_Handle) == HAL_DMA_STATE_BUSY)){
 80010ac:	4b54      	ldr	r3, [pc, #336]	; (8001200 <ADC_change_Mode+0x1a8>)
 80010ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 f9a5 	bl	800a400 <HAL_DMA_GetState>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d107      	bne.n	80010cc <ADC_change_Mode+0x74>
		if(HAL_ADCEx_MultiModeStop_DMA(&hadc1) != HAL_OK){ Error_Handler(); }
 80010bc:	4850      	ldr	r0, [pc, #320]	; (8001200 <ADC_change_Mode+0x1a8>)
 80010be:	f008 fc51 	bl	8009964 <HAL_ADCEx_MultiModeStop_DMA>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <ADC_change_Mode+0x74>
 80010c8:	f001 f980 	bl	80023cc <Error_Handler>
	}
	if( (HAL_DMA_GetState(hadc1.DMA_Handle) == HAL_DMA_STATE_ERROR)){
 80010cc:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <ADC_change_Mode+0x1a8>)
 80010ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d0:	4618      	mov	r0, r3
 80010d2:	f009 f995 	bl	800a400 <HAL_DMA_GetState>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d101      	bne.n	80010e0 <ADC_change_Mode+0x88>
		Error_Handler();
 80010dc:	f001 f976 	bl	80023cc <Error_Handler>
	}
	if( (HAL_DMA_GetState(hadc1.DMA_Handle) != HAL_DMA_STATE_READY)){
 80010e0:	4b47      	ldr	r3, [pc, #284]	; (8001200 <ADC_change_Mode+0x1a8>)
 80010e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e4:	4618      	mov	r0, r3
 80010e6:	f009 f98b 	bl	800a400 <HAL_DMA_GetState>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d001      	beq.n	80010f4 <ADC_change_Mode+0x9c>
		Error_Handler();
 80010f0:	f001 f96c 	bl	80023cc <Error_Handler>
	}

	// Clear flags
	__HAL_DMA_CLEAR_FLAG(hadc1.DMA_Handle, (DMA_FLAG_TCIF0_4 | DMA_FLAG_HTIF0_4) );
 80010f4:	4b42      	ldr	r3, [pc, #264]	; (8001200 <ADC_change_Mode+0x1a8>)
 80010f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <ADC_change_Mode+0x1ac>)
 80010fe:	429a      	cmp	r2, r3
 8001100:	d903      	bls.n	800110a <ADC_change_Mode+0xb2>
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <ADC_change_Mode+0x1b0>)
 8001104:	2230      	movs	r2, #48	; 0x30
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	e018      	b.n	800113c <ADC_change_Mode+0xe4>
 800110a:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <ADC_change_Mode+0x1a8>)
 800110c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <ADC_change_Mode+0x1b4>)
 8001114:	429a      	cmp	r2, r3
 8001116:	d903      	bls.n	8001120 <ADC_change_Mode+0xc8>
 8001118:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <ADC_change_Mode+0x1b0>)
 800111a:	2330      	movs	r3, #48	; 0x30
 800111c:	6093      	str	r3, [r2, #8]
 800111e:	e00d      	b.n	800113c <ADC_change_Mode+0xe4>
 8001120:	4b37      	ldr	r3, [pc, #220]	; (8001200 <ADC_change_Mode+0x1a8>)
 8001122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4b39      	ldr	r3, [pc, #228]	; (8001210 <ADC_change_Mode+0x1b8>)
 800112a:	429a      	cmp	r2, r3
 800112c:	d903      	bls.n	8001136 <ADC_change_Mode+0xde>
 800112e:	4a39      	ldr	r2, [pc, #228]	; (8001214 <ADC_change_Mode+0x1bc>)
 8001130:	2330      	movs	r3, #48	; 0x30
 8001132:	60d3      	str	r3, [r2, #12]
 8001134:	e002      	b.n	800113c <ADC_change_Mode+0xe4>
 8001136:	4a37      	ldr	r2, [pc, #220]	; (8001214 <ADC_change_Mode+0x1bc>)
 8001138:	2330      	movs	r3, #48	; 0x30
 800113a:	6093      	str	r3, [r2, #8]

	// Wait for DMA Stream disable
	while((hdma_adc1.Instance->CR & DMA_SxCR_EN) != RESET);
 800113c:	bf00      	nop
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <ADC_change_Mode+0x1c0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f8      	bne.n	800113e <ADC_change_Mode+0xe6>

	// Double Buffer Mode
	if(mode != DMA_MODE_SingleBF) {
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d031      	beq.n	80011b6 <ADC_change_Mode+0x15e>
		//if(HAL_ADCEx_MultiModeStart_DualBF_DMA(&hadc1,(uint32_t*)&ADC_DMA_Buffer_A, (uint32_t*)&ADC_DMA_Buffer_B, ADC_ARRAY_LEN) != HAL_OK){ Error_Handler(); }

		if(HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)&ADC_DMA_Buffer_A, ADC_ARRAY_LEN) != HAL_OK){ Error_Handler(); }
 8001152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001156:	4931      	ldr	r1, [pc, #196]	; (800121c <ADC_change_Mode+0x1c4>)
 8001158:	4829      	ldr	r0, [pc, #164]	; (8001200 <ADC_change_Mode+0x1a8>)
 800115a:	f008 fb37 	bl	80097cc <HAL_ADCEx_MultiModeStart_DMA>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <ADC_change_Mode+0x110>
 8001164:	f001 f932 	bl	80023cc <Error_Handler>

		// We don't have HAL ADC Dual buffer method, so we have to fiddle a bit :)
		// Abort the ADC DMA Stream that HAL_ADCEx_MultiModeStart_DMA has just enabled.
		if(HAL_DMA_Abort(hadc1.DMA_Handle) != HAL_OK){ Error_Handler(); }
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <ADC_change_Mode+0x1a8>)
 800116a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116c:	4618      	mov	r0, r3
 800116e:	f008 ff4d 	bl	800a00c <HAL_DMA_Abort>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <ADC_change_Mode+0x124>
 8001178:	f001 f928 	bl	80023cc <Error_Handler>

		// Copy the first buffer callbacks to the second buffer (The first buffer callbacks were already set by HAL_ADCEx...)
	    hadc1.DMA_Handle->XferM1CpltCallback = hadc1.DMA_Handle->XferCpltCallback;
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <ADC_change_Mode+0x1a8>)
 800117e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <ADC_change_Mode+0x1a8>)
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001186:	645a      	str	r2, [r3, #68]	; 0x44
	    hadc1.DMA_Handle->XferM1HalfCpltCallback = hadc1.DMA_Handle->XferHalfCpltCallback;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <ADC_change_Mode+0x1a8>)
 800118a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <ADC_change_Mode+0x1a8>)
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001192:	649a      	str	r2, [r3, #72]	; 0x48

	    // Restart the ADC DMA Stream, now in Dual Buffer mode
	    if(HAL_DMAEx_MultiBufferStart_IT(hadc1.DMA_Handle, (uint32_t)&ADC_COMMON_REGISTER(hadc1)->CDR,
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <ADC_change_Mode+0x1a8>)
 8001196:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001198:	4a20      	ldr	r2, [pc, #128]	; (800121c <ADC_change_Mode+0x1c4>)
 800119a:	4921      	ldr	r1, [pc, #132]	; (8001220 <ADC_change_Mode+0x1c8>)
 800119c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	460b      	mov	r3, r1
 80011a4:	491f      	ldr	r1, [pc, #124]	; (8001224 <ADC_change_Mode+0x1cc>)
 80011a6:	f009 fee9 	bl	800af7c <HAL_DMAEx_MultiBufferStart_IT>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00d      	beq.n	80011cc <ADC_change_Mode+0x174>
				(uint32_t)&ADC_DMA_Buffer_A, (uint32_t)&ADC_DMA_Buffer_B, ADC_ARRAY_LEN) != HAL_OK){ Error_Handler(); }
 80011b0:	f001 f90c 	bl	80023cc <Error_Handler>
 80011b4:	e00a      	b.n	80011cc <ADC_change_Mode+0x174>
	}

	// Single Buffer Mode
	else{
		if(HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)&ADC_DMA_Buffer_A, ADC_ARRAY_LEN) != HAL_OK){ Error_Handler(); }
 80011b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ba:	4918      	ldr	r1, [pc, #96]	; (800121c <ADC_change_Mode+0x1c4>)
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <ADC_change_Mode+0x1a8>)
 80011be:	f008 fb05 	bl	80097cc <HAL_ADCEx_MultiModeStart_DMA>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <ADC_change_Mode+0x174>
 80011c8:	f001 f900 	bl	80023cc <Error_Handler>
	}

	// Timer wieder starten, falls notwendig
	if((ADC_UB.status!=ADC_READY) || (mode==DMA_MODE_SingleBF)) {
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <ADC_change_Mode+0x1a0>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d102      	bne.n	80011da <ADC_change_Mode+0x182>
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d107      	bne.n	80011ea <ADC_change_Mode+0x192>
	// Timer2 enable
	__HAL_TIM_ENABLE(&ADC_TIM);
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <ADC_change_Mode+0x1a4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <ADC_change_Mode+0x1a4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0201 	orr.w	r2, r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
	}

	// Merker zur�cksetzen
	ADC_UB.dma_status=0;
 80011ea:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <ADC_change_Mode+0x1a0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20001dfc 	.word	0x20001dfc
 80011fc:	20003510 	.word	0x20003510
 8001200:	200033e4 	.word	0x200033e4
 8001204:	40026458 	.word	0x40026458
 8001208:	40026400 	.word	0x40026400
 800120c:	400260b8 	.word	0x400260b8
 8001210:	40026058 	.word	0x40026058
 8001214:	40026000 	.word	0x40026000
 8001218:	20003470 	.word	0x20003470
 800121c:	20001e0c 	.word	0x20001e0c
 8001220:	200022cc 	.word	0x200022cc
 8001224:	40012308 	.word	0x40012308

08001228 <P_ADC_Clear>:
//--------------------------------------------------------------
// interne Funktion
// l�schen aller ADC-Arrays
//--------------------------------------------------------------
void P_ADC_Clear(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
  uint32_t n;

  for(n=0;n<ADC_ARRAY_LEN;n++) {
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	e029      	b.n	8001288 <P_ADC_Clear+0x60>
    ADC_DMA_Buffer_A[n*2]=0x00;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <P_ADC_Clear+0x78>)
 800123a:	2100      	movs	r1, #0
 800123c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    ADC_DMA_Buffer_A[(n*2)+1]=0x00;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	3301      	adds	r3, #1
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <P_ADC_Clear+0x78>)
 8001248:	2100      	movs	r1, #0
 800124a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    ADC_DMA_Buffer_B[n*2]=0x00;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <P_ADC_Clear+0x7c>)
 8001254:	2100      	movs	r1, #0
 8001256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    ADC_DMA_Buffer_B[(n*2)+1]=0x00;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	3301      	adds	r3, #1
 8001260:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <P_ADC_Clear+0x7c>)
 8001262:	2100      	movs	r1, #0
 8001264:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    ADC_DMA_Buffer_C[n*2]=0x00;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <P_ADC_Clear+0x80>)
 800126e:	2100      	movs	r1, #0
 8001270:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    ADC_DMA_Buffer_C[(n*2)+1]=0x00;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	3301      	adds	r3, #1
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <P_ADC_Clear+0x80>)
 800127c:	2100      	movs	r1, #0
 800127e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(n=0;n<ADC_ARRAY_LEN;n++) {
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3301      	adds	r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800128e:	d3d1      	bcc.n	8001234 <P_ADC_Clear+0xc>
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20001e0c 	.word	0x20001e0c
 80012a4:	200022cc 	.word	0x200022cc
 80012a8:	20001948 	.word	0x20001948

080012ac <P_ADC_InitADC>:
//
// ADC_SampleTime_3Cycles  => Sample_Time =  3+12+5=20 => 952ns
// ADC_SampleTime_15Cycles => Sample_Time = 15+12+5=32 => 1.52us
// ADC_SampleTime_28Cycles => Sample_Time = 28+12+5=45 => 2.14us
//--------------------------------------------------------------
void P_ADC_InitADC(void){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0

	// Start ADC2 (Slave)
	if(HAL_ADC_Start(&hadc2) != HAL_OK){ Error_Handler(); }
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <P_ADC_InitADC+0x20>)
 80012b2:	f007 ff21 	bl	80090f8 <HAL_ADC_Start>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <P_ADC_InitADC+0x14>
 80012bc:	f001 f886 	bl	80023cc <Error_Handler>

	// Start ADC1 (Master) in dual Buffer mode
	ADC_change_Mode(0);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fec9 	bl	8001058 <ADC_change_Mode>

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200032ac 	.word	0x200032ac

080012d0 <P_ADC_Start>:

//--------------------------------------------------------------
// interne Funktion
// Enable und start vom ADC und DMA
//--------------------------------------------------------------
void P_ADC_Start(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  // Timer2 enable
  HAL_TIM_Base_Start(&ADC_TIM);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <P_ADC_Start+0x10>)
 80012d6:	f00e f83b 	bl	800f350 <HAL_TIM_Base_Start>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20003510 	.word	0x20003510

080012e4 <HAL_ADC_ConvHalfCpltCallback>:
// wird bei DMA Interrupt aufgerufen
//   (Bei HalfTransferComplete und TransferCompleteInterrupt)
//
//--------------------------------------------------------------

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 	if(hadc!=&hadc1){ Error_Handler(); }			// Only the adc1 should call here.
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d001      	beq.n	80012f8 <HAL_ADC_ConvHalfCpltCallback+0x14>
 80012f4:	f001 f86a 	bl	80023cc <Error_Handler>

    if(ADC_UB.dma_status==0) {
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d112      	bne.n	8001326 <HAL_ADC_ConvHalfCpltCallback+0x42>
      if((ADC_UB.status==ADC_RUNNING) || (ADC_UB.status==ADC_PRE_TRIGGER)) {
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d003      	beq.n	8001310 <HAL_ADC_ConvHalfCpltCallback+0x2c>
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d10a      	bne.n	8001326 <HAL_ADC_ConvHalfCpltCallback+0x42>

    	  //If DMA is not currently writing top the first buffer
        if ((ADC1_DMA_STREAM->CR & DMA_SxCR_CT) == 0) {
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <HAL_ADC_ConvHalfCpltCallback+0x3e>
          ADC_searchTrigger_A1();				// Search trigger in the first buffer
 800131c:	f000 f86e 	bl	80013fc <ADC_searchTrigger_A1>
        else {
          ADC_searchTrigger_B1();				// Search trigger in the second buffer
        }
      }
    }
}
 8001320:	e001      	b.n	8001326 <HAL_ADC_ConvHalfCpltCallback+0x42>
          ADC_searchTrigger_B1();				// Search trigger in the second buffer
 8001322:	f000 f969 	bl	80015f8 <ADC_searchTrigger_B1>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200033e4 	.word	0x200033e4
 8001334:	20001dfc 	.word	0x20001dfc
 8001338:	40026410 	.word	0x40026410

0800133c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	if(hadc!=&hadc1){ Error_Handler(); }			// Only the adc1 should call here. Error if else
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <HAL_ADC_ConvCpltCallback+0xb0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d001      	beq.n	8001350 <HAL_ADC_ConvCpltCallback+0x14>
 800134c:	f001 f83e 	bl	80023cc <Error_Handler>

    if(ADC_UB.dma_status==0) {
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d142      	bne.n	80013de <HAL_ADC_ConvCpltCallback+0xa2>
    	__HAL_TIM_DISABLE(&ADC_TIM);
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10f      	bne.n	8001388 <HAL_ADC_ConvCpltCallback+0x4c>
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6a1a      	ldr	r2, [r3, #32]
 800136e:	f240 4344 	movw	r3, #1092	; 0x444
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <HAL_ADC_ConvCpltCallback+0x4c>
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

      if(ADC_UB.status!=ADC_VORLAUF) {
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01b      	beq.n	80013c8 <HAL_ADC_ConvCpltCallback+0x8c>
        if(ADC_UB.status==ADC_TRIGGER_OK) {
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d103      	bne.n	80013a0 <HAL_ADC_ConvCpltCallback+0x64>
          ADC_UB.status=ADC_READY;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 800139a:	2204      	movs	r2, #4
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e01e      	b.n	80013de <HAL_ADC_ConvCpltCallback+0xa2>
        }
        else {
          __HAL_TIM_ENABLE(&ADC_TIM);
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
          if ((ADC1_DMA_STREAM->CR & DMA_SxCR_CT) != 0) {
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_ADC_ConvCpltCallback+0xbc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_ADC_ConvCpltCallback+0x86>
            ADC_searchTrigger_A2();
 80013bc:	f000 f89c 	bl	80014f8 <ADC_searchTrigger_A2>
 80013c0:	e00d      	b.n	80013de <HAL_ADC_ConvCpltCallback+0xa2>
          }
          else {
            ADC_searchTrigger_B2();
 80013c2:	f000 f997 	bl	80016f4 <ADC_searchTrigger_B2>
 80013c6:	e00a      	b.n	80013de <HAL_ADC_ConvCpltCallback+0xa2>
          }
        }
      }
      else {
      	__HAL_TIM_ENABLE(&ADC_TIM);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_ADC_ConvCpltCallback+0xb8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
        ADC_UB.status=ADC_RUNNING;
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_ADC_ConvCpltCallback+0xb4>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
      }
    }
    UB_Led_Toggle(LED_GREEN);
 80013de:	2000      	movs	r0, #0
 80013e0:	f00f f8ae 	bl	8010540 <UB_Led_Toggle>
 }
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200033e4 	.word	0x200033e4
 80013f0:	20001dfc 	.word	0x20001dfc
 80013f4:	20003510 	.word	0x20003510
 80013f8:	40026410 	.word	0x40026410

080013fc <ADC_searchTrigger_A1>:
//--------------------------------------------------------------
// interne Funktion
// sucht Trigger-Punkt in Quadrant-1
//--------------------------------------------------------------
void ADC_searchTrigger_A1(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
  uint32_t n,ch;
  uint16_t data,trigger;

  if(Menu.trigger.mode==1) return;
 8001402:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <ADC_searchTrigger_A1+0xf0>)
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	2b01      	cmp	r3, #1
 8001408:	d06a      	beq.n	80014e0 <ADC_searchTrigger_A1+0xe4>

  if(Menu.trigger.source==0) {
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <ADC_searchTrigger_A1+0xf0>)
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <ADC_searchTrigger_A1+0x22>
    ch=0;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
    trigger=Menu.trigger.value_ch1;
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <ADC_searchTrigger_A1+0xf0>)
 8001418:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800141a:	80fb      	strh	r3, [r7, #6]
 800141c:	e004      	b.n	8001428 <ADC_searchTrigger_A1+0x2c>
  }
  else {
    ch=1;
 800141e:	2301      	movs	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
    trigger=Menu.trigger.value_ch2;
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <ADC_searchTrigger_A1+0xf0>)
 8001424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001426:	80fb      	strh	r3, [r7, #6]
  }

  if(Menu.trigger.edge==0) {
 8001428:	4b30      	ldr	r3, [pc, #192]	; (80014ec <ADC_searchTrigger_A1+0xf0>)
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	2b00      	cmp	r3, #0
 800142e:	d12b      	bne.n	8001488 <ADC_searchTrigger_A1+0x8c>
    for(n=0;n<ADC_HALF_ARRAY_LEN;n++) {
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e024      	b.n	8001480 <ADC_searchTrigger_A1+0x84>
      data=ADC_DMA_Buffer_A[(n*2)+ch];
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	005a      	lsls	r2, r3, #1
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	4413      	add	r3, r2
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <ADC_searchTrigger_A1+0xf4>)
 8001440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001444:	80bb      	strh	r3, [r7, #4]
      if(ADC_UB.status==ADC_RUNNING) {
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <ADC_searchTrigger_A1+0x62>
        if(data<trigger) {
 800144e:	88ba      	ldrh	r2, [r7, #4]
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	429a      	cmp	r2, r3
 8001454:	d211      	bcs.n	800147a <ADC_searchTrigger_A1+0x7e>
          ADC_UB.status=ADC_PRE_TRIGGER;
 8001456:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 8001458:	2202      	movs	r2, #2
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e00d      	b.n	800147a <ADC_searchTrigger_A1+0x7e>
        }
      }
      else {
        if(data>=trigger) {
 800145e:	88ba      	ldrh	r2, [r7, #4]
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	429a      	cmp	r2, r3
 8001464:	d309      	bcc.n	800147a <ADC_searchTrigger_A1+0x7e>
          ADC_UB.status=ADC_TRIGGER_OK;
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 8001468:	2203      	movs	r2, #3
 800146a:	701a      	strb	r2, [r3, #0]
          ADC_UB.trigger_pos=n;
 800146c:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6053      	str	r3, [r2, #4]
          ADC_UB.trigger_quarter=1;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 8001474:	2201      	movs	r2, #1
 8001476:	609a      	str	r2, [r3, #8]
          break;
 8001478:	e033      	b.n	80014e2 <ADC_searchTrigger_A1+0xe6>
    for(n=0;n<ADC_HALF_ARRAY_LEN;n++) {
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b95      	cmp	r3, #149	; 0x95
 8001484:	d9d7      	bls.n	8001436 <ADC_searchTrigger_A1+0x3a>
 8001486:	e02c      	b.n	80014e2 <ADC_searchTrigger_A1+0xe6>
        }
      }
    }
  }
  else {
    for(n=0;n<ADC_HALF_ARRAY_LEN;n++) {
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	e024      	b.n	80014d8 <ADC_searchTrigger_A1+0xdc>
      data=ADC_DMA_Buffer_A[(n*2)+ch];
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	005a      	lsls	r2, r3, #1
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <ADC_searchTrigger_A1+0xf4>)
 8001498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800149c:	80bb      	strh	r3, [r7, #4]
      if(ADC_UB.status==ADC_RUNNING) {
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <ADC_searchTrigger_A1+0xba>
        if(data>trigger) {
 80014a6:	88ba      	ldrh	r2, [r7, #4]
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d911      	bls.n	80014d2 <ADC_searchTrigger_A1+0xd6>
          ADC_UB.status=ADC_PRE_TRIGGER;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e00d      	b.n	80014d2 <ADC_searchTrigger_A1+0xd6>
        }
      }
      else {
        if(data<=trigger) {
 80014b6:	88ba      	ldrh	r2, [r7, #4]
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d809      	bhi.n	80014d2 <ADC_searchTrigger_A1+0xd6>
          ADC_UB.status=ADC_TRIGGER_OK;
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 80014c0:	2203      	movs	r2, #3
 80014c2:	701a      	strb	r2, [r3, #0]
          ADC_UB.trigger_pos=n;
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6053      	str	r3, [r2, #4]
          ADC_UB.trigger_quarter=1;
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <ADC_searchTrigger_A1+0xf8>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	609a      	str	r2, [r3, #8]
          break;
 80014d0:	e007      	b.n	80014e2 <ADC_searchTrigger_A1+0xe6>
    for(n=0;n<ADC_HALF_ARRAY_LEN;n++) {
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b95      	cmp	r3, #149	; 0x95
 80014dc:	d9d7      	bls.n	800148e <ADC_searchTrigger_A1+0x92>
 80014de:	e000      	b.n	80014e2 <ADC_searchTrigger_A1+0xe6>
  if(Menu.trigger.mode==1) return;
 80014e0:	bf00      	nop
        }
      }
    }
  }
}
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	2000277c 	.word	0x2000277c
 80014f0:	20001e0c 	.word	0x20001e0c
 80014f4:	20001dfc 	.word	0x20001dfc

080014f8 <ADC_searchTrigger_A2>:
//--------------------------------------------------------------
// interne Funktion
// sucht Trigger-Punkt in Quadrant-2
//--------------------------------------------------------------
void ADC_searchTrigger_A2(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
  uint32_t n,ch;
  uint16_t data,trigger;

  if(Menu.trigger.mode==1) return;
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <ADC_searchTrigger_A2+0xf4>)
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	2b01      	cmp	r3, #1
 8001504:	d06c      	beq.n	80015e0 <ADC_searchTrigger_A2+0xe8>

  if(Menu.trigger.source==0) {
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <ADC_searchTrigger_A2+0xf4>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <ADC_searchTrigger_A2+0x22>
    ch=0;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
    trigger=Menu.trigger.value_ch1;
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <ADC_searchTrigger_A2+0xf4>)
 8001514:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001516:	80fb      	strh	r3, [r7, #6]
 8001518:	e004      	b.n	8001524 <ADC_searchTrigger_A2+0x2c>
  }
  else {
    ch=1;
 800151a:	2301      	movs	r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
    trigger=Menu.trigger.value_ch2;
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <ADC_searchTrigger_A2+0xf4>)
 8001520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001522:	80fb      	strh	r3, [r7, #6]
  }

  if(Menu.trigger.edge==0) {
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <ADC_searchTrigger_A2+0xf4>)
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	d12c      	bne.n	8001586 <ADC_searchTrigger_A2+0x8e>
    for(n=ADC_HALF_ARRAY_LEN;n<ADC_ARRAY_LEN;n++) {
 800152c:	2396      	movs	r3, #150	; 0x96
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	e024      	b.n	800157c <ADC_searchTrigger_A2+0x84>
      data=ADC_DMA_Buffer_A[(n*2)+ch];
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	005a      	lsls	r2, r3, #1
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	4413      	add	r3, r2
 800153a:	4a2d      	ldr	r2, [pc, #180]	; (80015f0 <ADC_searchTrigger_A2+0xf8>)
 800153c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001540:	80bb      	strh	r3, [r7, #4]
      if(ADC_UB.status==ADC_RUNNING) {
 8001542:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <ADC_searchTrigger_A2+0x62>
        if(data<trigger) {
 800154a:	88ba      	ldrh	r2, [r7, #4]
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	429a      	cmp	r2, r3
 8001550:	d211      	bcs.n	8001576 <ADC_searchTrigger_A2+0x7e>
          ADC_UB.status=ADC_PRE_TRIGGER;
 8001552:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 8001554:	2202      	movs	r2, #2
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e00d      	b.n	8001576 <ADC_searchTrigger_A2+0x7e>
        }
      }
      else {
        if(data>=trigger) {
 800155a:	88ba      	ldrh	r2, [r7, #4]
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	429a      	cmp	r2, r3
 8001560:	d309      	bcc.n	8001576 <ADC_searchTrigger_A2+0x7e>
          ADC_UB.status=ADC_TRIGGER_OK;
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 8001564:	2203      	movs	r2, #3
 8001566:	701a      	strb	r2, [r3, #0]
          ADC_UB.trigger_pos=n;
 8001568:	4a22      	ldr	r2, [pc, #136]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6053      	str	r3, [r2, #4]
          ADC_UB.trigger_quarter=2;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 8001570:	2202      	movs	r2, #2
 8001572:	609a      	str	r2, [r3, #8]
          break;
 8001574:	e035      	b.n	80015e2 <ADC_searchTrigger_A2+0xea>
    for(n=ADC_HALF_ARRAY_LEN;n<ADC_ARRAY_LEN;n++) {
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3301      	adds	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001582:	d3d6      	bcc.n	8001532 <ADC_searchTrigger_A2+0x3a>
 8001584:	e02d      	b.n	80015e2 <ADC_searchTrigger_A2+0xea>
        }
      }
    }
  }
  else {
    for(n=ADC_HALF_ARRAY_LEN;n<ADC_ARRAY_LEN;n++) {
 8001586:	2396      	movs	r3, #150	; 0x96
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e024      	b.n	80015d6 <ADC_searchTrigger_A2+0xde>
      data=ADC_DMA_Buffer_A[(n*2)+ch];
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	005a      	lsls	r2, r3, #1
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4413      	add	r3, r2
 8001594:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <ADC_searchTrigger_A2+0xf8>)
 8001596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800159a:	80bb      	strh	r3, [r7, #4]
      if(ADC_UB.status==ADC_RUNNING) {
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d107      	bne.n	80015b4 <ADC_searchTrigger_A2+0xbc>
        if(data>trigger) {
 80015a4:	88ba      	ldrh	r2, [r7, #4]
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d911      	bls.n	80015d0 <ADC_searchTrigger_A2+0xd8>
          ADC_UB.status=ADC_PRE_TRIGGER;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e00d      	b.n	80015d0 <ADC_searchTrigger_A2+0xd8>
        }
      }
      else {
        if(data<=trigger) {
 80015b4:	88ba      	ldrh	r2, [r7, #4]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d809      	bhi.n	80015d0 <ADC_searchTrigger_A2+0xd8>
          ADC_UB.status=ADC_TRIGGER_OK;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 80015be:	2203      	movs	r2, #3
 80015c0:	701a      	strb	r2, [r3, #0]
          ADC_UB.trigger_pos=n;
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6053      	str	r3, [r2, #4]
          ADC_UB.trigger_quarter=2;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <ADC_searchTrigger_A2+0xfc>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	609a      	str	r2, [r3, #8]
          break;
 80015ce:	e008      	b.n	80015e2 <ADC_searchTrigger_A2+0xea>
    for(n=ADC_HALF_ARRAY_LEN;n<ADC_ARRAY_LEN;n++) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015dc:	d3d6      	bcc.n	800158c <ADC_searchTrigger_A2+0x94>
 80015de:	e000      	b.n	80015e2 <ADC_searchTrigger_A2+0xea>
  if(Menu.trigger.mode==1) return;
 80015e0:	bf00      	nop
        }
      }
    }
  }
}
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	2000277c 	.word	0x2000277c
 80015f0:	20001e0c 	.word	0x20001e0c
 80015f4:	20001dfc 	.word	0x20001dfc

080015f8 <ADC_searchTrigger_B1>:
//--------------------------------------------------------------
// interne Funktion
// sucht Trigger-Punkt in Quadrant-3
//--------------------------------------------------------------
void ADC_searchTrigger_B1(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
  uint32_t n,ch;
  uint16_t data,trigger;

  if(Menu.trigger.mode==1) return;
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <ADC_searchTrigger_B1+0xf0>)
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	2b01      	cmp	r3, #1
 8001604:	d06a      	beq.n	80016dc <ADC_searchTrigger_B1+0xe4>

  if(Menu.trigger.source==0) {
 8001606:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <ADC_searchTrigger_B1+0xf0>)
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <ADC_searchTrigger_B1+0x22>
    ch=0;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
    trigger=Menu.trigger.value_ch1;
 8001612:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <ADC_searchTrigger_B1+0xf0>)
 8001614:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001616:	80fb      	strh	r3, [r7, #6]
 8001618:	e004      	b.n	8001624 <ADC_searchTrigger_B1+0x2c>
  }
  else {
    ch=1;
 800161a:	2301      	movs	r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
    trigger=Menu.trigger.value_ch2;
 800161e:	4b32      	ldr	r3, [pc, #200]	; (80016e8 <ADC_searchTrigger_B1+0xf0>)
 8001620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001622:	80fb      	strh	r3, [r7, #6]
  }

  if(Menu.trigger.edge==0) {
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <ADC_searchTrigger_B1+0xf0>)
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	d12b      	bne.n	8001684 <ADC_searchTrigger_B1+0x8c>
    for(n=0;n<ADC_HALF_ARRAY_LEN;n++) {
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e024      	b.n	800167c <ADC_searchTrigger_B1+0x84>
      data=ADC_DMA_Buffer_B[(n*2)+ch];
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	005a      	lsls	r2, r3, #1
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	4413      	add	r3, r2
 800163a:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <ADC_searchTrigger_B1+0xf4>)
 800163c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001640:	80bb      	strh	r3, [r7, #4]
      if(ADC_UB.status==ADC_RUNNING) {
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <ADC_searchTrigger_B1+0x62>
        if(data<trigger) {
 800164a:	88ba      	ldrh	r2, [r7, #4]
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	429a      	cmp	r2, r3
 8001650:	d211      	bcs.n	8001676 <ADC_searchTrigger_B1+0x7e>
          ADC_UB.status=ADC_PRE_TRIGGER;
 8001652:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 8001654:	2202      	movs	r2, #2
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e00d      	b.n	8001676 <ADC_searchTrigger_B1+0x7e>
        }
      }
      else {
        if(data>=trigger) {
 800165a:	88ba      	ldrh	r2, [r7, #4]
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	429a      	cmp	r2, r3
 8001660:	d309      	bcc.n	8001676 <ADC_searchTrigger_B1+0x7e>
          ADC_UB.status=ADC_TRIGGER_OK;
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 8001664:	2203      	movs	r2, #3
 8001666:	701a      	strb	r2, [r3, #0]
          ADC_UB.trigger_pos=n;
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6053      	str	r3, [r2, #4]
          ADC_UB.trigger_quarter=3;
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 8001670:	2203      	movs	r2, #3
 8001672:	609a      	str	r2, [r3, #8]
          break;
 8001674:	e033      	b.n	80016de <ADC_searchTrigger_B1+0xe6>
    for(n=0;n<ADC_HALF_ARRAY_LEN;n++) {
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3301      	adds	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b95      	cmp	r3, #149	; 0x95
 8001680:	d9d7      	bls.n	8001632 <ADC_searchTrigger_B1+0x3a>
 8001682:	e02c      	b.n	80016de <ADC_searchTrigger_B1+0xe6>
        }
      }
    }
  }
  else {
    for(n=0;n<ADC_HALF_ARRAY_LEN;n++) {
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e024      	b.n	80016d4 <ADC_searchTrigger_B1+0xdc>
      data=ADC_DMA_Buffer_B[(n*2)+ch];
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	005a      	lsls	r2, r3, #1
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	4413      	add	r3, r2
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <ADC_searchTrigger_B1+0xf4>)
 8001694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001698:	80bb      	strh	r3, [r7, #4]
      if(ADC_UB.status==ADC_RUNNING) {
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <ADC_searchTrigger_B1+0xba>
        if(data>trigger) {
 80016a2:	88ba      	ldrh	r2, [r7, #4]
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d911      	bls.n	80016ce <ADC_searchTrigger_B1+0xd6>
          ADC_UB.status=ADC_PRE_TRIGGER;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 80016ac:	2202      	movs	r2, #2
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	e00d      	b.n	80016ce <ADC_searchTrigger_B1+0xd6>
        }
      }
      else {
        if(data<=trigger) {
 80016b2:	88ba      	ldrh	r2, [r7, #4]
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d809      	bhi.n	80016ce <ADC_searchTrigger_B1+0xd6>
          ADC_UB.status=ADC_TRIGGER_OK;
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 80016bc:	2203      	movs	r2, #3
 80016be:	701a      	strb	r2, [r3, #0]
          ADC_UB.trigger_pos=n;
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6053      	str	r3, [r2, #4]
          ADC_UB.trigger_quarter=3;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <ADC_searchTrigger_B1+0xf8>)
 80016c8:	2203      	movs	r2, #3
 80016ca:	609a      	str	r2, [r3, #8]
          break;
 80016cc:	e007      	b.n	80016de <ADC_searchTrigger_B1+0xe6>
    for(n=0;n<ADC_HALF_ARRAY_LEN;n++) {
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b95      	cmp	r3, #149	; 0x95
 80016d8:	d9d7      	bls.n	800168a <ADC_searchTrigger_B1+0x92>
 80016da:	e000      	b.n	80016de <ADC_searchTrigger_B1+0xe6>
  if(Menu.trigger.mode==1) return;
 80016dc:	bf00      	nop
        }
      }
    }
  }
}
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	2000277c 	.word	0x2000277c
 80016ec:	200022cc 	.word	0x200022cc
 80016f0:	20001dfc 	.word	0x20001dfc

080016f4 <ADC_searchTrigger_B2>:
//--------------------------------------------------------------
// interne Funktion
// sucht Trigger-Punkt in Quadrant-4
//--------------------------------------------------------------
void ADC_searchTrigger_B2(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
  uint32_t n,ch;
  uint16_t data,trigger;

  if(Menu.trigger.mode==1) return;
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <ADC_searchTrigger_B2+0xf4>)
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d06c      	beq.n	80017dc <ADC_searchTrigger_B2+0xe8>

  if(Menu.trigger.source==0) {
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <ADC_searchTrigger_B2+0xf4>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2b00      	cmp	r3, #0
 8001708:	d105      	bne.n	8001716 <ADC_searchTrigger_B2+0x22>
    ch=0;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
    trigger=Menu.trigger.value_ch1;
 800170e:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <ADC_searchTrigger_B2+0xf4>)
 8001710:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001712:	80fb      	strh	r3, [r7, #6]
 8001714:	e004      	b.n	8001720 <ADC_searchTrigger_B2+0x2c>
  }
  else {
    ch=1;
 8001716:	2301      	movs	r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
    trigger=Menu.trigger.value_ch2;
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <ADC_searchTrigger_B2+0xf4>)
 800171c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800171e:	80fb      	strh	r3, [r7, #6]
  }

  if(Menu.trigger.edge==0) {
 8001720:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <ADC_searchTrigger_B2+0xf4>)
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	2b00      	cmp	r3, #0
 8001726:	d12c      	bne.n	8001782 <ADC_searchTrigger_B2+0x8e>
    for(n=ADC_HALF_ARRAY_LEN;n<ADC_ARRAY_LEN;n++) {
 8001728:	2396      	movs	r3, #150	; 0x96
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e024      	b.n	8001778 <ADC_searchTrigger_B2+0x84>
      data=ADC_DMA_Buffer_B[(n*2)+ch];
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	005a      	lsls	r2, r3, #1
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	4a2d      	ldr	r2, [pc, #180]	; (80017ec <ADC_searchTrigger_B2+0xf8>)
 8001738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173c:	80bb      	strh	r3, [r7, #4]
      if(ADC_UB.status==ADC_RUNNING) {
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <ADC_searchTrigger_B2+0x62>
        if(data<trigger) {
 8001746:	88ba      	ldrh	r2, [r7, #4]
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	429a      	cmp	r2, r3
 800174c:	d211      	bcs.n	8001772 <ADC_searchTrigger_B2+0x7e>
          ADC_UB.status=ADC_PRE_TRIGGER;
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 8001750:	2202      	movs	r2, #2
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	e00d      	b.n	8001772 <ADC_searchTrigger_B2+0x7e>
        }
      }
      else {
        if(data>=trigger) {
 8001756:	88ba      	ldrh	r2, [r7, #4]
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	429a      	cmp	r2, r3
 800175c:	d309      	bcc.n	8001772 <ADC_searchTrigger_B2+0x7e>
          ADC_UB.status=ADC_TRIGGER_OK;
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 8001760:	2203      	movs	r2, #3
 8001762:	701a      	strb	r2, [r3, #0]
          ADC_UB.trigger_pos=n;
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6053      	str	r3, [r2, #4]
          ADC_UB.trigger_quarter=4;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 800176c:	2204      	movs	r2, #4
 800176e:	609a      	str	r2, [r3, #8]
          break;
 8001770:	e035      	b.n	80017de <ADC_searchTrigger_B2+0xea>
    for(n=ADC_HALF_ARRAY_LEN;n<ADC_ARRAY_LEN;n++) {
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3301      	adds	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800177e:	d3d6      	bcc.n	800172e <ADC_searchTrigger_B2+0x3a>
 8001780:	e02d      	b.n	80017de <ADC_searchTrigger_B2+0xea>
        }
      }
    }
  }
  else {
    for(n=ADC_HALF_ARRAY_LEN;n<ADC_ARRAY_LEN;n++) {
 8001782:	2396      	movs	r3, #150	; 0x96
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e024      	b.n	80017d2 <ADC_searchTrigger_B2+0xde>
      data=ADC_DMA_Buffer_B[(n*2)+ch];
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	005a      	lsls	r2, r3, #1
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4413      	add	r3, r2
 8001790:	4a16      	ldr	r2, [pc, #88]	; (80017ec <ADC_searchTrigger_B2+0xf8>)
 8001792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001796:	80bb      	strh	r3, [r7, #4]
      if(ADC_UB.status==ADC_RUNNING) {
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <ADC_searchTrigger_B2+0xbc>
        if(data>trigger) {
 80017a0:	88ba      	ldrh	r2, [r7, #4]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d911      	bls.n	80017cc <ADC_searchTrigger_B2+0xd8>
          ADC_UB.status=ADC_PRE_TRIGGER;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 80017aa:	2202      	movs	r2, #2
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e00d      	b.n	80017cc <ADC_searchTrigger_B2+0xd8>
        }
      }
      else {
        if(data<=trigger) {
 80017b0:	88ba      	ldrh	r2, [r7, #4]
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d809      	bhi.n	80017cc <ADC_searchTrigger_B2+0xd8>
          ADC_UB.status=ADC_TRIGGER_OK;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 80017ba:	2203      	movs	r2, #3
 80017bc:	701a      	strb	r2, [r3, #0]
          ADC_UB.trigger_pos=n;
 80017be:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6053      	str	r3, [r2, #4]
          ADC_UB.trigger_quarter=4;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <ADC_searchTrigger_B2+0xfc>)
 80017c6:	2204      	movs	r2, #4
 80017c8:	609a      	str	r2, [r3, #8]
          break;
 80017ca:	e008      	b.n	80017de <ADC_searchTrigger_B2+0xea>
    for(n=ADC_HALF_ARRAY_LEN;n<ADC_ARRAY_LEN;n++) {
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3301      	adds	r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017d8:	d3d6      	bcc.n	8001788 <ADC_searchTrigger_B2+0x94>
 80017da:	e000      	b.n	80017de <ADC_searchTrigger_B2+0xea>
  if(Menu.trigger.mode==1) return;
 80017dc:	bf00      	nop
        }
      }
    }
  }
}
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	2000277c 	.word	0x2000277c
 80017ec:	200022cc 	.word	0x200022cc
 80017f0:	20001dfc 	.word	0x20001dfc

080017f4 <fft_init>:
// init vom FFT-Modul
// return_val : 0 = Fehler beim init
//            1 = init ok
//--------------------------------------------------------------
uint32_t fft_init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af02      	add	r7, sp, #8
  uint32_t return_val=0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  arm_status status;
  uint32_t doBitReverse = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
  uint32_t ifftFlag = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]

  status = ARM_MATH_SUCCESS;
 8001806:	2300      	movs	r3, #0
 8001808:	70fb      	strb	r3, [r7, #3]
  // FFT init
  status = arm_rfft_init_f32(&S, &S_CFFT, FFT_LENGTH, ifftFlag, doBitReverse);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001814:	4909      	ldr	r1, [pc, #36]	; (800183c <fft_init+0x48>)
 8001816:	480a      	ldr	r0, [pc, #40]	; (8001840 <fft_init+0x4c>)
 8001818:	f007 fb28 	bl	8008e6c <arm_rfft_init_f32>
 800181c:	4603      	mov	r3, r0
 800181e:	70fb      	strb	r3, [r7, #3]
  if(status!=ARM_MATH_SUCCESS) return(0);
 8001820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <fft_init+0x38>
 8001828:	2300      	movs	r3, #0
 800182a:	e002      	b.n	8001832 <fft_init+0x3e>

  return_val=1;
 800182c:	2301      	movs	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]

  return(return_val);
 8001830:	68fb      	ldr	r3, [r7, #12]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200031ec 	.word	0x200031ec
 8001840:	200029d4 	.word	0x200029d4

08001844 <fft_calc>:
//--------------------------------------------------------------
// berechnet die FFT
// rechnet die Daten dann noch in Pixeldatae um
//--------------------------------------------------------------
void fft_calc(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  float maxValue;
  uint32_t n;

  // FFT berechnen
  arm_rfft_f32(&S, FFT_DATA_IN, FFT_CMPLX_DATA);
 800184a:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <fft_calc+0xb0>)
 800184c:	492a      	ldr	r1, [pc, #168]	; (80018f8 <fft_calc+0xb4>)
 800184e:	482b      	ldr	r0, [pc, #172]	; (80018fc <fft_calc+0xb8>)
 8001850:	f007 f918 	bl	8008a84 <arm_rfft_f32>
  arm_cmplx_mag_f32(FFT_CMPLX_DATA, FFT_MAG_DATA, FFT_LENGTH);
 8001854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001858:	4929      	ldr	r1, [pc, #164]	; (8001900 <fft_calc+0xbc>)
 800185a:	4826      	ldr	r0, [pc, #152]	; (80018f4 <fft_calc+0xb0>)
 800185c:	f005 fbed 	bl	800703a <arm_cmplx_mag_f32>

  // Maximum manuell suchen
  // die ersten beiden Eintr�ge �berspringen
  maxValue=0.1;
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <fft_calc+0xc0>)
 8001862:	607b      	str	r3, [r7, #4]
  for(n=2;n<FFT_VISIBLE_LENGTH;n++) {
 8001864:	2302      	movs	r3, #2
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	e015      	b.n	8001896 <fft_calc+0x52>
    if(FFT_MAG_DATA[n]>maxValue) maxValue=FFT_MAG_DATA[n];
 800186a:	4a25      	ldr	r2, [pc, #148]	; (8001900 <fft_calc+0xbc>)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ed97 7a01 	vldr	s14, [r7, #4]
 800187a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	d505      	bpl.n	8001890 <fft_calc+0x4c>
 8001884:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <fft_calc+0xbc>)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	607b      	str	r3, [r7, #4]
  for(n=2;n<FFT_VISIBLE_LENGTH;n++) {
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2bff      	cmp	r3, #255	; 0xff
 800189a:	d9e6      	bls.n	800186a <fft_calc+0x26>
  }

  // alle datae auf das Maximum normieren
  // die ersten beiden Eintr�ge auf 0 setzen
  FFT_UINT_DATA[0]=0;
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <fft_calc+0xc4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	801a      	strh	r2, [r3, #0]
  FFT_UINT_DATA[1]=0;
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <fft_calc+0xc4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	805a      	strh	r2, [r3, #2]
  for(n=2;n<FFT_VISIBLE_LENGTH;n++) {
 80018a8:	2302      	movs	r3, #2
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	e019      	b.n	80018e2 <fft_calc+0x9e>
    FFT_UINT_DATA[n]=(uint16_t)(FFT_UINT_MAXdata*FFT_MAG_DATA[n]/maxValue);
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <fft_calc+0xbc>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800190c <fft_calc+0xc8>
 80018be:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80018c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ce:	ee17 3a90 	vmov	r3, s15
 80018d2:	b299      	uxth	r1, r3
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <fft_calc+0xc4>)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(n=2;n<FFT_VISIBLE_LENGTH;n++) {
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2bff      	cmp	r3, #255	; 0xff
 80018e6:	d9e2      	bls.n	80018ae <fft_calc+0x6a>
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000110 	.word	0x20000110
 80018f8:	200029ec 	.word	0x200029ec
 80018fc:	200029d4 	.word	0x200029d4
 8001900:	20001110 	.word	0x20001110
 8001904:	3dcccccd 	.word	0x3dcccccd
 8001908:	200027d4 	.word	0x200027d4
 800190c:	42c80000 	.word	0x42c80000

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// For freezing the timers when debugging (If the core halts, also do the timers)
	 __HAL_DBGMCU_FREEZE_TIM2();
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <main+0x60>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <main+0x60>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6093      	str	r3, [r2, #8]
	 __HAL_DBGMCU_FREEZE_TIM5();
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <main+0x60>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <main+0x60>)
 8001926:	f043 0308 	orr.w	r3, r3, #8
 800192a:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192c:	f007 fb0a 	bl	8008f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001930:	f000 f820 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001934:	f000 fc56 	bl	80021e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001938:	f000 fbe2 	bl	8002100 <MX_DMA_Init>
  MX_DMA2D_Init();
 800193c:	f000 f97e 	bl	8001c3c <MX_DMA2D_Init>
  MX_FMC_Init();
 8001940:	f000 fbfe 	bl	8002140 <MX_FMC_Init>
  MX_I2C3_Init();
 8001944:	f000 f9ac 	bl	8001ca0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001948:	f000 f9ea 	bl	8001d20 <MX_LTDC_Init>
  MX_ADC1_Init();
 800194c:	f000 f8a0 	bl	8001a90 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001950:	f000 f92a 	bl	8001ba8 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001954:	f000 fafc 	bl	8001f50 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001958:	f000 fac4 	bl	8001ee4 <MX_SPI5_Init>
  MX_TIM5_Init();
 800195c:	f000 fb56 	bl	800200c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001960:	f000 fba4 	bl	80020ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  oszi_init();
 8001964:	f003 fa5c 	bl	8004e20 <oszi_init>
  oszi_start();
 8001968:	f003 fa9e 	bl	8004ea8 <oszi_start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800196c:	e7fe      	b.n	800196c <main+0x5c>
 800196e:	bf00      	nop
 8001970:	e0042000 	.word	0xe0042000

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b0a0      	sub	sp, #128	; 0x80
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800197e:	2230      	movs	r2, #48	; 0x30
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f010 fac8 	bl	8011f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2230      	movs	r2, #48	; 0x30
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f010 fab9 	bl	8011f18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <SystemClock_Config+0x114>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <SystemClock_Config+0x114>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <SystemClock_Config+0x114>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <SystemClock_Config+0x118>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <SystemClock_Config+0x118>)
 80019cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <SystemClock_Config+0x118>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019de:	2301      	movs	r3, #1
 80019e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e8:	2302      	movs	r3, #2
 80019ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019f2:	2308      	movs	r3, #8
 80019f4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 80019f6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80019fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a00:	2303      	movs	r3, #3
 8001a02:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fa57 	bl	800debc <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001a14:	f000 fcda 	bl	80023cc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a18:	f00c fa00 	bl	800de1c <HAL_PWREx_EnableOverDrive>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a22:	f000 fcd3 	bl	80023cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a26:	230f      	movs	r3, #15
 8001a28:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a42:	2105      	movs	r1, #5
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00c fcb1 	bl	800e3ac <HAL_RCC_ClockConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001a50:	f000 fcbc 	bl	80023cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a54:	2308      	movs	r3, #8
 8001a56:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a58:	23c0      	movs	r3, #192	; 0xc0
 8001a5a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00c fec2 	bl	800e7f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001a76:	f000 fca9 	bl	80023cc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001a7a:	f00c fd7d 	bl	800e578 <HAL_RCC_EnableCSS>
}
 8001a7e:	bf00      	nop
 8001a80:	3780      	adds	r7, #128	; 0x80
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40007000 	.word	0x40007000

08001a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	; 0x38
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ac0:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ac2:	4a37      	ldr	r2, [pc, #220]	; (8001ba0 <MX_ADC1_Init+0x110>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ac6:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ac8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001acc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ace:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ad4:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ae0:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001af0:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001af2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b12:	4822      	ldr	r0, [pc, #136]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b14:	f007 faac 	bl	8009070 <HAL_ADC_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001b1e:	f000 fc55 	bl	80023cc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001b22:	2306      	movs	r3, #6
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8001b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b34:	4619      	mov	r1, r3
 8001b36:	4819      	ldr	r0, [pc, #100]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b38:	f007 ff60 	bl	80099fc <HAL_ADCEx_MultiModeConfigChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001b42:	f000 fc43 	bl	80023cc <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <MX_ADC1_Init+0x114>)
 8001b48:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.HighThreshold = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.LowThreshold = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8001b52:	2305      	movs	r3, #5
 8001b54:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.ITMode = DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b64:	f007 fcd6 	bl	8009514 <HAL_ADC_AnalogWDGConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001b6e:	f000 fc2d 	bl	80023cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b72:	2305      	movs	r3, #5
 8001b74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4806      	ldr	r0, [pc, #24]	; (8001b9c <MX_ADC1_Init+0x10c>)
 8001b84:	f007 fb94 	bl	80092b0 <HAL_ADC_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001b8e:	f000 fc1d 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	3738      	adds	r7, #56	; 0x38
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200033e4 	.word	0x200033e4
 8001ba0:	40012000 	.word	0x40012000
 8001ba4:	00800200 	.word	0x00800200

08001ba8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bbc:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <MX_ADC2_Init+0x90>)
 8001bbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bc6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001bfe:	f007 fa37 	bl	8009070 <HAL_ADC_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001c08:	f000 fbe0 	bl	80023cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_ADC2_Init+0x8c>)
 8001c1e:	f007 fb47 	bl	80092b0 <HAL_ADC_ConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001c28:	f000 fbd0 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200032ac 	.word	0x200032ac
 8001c38:	40012100 	.word	0x40012100

08001c3c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c42:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <MX_DMA2D_Init+0x60>)
 8001c44:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c4e:	2202      	movs	r2, #2
 8001c50:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c70:	4809      	ldr	r0, [pc, #36]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c72:	f008 fcb3 	bl	800a5dc <HAL_DMA2D_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001c7c:	f000 fba6 	bl	80023cc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c80:	2101      	movs	r1, #1
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_DMA2D_Init+0x5c>)
 8001c84:	f009 f84c 	bl	800ad20 <HAL_DMA2D_ConfigLayer>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001c8e:	f000 fb9d 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200034d0 	.word	0x200034d0
 8001c9c:	4002b000 	.word	0x4002b000

08001ca0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <MX_I2C3_Init+0x78>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001cac:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <MX_I2C3_Init+0x7c>)
 8001cae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cc2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001cde:	f00a fc9b 	bl	800c618 <HAL_I2C_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ce8:	f000 fb70 	bl	80023cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001cf0:	f00b fc51 	bl	800d596 <HAL_I2CEx_ConfigAnalogFilter>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001cfa:	f000 fb67 	bl	80023cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_I2C3_Init+0x74>)
 8001d02:	f00b fc84 	bl	800d60e <HAL_I2CEx_ConfigDigitalFilter>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001d0c:	f000 fb5e 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20003200 	.word	0x20003200
 8001d18:	40005c00 	.word	0x40005c00
 8001d1c:	00061a80 	.word	0x00061a80

08001d20 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b09a      	sub	sp, #104	; 0x68
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001d26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d2a:	2234      	movs	r2, #52	; 0x34
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f010 f8f2 	bl	8011f18 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001d34:	463b      	mov	r3, r7
 8001d36:	2234      	movs	r2, #52	; 0x34
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f010 f8ec 	bl	8011f18 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001d40:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d42:	4a66      	ldr	r2, [pc, #408]	; (8001edc <MX_LTDC_Init+0x1bc>)
 8001d44:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d46:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001d4c:	4b62      	ldr	r3, [pc, #392]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d52:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d58:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001d5e:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d60:	2209      	movs	r2, #9
 8001d62:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001d64:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d6c:	221d      	movs	r2, #29
 8001d6e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001d70:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d72:	2203      	movs	r2, #3
 8001d74:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001d76:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d78:	f240 120d 	movw	r2, #269	; 0x10d
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001d7e:	4b56      	ldr	r3, [pc, #344]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d80:	f240 1243 	movw	r2, #323	; 0x143
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d88:	f240 1217 	movw	r2, #279	; 0x117
 8001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001d8e:	4b52      	ldr	r3, [pc, #328]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d90:	f240 1247 	movw	r2, #327	; 0x147
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001d96:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001d9e:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001dae:	484a      	ldr	r0, [pc, #296]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001db0:	f00b fc6c 	bl	800d68c <HAL_LTDC_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001dba:	f000 fb07 	bl	80023cc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8001dc2:	23f0      	movs	r3, #240	; 0xf0
 8001dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8001dca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001dce:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001dd4:	23ff      	movs	r3, #255	; 0xff
 8001dd6:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de0:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001de2:	2305      	movs	r3, #5
 8001de4:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001de6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001dea:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001dec:	23f0      	movs	r3, #240	; 0xf0
 8001dee:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001df0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001df4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001e08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4831      	ldr	r0, [pc, #196]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001e12:	f00b fdcd 	bl	800d9b0 <HAL_LTDC_ConfigLayer>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8001e1c:	f000 fad6 	bl	80023cc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 8001e24:	23f0      	movs	r3, #240	; 0xf0
 8001e26:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 8001e2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e30:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001e32:	2302      	movs	r3, #2
 8001e34:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e42:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e44:	2307      	movs	r3, #7
 8001e46:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0xD0025800;
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <MX_LTDC_Init+0x1c0>)
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 8001e4c:	23f0      	movs	r3, #240	; 0xf0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 8001e50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001e70:	f00b fd9e 	bl	800d9b0 <HAL_LTDC_ConfigLayer>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_LTDC_Init+0x15e>
  {
    Error_Handler();
 8001e7a:	f000 faa7 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

    __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_LTDC_LAYER_ENABLE(&hltdc, LTDC_LAYER_1);
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3384      	adds	r3, #132	; 0x84
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	3284      	adds	r2, #132	; 0x84
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6013      	str	r3, [r2, #0]
    __HAL_LTDC_LAYER_ENABLE(&hltdc, LTDC_LAYER_2);
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6013      	str	r3, [r2, #0]
    HAL_LTDC_EnableDither(&hltdc);
 8001eba:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001ebc:	f00b fdb6 	bl	800da2c <HAL_LTDC_EnableDither>
    __HAL_LTDC_ENABLE(&hltdc);
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <MX_LTDC_Init+0x1b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	619a      	str	r2, [r3, #24]

  /* USER CODE END LTDC_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	3768      	adds	r7, #104	; 0x68
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	2000333c 	.word	0x2000333c
 8001edc:	40016800 	.word	0x40016800
 8001ee0:	d0025800 	.word	0xd0025800

08001ee4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <MX_SPI5_Init+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001f18:	2218      	movs	r2, #24
 8001f1a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001f30:	220a      	movs	r2, #10
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_SPI5_Init+0x64>)
 8001f36:	f00c ff2b 	bl	800ed90 <HAL_SPI_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001f40:	f000 fa44 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20003254 	.word	0x20003254
 8001f4c:	40015000 	.word	0x40015000

08001f50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f64:	463b      	mov	r3, r7
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001f6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001f82:	f04f 32ff 	mov.w	r2, #4294967295
 8001f86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f94:	481b      	ldr	r0, [pc, #108]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001f96:	f00d f98b 	bl	800f2b0 <HAL_TIM_Base_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001fa0:	f000 fa14 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4814      	ldr	r0, [pc, #80]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001fb2:	f00d fbad 	bl	800f710 <HAL_TIM_ConfigClockSource>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fbc:	f000 fa06 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc8:	463b      	mov	r3, r7
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001fce:	f00d fdcf 	bl	800fb70 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001fd8:	f000 f9f8 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  while(__HAL_TIM_GET_FLAG(&htim2,0x1EFF)){
 8001fdc:	e003      	b.n	8001fe6 <MX_TIM2_Init+0x96>
  	  __HAL_TIM_CLEAR_FLAG(&htim2,0x1EFF);	// Clear all flags
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <MX_TIM2_Init+0xb8>)
 8001fe4:	611a      	str	r2, [r3, #16]
  while(__HAL_TIM_GET_FLAG(&htim2,0x1EFF)){
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <MX_TIM2_Init+0xb4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	f641 63ff 	movw	r3, #7935	; 0x1eff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	f641 62ff 	movw	r2, #7935	; 0x1eff
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d0f1      	beq.n	8001fde <MX_TIM2_Init+0x8e>
  	}
  /* USER CODE END TIM2_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20003510 	.word	0x20003510
 8002008:	ffffe100 	.word	0xffffe100

0800200c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	463b      	mov	r3, r7
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002028:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <MX_TIM5_Init+0x98>)
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <MX_TIM5_Init+0x9c>)
 800202c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <MX_TIM5_Init+0x98>)
 8002030:	2263      	movs	r2, #99	; 0x63
 8002032:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <MX_TIM5_Init+0x98>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 44;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_TIM5_Init+0x98>)
 800203c:	222c      	movs	r2, #44	; 0x2c
 800203e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_TIM5_Init+0x98>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_TIM5_Init+0x98>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800204c:	4815      	ldr	r0, [pc, #84]	; (80020a4 <MX_TIM5_Init+0x98>)
 800204e:	f00d f92f 	bl	800f2b0 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002058:	f000 f9b8 	bl	80023cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	4619      	mov	r1, r3
 8002068:	480e      	ldr	r0, [pc, #56]	; (80020a4 <MX_TIM5_Init+0x98>)
 800206a:	f00d fb51 	bl	800f710 <HAL_TIM_ConfigClockSource>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002074:	f000 f9aa 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002078:	2320      	movs	r3, #32
 800207a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002080:	463b      	mov	r3, r7
 8002082:	4619      	mov	r1, r3
 8002084:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_TIM5_Init+0x98>)
 8002086:	f00d fd73 	bl	800fb70 <HAL_TIMEx_MasterConfigSynchronization>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8002090:	f000 f99c 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <MX_TIM5_Init+0x98>)
 8002096:	f00d f9c3 	bl	800f420 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM5_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200032f4 	.word	0x200032f4
 80020a8:	40000c00 	.word	0x40000c00

080020ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <MX_USART1_UART_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020d2:	2208      	movs	r2, #8
 80020d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020e4:	f00d fdd4 	bl	800fc90 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020ee:	f000 f96d 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000342c 	.word	0x2000342c
 80020fc:	40011000 	.word	0x40011000

08002100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_DMA_Init+0x3c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <MX_DMA_Init+0x3c>)
 8002110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_DMA_Init+0x3c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	2038      	movs	r0, #56	; 0x38
 8002128:	f007 fe25 	bl	8009d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800212c:	2038      	movs	r0, #56	; 0x38
 800212e:	f007 fe3e 	bl	8009dae <HAL_NVIC_EnableIRQ>

}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800

08002140 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
 8002154:	615a      	str	r2, [r3, #20]
 8002156:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <MX_FMC_Init+0x9c>)
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <MX_FMC_Init+0xa0>)
 800215c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <MX_FMC_Init+0x9c>)
 8002160:	2201      	movs	r2, #1
 8002162:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <MX_FMC_Init+0x9c>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <MX_FMC_Init+0x9c>)
 800216c:	2204      	movs	r2, #4
 800216e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <MX_FMC_Init+0x9c>)
 8002172:	2210      	movs	r2, #16
 8002174:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <MX_FMC_Init+0x9c>)
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <MX_FMC_Init+0x9c>)
 800217e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002182:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <MX_FMC_Init+0x9c>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <MX_FMC_Init+0x9c>)
 800218c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002190:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_FMC_Init+0x9c>)
 8002194:	2200      	movs	r2, #0
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <MX_FMC_Init+0x9c>)
 800219a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80021a0:	2302      	movs	r3, #2
 80021a2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80021a4:	2307      	movs	r3, #7
 80021a6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80021a8:	2304      	movs	r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80021ac:	2307      	movs	r3, #7
 80021ae:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80021b0:	2303      	movs	r3, #3
 80021b2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80021b4:	2302      	movs	r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	4806      	ldr	r0, [pc, #24]	; (80021dc <MX_FMC_Init+0x9c>)
 80021c2:	f00c fcd5 	bl	800eb70 <HAL_SDRAM_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80021cc:	f000 f8fe 	bl	80023cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_InitSequence();
 80021d0:	f00f fa8e 	bl	80116f0 <SDRAM_InitSequence>
  /* USER CODE END FMC_Init 2 */
}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2000358c 	.word	0x2000358c
 80021e0:	a0000140 	.word	0xa0000140

080021e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08e      	sub	sp, #56	; 0x38
 80021e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
 80021fe:	4b6d      	ldr	r3, [pc, #436]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a6c      	ldr	r2, [pc, #432]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002204:	f043 0320 	orr.w	r3, r3, #32
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	623b      	str	r3, [r7, #32]
 8002214:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a65      	ldr	r2, [pc, #404]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	4b5f      	ldr	r3, [pc, #380]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a5e      	ldr	r2, [pc, #376]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	4b58      	ldr	r3, [pc, #352]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a57      	ldr	r2, [pc, #348]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b51      	ldr	r3, [pc, #324]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b4e      	ldr	r3, [pc, #312]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a49      	ldr	r2, [pc, #292]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 80022ac:	f043 0310 	orr.w	r3, r3, #16
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b3c      	ldr	r3, [pc, #240]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a3b      	ldr	r2, [pc, #236]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <MX_GPIO_Init+0x1d0>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	2106      	movs	r1, #6
 80022de:	4836      	ldr	r0, [pc, #216]	; (80023b8 <MX_GPIO_Init+0x1d4>)
 80022e0:	f00a f966 	bl	800c5b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2104      	movs	r1, #4
 80022e8:	4834      	ldr	r0, [pc, #208]	; (80023bc <MX_GPIO_Init+0x1d8>)
 80022ea:	f00a f961 	bl	800c5b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80022f4:	4832      	ldr	r0, [pc, #200]	; (80023c0 <MX_GPIO_Init+0x1dc>)
 80022f6:	f00a f95b 	bl	800c5b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002300:	4830      	ldr	r0, [pc, #192]	; (80023c4 <MX_GPIO_Init+0x1e0>)
 8002302:	f00a f955 	bl	800c5b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin;
 8002306:	2306      	movs	r3, #6
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230a:	2301      	movs	r3, #1
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	4619      	mov	r1, r3
 800231c:	4826      	ldr	r0, [pc, #152]	; (80023b8 <MX_GPIO_Init+0x1d4>)
 800231e:	f009 ff9b 	bl	800c258 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002322:	2301      	movs	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	4619      	mov	r1, r3
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <MX_GPIO_Init+0x1e4>)
 8002336:	f009 ff8f 	bl	800c258 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 800233a:	2304      	movs	r3, #4
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233e:	2301      	movs	r3, #1
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 800234a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234e:	4619      	mov	r1, r3
 8002350:	481a      	ldr	r0, [pc, #104]	; (80023bc <MX_GPIO_Init+0x1d8>)
 8002352:	f009 ff81 	bl	800c258 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002368:	4619      	mov	r1, r3
 800236a:	4815      	ldr	r0, [pc, #84]	; (80023c0 <MX_GPIO_Init+0x1dc>)
 800236c:	f009 ff74 	bl	800c258 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002370:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002386:	4619      	mov	r1, r3
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <MX_GPIO_Init+0x1dc>)
 800238a:	f009 ff65 	bl	800c258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800238e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a4:	4619      	mov	r1, r3
 80023a6:	4807      	ldr	r0, [pc, #28]	; (80023c4 <MX_GPIO_Init+0x1e0>)
 80023a8:	f009 ff56 	bl	800c258 <HAL_GPIO_Init>

}
 80023ac:	bf00      	nop
 80023ae:	3738      	adds	r7, #56	; 0x38
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021800 	.word	0x40021800
 80023c8:	40020000 	.word	0x40020000

080023cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d6:	480b      	ldr	r0, [pc, #44]	; (8002404 <Error_Handler+0x38>)
 80023d8:	f00a f8ea 	bl	800c5b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,RESET);
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e2:	4808      	ldr	r0, [pc, #32]	; (8002404 <Error_Handler+0x38>)
 80023e4:	f00a f8e4 	bl	800c5b0 <HAL_GPIO_WritePin>
while(1){
	HAL_Delay(100);
 80023e8:	2064      	movs	r0, #100	; 0x64
 80023ea:	f006 fe1d 	bl	8009028 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin );
 80023ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023f2:	4804      	ldr	r0, [pc, #16]	; (8002404 <Error_Handler+0x38>)
 80023f4:	f00a f8f5 	bl	800c5e2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin );
 80023f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023fc:	4801      	ldr	r0, [pc, #4]	; (8002404 <Error_Handler+0x38>)
 80023fe:	f00a f8f0 	bl	800c5e2 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002402:	e7f1      	b.n	80023e8 <Error_Handler+0x1c>
 8002404:	40021800 	.word	0x40021800

08002408 <menu_draw_all>:
//--------------------------------------------------------------
// draws the complete menu
// (all TOP and all BOTTOM menu items and the GUI)
//--------------------------------------------------------------
void menu_draw_all(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af02      	add	r7, sp, #8
  //---------------------------------
  // upper menu bar
  //---------------------------------
  // Background bar
  UB_Graphic2D_DrawFullRectDMA(LCD_MAXX-FONT_H-2,0,LCD_MAXY,FONT_H+2,MENU_BG_COL);
 800240e:	231f      	movs	r3, #31
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	230c      	movs	r3, #12
 8002414:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002418:	2100      	movs	r1, #0
 800241a:	20e4      	movs	r0, #228	; 0xe4
 800241c:	f00e fbbe 	bl	8010b9c <UB_Graphic2D_DrawFullRectDMA>
  // TOP-Menu
  p_gui_draw_TOP(MM_CH1, UM_01, Menu.ch1.faktor);
 8002420:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <menu_draw_all+0x10c>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	461a      	mov	r2, r3
 8002426:	493c      	ldr	r1, [pc, #240]	; (8002518 <menu_draw_all+0x110>)
 8002428:	2001      	movs	r0, #1
 800242a:	f001 f8d3 	bl	80035d4 <p_gui_draw_TOP>
  p_gui_draw_TOP(MM_CH2, UM_01, Menu.ch2.faktor);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <menu_draw_all+0x10c>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	461a      	mov	r2, r3
 8002434:	4938      	ldr	r1, [pc, #224]	; (8002518 <menu_draw_all+0x110>)
 8002436:	2002      	movs	r0, #2
 8002438:	f001 f8cc 	bl	80035d4 <p_gui_draw_TOP>
  p_gui_draw_TOP(MM_TIME, UM_02, Menu.timebase.value);  
 800243c:	4b35      	ldr	r3, [pc, #212]	; (8002514 <menu_draw_all+0x10c>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	461a      	mov	r2, r3
 8002442:	4936      	ldr	r1, [pc, #216]	; (800251c <menu_draw_all+0x114>)
 8002444:	2003      	movs	r0, #3
 8002446:	f001 f8c5 	bl	80035d4 <p_gui_draw_TOP>
  if(Menu.send.data==0) {
 800244a:	4b32      	ldr	r3, [pc, #200]	; (8002514 <menu_draw_all+0x10c>)
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	2b00      	cmp	r3, #0
 8002450:	d107      	bne.n	8002462 <menu_draw_all+0x5a>
    p_gui_draw_TOP(MM_SETTING, UM_03, Menu.akt_setting);
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <menu_draw_all+0x10c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	461a      	mov	r2, r3
 8002458:	4931      	ldr	r1, [pc, #196]	; (8002520 <menu_draw_all+0x118>)
 800245a:	2004      	movs	r0, #4
 800245c:	f001 f8ba 	bl	80035d4 <p_gui_draw_TOP>
 8002460:	e00f      	b.n	8002482 <menu_draw_all+0x7a>
  }
  else {
    UB_Font_DrawString(LINE(1),MM_ITEM[MM_SETTING].yp,"please wait",&Arial_7x10,MENU_VG_COL,MENU_AK_COL);
 8002462:	2001      	movs	r0, #1
 8002464:	f002 fcc4 	bl	8004df0 <LINE>
 8002468:	4603      	mov	r3, r0
 800246a:	4618      	mov	r0, r3
 800246c:	21d9      	movs	r1, #217	; 0xd9
 800246e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <menu_draw_all+0x11c>)
 800247c:	4a2a      	ldr	r2, [pc, #168]	; (8002528 <menu_draw_all+0x120>)
 800247e:	f00e f971 	bl	8010764 <UB_Font_DrawString>

  //---------------------------------
  // lower menu bar
  //---------------------------------
  // Background bar
  UB_Graphic2D_DrawFullRectDMA(0,0,LCD_MAXY,FONT_H+2,MENU_BG_COL);
 8002482:	231f      	movs	r3, #31
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	230c      	movs	r3, #12
 8002488:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800248c:	2100      	movs	r1, #0
 800248e:	2000      	movs	r0, #0
 8002490:	f00e fb84 	bl	8010b9c <UB_Graphic2D_DrawFullRectDMA>
  // Bottom-Menu
  if(Menu.akt_setting==SETTING_TRIGGER) p_menu_draw_BOT_TRG();
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <menu_draw_all+0x10c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <menu_draw_all+0x98>
 800249c:	f001 fa96 	bl	80039cc <p_menu_draw_BOT_TRG>
  if(Menu.akt_setting==SETTING_CH1) p_menu_draw_BOT_CH1();
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <menu_draw_all+0x10c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <menu_draw_all+0xa4>
 80024a8:	f001 fac2 	bl	8003a30 <p_menu_draw_BOT_CH1>
  if(Menu.akt_setting==SETTING_CH2) p_menu_draw_BOT_CH2();
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <menu_draw_all+0x10c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d101      	bne.n	80024b8 <menu_draw_all+0xb0>
 80024b4:	f001 fad4 	bl	8003a60 <p_menu_draw_BOT_CH2>
  if(Menu.akt_setting==SETTING_CURSOR) p_menu_draw_BOT_CUR();
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <menu_draw_all+0x10c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d101      	bne.n	80024c4 <menu_draw_all+0xbc>
 80024c0:	f001 fae6 	bl	8003a90 <p_menu_draw_BOT_CUR>
  if(Menu.akt_setting==SETTING_FFT) p_menu_draw_BOT_FFT();
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <menu_draw_all+0x10c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d101      	bne.n	80024d0 <menu_draw_all+0xc8>
 80024cc:	f001 fbc4 	bl	8003c58 <p_menu_draw_BOT_FFT>
  if(Menu.akt_setting==SETTING_SEND) p_menu_draw_BOT_SEND();
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <menu_draw_all+0x10c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d101      	bne.n	80024dc <menu_draw_all+0xd4>
 80024d8:	f001 fbce 	bl	8003c78 <p_menu_draw_BOT_SEND>
  if(Menu.akt_setting==SETTING_VERSION) p_menu_draw_BOT_VERSION();
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <menu_draw_all+0x10c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b06      	cmp	r3, #6
 80024e2:	d101      	bne.n	80024e8 <menu_draw_all+0xe0>
 80024e4:	f001 fbea 	bl	8003cbc <p_menu_draw_BOT_VERSION>
  if(Menu.akt_setting==SETTING_HELP) p_menu_draw_BOT_HELP();
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <menu_draw_all+0x10c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b07      	cmp	r3, #7
 80024ee:	d101      	bne.n	80024f4 <menu_draw_all+0xec>
 80024f0:	f001 fbfe 	bl	8003cf0 <p_menu_draw_BOT_HELP>

  if(GUI.gui_xpos==GUI_XPOS_OFF) {
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <menu_draw_all+0x124>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <menu_draw_all+0xfc>
    Menu.akt_transparenz=100;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <menu_draw_all+0x10c>)
 80024fe:	2264      	movs	r2, #100	; 0x64
 8002500:	601a      	str	r2, [r3, #0]
    //--------------------------
    // GUI
    //--------------------------
    p_menu_draw_GUI();
  }
}
 8002502:	e004      	b.n	800250e <menu_draw_all+0x106>
    Menu.akt_transparenz=200;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <menu_draw_all+0x10c>)
 8002506:	22c8      	movs	r2, #200	; 0xc8
 8002508:	601a      	str	r2, [r3, #0]
    p_menu_draw_GUI();
 800250a:	f000 f811 	bl	8002530 <p_menu_draw_GUI>
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	2000277c 	.word	0x2000277c
 8002518:	08012c54 	.word	0x08012c54
 800251c:	08012c70 	.word	0x08012c70
 8002520:	08012cb4 	.word	0x08012cb4
 8002524:	20000060 	.word	0x20000060
 8002528:	08012a08 	.word	0x08012a08
 800252c:	200022bc 	.word	0x200022bc

08002530 <p_menu_draw_GUI>:
//--------------------------------------------------------------
// draws the GUI
// (also draws the pressed button)
//--------------------------------------------------------------
void p_menu_draw_GUI(void)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b08b      	sub	sp, #44	; 0x2c
 8002534:	af04      	add	r7, sp, #16
  DMA2D_Koord koord;

  //--------------------------
  // leere GUI zeichnen
  //--------------------------
  koord.source_xp=0;
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]
  koord.source_yp=0;
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
  koord.source_w=GUI1.width;
 800253e:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002540:	889b      	ldrh	r3, [r3, #4]
 8002542:	60bb      	str	r3, [r7, #8]
  koord.source_h=GUI1.height;
 8002544:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002546:	88db      	ldrh	r3, [r3, #6]
 8002548:	60fb      	str	r3, [r7, #12]
  koord.dest_xp=GUI_YPOS;
 800254a:	230f      	movs	r3, #15
 800254c:	613b      	str	r3, [r7, #16]
  koord.dest_yp=GUI.gui_xpos;
 800254e:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <p_menu_draw_GUI+0x198>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	617b      	str	r3, [r7, #20]

  UB_Graphic2D_CopyImgDMA(&GUI1,koord);
 8002554:	466c      	mov	r4, sp
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800255e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002562:	463b      	mov	r3, r7
 8002564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002566:	4857      	ldr	r0, [pc, #348]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002568:	f00e fbaa 	bl	8010cc0 <UB_Graphic2D_CopyImgDMA>


  //--------------------------
  // Draw the pressed button
  //--------------------------
  if(GUI.akt_button==GUI_BTN_RIGHT) {
 800256c:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <p_menu_draw_GUI+0x198>)
 800256e:	799b      	ldrb	r3, [r3, #6]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d12e      	bne.n	80025d2 <p_menu_draw_GUI+0xa2>
    koord.source_xp=GUI1.width/2;
 8002574:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002576:	889b      	ldrh	r3, [r3, #4]
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	b29b      	uxth	r3, r3
 800257c:	603b      	str	r3, [r7, #0]
    koord.source_yp=GUI1.height/2;
 800257e:	4b51      	ldr	r3, [pc, #324]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002580:	88db      	ldrh	r3, [r3, #6]
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	b29b      	uxth	r3, r3
 8002586:	607b      	str	r3, [r7, #4]
    koord.source_w=GUI1.width/2;
 8002588:	4b4e      	ldr	r3, [pc, #312]	; (80026c4 <p_menu_draw_GUI+0x194>)
 800258a:	889b      	ldrh	r3, [r3, #4]
 800258c:	085b      	lsrs	r3, r3, #1
 800258e:	b29b      	uxth	r3, r3
 8002590:	60bb      	str	r3, [r7, #8]
    koord.source_h=GUI1.height/2;
 8002592:	4b4c      	ldr	r3, [pc, #304]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002594:	88db      	ldrh	r3, [r3, #6]
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	b29b      	uxth	r3, r3
 800259a:	60fb      	str	r3, [r7, #12]
    koord.dest_xp=GUI_YPOS+(GUI1.width/2);
 800259c:	4b49      	ldr	r3, [pc, #292]	; (80026c4 <p_menu_draw_GUI+0x194>)
 800259e:	889b      	ldrh	r3, [r3, #4]
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	330f      	adds	r3, #15
 80025a6:	613b      	str	r3, [r7, #16]
    koord.dest_yp=GUI.gui_xpos+(GUI1.height/2);
 80025a8:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <p_menu_draw_GUI+0x198>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a45      	ldr	r2, [pc, #276]	; (80026c4 <p_menu_draw_GUI+0x194>)
 80025ae:	88d2      	ldrh	r2, [r2, #6]
 80025b0:	0852      	lsrs	r2, r2, #1
 80025b2:	b292      	uxth	r2, r2
 80025b4:	4413      	add	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
    UB_Graphic2D_CopyImgDMA(&GUI2,koord);  
 80025b8:	466c      	mov	r4, sp
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025c6:	463b      	mov	r3, r7
 80025c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ca:	4840      	ldr	r0, [pc, #256]	; (80026cc <p_menu_draw_GUI+0x19c>)
 80025cc:	f00e fb78 	bl	8010cc0 <UB_Graphic2D_CopyImgDMA>
    koord.source_h=GUI1.height;
    koord.dest_xp=GUI_YPOS;
    koord.dest_yp=GUI.gui_xpos;
    UB_Graphic2D_CopyImgDMA(&GUI2,koord);
  }
}
 80025d0:	e074      	b.n	80026bc <p_menu_draw_GUI+0x18c>
  else if(GUI.akt_button==GUI_BTN_LEFT) {
 80025d2:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <p_menu_draw_GUI+0x198>)
 80025d4:	799b      	ldrb	r3, [r3, #6]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d126      	bne.n	8002628 <p_menu_draw_GUI+0xf8>
    koord.source_xp=GUI1.width/2;
 80025da:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <p_menu_draw_GUI+0x194>)
 80025dc:	889b      	ldrh	r3, [r3, #4]
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	603b      	str	r3, [r7, #0]
    koord.source_yp=0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
    koord.source_w=GUI1.width/2;
 80025e8:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <p_menu_draw_GUI+0x194>)
 80025ea:	889b      	ldrh	r3, [r3, #4]
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	60bb      	str	r3, [r7, #8]
    koord.source_h=GUI1.height/2;
 80025f2:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <p_menu_draw_GUI+0x194>)
 80025f4:	88db      	ldrh	r3, [r3, #6]
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	60fb      	str	r3, [r7, #12]
    koord.dest_xp=GUI_YPOS+(GUI1.width/2);
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <p_menu_draw_GUI+0x194>)
 80025fe:	889b      	ldrh	r3, [r3, #4]
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	b29b      	uxth	r3, r3
 8002604:	330f      	adds	r3, #15
 8002606:	613b      	str	r3, [r7, #16]
    koord.dest_yp=GUI.gui_xpos;
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <p_menu_draw_GUI+0x198>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	617b      	str	r3, [r7, #20]
    UB_Graphic2D_CopyImgDMA(&GUI2,koord);
 800260e:	466c      	mov	r4, sp
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800261c:	463b      	mov	r3, r7
 800261e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002620:	482a      	ldr	r0, [pc, #168]	; (80026cc <p_menu_draw_GUI+0x19c>)
 8002622:	f00e fb4d 	bl	8010cc0 <UB_Graphic2D_CopyImgDMA>
}
 8002626:	e049      	b.n	80026bc <p_menu_draw_GUI+0x18c>
  else if(GUI.akt_button==GUI_BTN_UP) {
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <p_menu_draw_GUI+0x198>)
 800262a:	799b      	ldrb	r3, [r3, #6]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d124      	bne.n	800267a <p_menu_draw_GUI+0x14a>
    koord.source_xp=GUI1.width/4;
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002632:	889b      	ldrh	r3, [r3, #4]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	b29b      	uxth	r3, r3
 8002638:	603b      	str	r3, [r7, #0]
    koord.source_yp=0;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
    koord.source_w=GUI1.width/4;
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002640:	889b      	ldrh	r3, [r3, #4]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	b29b      	uxth	r3, r3
 8002646:	60bb      	str	r3, [r7, #8]
    koord.source_h=GUI1.height;
 8002648:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <p_menu_draw_GUI+0x194>)
 800264a:	88db      	ldrh	r3, [r3, #6]
 800264c:	60fb      	str	r3, [r7, #12]
    koord.dest_xp=GUI_YPOS+(GUI1.width/4);
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002650:	889b      	ldrh	r3, [r3, #4]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	b29b      	uxth	r3, r3
 8002656:	330f      	adds	r3, #15
 8002658:	613b      	str	r3, [r7, #16]
    koord.dest_yp=GUI.gui_xpos;
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <p_menu_draw_GUI+0x198>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	617b      	str	r3, [r7, #20]
    UB_Graphic2D_CopyImgDMA(&GUI2,koord);
 8002660:	466c      	mov	r4, sp
 8002662:	f107 030c 	add.w	r3, r7, #12
 8002666:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800266a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800266e:	463b      	mov	r3, r7
 8002670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002672:	4816      	ldr	r0, [pc, #88]	; (80026cc <p_menu_draw_GUI+0x19c>)
 8002674:	f00e fb24 	bl	8010cc0 <UB_Graphic2D_CopyImgDMA>
}
 8002678:	e020      	b.n	80026bc <p_menu_draw_GUI+0x18c>
  else if(GUI.akt_button==GUI_BTN_DOWN) {
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <p_menu_draw_GUI+0x198>)
 800267c:	799b      	ldrb	r3, [r3, #6]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d11c      	bne.n	80026bc <p_menu_draw_GUI+0x18c>
    koord.source_xp=0;
 8002682:	2300      	movs	r3, #0
 8002684:	603b      	str	r3, [r7, #0]
    koord.source_yp=0;
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
    koord.source_w=GUI1.width/4;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <p_menu_draw_GUI+0x194>)
 800268c:	889b      	ldrh	r3, [r3, #4]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	b29b      	uxth	r3, r3
 8002692:	60bb      	str	r3, [r7, #8]
    koord.source_h=GUI1.height;
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <p_menu_draw_GUI+0x194>)
 8002696:	88db      	ldrh	r3, [r3, #6]
 8002698:	60fb      	str	r3, [r7, #12]
    koord.dest_xp=GUI_YPOS;
 800269a:	230f      	movs	r3, #15
 800269c:	613b      	str	r3, [r7, #16]
    koord.dest_yp=GUI.gui_xpos;
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <p_menu_draw_GUI+0x198>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	617b      	str	r3, [r7, #20]
    UB_Graphic2D_CopyImgDMA(&GUI2,koord);
 80026a4:	466c      	mov	r4, sp
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026b2:	463b      	mov	r3, r7
 80026b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b6:	4805      	ldr	r0, [pc, #20]	; (80026cc <p_menu_draw_GUI+0x19c>)
 80026b8:	f00e fb02 	bl	8010cc0 <UB_Graphic2D_CopyImgDMA>
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	20000050 	.word	0x20000050
 80026c8:	200022bc 	.word	0x200022bc
 80026cc:	20000058 	.word	0x20000058

080026d0 <p_get_GUI_button>:
//--------------------------------------------------------------
// test which of the four buttons of the GUI is activated
// y, x = touch position
//--------------------------------------------------------------
void p_get_GUI_button(uint16_t x, uint16_t y)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	460a      	mov	r2, r1
 80026da:	80fb      	strh	r3, [r7, #6]
 80026dc:	4613      	mov	r3, r2
 80026de:	80bb      	strh	r3, [r7, #4]
  if(x>(GUI_YPOS+(GUI1.width/2))) {
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <p_get_GUI_button+0x70>)
 80026e4:	889b      	ldrh	r3, [r3, #4]
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	330f      	adds	r3, #15
 80026ec:	429a      	cmp	r2, r3
 80026ee:	dd11      	ble.n	8002714 <p_get_GUI_button+0x44>
    // left/right
    if(y>(GUI.gui_xpos+(GUI1.height/2))) {
 80026f0:	88ba      	ldrh	r2, [r7, #4]
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <p_get_GUI_button+0x74>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4912      	ldr	r1, [pc, #72]	; (8002740 <p_get_GUI_button+0x70>)
 80026f8:	88c9      	ldrh	r1, [r1, #6]
 80026fa:	0849      	lsrs	r1, r1, #1
 80026fc:	b289      	uxth	r1, r1
 80026fe:	440b      	add	r3, r1
 8002700:	429a      	cmp	r2, r3
 8002702:	d903      	bls.n	800270c <p_get_GUI_button+0x3c>
      GUI.akt_button=GUI_BTN_RIGHT;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <p_get_GUI_button+0x74>)
 8002706:	2204      	movs	r2, #4
 8002708:	719a      	strb	r2, [r3, #6]
    }
    else {
      GUI.akt_button=GUI_BTN_DOWN;
    }
  }
}
 800270a:	e012      	b.n	8002732 <p_get_GUI_button+0x62>
      GUI.akt_button=GUI_BTN_LEFT;
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <p_get_GUI_button+0x74>)
 800270e:	2203      	movs	r2, #3
 8002710:	719a      	strb	r2, [r3, #6]
}
 8002712:	e00e      	b.n	8002732 <p_get_GUI_button+0x62>
    if(x>(GUI_YPOS+(GUI1.width/4))) {
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <p_get_GUI_button+0x70>)
 8002718:	889b      	ldrh	r3, [r3, #4]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	b29b      	uxth	r3, r3
 800271e:	330f      	adds	r3, #15
 8002720:	429a      	cmp	r2, r3
 8002722:	dd03      	ble.n	800272c <p_get_GUI_button+0x5c>
      GUI.akt_button=GUI_BTN_UP;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <p_get_GUI_button+0x74>)
 8002726:	2201      	movs	r2, #1
 8002728:	719a      	strb	r2, [r3, #6]
}
 800272a:	e002      	b.n	8002732 <p_get_GUI_button+0x62>
      GUI.akt_button=GUI_BTN_DOWN;
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <p_get_GUI_button+0x74>)
 800272e:	2202      	movs	r2, #2
 8002730:	719a      	strb	r2, [r3, #6]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000050 	.word	0x20000050
 8002744:	200022bc 	.word	0x200022bc

08002748 <p_gui_inc_menu>:

//--------------------------------------------------------------
// increments the current menu item
//--------------------------------------------------------------
MENU_Status_t p_gui_inc_menu(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
  MENU_Status_t return_val=MENU_NO_CHANGE;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  uint32_t max;
  uint16_t value;
  int16_t ivalue;

  if(GUI.akt_menu==MM_NONE) return(return_val);
 8002752:	4b94      	ldr	r3, [pc, #592]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002754:	791b      	ldrb	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <p_gui_inc_menu+0x16>
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	e282      	b.n	8002c64 <p_gui_inc_menu+0x51c>

  // alle "normalen" Menupunkte koennen nur einmal betaetigt werden
  if((GUI.akt_menu!=MM_TRG_VAL) && (GUI.akt_menu!=MM_CH_POS) &&
 800275e:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002760:	791b      	ldrb	r3, [r3, #4]
 8002762:	2b08      	cmp	r3, #8
 8002764:	d013      	beq.n	800278e <p_gui_inc_menu+0x46>
 8002766:	4b8f      	ldr	r3, [pc, #572]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002768:	791b      	ldrb	r3, [r3, #4]
 800276a:	2b0b      	cmp	r3, #11
 800276c:	d00f      	beq.n	800278e <p_gui_inc_menu+0x46>
    (GUI.akt_menu!=MM_CUR_P1) && (GUI.akt_menu!=MM_CUR_P2)) {
 800276e:	4b8d      	ldr	r3, [pc, #564]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002770:	791b      	ldrb	r3, [r3, #4]
  if((GUI.akt_menu!=MM_TRG_VAL) && (GUI.akt_menu!=MM_CH_POS) &&
 8002772:	2b0d      	cmp	r3, #13
 8002774:	d00b      	beq.n	800278e <p_gui_inc_menu+0x46>
    (GUI.akt_menu!=MM_CUR_P1) && (GUI.akt_menu!=MM_CUR_P2)) {
 8002776:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002778:	791b      	ldrb	r3, [r3, #4]
 800277a:	2b0e      	cmp	r3, #14
 800277c:	d007      	beq.n	800278e <p_gui_inc_menu+0x46>
    // wenn schon mal betaetigt
    if(GUI.old_button==GUI.akt_button) {
 800277e:	4b89      	ldr	r3, [pc, #548]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002780:	79da      	ldrb	r2, [r3, #7]
 8002782:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002784:	799b      	ldrb	r3, [r3, #6]
 8002786:	429a      	cmp	r2, r3
 8002788:	d101      	bne.n	800278e <p_gui_inc_menu+0x46>
      // verlassen ohne was zu aendern
      return(return_val);
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	e26a      	b.n	8002c64 <p_gui_inc_menu+0x51c>
    }
  }

  // Maxumum-Value des Menupunktes
  max=MM_ITEM[GUI.akt_menu].um_cnt;
 800278e:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002790:	791b      	ldrb	r3, [r3, #4]
 8002792:	4a85      	ldr	r2, [pc, #532]	; (80029a8 <p_gui_inc_menu+0x260>)
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	88db      	ldrh	r3, [r3, #6]
 800279a:	607b      	str	r3, [r7, #4]

  // default returndata
  return_val=MENU_CHANGE_NORMAL;
 800279c:	2302      	movs	r3, #2
 800279e:	73fb      	strb	r3, [r7, #15]

  if(GUI.akt_menu==MM_CH1) {
 80027a0:	4b80      	ldr	r3, [pc, #512]	; (80029a4 <p_gui_inc_menu+0x25c>)
 80027a2:	791b      	ldrb	r3, [r3, #4]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10c      	bne.n	80027c2 <p_gui_inc_menu+0x7a>
    if(Menu.ch1.faktor<max-1) Menu.ch1.faktor++;
 80027a8:	4b80      	ldr	r3, [pc, #512]	; (80029ac <p_gui_inc_menu+0x264>)
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f080 8256 	bcs.w	8002c62 <p_gui_inc_menu+0x51a>
 80027b6:	4b7d      	ldr	r3, [pc, #500]	; (80029ac <p_gui_inc_menu+0x264>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	3301      	adds	r3, #1
 80027bc:	4a7b      	ldr	r2, [pc, #492]	; (80029ac <p_gui_inc_menu+0x264>)
 80027be:	6093      	str	r3, [r2, #8]
 80027c0:	e24f      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_CH2) {
 80027c2:	4b78      	ldr	r3, [pc, #480]	; (80029a4 <p_gui_inc_menu+0x25c>)
 80027c4:	791b      	ldrb	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d10c      	bne.n	80027e4 <p_gui_inc_menu+0x9c>
    if(Menu.ch2.faktor<max-1) Menu.ch2.faktor++;
 80027ca:	4b78      	ldr	r3, [pc, #480]	; (80029ac <p_gui_inc_menu+0x264>)
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	429a      	cmp	r2, r3
 80027d4:	f080 8245 	bcs.w	8002c62 <p_gui_inc_menu+0x51a>
 80027d8:	4b74      	ldr	r3, [pc, #464]	; (80029ac <p_gui_inc_menu+0x264>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	4a73      	ldr	r2, [pc, #460]	; (80029ac <p_gui_inc_menu+0x264>)
 80027e0:	6153      	str	r3, [r2, #20]
 80027e2:	e23e      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_TIME) {
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <p_gui_inc_menu+0x25c>)
 80027e6:	791b      	ldrb	r3, [r3, #4]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d10d      	bne.n	8002808 <p_gui_inc_menu+0xc0>
    if(Menu.timebase.value<max-1) Menu.timebase.value++;
 80027ec:	4b6f      	ldr	r3, [pc, #444]	; (80029ac <p_gui_inc_menu+0x264>)
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d204      	bcs.n	8002802 <p_gui_inc_menu+0xba>
 80027f8:	4b6c      	ldr	r3, [pc, #432]	; (80029ac <p_gui_inc_menu+0x264>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a6b      	ldr	r2, [pc, #428]	; (80029ac <p_gui_inc_menu+0x264>)
 8002800:	6213      	str	r3, [r2, #32]
    return_val=MENU_CHANGE_FRQ;
 8002802:	2303      	movs	r3, #3
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e22c      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_SETTING) {
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <p_gui_inc_menu+0x25c>)
 800280a:	791b      	ldrb	r3, [r3, #4]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d10c      	bne.n	800282a <p_gui_inc_menu+0xe2>
    if(Menu.akt_setting<max-1) Menu.akt_setting++;
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <p_gui_inc_menu+0x264>)
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	429a      	cmp	r2, r3
 800281a:	f080 8222 	bcs.w	8002c62 <p_gui_inc_menu+0x51a>
 800281e:	4b63      	ldr	r3, [pc, #396]	; (80029ac <p_gui_inc_menu+0x264>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	3301      	adds	r3, #1
 8002824:	4a61      	ldr	r2, [pc, #388]	; (80029ac <p_gui_inc_menu+0x264>)
 8002826:	6053      	str	r3, [r2, #4]
 8002828:	e21b      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_TRG_SOURCE) {
 800282a:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <p_gui_inc_menu+0x25c>)
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	2b05      	cmp	r3, #5
 8002830:	d10c      	bne.n	800284c <p_gui_inc_menu+0x104>
    if(Menu.trigger.source<max-1) Menu.trigger.source++;
 8002832:	4b5e      	ldr	r3, [pc, #376]	; (80029ac <p_gui_inc_menu+0x264>)
 8002834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3b01      	subs	r3, #1
 800283a:	429a      	cmp	r2, r3
 800283c:	f080 8211 	bcs.w	8002c62 <p_gui_inc_menu+0x51a>
 8002840:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <p_gui_inc_menu+0x264>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	3301      	adds	r3, #1
 8002846:	4a59      	ldr	r2, [pc, #356]	; (80029ac <p_gui_inc_menu+0x264>)
 8002848:	6253      	str	r3, [r2, #36]	; 0x24
 800284a:	e20a      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_TRG_EDGE) {
 800284c:	4b55      	ldr	r3, [pc, #340]	; (80029a4 <p_gui_inc_menu+0x25c>)
 800284e:	791b      	ldrb	r3, [r3, #4]
 8002850:	2b06      	cmp	r3, #6
 8002852:	d10c      	bne.n	800286e <p_gui_inc_menu+0x126>
    if(Menu.trigger.edge<max-1) Menu.trigger.edge++;
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <p_gui_inc_menu+0x264>)
 8002856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	429a      	cmp	r2, r3
 800285e:	f080 8200 	bcs.w	8002c62 <p_gui_inc_menu+0x51a>
 8002862:	4b52      	ldr	r3, [pc, #328]	; (80029ac <p_gui_inc_menu+0x264>)
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	3301      	adds	r3, #1
 8002868:	4a50      	ldr	r2, [pc, #320]	; (80029ac <p_gui_inc_menu+0x264>)
 800286a:	6293      	str	r3, [r2, #40]	; 0x28
 800286c:	e1f9      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_TRG_MODE) {
 800286e:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	2b07      	cmp	r3, #7
 8002874:	d10d      	bne.n	8002892 <p_gui_inc_menu+0x14a>
    if(Menu.trigger.mode<max-1) Menu.trigger.mode++;
 8002876:	4b4d      	ldr	r3, [pc, #308]	; (80029ac <p_gui_inc_menu+0x264>)
 8002878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3b01      	subs	r3, #1
 800287e:	429a      	cmp	r2, r3
 8002880:	d204      	bcs.n	800288c <p_gui_inc_menu+0x144>
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <p_gui_inc_menu+0x264>)
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	3301      	adds	r3, #1
 8002888:	4a48      	ldr	r2, [pc, #288]	; (80029ac <p_gui_inc_menu+0x264>)
 800288a:	62d3      	str	r3, [r2, #44]	; 0x2c
    return_val=MENU_CHANGE_MODE;
 800288c:	2304      	movs	r3, #4
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	e1e7      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_TRG_VAL) {
 8002892:	4b44      	ldr	r3, [pc, #272]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002894:	791b      	ldrb	r3, [r3, #4]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d13b      	bne.n	8002912 <p_gui_inc_menu+0x1ca>
    if(Menu.trigger.source==0) { // CH1
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <p_gui_inc_menu+0x264>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d11a      	bne.n	80028d8 <p_gui_inc_menu+0x190>
      if(GUI.old_button!=GUI.akt_button) {
 80028a2:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <p_gui_inc_menu+0x25c>)
 80028a4:	79da      	ldrb	r2, [r3, #7]
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <p_gui_inc_menu+0x25c>)
 80028a8:	799b      	ldrb	r3, [r3, #6]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d008      	beq.n	80028c0 <p_gui_inc_menu+0x178>
        value=dec_uintval(Menu.trigger.value_ch1, 10);
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <p_gui_inc_menu+0x264>)
 80028b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80028b2:	210a      	movs	r1, #10
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 fa79 	bl	8003dac <dec_uintval>
 80028ba:	4603      	mov	r3, r0
 80028bc:	81bb      	strh	r3, [r7, #12]
 80028be:	e007      	b.n	80028d0 <p_gui_inc_menu+0x188>
      }
      else {
        value=dec_uintval(Menu.trigger.value_ch1, 0);
 80028c0:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <p_gui_inc_menu+0x264>)
 80028c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 fa70 	bl	8003dac <dec_uintval>
 80028cc:	4603      	mov	r3, r0
 80028ce:	81bb      	strh	r3, [r7, #12]
      }
      Menu.trigger.value_ch1=value;
 80028d0:	4a36      	ldr	r2, [pc, #216]	; (80029ac <p_gui_inc_menu+0x264>)
 80028d2:	89bb      	ldrh	r3, [r7, #12]
 80028d4:	8693      	strh	r3, [r2, #52]	; 0x34
 80028d6:	e019      	b.n	800290c <p_gui_inc_menu+0x1c4>
    }
    else { // CH2
      if(GUI.old_button!=GUI.akt_button) {
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <p_gui_inc_menu+0x25c>)
 80028da:	79da      	ldrb	r2, [r3, #7]
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <p_gui_inc_menu+0x25c>)
 80028de:	799b      	ldrb	r3, [r3, #6]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d008      	beq.n	80028f6 <p_gui_inc_menu+0x1ae>
        value=dec_uintval(Menu.trigger.value_ch2, 10);
 80028e4:	4b31      	ldr	r3, [pc, #196]	; (80029ac <p_gui_inc_menu+0x264>)
 80028e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e8:	210a      	movs	r1, #10
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fa5e 	bl	8003dac <dec_uintval>
 80028f0:	4603      	mov	r3, r0
 80028f2:	81bb      	strh	r3, [r7, #12]
 80028f4:	e007      	b.n	8002906 <p_gui_inc_menu+0x1be>
      }
      else {
        value=dec_uintval(Menu.trigger.value_ch2, 0);
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <p_gui_inc_menu+0x264>)
 80028f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f001 fa55 	bl	8003dac <dec_uintval>
 8002902:	4603      	mov	r3, r0
 8002904:	81bb      	strh	r3, [r7, #12]
      }
      Menu.trigger.value_ch2=value;
 8002906:	4a29      	ldr	r2, [pc, #164]	; (80029ac <p_gui_inc_menu+0x264>)
 8002908:	89bb      	ldrh	r3, [r7, #12]
 800290a:	86d3      	strh	r3, [r2, #54]	; 0x36
    }
    return_val=MENU_CHANGE_VALUE;
 800290c:	2305      	movs	r3, #5
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e1a7      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_TRG_RESET) {
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002914:	791b      	ldrb	r3, [r3, #4]
 8002916:	2b09      	cmp	r3, #9
 8002918:	d11d      	bne.n	8002956 <p_gui_inc_menu+0x20e>
    if(Menu.trigger.mode==2) { // "single"
 800291a:	4b24      	ldr	r3, [pc, #144]	; (80029ac <p_gui_inc_menu+0x264>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	2b02      	cmp	r3, #2
 8002920:	d108      	bne.n	8002934 <p_gui_inc_menu+0x1ec>
      if(Menu.trigger.single==4) Menu.trigger.single=5;  // von "Ready" auf "Stop"
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <p_gui_inc_menu+0x264>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	2b04      	cmp	r3, #4
 8002928:	f040 819b 	bne.w	8002c62 <p_gui_inc_menu+0x51a>
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <p_gui_inc_menu+0x264>)
 800292e:	2205      	movs	r2, #5
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
 8002932:	e196      	b.n	8002c62 <p_gui_inc_menu+0x51a>
    }
    else { // "normal" oder "auto"
      if(Menu.trigger.single==0) {
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <p_gui_inc_menu+0x264>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <p_gui_inc_menu+0x1fc>
        Menu.trigger.single=1; // von "Run" auf "Stop"
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <p_gui_inc_menu+0x264>)
 800293e:	2201      	movs	r2, #1
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
 8002942:	e18e      	b.n	8002c62 <p_gui_inc_menu+0x51a>
      }
      else if(Menu.trigger.single==1) {
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <p_gui_inc_menu+0x264>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	2b01      	cmp	r3, #1
 800294a:	f040 818a 	bne.w	8002c62 <p_gui_inc_menu+0x51a>
        Menu.trigger.single=2; // von "Stop" auf "Weiter"
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <p_gui_inc_menu+0x264>)
 8002950:	2202      	movs	r2, #2
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
 8002954:	e185      	b.n	8002c62 <p_gui_inc_menu+0x51a>
      }
    }
  }
  else if(GUI.akt_menu==MM_CH_VIS) {
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <p_gui_inc_menu+0x25c>)
 8002958:	791b      	ldrb	r3, [r3, #4]
 800295a:	2b0a      	cmp	r3, #10
 800295c:	d128      	bne.n	80029b0 <p_gui_inc_menu+0x268>
    if(Menu.akt_setting==SETTING_CH1) { // CH1
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <p_gui_inc_menu+0x264>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10c      	bne.n	8002980 <p_gui_inc_menu+0x238>
      if(Menu.ch1.visible<max-1) Menu.ch1.visible++;
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <p_gui_inc_menu+0x264>)
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3b01      	subs	r3, #1
 800296e:	429a      	cmp	r2, r3
 8002970:	f080 8177 	bcs.w	8002c62 <p_gui_inc_menu+0x51a>
 8002974:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <p_gui_inc_menu+0x264>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	3301      	adds	r3, #1
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <p_gui_inc_menu+0x264>)
 800297c:	60d3      	str	r3, [r2, #12]
 800297e:	e170      	b.n	8002c62 <p_gui_inc_menu+0x51a>
    }
    else if(Menu.akt_setting==SETTING_CH2) { // CH2
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <p_gui_inc_menu+0x264>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b02      	cmp	r3, #2
 8002986:	f040 816c 	bne.w	8002c62 <p_gui_inc_menu+0x51a>
      if(Menu.ch2.visible<max-1) Menu.ch2.visible++;
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <p_gui_inc_menu+0x264>)
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3b01      	subs	r3, #1
 8002992:	429a      	cmp	r2, r3
 8002994:	f080 8165 	bcs.w	8002c62 <p_gui_inc_menu+0x51a>
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <p_gui_inc_menu+0x264>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	3301      	adds	r3, #1
 800299e:	4a03      	ldr	r2, [pc, #12]	; (80029ac <p_gui_inc_menu+0x264>)
 80029a0:	6193      	str	r3, [r2, #24]
 80029a2:	e15e      	b.n	8002c62 <p_gui_inc_menu+0x51a>
 80029a4:	200022bc 	.word	0x200022bc
 80029a8:	08012bbc 	.word	0x08012bbc
 80029ac:	2000277c 	.word	0x2000277c
    }
  }
  else if(GUI.akt_menu==MM_CH_POS) {
 80029b0:	4b9b      	ldr	r3, [pc, #620]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 80029b2:	791b      	ldrb	r3, [r3, #4]
 80029b4:	2b0b      	cmp	r3, #11
 80029b6:	d143      	bne.n	8002a40 <p_gui_inc_menu+0x2f8>
    if(Menu.akt_setting==SETTING_CH1) { // CH1
 80029b8:	4b9a      	ldr	r3, [pc, #616]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d11c      	bne.n	80029fa <p_gui_inc_menu+0x2b2>
      if(GUI.old_button!=GUI.akt_button) {
 80029c0:	4b97      	ldr	r3, [pc, #604]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 80029c2:	79da      	ldrb	r2, [r3, #7]
 80029c4:	4b96      	ldr	r3, [pc, #600]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 80029c6:	799b      	ldrb	r3, [r3, #6]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d009      	beq.n	80029e0 <p_gui_inc_menu+0x298>
        ivalue=dec_intval(Menu.ch1.position, 1);
 80029cc:	4b95      	ldr	r3, [pc, #596]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 80029ce:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80029d2:	2101      	movs	r1, #1
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 fa6f 	bl	8003eb8 <dec_intval>
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	e008      	b.n	80029f2 <p_gui_inc_menu+0x2aa>
      }
      else {
        ivalue=dec_intval(Menu.ch1.position, 0);
 80029e0:	4b90      	ldr	r3, [pc, #576]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 80029e2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 fa65 	bl	8003eb8 <dec_intval>
 80029ee:	4603      	mov	r3, r0
 80029f0:	817b      	strh	r3, [r7, #10]
      }
      Menu.ch1.position=ivalue;
 80029f2:	4a8c      	ldr	r2, [pc, #560]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 80029f4:	897b      	ldrh	r3, [r7, #10]
 80029f6:	8213      	strh	r3, [r2, #16]
 80029f8:	e01f      	b.n	8002a3a <p_gui_inc_menu+0x2f2>
    }
    else if(Menu.akt_setting==SETTING_CH2) { // CH2
 80029fa:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d11b      	bne.n	8002a3a <p_gui_inc_menu+0x2f2>
      if(GUI.old_button!=GUI.akt_button) {
 8002a02:	4b87      	ldr	r3, [pc, #540]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002a04:	79da      	ldrb	r2, [r3, #7]
 8002a06:	4b86      	ldr	r3, [pc, #536]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002a08:	799b      	ldrb	r3, [r3, #6]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d009      	beq.n	8002a22 <p_gui_inc_menu+0x2da>
        ivalue=dec_intval(Menu.ch2.position, 1);
 8002a0e:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002a10:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fa4e 	bl	8003eb8 <dec_intval>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	817b      	strh	r3, [r7, #10]
 8002a20:	e008      	b.n	8002a34 <p_gui_inc_menu+0x2ec>
      }
      else {
        ivalue=dec_intval(Menu.ch2.position, 0);
 8002a22:	4b80      	ldr	r3, [pc, #512]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002a24:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 fa44 	bl	8003eb8 <dec_intval>
 8002a30:	4603      	mov	r3, r0
 8002a32:	817b      	strh	r3, [r7, #10]
      }
      Menu.ch2.position=ivalue;
 8002a34:	4a7b      	ldr	r2, [pc, #492]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	8393      	strh	r3, [r2, #28]
    }
    return_val=MENU_CHANGE_VALUE;
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	73fb      	strb	r3, [r7, #15]
 8002a3e:	e110      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_CUR_MODE) {
 8002a40:	4b77      	ldr	r3, [pc, #476]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002a42:	791b      	ldrb	r3, [r3, #4]
 8002a44:	2b0c      	cmp	r3, #12
 8002a46:	d10c      	bne.n	8002a62 <p_gui_inc_menu+0x31a>
    if(Menu.cursor.mode<max-1) Menu.cursor.mode++;
 8002a48:	4b76      	ldr	r3, [pc, #472]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f080 8106 	bcs.w	8002c62 <p_gui_inc_menu+0x51a>
 8002a56:	4b73      	ldr	r3, [pc, #460]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a71      	ldr	r2, [pc, #452]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002a5e:	6393      	str	r3, [r2, #56]	; 0x38
 8002a60:	e0ff      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_CUR_P1) {
 8002a62:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002a64:	791b      	ldrb	r3, [r3, #4]
 8002a66:	2b0d      	cmp	r3, #13
 8002a68:	d16d      	bne.n	8002b46 <p_gui_inc_menu+0x3fe>
    if(Menu.cursor.mode==3) { // TIME
 8002a6a:	4b6e      	ldr	r3, [pc, #440]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d11f      	bne.n	8002ab2 <p_gui_inc_menu+0x36a>
      if(GUI.old_button!=GUI.akt_button) {
 8002a72:	4b6b      	ldr	r3, [pc, #428]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002a74:	79da      	ldrb	r2, [r3, #7]
 8002a76:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002a78:	799b      	ldrb	r3, [r3, #6]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d009      	beq.n	8002a92 <p_gui_inc_menu+0x34a>
        value=dec_uintval(Menu.cursor.t1, 1);
 8002a7e:	4b69      	ldr	r3, [pc, #420]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002a80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a84:	2101      	movs	r1, #1
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 f990 	bl	8003dac <dec_uintval>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	81bb      	strh	r3, [r7, #12]
 8002a90:	e008      	b.n	8002aa4 <p_gui_inc_menu+0x35c>
      }
      else {
        value=dec_uintval(Menu.cursor.t1, 0);
 8002a92:	4b64      	ldr	r3, [pc, #400]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002a94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 f986 	bl	8003dac <dec_uintval>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	81bb      	strh	r3, [r7, #12]
      }
      Menu.cursor.t1=value;
 8002aa4:	4a5f      	ldr	r2, [pc, #380]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      return_val=MENU_CHANGE_VALUE;
 8002aac:	2305      	movs	r3, #5
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e0d7      	b.n	8002c62 <p_gui_inc_menu+0x51a>
    }
    else if((Menu.cursor.mode==1) || (Menu.cursor.mode==2)) { // CH1+CH2
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d003      	beq.n	8002ac2 <p_gui_inc_menu+0x37a>
 8002aba:	4b5a      	ldr	r3, [pc, #360]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d11c      	bne.n	8002afc <p_gui_inc_menu+0x3b4>
      if(GUI.old_button!=GUI.akt_button) {
 8002ac2:	4b57      	ldr	r3, [pc, #348]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002ac4:	79da      	ldrb	r2, [r3, #7]
 8002ac6:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002ac8:	799b      	ldrb	r3, [r3, #6]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d008      	beq.n	8002ae0 <p_gui_inc_menu+0x398>
        value=dec_uintval(Menu.cursor.p1, 10);
 8002ace:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002ad0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002ad2:	210a      	movs	r1, #10
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 f969 	bl	8003dac <dec_uintval>
 8002ada:	4603      	mov	r3, r0
 8002adc:	81bb      	strh	r3, [r7, #12]
 8002ade:	e007      	b.n	8002af0 <p_gui_inc_menu+0x3a8>
      }
      else {
        value=dec_uintval(Menu.cursor.p1, 0);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002ae2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 f960 	bl	8003dac <dec_uintval>
 8002aec:	4603      	mov	r3, r0
 8002aee:	81bb      	strh	r3, [r7, #12]
      }
      Menu.cursor.p1=value;
 8002af0:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002af2:	89bb      	ldrh	r3, [r7, #12]
 8002af4:	8793      	strh	r3, [r2, #60]	; 0x3c
      return_val=MENU_CHANGE_VALUE;
 8002af6:	2305      	movs	r3, #5
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	e0b2      	b.n	8002c62 <p_gui_inc_menu+0x51a>
    }
    else if(Menu.cursor.mode==4) { // FFT
 8002afc:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	f040 80ae 	bne.w	8002c62 <p_gui_inc_menu+0x51a>
      if(GUI.old_button!=GUI.akt_button) {
 8002b06:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002b08:	79da      	ldrb	r2, [r3, #7]
 8002b0a:	4b45      	ldr	r3, [pc, #276]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002b0c:	799b      	ldrb	r3, [r3, #6]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d009      	beq.n	8002b26 <p_gui_inc_menu+0x3de>
        value=dec_uintval(Menu.cursor.f1, 1);
 8002b12:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 f946 	bl	8003dac <dec_uintval>
 8002b20:	4603      	mov	r3, r0
 8002b22:	81bb      	strh	r3, [r7, #12]
 8002b24:	e008      	b.n	8002b38 <p_gui_inc_menu+0x3f0>
      }
      else {
        value=dec_uintval(Menu.cursor.f1, 0);
 8002b26:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002b28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 f93c 	bl	8003dac <dec_uintval>
 8002b34:	4603      	mov	r3, r0
 8002b36:	81bb      	strh	r3, [r7, #12]
      }
      Menu.cursor.f1=value;
 8002b38:	4a3a      	ldr	r2, [pc, #232]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002b3a:	89bb      	ldrh	r3, [r7, #12]
 8002b3c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      return_val=MENU_CHANGE_VALUE;
 8002b40:	2305      	movs	r3, #5
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	e08d      	b.n	8002c62 <p_gui_inc_menu+0x51a>
    }
  }
  else if(GUI.akt_menu==MM_CUR_P2) {
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002b48:	791b      	ldrb	r3, [r3, #4]
 8002b4a:	2b0e      	cmp	r3, #14
 8002b4c:	d148      	bne.n	8002be0 <p_gui_inc_menu+0x498>
    if(Menu.cursor.mode==3) { // TIME
 8002b4e:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d11f      	bne.n	8002b96 <p_gui_inc_menu+0x44e>
      if(GUI.old_button!=GUI.akt_button) {
 8002b56:	4b32      	ldr	r3, [pc, #200]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002b58:	79da      	ldrb	r2, [r3, #7]
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002b5c:	799b      	ldrb	r3, [r3, #6]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d009      	beq.n	8002b76 <p_gui_inc_menu+0x42e>
        value=dec_uintval(Menu.cursor.t2, 1);
 8002b62:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002b64:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 f91e 	bl	8003dac <dec_uintval>
 8002b70:	4603      	mov	r3, r0
 8002b72:	81bb      	strh	r3, [r7, #12]
 8002b74:	e008      	b.n	8002b88 <p_gui_inc_menu+0x440>
      }
      else {
        value=dec_uintval(Menu.cursor.t2, 0);
 8002b76:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002b78:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 f914 	bl	8003dac <dec_uintval>
 8002b84:	4603      	mov	r3, r0
 8002b86:	81bb      	strh	r3, [r7, #12]
      }
      Menu.cursor.t2=value;
 8002b88:	4a26      	ldr	r2, [pc, #152]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002b8a:	89bb      	ldrh	r3, [r7, #12]
 8002b8c:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
      return_val=MENU_CHANGE_VALUE;
 8002b90:	2305      	movs	r3, #5
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e065      	b.n	8002c62 <p_gui_inc_menu+0x51a>
    }
    else if((Menu.cursor.mode==1) || (Menu.cursor.mode==2)) { // CH1+CH2
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d003      	beq.n	8002ba6 <p_gui_inc_menu+0x45e>
 8002b9e:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d15d      	bne.n	8002c62 <p_gui_inc_menu+0x51a>
      if(GUI.old_button!=GUI.akt_button) {
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002ba8:	79da      	ldrb	r2, [r3, #7]
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002bac:	799b      	ldrb	r3, [r3, #6]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d008      	beq.n	8002bc4 <p_gui_inc_menu+0x47c>
        value=dec_uintval(Menu.cursor.p2, 10);
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb6:	210a      	movs	r1, #10
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 f8f7 	bl	8003dac <dec_uintval>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	81bb      	strh	r3, [r7, #12]
 8002bc2:	e007      	b.n	8002bd4 <p_gui_inc_menu+0x48c>
      }
      else {
        value=dec_uintval(Menu.cursor.p2, 0);
 8002bc4:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 f8ee 	bl	8003dac <dec_uintval>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	81bb      	strh	r3, [r7, #12]
      }
      Menu.cursor.p2=value;
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002bd6:	89bb      	ldrh	r3, [r7, #12]
 8002bd8:	87d3      	strh	r3, [r2, #62]	; 0x3e
      return_val=MENU_CHANGE_VALUE;
 8002bda:	2305      	movs	r3, #5
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e040      	b.n	8002c62 <p_gui_inc_menu+0x51a>
    }
  }
  else if(GUI.akt_menu==MM_FFT_MODE) {
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002be2:	791b      	ldrb	r3, [r3, #4]
 8002be4:	2b12      	cmp	r3, #18
 8002be6:	d10b      	bne.n	8002c00 <p_gui_inc_menu+0x4b8>
    if(Menu.fft.mode<max-1) Menu.fft.mode++;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002bea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d236      	bcs.n	8002c62 <p_gui_inc_menu+0x51a>
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002bfc:	6553      	str	r3, [r2, #84]	; 0x54
 8002bfe:	e030      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_SEND_MODE) {
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <p_gui_inc_menu+0x4d8>)
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	2b0f      	cmp	r3, #15
 8002c06:	d10f      	bne.n	8002c28 <p_gui_inc_menu+0x4e0>
    if(Menu.send.mode<max-1) Menu.send.mode++;
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d226      	bcs.n	8002c62 <p_gui_inc_menu+0x51a>
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c18:	3301      	adds	r3, #1
 8002c1a:	4a02      	ldr	r2, [pc, #8]	; (8002c24 <p_gui_inc_menu+0x4dc>)
 8002c1c:	6493      	str	r3, [r2, #72]	; 0x48
 8002c1e:	e020      	b.n	8002c62 <p_gui_inc_menu+0x51a>
 8002c20:	200022bc 	.word	0x200022bc
 8002c24:	2000277c 	.word	0x2000277c
  }
  else if(GUI.akt_menu==MM_SEND_SCREEN) {
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <p_gui_inc_menu+0x524>)
 8002c2a:	791b      	ldrb	r3, [r3, #4]
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d10b      	bne.n	8002c48 <p_gui_inc_menu+0x500>
    if(Menu.send.screen<max-1) Menu.send.screen++;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <p_gui_inc_menu+0x528>)
 8002c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d212      	bcs.n	8002c62 <p_gui_inc_menu+0x51a>
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <p_gui_inc_menu+0x528>)
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	3301      	adds	r3, #1
 8002c42:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <p_gui_inc_menu+0x528>)
 8002c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c46:	e00c      	b.n	8002c62 <p_gui_inc_menu+0x51a>
  }
  else if(GUI.akt_menu==MM_SEND_DATA) {
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <p_gui_inc_menu+0x524>)
 8002c4a:	791b      	ldrb	r3, [r3, #4]
 8002c4c:	2b11      	cmp	r3, #17
 8002c4e:	d108      	bne.n	8002c62 <p_gui_inc_menu+0x51a>
    if(Menu.send.data==0) Menu.send.data=1;
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <p_gui_inc_menu+0x528>)
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <p_gui_inc_menu+0x516>
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <p_gui_inc_menu+0x528>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	651a      	str	r2, [r3, #80]	; 0x50
    return_val=MENU_SEND_DATA;
 8002c5e:	2306      	movs	r3, #6
 8002c60:	73fb      	strb	r3, [r7, #15]
  }

  return(return_val);
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200022bc 	.word	0x200022bc
 8002c70:	2000277c 	.word	0x2000277c

08002c74 <p_gui_dec_menu>:

//--------------------------------------------------------------
// Decrements the current menu item
//--------------------------------------------------------------
MENU_Status_t p_gui_dec_menu(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
  MENU_Status_t return_val=MENU_NO_CHANGE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  uint16_t value;
  int16_t ivalue;

  if(GUI.akt_menu==MM_NONE) return(return_val);
 8002c7e:	4b9a      	ldr	r3, [pc, #616]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002c80:	791b      	ldrb	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <p_gui_dec_menu+0x16>
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	e25b      	b.n	8003142 <p_gui_dec_menu+0x4ce>

  // alle "normalen" Menupunkte koennen nur einmal betaetigt werden
  if((GUI.akt_menu!=MM_TRG_VAL) && (GUI.akt_menu!=MM_CH_POS) &&
 8002c8a:	4b97      	ldr	r3, [pc, #604]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002c8c:	791b      	ldrb	r3, [r3, #4]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d013      	beq.n	8002cba <p_gui_dec_menu+0x46>
 8002c92:	4b95      	ldr	r3, [pc, #596]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002c94:	791b      	ldrb	r3, [r3, #4]
 8002c96:	2b0b      	cmp	r3, #11
 8002c98:	d00f      	beq.n	8002cba <p_gui_dec_menu+0x46>
    (GUI.akt_menu!=MM_CUR_P1) && (GUI.akt_menu!=MM_CUR_P2)) {
 8002c9a:	4b93      	ldr	r3, [pc, #588]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002c9c:	791b      	ldrb	r3, [r3, #4]
  if((GUI.akt_menu!=MM_TRG_VAL) && (GUI.akt_menu!=MM_CH_POS) &&
 8002c9e:	2b0d      	cmp	r3, #13
 8002ca0:	d00b      	beq.n	8002cba <p_gui_dec_menu+0x46>
    (GUI.akt_menu!=MM_CUR_P1) && (GUI.akt_menu!=MM_CUR_P2)) {
 8002ca2:	4b91      	ldr	r3, [pc, #580]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002ca4:	791b      	ldrb	r3, [r3, #4]
 8002ca6:	2b0e      	cmp	r3, #14
 8002ca8:	d007      	beq.n	8002cba <p_gui_dec_menu+0x46>
    // wenn schon mal betaetigt
    if(GUI.old_button==GUI.akt_button) {
 8002caa:	4b8f      	ldr	r3, [pc, #572]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002cac:	79da      	ldrb	r2, [r3, #7]
 8002cae:	4b8e      	ldr	r3, [pc, #568]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002cb0:	799b      	ldrb	r3, [r3, #6]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d101      	bne.n	8002cba <p_gui_dec_menu+0x46>
      // verlassen ohne was zu aendern
      return(return_val);
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	e243      	b.n	8003142 <p_gui_dec_menu+0x4ce>
    }
  }

  // default returndata
  return_val=MENU_CHANGE_NORMAL;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	71fb      	strb	r3, [r7, #7]

  if(GUI.akt_menu==MM_CH1) {
 8002cbe:	4b8a      	ldr	r3, [pc, #552]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002cc0:	791b      	ldrb	r3, [r3, #4]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10a      	bne.n	8002cdc <p_gui_dec_menu+0x68>
    if(Menu.ch1.faktor>0) Menu.ch1.faktor--;
 8002cc6:	4b89      	ldr	r3, [pc, #548]	; (8002eec <p_gui_dec_menu+0x278>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8238 	beq.w	8003140 <p_gui_dec_menu+0x4cc>
 8002cd0:	4b86      	ldr	r3, [pc, #536]	; (8002eec <p_gui_dec_menu+0x278>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	4a85      	ldr	r2, [pc, #532]	; (8002eec <p_gui_dec_menu+0x278>)
 8002cd8:	6093      	str	r3, [r2, #8]
 8002cda:	e231      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_CH2) {
 8002cdc:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002cde:	791b      	ldrb	r3, [r3, #4]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d10a      	bne.n	8002cfa <p_gui_dec_menu+0x86>
    if(Menu.ch2.faktor>0) Menu.ch2.faktor--;
 8002ce4:	4b81      	ldr	r3, [pc, #516]	; (8002eec <p_gui_dec_menu+0x278>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8229 	beq.w	8003140 <p_gui_dec_menu+0x4cc>
 8002cee:	4b7f      	ldr	r3, [pc, #508]	; (8002eec <p_gui_dec_menu+0x278>)
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	4a7d      	ldr	r2, [pc, #500]	; (8002eec <p_gui_dec_menu+0x278>)
 8002cf6:	6153      	str	r3, [r2, #20]
 8002cf8:	e222      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_TIME) {
 8002cfa:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d10b      	bne.n	8002d1a <p_gui_dec_menu+0xa6>
    if(Menu.timebase.value>0) Menu.timebase.value--;
 8002d02:	4b7a      	ldr	r3, [pc, #488]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <p_gui_dec_menu+0xa0>
 8002d0a:	4b78      	ldr	r3, [pc, #480]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	4a76      	ldr	r2, [pc, #472]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d12:	6213      	str	r3, [r2, #32]
    return_val=MENU_CHANGE_FRQ;
 8002d14:	2303      	movs	r3, #3
 8002d16:	71fb      	strb	r3, [r7, #7]
 8002d18:	e212      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_SETTING) {
 8002d1a:	4b73      	ldr	r3, [pc, #460]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002d1c:	791b      	ldrb	r3, [r3, #4]
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d10a      	bne.n	8002d38 <p_gui_dec_menu+0xc4>
    if(Menu.akt_setting>0) Menu.akt_setting--;
 8002d22:	4b72      	ldr	r3, [pc, #456]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 820a 	beq.w	8003140 <p_gui_dec_menu+0x4cc>
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	4a6e      	ldr	r2, [pc, #440]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d34:	6053      	str	r3, [r2, #4]
 8002d36:	e203      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_TRG_SOURCE) {
 8002d38:	4b6b      	ldr	r3, [pc, #428]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002d3a:	791b      	ldrb	r3, [r3, #4]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d10a      	bne.n	8002d56 <p_gui_dec_menu+0xe2>
    if(Menu.trigger.source>0) Menu.trigger.source--;
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 81fb 	beq.w	8003140 <p_gui_dec_menu+0x4cc>
 8002d4a:	4b68      	ldr	r3, [pc, #416]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	4a66      	ldr	r2, [pc, #408]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d52:	6253      	str	r3, [r2, #36]	; 0x24
 8002d54:	e1f4      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_TRG_EDGE) {
 8002d56:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002d58:	791b      	ldrb	r3, [r3, #4]
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d10a      	bne.n	8002d74 <p_gui_dec_menu+0x100>
    if(Menu.trigger.edge>0) Menu.trigger.edge--;
 8002d5e:	4b63      	ldr	r3, [pc, #396]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 81ec 	beq.w	8003140 <p_gui_dec_menu+0x4cc>
 8002d68:	4b60      	ldr	r3, [pc, #384]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	4a5f      	ldr	r2, [pc, #380]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d70:	6293      	str	r3, [r2, #40]	; 0x28
 8002d72:	e1e5      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_TRG_MODE) {
 8002d74:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002d76:	791b      	ldrb	r3, [r3, #4]
 8002d78:	2b07      	cmp	r3, #7
 8002d7a:	d10b      	bne.n	8002d94 <p_gui_dec_menu+0x120>
    if(Menu.trigger.mode>0) Menu.trigger.mode--;
 8002d7c:	4b5b      	ldr	r3, [pc, #364]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <p_gui_dec_menu+0x11a>
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	4a58      	ldr	r2, [pc, #352]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    return_val=MENU_CHANGE_MODE;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	71fb      	strb	r3, [r7, #7]
 8002d92:	e1d5      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_TRG_VAL) {
 8002d94:	4b54      	ldr	r3, [pc, #336]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002d96:	791b      	ldrb	r3, [r3, #4]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d13b      	bne.n	8002e14 <p_gui_dec_menu+0x1a0>
    if(Menu.trigger.source==0) { // CH1
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <p_gui_dec_menu+0x278>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11a      	bne.n	8002dda <p_gui_dec_menu+0x166>
      if(GUI.old_button!=GUI.akt_button) {
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002da6:	79da      	ldrb	r2, [r3, #7]
 8002da8:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002daa:	799b      	ldrb	r3, [r3, #6]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d008      	beq.n	8002dc2 <p_gui_dec_menu+0x14e>
        value=inc_uintval(Menu.trigger.value_ch1, 10);
 8002db0:	4b4e      	ldr	r3, [pc, #312]	; (8002eec <p_gui_dec_menu+0x278>)
 8002db2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002db4:	210a      	movs	r1, #10
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 ffb4 	bl	8003d24 <inc_uintval>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	80bb      	strh	r3, [r7, #4]
 8002dc0:	e007      	b.n	8002dd2 <p_gui_dec_menu+0x15e>
      }
      else {
        value=inc_uintval(Menu.trigger.value_ch1, 0);
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	; (8002eec <p_gui_dec_menu+0x278>)
 8002dc4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 ffab 	bl	8003d24 <inc_uintval>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80bb      	strh	r3, [r7, #4]
      }
      Menu.trigger.value_ch1=value;
 8002dd2:	4a46      	ldr	r2, [pc, #280]	; (8002eec <p_gui_dec_menu+0x278>)
 8002dd4:	88bb      	ldrh	r3, [r7, #4]
 8002dd6:	8693      	strh	r3, [r2, #52]	; 0x34
 8002dd8:	e019      	b.n	8002e0e <p_gui_dec_menu+0x19a>
    }
    else { // CH2
      if(GUI.old_button!=GUI.akt_button) {
 8002dda:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002ddc:	79da      	ldrb	r2, [r3, #7]
 8002dde:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002de0:	799b      	ldrb	r3, [r3, #6]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d008      	beq.n	8002df8 <p_gui_dec_menu+0x184>
        value=inc_uintval(Menu.trigger.value_ch2, 10);
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <p_gui_dec_menu+0x278>)
 8002de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dea:	210a      	movs	r1, #10
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 ff99 	bl	8003d24 <inc_uintval>
 8002df2:	4603      	mov	r3, r0
 8002df4:	80bb      	strh	r3, [r7, #4]
 8002df6:	e007      	b.n	8002e08 <p_gui_dec_menu+0x194>
      }
      else {
        value=inc_uintval(Menu.trigger.value_ch2, 0);
 8002df8:	4b3c      	ldr	r3, [pc, #240]	; (8002eec <p_gui_dec_menu+0x278>)
 8002dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 ff90 	bl	8003d24 <inc_uintval>
 8002e04:	4603      	mov	r3, r0
 8002e06:	80bb      	strh	r3, [r7, #4]
      }
      Menu.trigger.value_ch2=value;
 8002e08:	4a38      	ldr	r2, [pc, #224]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e0a:	88bb      	ldrh	r3, [r7, #4]
 8002e0c:	86d3      	strh	r3, [r2, #54]	; 0x36
    }
    return_val=MENU_CHANGE_VALUE;
 8002e0e:	2305      	movs	r3, #5
 8002e10:	71fb      	strb	r3, [r7, #7]
 8002e12:	e195      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_TRG_RESET) {
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002e16:	791b      	ldrb	r3, [r3, #4]
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	d11d      	bne.n	8002e58 <p_gui_dec_menu+0x1e4>
    if(Menu.trigger.mode==2) { // "single"
 8002e1c:	4b33      	ldr	r3, [pc, #204]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d108      	bne.n	8002e36 <p_gui_dec_menu+0x1c2>
      if(Menu.trigger.single==4) Menu.trigger.single=5;  // von "Ready" auf "Stop"
 8002e24:	4b31      	ldr	r3, [pc, #196]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	f040 8189 	bne.w	8003140 <p_gui_dec_menu+0x4cc>
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e30:	2205      	movs	r2, #5
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
 8002e34:	e184      	b.n	8003140 <p_gui_dec_menu+0x4cc>
    }
    else { // "normal" oder "auto"
      if(Menu.trigger.single==0) {
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <p_gui_dec_menu+0x1d2>
        Menu.trigger.single=1; // von "Run" auf "Stop"
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
 8002e44:	e17c      	b.n	8003140 <p_gui_dec_menu+0x4cc>
      }
      else if(Menu.trigger.single==1) {
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	f040 8178 	bne.w	8003140 <p_gui_dec_menu+0x4cc>
        Menu.trigger.single=2; // von "Stop" auf "Weiter"
 8002e50:	4b26      	ldr	r3, [pc, #152]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e52:	2202      	movs	r2, #2
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
 8002e56:	e173      	b.n	8003140 <p_gui_dec_menu+0x4cc>
      }
    }
  }
  else if(GUI.akt_menu==MM_CH_VIS) {
 8002e58:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002e5a:	791b      	ldrb	r3, [r3, #4]
 8002e5c:	2b0a      	cmp	r3, #10
 8002e5e:	d11e      	bne.n	8002e9e <p_gui_dec_menu+0x22a>
    if(Menu.akt_setting==SETTING_CH1) { // CH1
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d10a      	bne.n	8002e7e <p_gui_dec_menu+0x20a>
      if(Menu.ch1.visible>0) Menu.ch1.visible--;
 8002e68:	4b20      	ldr	r3, [pc, #128]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8167 	beq.w	8003140 <p_gui_dec_menu+0x4cc>
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e7a:	60d3      	str	r3, [r2, #12]
 8002e7c:	e160      	b.n	8003140 <p_gui_dec_menu+0x4cc>
    }
    else if(Menu.akt_setting==SETTING_CH2) { // CH2
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	f040 815c 	bne.w	8003140 <p_gui_dec_menu+0x4cc>
      if(Menu.ch2.visible>0) Menu.ch2.visible--;
 8002e88:	4b18      	ldr	r3, [pc, #96]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8157 	beq.w	8003140 <p_gui_dec_menu+0x4cc>
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <p_gui_dec_menu+0x278>)
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	e150      	b.n	8003140 <p_gui_dec_menu+0x4cc>
    }
  }
  else if(GUI.akt_menu==MM_CH_POS) {
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002ea0:	791b      	ldrb	r3, [r3, #4]
 8002ea2:	2b0b      	cmp	r3, #11
 8002ea4:	d147      	bne.n	8002f36 <p_gui_dec_menu+0x2c2>
    if(Menu.akt_setting==SETTING_CH1) { // CH1
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <p_gui_dec_menu+0x278>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d120      	bne.n	8002ef0 <p_gui_dec_menu+0x27c>
      if(GUI.old_button!=GUI.akt_button) {
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002eb0:	79da      	ldrb	r2, [r3, #7]
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <p_gui_dec_menu+0x274>)
 8002eb4:	799b      	ldrb	r3, [r3, #6]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d009      	beq.n	8002ece <p_gui_dec_menu+0x25a>
        ivalue=inc_intval(Menu.ch1.position, 1);
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <p_gui_dec_menu+0x278>)
 8002ebc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 ffb4 	bl	8003e30 <inc_intval>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	e008      	b.n	8002ee0 <p_gui_dec_menu+0x26c>
      }
      else {
        ivalue=inc_intval(Menu.ch1.position, 0);
 8002ece:	4b07      	ldr	r3, [pc, #28]	; (8002eec <p_gui_dec_menu+0x278>)
 8002ed0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 ffaa 	bl	8003e30 <inc_intval>
 8002edc:	4603      	mov	r3, r0
 8002ede:	807b      	strh	r3, [r7, #2]
      }
      Menu.ch1.position=ivalue;
 8002ee0:	4a02      	ldr	r2, [pc, #8]	; (8002eec <p_gui_dec_menu+0x278>)
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	8213      	strh	r3, [r2, #16]
 8002ee6:	e023      	b.n	8002f30 <p_gui_dec_menu+0x2bc>
 8002ee8:	200022bc 	.word	0x200022bc
 8002eec:	2000277c 	.word	0x2000277c
    }
    else if(Menu.akt_setting==SETTING_CH2) { // CH2
 8002ef0:	4b96      	ldr	r3, [pc, #600]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d11b      	bne.n	8002f30 <p_gui_dec_menu+0x2bc>
      if(GUI.old_button!=GUI.akt_button) {
 8002ef8:	4b95      	ldr	r3, [pc, #596]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002efa:	79da      	ldrb	r2, [r3, #7]
 8002efc:	4b94      	ldr	r3, [pc, #592]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002efe:	799b      	ldrb	r3, [r3, #6]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d009      	beq.n	8002f18 <p_gui_dec_menu+0x2a4>
        ivalue=inc_intval(Menu.ch2.position, 1);
 8002f04:	4b91      	ldr	r3, [pc, #580]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f06:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 ff8f 	bl	8003e30 <inc_intval>
 8002f12:	4603      	mov	r3, r0
 8002f14:	807b      	strh	r3, [r7, #2]
 8002f16:	e008      	b.n	8002f2a <p_gui_dec_menu+0x2b6>
      }
      else {
        ivalue=inc_intval(Menu.ch2.position, 0);
 8002f18:	4b8c      	ldr	r3, [pc, #560]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f1a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 ff85 	bl	8003e30 <inc_intval>
 8002f26:	4603      	mov	r3, r0
 8002f28:	807b      	strh	r3, [r7, #2]
      }
      Menu.ch2.position=ivalue;
 8002f2a:	4a88      	ldr	r2, [pc, #544]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	8393      	strh	r3, [r2, #28]
    }
    return_val=MENU_CHANGE_VALUE;
 8002f30:	2305      	movs	r3, #5
 8002f32:	71fb      	strb	r3, [r7, #7]
 8002f34:	e104      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_CUR_MODE) {
 8002f36:	4b86      	ldr	r3, [pc, #536]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002f38:	791b      	ldrb	r3, [r3, #4]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d10a      	bne.n	8002f54 <p_gui_dec_menu+0x2e0>
    if(Menu.cursor.mode>0) Menu.cursor.mode--;
 8002f3e:	4b83      	ldr	r3, [pc, #524]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80fc 	beq.w	8003140 <p_gui_dec_menu+0x4cc>
 8002f48:	4b80      	ldr	r3, [pc, #512]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	4a7f      	ldr	r2, [pc, #508]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f50:	6393      	str	r3, [r2, #56]	; 0x38
 8002f52:	e0f5      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_CUR_P1) {
 8002f54:	4b7e      	ldr	r3, [pc, #504]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002f56:	791b      	ldrb	r3, [r3, #4]
 8002f58:	2b0d      	cmp	r3, #13
 8002f5a:	d16d      	bne.n	8003038 <p_gui_dec_menu+0x3c4>
    if(Menu.cursor.mode==3) { // TIME
 8002f5c:	4b7b      	ldr	r3, [pc, #492]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d11f      	bne.n	8002fa4 <p_gui_dec_menu+0x330>
      if(GUI.old_button!=GUI.akt_button) {
 8002f64:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002f66:	79da      	ldrb	r2, [r3, #7]
 8002f68:	4b79      	ldr	r3, [pc, #484]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002f6a:	799b      	ldrb	r3, [r3, #6]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d009      	beq.n	8002f84 <p_gui_dec_menu+0x310>
        value=inc_uintval(Menu.cursor.t1, 1);
 8002f70:	4b76      	ldr	r3, [pc, #472]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f76:	2101      	movs	r1, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fed3 	bl	8003d24 <inc_uintval>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80bb      	strh	r3, [r7, #4]
 8002f82:	e008      	b.n	8002f96 <p_gui_dec_menu+0x322>
      }
      else {
        value=inc_uintval(Menu.cursor.t1, 0);
 8002f84:	4b71      	ldr	r3, [pc, #452]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fec9 	bl	8003d24 <inc_uintval>
 8002f92:	4603      	mov	r3, r0
 8002f94:	80bb      	strh	r3, [r7, #4]
      }
      Menu.cursor.t1=value;
 8002f96:	4a6d      	ldr	r2, [pc, #436]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002f98:	88bb      	ldrh	r3, [r7, #4]
 8002f9a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      return_val=MENU_CHANGE_VALUE;
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	71fb      	strb	r3, [r7, #7]
 8002fa2:	e0cd      	b.n	8003140 <p_gui_dec_menu+0x4cc>
    }
    else if((Menu.cursor.mode==1) || (Menu.cursor.mode==2)) { // CH1+CH2
 8002fa4:	4b69      	ldr	r3, [pc, #420]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d003      	beq.n	8002fb4 <p_gui_dec_menu+0x340>
 8002fac:	4b67      	ldr	r3, [pc, #412]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d11c      	bne.n	8002fee <p_gui_dec_menu+0x37a>
      if(GUI.old_button!=GUI.akt_button) {
 8002fb4:	4b66      	ldr	r3, [pc, #408]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002fb6:	79da      	ldrb	r2, [r3, #7]
 8002fb8:	4b65      	ldr	r3, [pc, #404]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002fba:	799b      	ldrb	r3, [r3, #6]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d008      	beq.n	8002fd2 <p_gui_dec_menu+0x35e>
        value=inc_uintval(Menu.cursor.p1, 10);
 8002fc0:	4b62      	ldr	r3, [pc, #392]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002fc2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002fc4:	210a      	movs	r1, #10
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 feac 	bl	8003d24 <inc_uintval>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	80bb      	strh	r3, [r7, #4]
 8002fd0:	e007      	b.n	8002fe2 <p_gui_dec_menu+0x36e>
      }
      else {
        value=inc_uintval(Menu.cursor.p1, 0);
 8002fd2:	4b5e      	ldr	r3, [pc, #376]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002fd4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fea3 	bl	8003d24 <inc_uintval>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80bb      	strh	r3, [r7, #4]
      }
      Menu.cursor.p1=value;
 8002fe2:	4a5a      	ldr	r2, [pc, #360]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002fe4:	88bb      	ldrh	r3, [r7, #4]
 8002fe6:	8793      	strh	r3, [r2, #60]	; 0x3c
      return_val=MENU_CHANGE_VALUE;
 8002fe8:	2305      	movs	r3, #5
 8002fea:	71fb      	strb	r3, [r7, #7]
 8002fec:	e0a8      	b.n	8003140 <p_gui_dec_menu+0x4cc>
    }
    else if(Menu.cursor.mode==4) { // FFT
 8002fee:	4b57      	ldr	r3, [pc, #348]	; (800314c <p_gui_dec_menu+0x4d8>)
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	f040 80a4 	bne.w	8003140 <p_gui_dec_menu+0x4cc>
      if(GUI.old_button!=GUI.akt_button) {
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002ffa:	79da      	ldrb	r2, [r3, #7]
 8002ffc:	4b54      	ldr	r3, [pc, #336]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8002ffe:	799b      	ldrb	r3, [r3, #6]
 8003000:	429a      	cmp	r2, r3
 8003002:	d009      	beq.n	8003018 <p_gui_dec_menu+0x3a4>
        value=inc_uintval(Menu.cursor.f1, 1);
 8003004:	4b51      	ldr	r3, [pc, #324]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fe89 	bl	8003d24 <inc_uintval>
 8003012:	4603      	mov	r3, r0
 8003014:	80bb      	strh	r3, [r7, #4]
 8003016:	e008      	b.n	800302a <p_gui_dec_menu+0x3b6>
      }
      else {
        value=inc_uintval(Menu.cursor.f1, 0);
 8003018:	4b4c      	ldr	r3, [pc, #304]	; (800314c <p_gui_dec_menu+0x4d8>)
 800301a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fe7f 	bl	8003d24 <inc_uintval>
 8003026:	4603      	mov	r3, r0
 8003028:	80bb      	strh	r3, [r7, #4]
      }
      Menu.cursor.f1=value;
 800302a:	4a48      	ldr	r2, [pc, #288]	; (800314c <p_gui_dec_menu+0x4d8>)
 800302c:	88bb      	ldrh	r3, [r7, #4]
 800302e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      return_val=MENU_CHANGE_VALUE;
 8003032:	2305      	movs	r3, #5
 8003034:	71fb      	strb	r3, [r7, #7]
 8003036:	e083      	b.n	8003140 <p_gui_dec_menu+0x4cc>
    }
  }
  else if(GUI.akt_menu==MM_CUR_P2) {
 8003038:	4b45      	ldr	r3, [pc, #276]	; (8003150 <p_gui_dec_menu+0x4dc>)
 800303a:	791b      	ldrb	r3, [r3, #4]
 800303c:	2b0e      	cmp	r3, #14
 800303e:	d148      	bne.n	80030d2 <p_gui_dec_menu+0x45e>
    if(Menu.cursor.mode==3) { // TIME
 8003040:	4b42      	ldr	r3, [pc, #264]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	2b03      	cmp	r3, #3
 8003046:	d11f      	bne.n	8003088 <p_gui_dec_menu+0x414>
      if(GUI.old_button!=GUI.akt_button) {
 8003048:	4b41      	ldr	r3, [pc, #260]	; (8003150 <p_gui_dec_menu+0x4dc>)
 800304a:	79da      	ldrb	r2, [r3, #7]
 800304c:	4b40      	ldr	r3, [pc, #256]	; (8003150 <p_gui_dec_menu+0x4dc>)
 800304e:	799b      	ldrb	r3, [r3, #6]
 8003050:	429a      	cmp	r2, r3
 8003052:	d009      	beq.n	8003068 <p_gui_dec_menu+0x3f4>
        value=inc_uintval(Menu.cursor.t2, 1);
 8003054:	4b3d      	ldr	r3, [pc, #244]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003056:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800305a:	2101      	movs	r1, #1
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fe61 	bl	8003d24 <inc_uintval>
 8003062:	4603      	mov	r3, r0
 8003064:	80bb      	strh	r3, [r7, #4]
 8003066:	e008      	b.n	800307a <p_gui_dec_menu+0x406>
      }
      else {
        value=inc_uintval(Menu.cursor.t2, 0);
 8003068:	4b38      	ldr	r3, [pc, #224]	; (800314c <p_gui_dec_menu+0x4d8>)
 800306a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fe57 	bl	8003d24 <inc_uintval>
 8003076:	4603      	mov	r3, r0
 8003078:	80bb      	strh	r3, [r7, #4]
      }
      Menu.cursor.t2=value;
 800307a:	4a34      	ldr	r2, [pc, #208]	; (800314c <p_gui_dec_menu+0x4d8>)
 800307c:	88bb      	ldrh	r3, [r7, #4]
 800307e:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
      return_val=MENU_CHANGE_VALUE;
 8003082:	2305      	movs	r3, #5
 8003084:	71fb      	strb	r3, [r7, #7]
 8003086:	e05b      	b.n	8003140 <p_gui_dec_menu+0x4cc>
    }
    else if((Menu.cursor.mode==1) || (Menu.cursor.mode==2)) { // CH1+CH2
 8003088:	4b30      	ldr	r3, [pc, #192]	; (800314c <p_gui_dec_menu+0x4d8>)
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	2b01      	cmp	r3, #1
 800308e:	d003      	beq.n	8003098 <p_gui_dec_menu+0x424>
 8003090:	4b2e      	ldr	r3, [pc, #184]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	2b02      	cmp	r3, #2
 8003096:	d153      	bne.n	8003140 <p_gui_dec_menu+0x4cc>
      if(GUI.old_button!=GUI.akt_button) {
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <p_gui_dec_menu+0x4dc>)
 800309a:	79da      	ldrb	r2, [r3, #7]
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <p_gui_dec_menu+0x4dc>)
 800309e:	799b      	ldrb	r3, [r3, #6]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d008      	beq.n	80030b6 <p_gui_dec_menu+0x442>
        value=inc_uintval(Menu.cursor.p2, 10);
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <p_gui_dec_menu+0x4d8>)
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a8:	210a      	movs	r1, #10
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fe3a 	bl	8003d24 <inc_uintval>
 80030b0:	4603      	mov	r3, r0
 80030b2:	80bb      	strh	r3, [r7, #4]
 80030b4:	e007      	b.n	80030c6 <p_gui_dec_menu+0x452>
      }
      else {
        value=inc_uintval(Menu.cursor.p2, 0);
 80030b6:	4b25      	ldr	r3, [pc, #148]	; (800314c <p_gui_dec_menu+0x4d8>)
 80030b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fe31 	bl	8003d24 <inc_uintval>
 80030c2:	4603      	mov	r3, r0
 80030c4:	80bb      	strh	r3, [r7, #4]
      }
      Menu.cursor.p2=value;
 80030c6:	4a21      	ldr	r2, [pc, #132]	; (800314c <p_gui_dec_menu+0x4d8>)
 80030c8:	88bb      	ldrh	r3, [r7, #4]
 80030ca:	87d3      	strh	r3, [r2, #62]	; 0x3e
      return_val=MENU_CHANGE_VALUE;
 80030cc:	2305      	movs	r3, #5
 80030ce:	71fb      	strb	r3, [r7, #7]
 80030d0:	e036      	b.n	8003140 <p_gui_dec_menu+0x4cc>
    }
  }
  else if(GUI.akt_menu==MM_FFT_MODE) {
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <p_gui_dec_menu+0x4dc>)
 80030d4:	791b      	ldrb	r3, [r3, #4]
 80030d6:	2b12      	cmp	r3, #18
 80030d8:	d109      	bne.n	80030ee <p_gui_dec_menu+0x47a>
    if(Menu.fft.mode>0) Menu.fft.mode--;
 80030da:	4b1c      	ldr	r3, [pc, #112]	; (800314c <p_gui_dec_menu+0x4d8>)
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d02e      	beq.n	8003140 <p_gui_dec_menu+0x4cc>
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <p_gui_dec_menu+0x4d8>)
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	3b01      	subs	r3, #1
 80030e8:	4a18      	ldr	r2, [pc, #96]	; (800314c <p_gui_dec_menu+0x4d8>)
 80030ea:	6553      	str	r3, [r2, #84]	; 0x54
 80030ec:	e028      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_SEND_MODE) {
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <p_gui_dec_menu+0x4dc>)
 80030f0:	791b      	ldrb	r3, [r3, #4]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	d109      	bne.n	800310a <p_gui_dec_menu+0x496>
    if(Menu.send.mode>0) Menu.send.mode--;
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <p_gui_dec_menu+0x4d8>)
 80030f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d020      	beq.n	8003140 <p_gui_dec_menu+0x4cc>
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003102:	3b01      	subs	r3, #1
 8003104:	4a11      	ldr	r2, [pc, #68]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003106:	6493      	str	r3, [r2, #72]	; 0x48
 8003108:	e01a      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_SEND_SCREEN) {
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <p_gui_dec_menu+0x4dc>)
 800310c:	791b      	ldrb	r3, [r3, #4]
 800310e:	2b10      	cmp	r3, #16
 8003110:	d109      	bne.n	8003126 <p_gui_dec_menu+0x4b2>
    if(Menu.send.screen>0) Menu.send.screen--;
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d012      	beq.n	8003140 <p_gui_dec_menu+0x4cc>
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <p_gui_dec_menu+0x4d8>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	3b01      	subs	r3, #1
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003124:	e00c      	b.n	8003140 <p_gui_dec_menu+0x4cc>
  }
  else if(GUI.akt_menu==MM_SEND_DATA) {
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <p_gui_dec_menu+0x4dc>)
 8003128:	791b      	ldrb	r3, [r3, #4]
 800312a:	2b11      	cmp	r3, #17
 800312c:	d108      	bne.n	8003140 <p_gui_dec_menu+0x4cc>
    if(Menu.send.data==0) Menu.send.data=1;
 800312e:	4b07      	ldr	r3, [pc, #28]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <p_gui_dec_menu+0x4c8>
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <p_gui_dec_menu+0x4d8>)
 8003138:	2201      	movs	r2, #1
 800313a:	651a      	str	r2, [r3, #80]	; 0x50
    return_val=MENU_SEND_DATA;
 800313c:	2306      	movs	r3, #6
 800313e:	71fb      	strb	r3, [r7, #7]
  }

  return(return_val);
 8003140:	79fb      	ldrb	r3, [r7, #7]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	2000277c 	.word	0x2000277c
 8003150:	200022bc 	.word	0x200022bc

08003154 <p_make_GUI_changes>:

//--------------------------------------------------------------
// changes the menu, depending on which GUI button is pressed
//--------------------------------------------------------------
MENU_Status_t p_make_GUI_changes(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  MENU_Status_t return_val=MENU_NO_CHANGE;
 800315a:	2300      	movs	r3, #0
 800315c:	71fb      	strb	r3, [r7, #7]

  if(GUI.akt_button==GUI_BTN_RIGHT) {
 800315e:	4b9d      	ldr	r3, [pc, #628]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003160:	799b      	ldrb	r3, [r3, #6]
 8003162:	2b04      	cmp	r3, #4
 8003164:	f040 8095 	bne.w	8003292 <p_make_GUI_changes+0x13e>
    if(GUI.old_button!=GUI.akt_button) {
 8003168:	4b9a      	ldr	r3, [pc, #616]	; (80033d4 <p_make_GUI_changes+0x280>)
 800316a:	79da      	ldrb	r2, [r3, #7]
 800316c:	4b99      	ldr	r3, [pc, #612]	; (80033d4 <p_make_GUI_changes+0x280>)
 800316e:	799b      	ldrb	r3, [r3, #6]
 8003170:	429a      	cmp	r2, r3
 8003172:	f000 8125 	beq.w	80033c0 <p_make_GUI_changes+0x26c>
      return_val=MENU_CHANGE_GUI;
 8003176:	2301      	movs	r3, #1
 8003178:	71fb      	strb	r3, [r7, #7]
      // Bottom-Trigger
      if(GUI.akt_menu==MM_TRG_VAL) GUI.akt_menu=MM_TRG_RESET;
 800317a:	4b96      	ldr	r3, [pc, #600]	; (80033d4 <p_make_GUI_changes+0x280>)
 800317c:	791b      	ldrb	r3, [r3, #4]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d102      	bne.n	8003188 <p_make_GUI_changes+0x34>
 8003182:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003184:	2209      	movs	r2, #9
 8003186:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_TRG_MODE) GUI.akt_menu=MM_TRG_VAL;
 8003188:	4b92      	ldr	r3, [pc, #584]	; (80033d4 <p_make_GUI_changes+0x280>)
 800318a:	791b      	ldrb	r3, [r3, #4]
 800318c:	2b07      	cmp	r3, #7
 800318e:	d102      	bne.n	8003196 <p_make_GUI_changes+0x42>
 8003190:	4b90      	ldr	r3, [pc, #576]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003192:	2208      	movs	r2, #8
 8003194:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_TRG_EDGE) GUI.akt_menu=MM_TRG_MODE;
 8003196:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003198:	791b      	ldrb	r3, [r3, #4]
 800319a:	2b06      	cmp	r3, #6
 800319c:	d102      	bne.n	80031a4 <p_make_GUI_changes+0x50>
 800319e:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_TRG_SOURCE) GUI.akt_menu=MM_TRG_EDGE;
 80031a4:	4b8b      	ldr	r3, [pc, #556]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031a6:	791b      	ldrb	r3, [r3, #4]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d102      	bne.n	80031b2 <p_make_GUI_changes+0x5e>
 80031ac:	4b89      	ldr	r3, [pc, #548]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031ae:	2206      	movs	r2, #6
 80031b0:	711a      	strb	r2, [r3, #4]

      // Bottom-CH
      if(GUI.akt_menu==MM_CH_VIS) GUI.akt_menu=MM_CH_POS;
 80031b2:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031b4:	791b      	ldrb	r3, [r3, #4]
 80031b6:	2b0a      	cmp	r3, #10
 80031b8:	d102      	bne.n	80031c0 <p_make_GUI_changes+0x6c>
 80031ba:	4b86      	ldr	r3, [pc, #536]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031bc:	220b      	movs	r2, #11
 80031be:	711a      	strb	r2, [r3, #4]

      // Bottom-Cursor
      if(GUI.akt_menu==MM_CUR_P1) {
 80031c0:	4b84      	ldr	r3, [pc, #528]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	2b0d      	cmp	r3, #13
 80031c6:	d106      	bne.n	80031d6 <p_make_GUI_changes+0x82>
        if(Menu.cursor.mode!=4) GUI.akt_menu=MM_CUR_P2;
 80031c8:	4b83      	ldr	r3, [pc, #524]	; (80033d8 <p_make_GUI_changes+0x284>)
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d002      	beq.n	80031d6 <p_make_GUI_changes+0x82>
 80031d0:	4b80      	ldr	r3, [pc, #512]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031d2:	220e      	movs	r2, #14
 80031d4:	711a      	strb	r2, [r3, #4]
      }
      if(GUI.akt_menu==MM_CUR_MODE) {
 80031d6:	4b7f      	ldr	r3, [pc, #508]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031d8:	791b      	ldrb	r3, [r3, #4]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d106      	bne.n	80031ec <p_make_GUI_changes+0x98>
        if(Menu.cursor.mode>0) GUI.akt_menu=MM_CUR_P1;
 80031de:	4b7e      	ldr	r3, [pc, #504]	; (80033d8 <p_make_GUI_changes+0x284>)
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <p_make_GUI_changes+0x98>
 80031e6:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031e8:	220d      	movs	r2, #13
 80031ea:	711a      	strb	r2, [r3, #4]
      }

      // Bottom-Send
      if(GUI.akt_menu==MM_SEND_SCREEN) GUI.akt_menu=MM_SEND_DATA;
 80031ec:	4b79      	ldr	r3, [pc, #484]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031ee:	791b      	ldrb	r3, [r3, #4]
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d102      	bne.n	80031fa <p_make_GUI_changes+0xa6>
 80031f4:	4b77      	ldr	r3, [pc, #476]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031f6:	2211      	movs	r2, #17
 80031f8:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_SEND_MODE) GUI.akt_menu=MM_SEND_SCREEN;
 80031fa:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <p_make_GUI_changes+0x280>)
 80031fc:	791b      	ldrb	r3, [r3, #4]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	d102      	bne.n	8003208 <p_make_GUI_changes+0xb4>
 8003202:	4b74      	ldr	r3, [pc, #464]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003204:	2210      	movs	r2, #16
 8003206:	711a      	strb	r2, [r3, #4]

      // TOP (last Entry)
      if(GUI.akt_menu==MM_SETTING) {
 8003208:	4b72      	ldr	r3, [pc, #456]	; (80033d4 <p_make_GUI_changes+0x280>)
 800320a:	791b      	ldrb	r3, [r3, #4]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d129      	bne.n	8003264 <p_make_GUI_changes+0x110>
        if(Menu.akt_setting==SETTING_TRIGGER) GUI.akt_menu=MM_TRG_SOURCE;
 8003210:	4b71      	ldr	r3, [pc, #452]	; (80033d8 <p_make_GUI_changes+0x284>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <p_make_GUI_changes+0xca>
 8003218:	4b6e      	ldr	r3, [pc, #440]	; (80033d4 <p_make_GUI_changes+0x280>)
 800321a:	2205      	movs	r2, #5
 800321c:	711a      	strb	r2, [r3, #4]
        if(Menu.akt_setting==SETTING_CH1) GUI.akt_menu=MM_CH_VIS;
 800321e:	4b6e      	ldr	r3, [pc, #440]	; (80033d8 <p_make_GUI_changes+0x284>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <p_make_GUI_changes+0xd8>
 8003226:	4b6b      	ldr	r3, [pc, #428]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003228:	220a      	movs	r2, #10
 800322a:	711a      	strb	r2, [r3, #4]
        if(Menu.akt_setting==SETTING_CH2) GUI.akt_menu=MM_CH_VIS;
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <p_make_GUI_changes+0x284>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d102      	bne.n	800323a <p_make_GUI_changes+0xe6>
 8003234:	4b67      	ldr	r3, [pc, #412]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003236:	220a      	movs	r2, #10
 8003238:	711a      	strb	r2, [r3, #4]
        if(Menu.akt_setting==SETTING_CURSOR) GUI.akt_menu=MM_CUR_MODE;
 800323a:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <p_make_GUI_changes+0x284>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d102      	bne.n	8003248 <p_make_GUI_changes+0xf4>
 8003242:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003244:	220c      	movs	r2, #12
 8003246:	711a      	strb	r2, [r3, #4]
        if(Menu.akt_setting==SETTING_FFT) GUI.akt_menu=MM_FFT_MODE;
 8003248:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <p_make_GUI_changes+0x284>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b04      	cmp	r3, #4
 800324e:	d102      	bne.n	8003256 <p_make_GUI_changes+0x102>
 8003250:	4b60      	ldr	r3, [pc, #384]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003252:	2212      	movs	r2, #18
 8003254:	711a      	strb	r2, [r3, #4]
        if(Menu.akt_setting==SETTING_SEND) GUI.akt_menu=MM_SEND_MODE;
 8003256:	4b60      	ldr	r3, [pc, #384]	; (80033d8 <p_make_GUI_changes+0x284>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b05      	cmp	r3, #5
 800325c:	d102      	bne.n	8003264 <p_make_GUI_changes+0x110>
 800325e:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003260:	220f      	movs	r2, #15
 8003262:	711a      	strb	r2, [r3, #4]
      }

      // TOP
      if(GUI.akt_menu==MM_TIME) GUI.akt_menu=MM_SETTING;
 8003264:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003266:	791b      	ldrb	r3, [r3, #4]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d102      	bne.n	8003272 <p_make_GUI_changes+0x11e>
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <p_make_GUI_changes+0x280>)
 800326e:	2204      	movs	r2, #4
 8003270:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_CH2) GUI.akt_menu=MM_TIME;
 8003272:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003274:	791b      	ldrb	r3, [r3, #4]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d102      	bne.n	8003280 <p_make_GUI_changes+0x12c>
 800327a:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <p_make_GUI_changes+0x280>)
 800327c:	2203      	movs	r2, #3
 800327e:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_CH1) GUI.akt_menu=MM_CH2;
 8003280:	4b54      	ldr	r3, [pc, #336]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003282:	791b      	ldrb	r3, [r3, #4]
 8003284:	2b01      	cmp	r3, #1
 8003286:	f040 809b 	bne.w	80033c0 <p_make_GUI_changes+0x26c>
 800328a:	4b52      	ldr	r3, [pc, #328]	; (80033d4 <p_make_GUI_changes+0x280>)
 800328c:	2202      	movs	r2, #2
 800328e:	711a      	strb	r2, [r3, #4]
 8003290:	e096      	b.n	80033c0 <p_make_GUI_changes+0x26c>
    }
  }
  else if(GUI.akt_button==GUI_BTN_LEFT) {
 8003292:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003294:	799b      	ldrb	r3, [r3, #6]
 8003296:	2b03      	cmp	r3, #3
 8003298:	f040 8081 	bne.w	800339e <p_make_GUI_changes+0x24a>
    if(GUI.old_button!=GUI.akt_button) {
 800329c:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <p_make_GUI_changes+0x280>)
 800329e:	79da      	ldrb	r2, [r3, #7]
 80032a0:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032a2:	799b      	ldrb	r3, [r3, #6]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f000 808b 	beq.w	80033c0 <p_make_GUI_changes+0x26c>
      return_val=MENU_CHANGE_GUI;
 80032aa:	2301      	movs	r3, #1
 80032ac:	71fb      	strb	r3, [r7, #7]
      // TOP
      if(GUI.akt_menu==MM_CH2) GUI.akt_menu=MM_CH1;
 80032ae:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032b0:	791b      	ldrb	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d102      	bne.n	80032bc <p_make_GUI_changes+0x168>
 80032b6:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_TIME) GUI.akt_menu=MM_CH2;
 80032bc:	4b45      	ldr	r3, [pc, #276]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032be:	791b      	ldrb	r3, [r3, #4]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d102      	bne.n	80032ca <p_make_GUI_changes+0x176>
 80032c4:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032c6:	2202      	movs	r2, #2
 80032c8:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_SETTING) GUI.akt_menu=MM_TIME;
 80032ca:	4b42      	ldr	r3, [pc, #264]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032cc:	791b      	ldrb	r3, [r3, #4]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d102      	bne.n	80032d8 <p_make_GUI_changes+0x184>
 80032d2:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032d4:	2203      	movs	r2, #3
 80032d6:	711a      	strb	r2, [r3, #4]

      // Bottom-Trigger
      if(GUI.akt_menu==MM_TRG_SOURCE) GUI.akt_menu=MM_SETTING;
 80032d8:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032da:	791b      	ldrb	r3, [r3, #4]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d102      	bne.n	80032e6 <p_make_GUI_changes+0x192>
 80032e0:	4b3c      	ldr	r3, [pc, #240]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032e2:	2204      	movs	r2, #4
 80032e4:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_TRG_EDGE) GUI.akt_menu=MM_TRG_SOURCE;
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032e8:	791b      	ldrb	r3, [r3, #4]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d102      	bne.n	80032f4 <p_make_GUI_changes+0x1a0>
 80032ee:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032f0:	2205      	movs	r2, #5
 80032f2:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_TRG_MODE) GUI.akt_menu=MM_TRG_EDGE;
 80032f4:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032f6:	791b      	ldrb	r3, [r3, #4]
 80032f8:	2b07      	cmp	r3, #7
 80032fa:	d102      	bne.n	8003302 <p_make_GUI_changes+0x1ae>
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <p_make_GUI_changes+0x280>)
 80032fe:	2206      	movs	r2, #6
 8003300:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_TRG_VAL) GUI.akt_menu=MM_TRG_MODE;
 8003302:	4b34      	ldr	r3, [pc, #208]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003304:	791b      	ldrb	r3, [r3, #4]
 8003306:	2b08      	cmp	r3, #8
 8003308:	d102      	bne.n	8003310 <p_make_GUI_changes+0x1bc>
 800330a:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <p_make_GUI_changes+0x280>)
 800330c:	2207      	movs	r2, #7
 800330e:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_TRG_RESET) GUI.akt_menu=MM_TRG_VAL;
 8003310:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003312:	791b      	ldrb	r3, [r3, #4]
 8003314:	2b09      	cmp	r3, #9
 8003316:	d102      	bne.n	800331e <p_make_GUI_changes+0x1ca>
 8003318:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <p_make_GUI_changes+0x280>)
 800331a:	2208      	movs	r2, #8
 800331c:	711a      	strb	r2, [r3, #4]

      // Bottom-CH
      if(GUI.akt_menu==MM_CH_VIS) GUI.akt_menu=MM_SETTING;
 800331e:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003320:	791b      	ldrb	r3, [r3, #4]
 8003322:	2b0a      	cmp	r3, #10
 8003324:	d102      	bne.n	800332c <p_make_GUI_changes+0x1d8>
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003328:	2204      	movs	r2, #4
 800332a:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_CH_POS) GUI.akt_menu=MM_CH_VIS;
 800332c:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <p_make_GUI_changes+0x280>)
 800332e:	791b      	ldrb	r3, [r3, #4]
 8003330:	2b0b      	cmp	r3, #11
 8003332:	d102      	bne.n	800333a <p_make_GUI_changes+0x1e6>
 8003334:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003336:	220a      	movs	r2, #10
 8003338:	711a      	strb	r2, [r3, #4]

      // Bottom-Cursor
      if(GUI.akt_menu==MM_CUR_MODE) GUI.akt_menu=MM_SETTING;
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <p_make_GUI_changes+0x280>)
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d102      	bne.n	8003348 <p_make_GUI_changes+0x1f4>
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003344:	2204      	movs	r2, #4
 8003346:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_CUR_P1) GUI.akt_menu=MM_CUR_MODE;
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <p_make_GUI_changes+0x280>)
 800334a:	791b      	ldrb	r3, [r3, #4]
 800334c:	2b0d      	cmp	r3, #13
 800334e:	d102      	bne.n	8003356 <p_make_GUI_changes+0x202>
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003352:	220c      	movs	r2, #12
 8003354:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_CUR_P2) GUI.akt_menu=MM_CUR_P1;
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003358:	791b      	ldrb	r3, [r3, #4]
 800335a:	2b0e      	cmp	r3, #14
 800335c:	d102      	bne.n	8003364 <p_make_GUI_changes+0x210>
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003360:	220d      	movs	r2, #13
 8003362:	711a      	strb	r2, [r3, #4]

      // Bottom-FFT
      if(GUI.akt_menu==MM_FFT_MODE) GUI.akt_menu=MM_SETTING;
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003366:	791b      	ldrb	r3, [r3, #4]
 8003368:	2b12      	cmp	r3, #18
 800336a:	d102      	bne.n	8003372 <p_make_GUI_changes+0x21e>
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <p_make_GUI_changes+0x280>)
 800336e:	2204      	movs	r2, #4
 8003370:	711a      	strb	r2, [r3, #4]
      
      // Bottom-Send
      if(GUI.akt_menu==MM_SEND_MODE) GUI.akt_menu=MM_SETTING;
 8003372:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003374:	791b      	ldrb	r3, [r3, #4]
 8003376:	2b0f      	cmp	r3, #15
 8003378:	d102      	bne.n	8003380 <p_make_GUI_changes+0x22c>
 800337a:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <p_make_GUI_changes+0x280>)
 800337c:	2204      	movs	r2, #4
 800337e:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_SEND_SCREEN) GUI.akt_menu=MM_SEND_MODE;
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003382:	791b      	ldrb	r3, [r3, #4]
 8003384:	2b10      	cmp	r3, #16
 8003386:	d102      	bne.n	800338e <p_make_GUI_changes+0x23a>
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <p_make_GUI_changes+0x280>)
 800338a:	220f      	movs	r2, #15
 800338c:	711a      	strb	r2, [r3, #4]
      if(GUI.akt_menu==MM_SEND_DATA) GUI.akt_menu=MM_SEND_SCREEN;
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	2b11      	cmp	r3, #17
 8003394:	d114      	bne.n	80033c0 <p_make_GUI_changes+0x26c>
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <p_make_GUI_changes+0x280>)
 8003398:	2210      	movs	r2, #16
 800339a:	711a      	strb	r2, [r3, #4]
 800339c:	e010      	b.n	80033c0 <p_make_GUI_changes+0x26c>
    }
  }
  else if(GUI.akt_button==GUI_BTN_DOWN) {
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <p_make_GUI_changes+0x280>)
 80033a0:	799b      	ldrb	r3, [r3, #6]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d104      	bne.n	80033b0 <p_make_GUI_changes+0x25c>
    return_val=p_gui_inc_menu();
 80033a6:	f7ff f9cf 	bl	8002748 <p_gui_inc_menu>
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
 80033ae:	e007      	b.n	80033c0 <p_make_GUI_changes+0x26c>
  }
  else if(GUI.akt_button==GUI_BTN_UP) {
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <p_make_GUI_changes+0x280>)
 80033b2:	799b      	ldrb	r3, [r3, #6]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d103      	bne.n	80033c0 <p_make_GUI_changes+0x26c>
    return_val=p_gui_dec_menu();
 80033b8:	f7ff fc5c 	bl	8002c74 <p_gui_dec_menu>
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
  }

  GUI.old_button=GUI.akt_button;
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <p_make_GUI_changes+0x280>)
 80033c2:	799a      	ldrb	r2, [r3, #6]
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <p_make_GUI_changes+0x280>)
 80033c6:	71da      	strb	r2, [r3, #7]

  return(return_val);
 80033c8:	79fb      	ldrb	r3, [r7, #7]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200022bc 	.word	0x200022bc
 80033d8:	2000277c 	.word	0x2000277c

080033dc <menu_check_touch>:
//--------------------------------------------------------------
// checks and updates the GUI
// Show or hide GUI or change an active menu item
//--------------------------------------------------------------
MENU_Status_t menu_check_touch(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
  MENU_Status_t return_val=MENU_NO_CHANGE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	71fb      	strb	r3, [r7, #7]
  static uint16_t gui_changed=0;

  //------------------------
  // Touch auslesen
  //------------------------
  UB_Touch_Read();
 80033e6:	f00e fa27 	bl	8011838 <UB_Touch_Read>
  if(Touch_Data.status==TOUCH_PRESSED) {
 80033ea:	4b74      	ldr	r3, [pc, #464]	; (80035bc <menu_check_touch+0x1e0>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 80cf 	bne.w	8003592 <menu_check_touch+0x1b6>
    // Touch ist bet�tigt
    x=Touch_Data.xp;
 80033f4:	4b71      	ldr	r3, [pc, #452]	; (80035bc <menu_check_touch+0x1e0>)
 80033f6:	885b      	ldrh	r3, [r3, #2]
 80033f8:	80bb      	strh	r3, [r7, #4]
    y=Touch_Data.yp;
 80033fa:	4b70      	ldr	r3, [pc, #448]	; (80035bc <menu_check_touch+0x1e0>)
 80033fc:	889b      	ldrh	r3, [r3, #4]
 80033fe:	807b      	strh	r3, [r7, #2]

    if((x!=x_old) || (y!=y_old)) {
 8003400:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <menu_check_touch+0x1e4>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	88ba      	ldrh	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d104      	bne.n	8003414 <menu_check_touch+0x38>
 800340a:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <menu_check_touch+0x1e8>)
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	429a      	cmp	r2, r3
 8003412:	d006      	beq.n	8003422 <menu_check_touch+0x46>
      x_old=x;
 8003414:	4a6a      	ldr	r2, [pc, #424]	; (80035c0 <menu_check_touch+0x1e4>)
 8003416:	88bb      	ldrh	r3, [r7, #4]
 8003418:	8013      	strh	r3, [r2, #0]
      y_old=y;
 800341a:	4a6a      	ldr	r2, [pc, #424]	; (80035c4 <menu_check_touch+0x1e8>)
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	8013      	strh	r3, [r2, #0]
 8003420:	e0c6      	b.n	80035b0 <menu_check_touch+0x1d4>
    }
    else {
      if(GUI.gui_xpos==GUI_XPOS_OFF) {
 8003422:	4b69      	ldr	r3, [pc, #420]	; (80035c8 <menu_check_touch+0x1ec>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d11d      	bne.n	8003466 <menu_check_touch+0x8a>
        // GUI ist im Moment noch AUS
        if(gui_changed==0) {
 800342a:	4b68      	ldr	r3, [pc, #416]	; (80035cc <menu_check_touch+0x1f0>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 8089 	bne.w	8003546 <menu_check_touch+0x16a>
          // GUI einschalten (an einer von 3 positionen)
          GUI.gui_xpos=GUI_XPOS_RIGHT;
 8003434:	4b64      	ldr	r3, [pc, #400]	; (80035c8 <menu_check_touch+0x1ec>)
 8003436:	22cc      	movs	r2, #204	; 0xcc
 8003438:	601a      	str	r2, [r3, #0]
          if(y<GUI_XPOS_RIGHT) GUI.gui_xpos=GUI_XPOS_MID;
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	2bcb      	cmp	r3, #203	; 0xcb
 800343e:	d802      	bhi.n	8003446 <menu_check_touch+0x6a>
 8003440:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <menu_check_touch+0x1ec>)
 8003442:	226c      	movs	r2, #108	; 0x6c
 8003444:	601a      	str	r2, [r3, #0]
          if(y<GUI_XPOS_MID) GUI.gui_xpos=GUI_XPOS_LEFT;
 8003446:	887b      	ldrh	r3, [r7, #2]
 8003448:	2b6b      	cmp	r3, #107	; 0x6b
 800344a:	d802      	bhi.n	8003452 <menu_check_touch+0x76>
 800344c:	4b5e      	ldr	r3, [pc, #376]	; (80035c8 <menu_check_touch+0x1ec>)
 800344e:	220a      	movs	r2, #10
 8003450:	601a      	str	r2, [r3, #0]
          GUI.akt_menu=GUI.old_menu;
 8003452:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <menu_check_touch+0x1ec>)
 8003454:	795a      	ldrb	r2, [r3, #5]
 8003456:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <menu_check_touch+0x1ec>)
 8003458:	711a      	strb	r2, [r3, #4]
          gui_changed=1;
 800345a:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <menu_check_touch+0x1f0>)
 800345c:	2201      	movs	r2, #1
 800345e:	801a      	strh	r2, [r3, #0]
          return_val=MENU_CHANGE_GUI;
 8003460:	2301      	movs	r3, #1
 8003462:	71fb      	strb	r3, [r7, #7]
 8003464:	e06f      	b.n	8003546 <menu_check_touch+0x16a>
        }
      }
      else if(GUI.gui_xpos==GUI_XPOS_RIGHT) {
 8003466:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <menu_check_touch+0x1ec>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2bcc      	cmp	r3, #204	; 0xcc
 800346c:	d121      	bne.n	80034b2 <menu_check_touch+0xd6>
        // GUI-rechts ist aktiv
        if(gui_changed==0) {
 800346e:	4b57      	ldr	r3, [pc, #348]	; (80035cc <menu_check_touch+0x1f0>)
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d167      	bne.n	8003546 <menu_check_touch+0x16a>
          if(y<GUI_XPOS_RIGHT) {
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	2bcb      	cmp	r3, #203	; 0xcb
 800347a:	d80f      	bhi.n	800349c <menu_check_touch+0xc0>
            // GUI ausschalten
            GUI.gui_xpos=GUI_XPOS_OFF;
 800347c:	4b52      	ldr	r3, [pc, #328]	; (80035c8 <menu_check_touch+0x1ec>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
            GUI.old_menu=GUI.akt_menu;
 8003482:	4b51      	ldr	r3, [pc, #324]	; (80035c8 <menu_check_touch+0x1ec>)
 8003484:	791a      	ldrb	r2, [r3, #4]
 8003486:	4b50      	ldr	r3, [pc, #320]	; (80035c8 <menu_check_touch+0x1ec>)
 8003488:	715a      	strb	r2, [r3, #5]
            GUI.akt_menu=MM_NONE;
 800348a:	4b4f      	ldr	r3, [pc, #316]	; (80035c8 <menu_check_touch+0x1ec>)
 800348c:	2200      	movs	r2, #0
 800348e:	711a      	strb	r2, [r3, #4]
            gui_changed=1;
 8003490:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <menu_check_touch+0x1f0>)
 8003492:	2201      	movs	r2, #1
 8003494:	801a      	strh	r2, [r3, #0]
            return_val=MENU_CHANGE_GUI;
 8003496:	2301      	movs	r3, #1
 8003498:	71fb      	strb	r3, [r7, #7]
 800349a:	e054      	b.n	8003546 <menu_check_touch+0x16a>
          }
          else {
            // GUI check
            p_get_GUI_button(x,y);
 800349c:	887a      	ldrh	r2, [r7, #2]
 800349e:	88bb      	ldrh	r3, [r7, #4]
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff f914 	bl	80026d0 <p_get_GUI_button>
            return_val=p_make_GUI_changes();
 80034a8:	f7ff fe54 	bl	8003154 <p_make_GUI_changes>
 80034ac:	4603      	mov	r3, r0
 80034ae:	71fb      	strb	r3, [r7, #7]
 80034b0:	e049      	b.n	8003546 <menu_check_touch+0x16a>
          }
        }
      }
      else if(GUI.gui_xpos==GUI_XPOS_LEFT) {
 80034b2:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <menu_check_touch+0x1ec>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b0a      	cmp	r3, #10
 80034b8:	d121      	bne.n	80034fe <menu_check_touch+0x122>
        // GUI-links ist aktiv
        if(gui_changed==0) {
 80034ba:	4b44      	ldr	r3, [pc, #272]	; (80035cc <menu_check_touch+0x1f0>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d141      	bne.n	8003546 <menu_check_touch+0x16a>
          if(y>GUI_XPOS_MID) {
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	2b6c      	cmp	r3, #108	; 0x6c
 80034c6:	d90f      	bls.n	80034e8 <menu_check_touch+0x10c>
            // GUI ausschalten
            GUI.gui_xpos=GUI_XPOS_OFF;
 80034c8:	4b3f      	ldr	r3, [pc, #252]	; (80035c8 <menu_check_touch+0x1ec>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
            GUI.old_menu=GUI.akt_menu;
 80034ce:	4b3e      	ldr	r3, [pc, #248]	; (80035c8 <menu_check_touch+0x1ec>)
 80034d0:	791a      	ldrb	r2, [r3, #4]
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <menu_check_touch+0x1ec>)
 80034d4:	715a      	strb	r2, [r3, #5]
            GUI.akt_menu=MM_NONE;
 80034d6:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <menu_check_touch+0x1ec>)
 80034d8:	2200      	movs	r2, #0
 80034da:	711a      	strb	r2, [r3, #4]
            gui_changed=1;
 80034dc:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <menu_check_touch+0x1f0>)
 80034de:	2201      	movs	r2, #1
 80034e0:	801a      	strh	r2, [r3, #0]
            return_val=MENU_CHANGE_GUI;
 80034e2:	2301      	movs	r3, #1
 80034e4:	71fb      	strb	r3, [r7, #7]
 80034e6:	e02e      	b.n	8003546 <menu_check_touch+0x16a>
          }
          else {
            // GUI check
            p_get_GUI_button(x,y);
 80034e8:	887a      	ldrh	r2, [r7, #2]
 80034ea:	88bb      	ldrh	r3, [r7, #4]
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f8ee 	bl	80026d0 <p_get_GUI_button>
            return_val=p_make_GUI_changes();
 80034f4:	f7ff fe2e 	bl	8003154 <p_make_GUI_changes>
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	e023      	b.n	8003546 <menu_check_touch+0x16a>
          }
        }
      }
      else {
        // GUI-mitte ist aktiv
        if(gui_changed==0) {
 80034fe:	4b33      	ldr	r3, [pc, #204]	; (80035cc <menu_check_touch+0x1f0>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11f      	bne.n	8003546 <menu_check_touch+0x16a>
          if((y<GUI_XPOS_MID) || (y>GUI_XPOS_RIGHT)) {
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	2b6b      	cmp	r3, #107	; 0x6b
 800350a:	d902      	bls.n	8003512 <menu_check_touch+0x136>
 800350c:	887b      	ldrh	r3, [r7, #2]
 800350e:	2bcc      	cmp	r3, #204	; 0xcc
 8003510:	d90f      	bls.n	8003532 <menu_check_touch+0x156>
            // GUI ausschalten
            GUI.gui_xpos=GUI_XPOS_OFF;
 8003512:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <menu_check_touch+0x1ec>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
            GUI.old_menu=GUI.akt_menu;
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <menu_check_touch+0x1ec>)
 800351a:	791a      	ldrb	r2, [r3, #4]
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <menu_check_touch+0x1ec>)
 800351e:	715a      	strb	r2, [r3, #5]
            GUI.akt_menu=MM_NONE;
 8003520:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <menu_check_touch+0x1ec>)
 8003522:	2200      	movs	r2, #0
 8003524:	711a      	strb	r2, [r3, #4]
            gui_changed=1;
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <menu_check_touch+0x1f0>)
 8003528:	2201      	movs	r2, #1
 800352a:	801a      	strh	r2, [r3, #0]
            return_val=MENU_CHANGE_GUI;
 800352c:	2301      	movs	r3, #1
 800352e:	71fb      	strb	r3, [r7, #7]
 8003530:	e009      	b.n	8003546 <menu_check_touch+0x16a>
          }
          else {
            // GUI check
            p_get_GUI_button(x,y);
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	88bb      	ldrh	r3, [r7, #4]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f8c9 	bl	80026d0 <p_get_GUI_button>
            return_val=p_make_GUI_changes();
 800353e:	f7ff fe09 	bl	8003154 <p_make_GUI_changes>
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
          }
        }
      }

      // beim senden von Daten die GUI abschalten
      if(return_val==MENU_SEND_DATA) {
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	2b06      	cmp	r3, #6
 800354a:	d131      	bne.n	80035b0 <menu_check_touch+0x1d4>
        // GUI ausschalten
        GUI.gui_xpos=GUI_XPOS_OFF;
 800354c:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <menu_check_touch+0x1ec>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
        GUI.old_menu=MM_SETTING;
 8003552:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <menu_check_touch+0x1ec>)
 8003554:	2204      	movs	r2, #4
 8003556:	715a      	strb	r2, [r3, #5]
        GUI.akt_menu=MM_NONE;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <menu_check_touch+0x1ec>)
 800355a:	2200      	movs	r2, #0
 800355c:	711a      	strb	r2, [r3, #4]
        gui_changed=1;
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <menu_check_touch+0x1f0>)
 8003560:	2201      	movs	r2, #1
 8003562:	801a      	strh	r2, [r3, #0]
        if(Menu.send.mode==6) {
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <menu_check_touch+0x1f4>)
 8003566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003568:	2b06      	cmp	r3, #6
 800356a:	d10e      	bne.n	800358a <menu_check_touch+0x1ae>
          // auf gewaehltes Menu umschalten
          if(Menu.send.screen==0) Menu.akt_setting=SETTING_TRIGGER;
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <menu_check_touch+0x1f4>)
 800356e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <menu_check_touch+0x19e>
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <menu_check_touch+0x1f4>)
 8003576:	2200      	movs	r2, #0
 8003578:	605a      	str	r2, [r3, #4]
          if(Menu.send.screen==1) Menu.akt_setting=SETTING_CURSOR;
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <menu_check_touch+0x1f4>)
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d116      	bne.n	80035b0 <menu_check_touch+0x1d4>
 8003582:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <menu_check_touch+0x1f4>)
 8003584:	2203      	movs	r2, #3
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	e012      	b.n	80035b0 <menu_check_touch+0x1d4>
        }
        else {
          Menu.akt_setting=SETTING_SEND;
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <menu_check_touch+0x1f4>)
 800358c:	2205      	movs	r2, #5
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	e00e      	b.n	80035b0 <menu_check_touch+0x1d4>
      }
    }
  }
  else {
    // Touch ist nicht bet�tigt
    gui_changed=0;
 8003592:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <menu_check_touch+0x1f0>)
 8003594:	2200      	movs	r2, #0
 8003596:	801a      	strh	r2, [r3, #0]
    if(GUI.old_button!=GUI_BTN_NONE) {
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <menu_check_touch+0x1ec>)
 800359a:	79db      	ldrb	r3, [r3, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <menu_check_touch+0x1c8>
      return_val=MENU_CHANGE_GUI;
 80035a0:	2301      	movs	r3, #1
 80035a2:	71fb      	strb	r3, [r7, #7]
    }
    GUI.akt_button=GUI_BTN_NONE;
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <menu_check_touch+0x1ec>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	719a      	strb	r2, [r3, #6]
    GUI.old_button=GUI_BTN_NONE;
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <menu_check_touch+0x1ec>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	71da      	strb	r2, [r3, #7]
  }

  return(return_val);
 80035b0:	79fb      	ldrb	r3, [r7, #7]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200022c4 	.word	0x200022c4
 80035c0:	20000000 	.word	0x20000000
 80035c4:	20000002 	.word	0x20000002
 80035c8:	200022bc 	.word	0x200022bc
 80035cc:	20001910 	.word	0x20001910
 80035d0:	2000277c 	.word	0x2000277c

080035d4 <p_gui_draw_TOP>:

//--------------------------------------------------------------
// draws a TOP menu item
//--------------------------------------------------------------
void p_gui_draw_TOP(uint32_t mm_nr, const SM_Item_t um[], uint32_t um_nr)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  sprintf(buf,"%s%s",MM_ITEM[mm_nr].txt,um[um_nr].stxt);
 80035e0:	4a1f      	ldr	r2, [pc, #124]	; (8003660 <p_gui_draw_TOP+0x8c>)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	4413      	add	r3, r2
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	460a      	mov	r2, r1
 80035f4:	491b      	ldr	r1, [pc, #108]	; (8003664 <p_gui_draw_TOP+0x90>)
 80035f6:	481c      	ldr	r0, [pc, #112]	; (8003668 <p_gui_draw_TOP+0x94>)
 80035f8:	f00e fc96 	bl	8011f28 <siprintf>
  if(GUI.akt_menu==mm_nr) {
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <p_gui_draw_TOP+0x98>)
 80035fe:	791b      	ldrb	r3, [r3, #4]
 8003600:	461a      	mov	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4293      	cmp	r3, r2
 8003606:	d114      	bne.n	8003632 <p_gui_draw_TOP+0x5e>
    UB_Font_DrawString(LINE(1),MM_ITEM[mm_nr].yp,buf,&Arial_7x10,MENU_VG_COL,MENU_AK_COL);
 8003608:	2001      	movs	r0, #1
 800360a:	f001 fbf1 	bl	8004df0 <LINE>
 800360e:	4603      	mov	r3, r0
 8003610:	4618      	mov	r0, r3
 8003612:	4a13      	ldr	r2, [pc, #76]	; (8003660 <p_gui_draw_TOP+0x8c>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	8899      	ldrh	r1, [r3, #4]
 800361c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <p_gui_draw_TOP+0x9c>)
 800362a:	4a0f      	ldr	r2, [pc, #60]	; (8003668 <p_gui_draw_TOP+0x94>)
 800362c:	f00d f89a 	bl	8010764 <UB_Font_DrawString>
  }
  else {
    UB_Font_DrawString(LINE(1),MM_ITEM[mm_nr].yp,buf,&Arial_7x10,MENU_VG_COL,MENU_BG_COL);
  }
}
 8003630:	e012      	b.n	8003658 <p_gui_draw_TOP+0x84>
    UB_Font_DrawString(LINE(1),MM_ITEM[mm_nr].yp,buf,&Arial_7x10,MENU_VG_COL,MENU_BG_COL);
 8003632:	2001      	movs	r0, #1
 8003634:	f001 fbdc 	bl	8004df0 <LINE>
 8003638:	4603      	mov	r3, r0
 800363a:	4618      	mov	r0, r3
 800363c:	4a08      	ldr	r2, [pc, #32]	; (8003660 <p_gui_draw_TOP+0x8c>)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	8899      	ldrh	r1, [r3, #4]
 8003646:	231f      	movs	r3, #31
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <p_gui_draw_TOP+0x9c>)
 8003652:	4a05      	ldr	r2, [pc, #20]	; (8003668 <p_gui_draw_TOP+0x94>)
 8003654:	f00d f886 	bl	8010764 <UB_Font_DrawString>
}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	08012bbc 	.word	0x08012bbc
 8003664:	08012a14 	.word	0x08012a14
 8003668:	200035cc 	.word	0x200035cc
 800366c:	200022bc 	.word	0x200022bc
 8003670:	20000060 	.word	0x20000060
 8003674:	00000000 	.word	0x00000000

08003678 <p_menu_draw_BOT>:

//--------------------------------------------------------------
// draws a BOTTOM menu item
//--------------------------------------------------------------
void p_menu_draw_BOT(uint32_t mm_nr, const SM_Item_t um[], uint32_t um_nr, uint32_t mode)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]

  if(mode==0) {
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10e      	bne.n	80036aa <p_menu_draw_BOT+0x32>
    // standard Menupunkt
    sprintf(buf,"%s%s",MM_ITEM[mm_nr].txt,um[um_nr].stxt);
 800368c:	4aa4      	ldr	r2, [pc, #656]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	460a      	mov	r2, r1
 80036a0:	49a0      	ldr	r1, [pc, #640]	; (8003924 <p_menu_draw_BOT+0x2ac>)
 80036a2:	48a1      	ldr	r0, [pc, #644]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 80036a4:	f00e fc40 	bl	8011f28 <siprintf>
 80036a8:	e151      	b.n	800394e <p_menu_draw_BOT+0x2d6>
  }
  else if(mode==1) {
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d145      	bne.n	800373c <p_menu_draw_BOT+0xc4>
    // Sondermenupunkt : "Trigger Value"
    if(Menu.trigger.source==0) {
 80036b0:	4b9e      	ldr	r3, [pc, #632]	; (800392c <p_menu_draw_BOT+0x2b4>)
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d11d      	bne.n	80036f4 <p_menu_draw_BOT+0x7c>
      P_FloatToDezStr(FAKTOR_ADC*Menu.trigger.value_ch1);
 80036b8:	4b9c      	ldr	r3, [pc, #624]	; (800392c <p_menu_draw_BOT+0x2b4>)
 80036ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fc ff39 	bl	8000534 <__aeabi_i2d>
 80036c2:	a395      	add	r3, pc, #596	; (adr r3, 8003918 <p_menu_draw_BOT+0x2a0>)
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f7fc ff9e 	bl	8000608 <__aeabi_dmul>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	f7fd f9f2 	bl	8000abc <__aeabi_d2f>
 80036d8:	4603      	mov	r3, r0
 80036da:	ee00 3a10 	vmov	s0, r3
 80036de:	f000 fc31 	bl	8003f44 <P_FloatToDezStr>
      sprintf(buf,"%s%sV",MM_ITEM[mm_nr].txt,bval);
 80036e2:	4a8f      	ldr	r2, [pc, #572]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80036ea:	4b91      	ldr	r3, [pc, #580]	; (8003930 <p_menu_draw_BOT+0x2b8>)
 80036ec:	4991      	ldr	r1, [pc, #580]	; (8003934 <p_menu_draw_BOT+0x2bc>)
 80036ee:	488e      	ldr	r0, [pc, #568]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 80036f0:	f00e fc1a 	bl	8011f28 <siprintf>
    }
    if(Menu.trigger.source==1) {
 80036f4:	4b8d      	ldr	r3, [pc, #564]	; (800392c <p_menu_draw_BOT+0x2b4>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 8128 	bne.w	800394e <p_menu_draw_BOT+0x2d6>
      P_FloatToDezStr(FAKTOR_ADC*Menu.trigger.value_ch2);
 80036fe:	4b8b      	ldr	r3, [pc, #556]	; (800392c <p_menu_draw_BOT+0x2b4>)
 8003700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc ff16 	bl	8000534 <__aeabi_i2d>
 8003708:	a383      	add	r3, pc, #524	; (adr r3, 8003918 <p_menu_draw_BOT+0x2a0>)
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f7fc ff7b 	bl	8000608 <__aeabi_dmul>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	f7fd f9cf 	bl	8000abc <__aeabi_d2f>
 800371e:	4603      	mov	r3, r0
 8003720:	ee00 3a10 	vmov	s0, r3
 8003724:	f000 fc0e 	bl	8003f44 <P_FloatToDezStr>
      sprintf(buf,"%s%sV",MM_ITEM[mm_nr].txt,bval);
 8003728:	4a7d      	ldr	r2, [pc, #500]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003730:	4b7f      	ldr	r3, [pc, #508]	; (8003930 <p_menu_draw_BOT+0x2b8>)
 8003732:	4980      	ldr	r1, [pc, #512]	; (8003934 <p_menu_draw_BOT+0x2bc>)
 8003734:	487c      	ldr	r0, [pc, #496]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 8003736:	f00e fbf7 	bl	8011f28 <siprintf>
 800373a:	e108      	b.n	800394e <p_menu_draw_BOT+0x2d6>
    }
  }
  else if(mode==2) {
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d139      	bne.n	80037b6 <p_menu_draw_BOT+0x13e>
    // Sondermenupunkt : "Channel position"
    if(Menu.akt_setting==SETTING_CH1) {
 8003742:	4b7a      	ldr	r3, [pc, #488]	; (800392c <p_menu_draw_BOT+0x2b4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d117      	bne.n	800377a <p_menu_draw_BOT+0x102>
      P_FloatToDezStr(P_Volt_to_Float(Menu.ch1.faktor,Menu.ch1.position));
 800374a:	4b78      	ldr	r3, [pc, #480]	; (800392c <p_menu_draw_BOT+0x2b4>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	4a77      	ldr	r2, [pc, #476]	; (800392c <p_menu_draw_BOT+0x2b4>)
 8003750:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fc9a 	bl	8004090 <P_Volt_to_Float>
 800375c:	eef0 7a40 	vmov.f32	s15, s0
 8003760:	eeb0 0a67 	vmov.f32	s0, s15
 8003764:	f000 fbee 	bl	8003f44 <P_FloatToDezStr>
      sprintf(buf,"%s%sV",MM_ITEM[mm_nr].txt,bval);
 8003768:	4a6d      	ldr	r2, [pc, #436]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003770:	4b6f      	ldr	r3, [pc, #444]	; (8003930 <p_menu_draw_BOT+0x2b8>)
 8003772:	4970      	ldr	r1, [pc, #448]	; (8003934 <p_menu_draw_BOT+0x2bc>)
 8003774:	486c      	ldr	r0, [pc, #432]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 8003776:	f00e fbd7 	bl	8011f28 <siprintf>
    }
    if(Menu.akt_setting==SETTING_CH2) {
 800377a:	4b6c      	ldr	r3, [pc, #432]	; (800392c <p_menu_draw_BOT+0x2b4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	f040 80e5 	bne.w	800394e <p_menu_draw_BOT+0x2d6>
      P_FloatToDezStr(P_Volt_to_Float(Menu.ch2.faktor,Menu.ch2.position));
 8003784:	4b69      	ldr	r3, [pc, #420]	; (800392c <p_menu_draw_BOT+0x2b4>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	4a68      	ldr	r2, [pc, #416]	; (800392c <p_menu_draw_BOT+0x2b4>)
 800378a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fc7d 	bl	8004090 <P_Volt_to_Float>
 8003796:	eef0 7a40 	vmov.f32	s15, s0
 800379a:	eeb0 0a67 	vmov.f32	s0, s15
 800379e:	f000 fbd1 	bl	8003f44 <P_FloatToDezStr>
      sprintf(buf,"%s%sV",MM_ITEM[mm_nr].txt,bval);
 80037a2:	4a5f      	ldr	r2, [pc, #380]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80037aa:	4b61      	ldr	r3, [pc, #388]	; (8003930 <p_menu_draw_BOT+0x2b8>)
 80037ac:	4961      	ldr	r1, [pc, #388]	; (8003934 <p_menu_draw_BOT+0x2bc>)
 80037ae:	485e      	ldr	r0, [pc, #376]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 80037b0:	f00e fbba 	bl	8011f28 <siprintf>
 80037b4:	e0cb      	b.n	800394e <p_menu_draw_BOT+0x2d6>
    }
  }
  else if(mode==3) {
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d11e      	bne.n	80037fa <p_menu_draw_BOT+0x182>
    // Sondermenupunkt : "CH1/CH2 Cursor-A position"
    P_FloatToDezStr(FAKTOR_ADC*Menu.cursor.p1);
 80037bc:	4b5b      	ldr	r3, [pc, #364]	; (800392c <p_menu_draw_BOT+0x2b4>)
 80037be:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fc feb7 	bl	8000534 <__aeabi_i2d>
 80037c6:	a354      	add	r3, pc, #336	; (adr r3, 8003918 <p_menu_draw_BOT+0x2a0>)
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f7fc ff1c 	bl	8000608 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7fd f970 	bl	8000abc <__aeabi_d2f>
 80037dc:	4603      	mov	r3, r0
 80037de:	ee00 3a10 	vmov	s0, r3
 80037e2:	f000 fbaf 	bl	8003f44 <P_FloatToDezStr>
    sprintf(buf,"%s%sV",MM_ITEM[mm_nr].txt,bval);
 80037e6:	4a4e      	ldr	r2, [pc, #312]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80037ee:	4b50      	ldr	r3, [pc, #320]	; (8003930 <p_menu_draw_BOT+0x2b8>)
 80037f0:	4950      	ldr	r1, [pc, #320]	; (8003934 <p_menu_draw_BOT+0x2bc>)
 80037f2:	484d      	ldr	r0, [pc, #308]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 80037f4:	f00e fb98 	bl	8011f28 <siprintf>
 80037f8:	e0a9      	b.n	800394e <p_menu_draw_BOT+0x2d6>
  }
  else if(mode==4) {
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d11e      	bne.n	800383e <p_menu_draw_BOT+0x1c6>
    // Sondermenupunkt : "CH1/CH2 Cursor-B position"
    P_FloatToDezStr(FAKTOR_ADC*Menu.cursor.p2);
 8003800:	4b4a      	ldr	r3, [pc, #296]	; (800392c <p_menu_draw_BOT+0x2b4>)
 8003802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fe95 	bl	8000534 <__aeabi_i2d>
 800380a:	a343      	add	r3, pc, #268	; (adr r3, 8003918 <p_menu_draw_BOT+0x2a0>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc fefa 	bl	8000608 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	f7fd f94e 	bl	8000abc <__aeabi_d2f>
 8003820:	4603      	mov	r3, r0
 8003822:	ee00 3a10 	vmov	s0, r3
 8003826:	f000 fb8d 	bl	8003f44 <P_FloatToDezStr>
    sprintf(buf,"%s%sV",MM_ITEM[mm_nr].txt,bval);
 800382a:	4a3d      	ldr	r2, [pc, #244]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003832:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <p_menu_draw_BOT+0x2b8>)
 8003834:	493f      	ldr	r1, [pc, #252]	; (8003934 <p_menu_draw_BOT+0x2bc>)
 8003836:	483c      	ldr	r0, [pc, #240]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 8003838:	f00e fb76 	bl	8011f28 <siprintf>
 800383c:	e087      	b.n	800394e <p_menu_draw_BOT+0x2d6>
  }
  else if(mode==5) {
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b05      	cmp	r3, #5
 8003842:	d118      	bne.n	8003876 <p_menu_draw_BOT+0x1fe>
    // Sondermenupunkt : "TIME Cursor-A position"
    P_FloatToDezStr(P_Time_to_Float(Menu.timebase.value, Menu.cursor.t1));
 8003844:	4b39      	ldr	r3, [pc, #228]	; (800392c <p_menu_draw_BOT+0x2b4>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4a38      	ldr	r2, [pc, #224]	; (800392c <p_menu_draw_BOT+0x2b4>)
 800384a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fd11 	bl	8004278 <P_Time_to_Float>
 8003856:	eef0 7a40 	vmov.f32	s15, s0
 800385a:	eeb0 0a67 	vmov.f32	s0, s15
 800385e:	f000 fb71 	bl	8003f44 <P_FloatToDezStr>
    sprintf(buf,"%s%s",MM_ITEM[mm_nr].txt,bval);
 8003862:	4a2f      	ldr	r2, [pc, #188]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <p_menu_draw_BOT+0x2b8>)
 800386c:	492d      	ldr	r1, [pc, #180]	; (8003924 <p_menu_draw_BOT+0x2ac>)
 800386e:	482e      	ldr	r0, [pc, #184]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 8003870:	f00e fb5a 	bl	8011f28 <siprintf>
 8003874:	e06b      	b.n	800394e <p_menu_draw_BOT+0x2d6>
  }
  else if(mode==6) {
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b06      	cmp	r3, #6
 800387a:	d118      	bne.n	80038ae <p_menu_draw_BOT+0x236>
    // Sondermenupunkt : "TIME Cursor-B position"
    P_FloatToDezStr(P_Time_to_Float(Menu.timebase.value, Menu.cursor.t2));
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <p_menu_draw_BOT+0x2b4>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4a2a      	ldr	r2, [pc, #168]	; (800392c <p_menu_draw_BOT+0x2b4>)
 8003882:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fcf5 	bl	8004278 <P_Time_to_Float>
 800388e:	eef0 7a40 	vmov.f32	s15, s0
 8003892:	eeb0 0a67 	vmov.f32	s0, s15
 8003896:	f000 fb55 	bl	8003f44 <P_FloatToDezStr>
    sprintf(buf,"%s%s",MM_ITEM[mm_nr].txt,bval);
 800389a:	4a21      	ldr	r2, [pc, #132]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80038a2:	4b23      	ldr	r3, [pc, #140]	; (8003930 <p_menu_draw_BOT+0x2b8>)
 80038a4:	491f      	ldr	r1, [pc, #124]	; (8003924 <p_menu_draw_BOT+0x2ac>)
 80038a6:	4820      	ldr	r0, [pc, #128]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 80038a8:	f00e fb3e 	bl	8011f28 <siprintf>
 80038ac:	e04f      	b.n	800394e <p_menu_draw_BOT+0x2d6>
  }
  else if(mode==7) {
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b07      	cmp	r3, #7
 80038b2:	d10e      	bne.n	80038d2 <p_menu_draw_BOT+0x25a>
    // Sondermenupunkt : "Trigger Reset"
    sprintf(buf,"%s%s",MM_ITEM[mm_nr].txt,um[um_nr].stxt);
 80038b4:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	4413      	add	r3, r2
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	460a      	mov	r2, r1
 80038c8:	4916      	ldr	r1, [pc, #88]	; (8003924 <p_menu_draw_BOT+0x2ac>)
 80038ca:	4817      	ldr	r0, [pc, #92]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 80038cc:	f00e fb2c 	bl	8011f28 <siprintf>
 80038d0:	e03d      	b.n	800394e <p_menu_draw_BOT+0x2d6>
  }
  else if(mode==8) {
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d13a      	bne.n	800394e <p_menu_draw_BOT+0x2d6>
    // Sondermenupunkt : "FFT Cursor-A position"
    P_FloatToDezStr(P_FFT_to_Float(Menu.timebase.value, Menu.cursor.f1));
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <p_menu_draw_BOT+0x2b4>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4a13      	ldr	r2, [pc, #76]	; (800392c <p_menu_draw_BOT+0x2b4>)
 80038de:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 ff33 	bl	8004750 <P_FFT_to_Float>
 80038ea:	eef0 7a40 	vmov.f32	s15, s0
 80038ee:	eeb0 0a67 	vmov.f32	s0, s15
 80038f2:	f000 fb27 	bl	8003f44 <P_FloatToDezStr>
    if(Menu.timebase.value<=12) {
 80038f6:	4b0d      	ldr	r3, [pc, #52]	; (800392c <p_menu_draw_BOT+0x2b4>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d81e      	bhi.n	800393c <p_menu_draw_BOT+0x2c4>
      sprintf(buf,"%s%sHz",MM_ITEM[mm_nr].txt,bval);
 80038fe:	4a08      	ldr	r2, [pc, #32]	; (8003920 <p_menu_draw_BOT+0x2a8>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <p_menu_draw_BOT+0x2b8>)
 8003908:	490b      	ldr	r1, [pc, #44]	; (8003938 <p_menu_draw_BOT+0x2c0>)
 800390a:	4807      	ldr	r0, [pc, #28]	; (8003928 <p_menu_draw_BOT+0x2b0>)
 800390c:	f00e fb0c 	bl	8011f28 <siprintf>
 8003910:	e01d      	b.n	800394e <p_menu_draw_BOT+0x2d6>
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	e734d9b4 	.word	0xe734d9b4
 800391c:	3f4a680c 	.word	0x3f4a680c
 8003920:	08012bbc 	.word	0x08012bbc
 8003924:	08012a14 	.word	0x08012a14
 8003928:	200035cc 	.word	0x200035cc
 800392c:	2000277c 	.word	0x2000277c
 8003930:	200035c0 	.word	0x200035c0
 8003934:	08012a1c 	.word	0x08012a1c
 8003938:	08012a24 	.word	0x08012a24
    }
    else {
      sprintf(buf,"%s%skHz",MM_ITEM[mm_nr].txt,bval);
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <p_menu_draw_BOT+0x33c>)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003944:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <p_menu_draw_BOT+0x340>)
 8003946:	491d      	ldr	r1, [pc, #116]	; (80039bc <p_menu_draw_BOT+0x344>)
 8003948:	481d      	ldr	r0, [pc, #116]	; (80039c0 <p_menu_draw_BOT+0x348>)
 800394a:	f00e faed 	bl	8011f28 <siprintf>
    }
  }

  if(GUI.akt_menu==mm_nr) {
 800394e:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <p_menu_draw_BOT+0x34c>)
 8003950:	791b      	ldrb	r3, [r3, #4]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4293      	cmp	r3, r2
 8003958:	d114      	bne.n	8003984 <p_menu_draw_BOT+0x30c>
    UB_Font_DrawString(LINE(24),MM_ITEM[mm_nr].yp,buf,&Arial_7x10,MENU_VG_COL,MENU_AK_COL);
 800395a:	2018      	movs	r0, #24
 800395c:	f001 fa48 	bl	8004df0 <LINE>
 8003960:	4603      	mov	r3, r0
 8003962:	4618      	mov	r0, r3
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <p_menu_draw_BOT+0x33c>)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	8899      	ldrh	r1, [r3, #4]
 800396e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <p_menu_draw_BOT+0x350>)
 800397c:	4a10      	ldr	r2, [pc, #64]	; (80039c0 <p_menu_draw_BOT+0x348>)
 800397e:	f00c fef1 	bl	8010764 <UB_Font_DrawString>
  }
  else {
    UB_Font_DrawString(LINE(24),MM_ITEM[mm_nr].yp,buf,&Arial_7x10,MENU_VG_COL,MENU_BG_COL);
  }
}
 8003982:	e012      	b.n	80039aa <p_menu_draw_BOT+0x332>
    UB_Font_DrawString(LINE(24),MM_ITEM[mm_nr].yp,buf,&Arial_7x10,MENU_VG_COL,MENU_BG_COL);
 8003984:	2018      	movs	r0, #24
 8003986:	f001 fa33 	bl	8004df0 <LINE>
 800398a:	4603      	mov	r3, r0
 800398c:	4618      	mov	r0, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <p_menu_draw_BOT+0x33c>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	8899      	ldrh	r1, [r3, #4]
 8003998:	231f      	movs	r3, #31
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <p_menu_draw_BOT+0x350>)
 80039a4:	4a06      	ldr	r2, [pc, #24]	; (80039c0 <p_menu_draw_BOT+0x348>)
 80039a6:	f00c fedd 	bl	8010764 <UB_Font_DrawString>
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	08012bbc 	.word	0x08012bbc
 80039b8:	200035c0 	.word	0x200035c0
 80039bc:	08012a2c 	.word	0x08012a2c
 80039c0:	200035cc 	.word	0x200035cc
 80039c4:	200022bc 	.word	0x200022bc
 80039c8:	20000060 	.word	0x20000060

080039cc <p_menu_draw_BOT_TRG>:

//--------------------------------------------------------------
// draws submenu: "Trigger"
//--------------------------------------------------------------
void p_menu_draw_BOT_TRG(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  p_menu_draw_BOT(MM_TRG_SOURCE,UM_04,Menu.trigger.source,0);
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <p_menu_draw_BOT_TRG+0x4c>)
 80039d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039d4:	2300      	movs	r3, #0
 80039d6:	4911      	ldr	r1, [pc, #68]	; (8003a1c <p_menu_draw_BOT_TRG+0x50>)
 80039d8:	2005      	movs	r0, #5
 80039da:	f7ff fe4d 	bl	8003678 <p_menu_draw_BOT>
  p_menu_draw_BOT(MM_TRG_EDGE,UM_05,Menu.trigger.edge,0);
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <p_menu_draw_BOT_TRG+0x4c>)
 80039e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e2:	2300      	movs	r3, #0
 80039e4:	490e      	ldr	r1, [pc, #56]	; (8003a20 <p_menu_draw_BOT_TRG+0x54>)
 80039e6:	2006      	movs	r0, #6
 80039e8:	f7ff fe46 	bl	8003678 <p_menu_draw_BOT>
  p_menu_draw_BOT(MM_TRG_MODE,UM_06,Menu.trigger.mode,0);
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <p_menu_draw_BOT_TRG+0x4c>)
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	2300      	movs	r3, #0
 80039f2:	490c      	ldr	r1, [pc, #48]	; (8003a24 <p_menu_draw_BOT_TRG+0x58>)
 80039f4:	2007      	movs	r0, #7
 80039f6:	f7ff fe3f 	bl	8003678 <p_menu_draw_BOT>
  p_menu_draw_BOT(MM_TRG_VAL,UM_07,0,1);
 80039fa:	2301      	movs	r3, #1
 80039fc:	2200      	movs	r2, #0
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <p_menu_draw_BOT_TRG+0x5c>)
 8003a00:	2008      	movs	r0, #8
 8003a02:	f7ff fe39 	bl	8003678 <p_menu_draw_BOT>
  p_menu_draw_BOT(MM_TRG_RESET,UM_10,Menu.trigger.single,7);
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <p_menu_draw_BOT_TRG+0x4c>)
 8003a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	4907      	ldr	r1, [pc, #28]	; (8003a2c <p_menu_draw_BOT_TRG+0x60>)
 8003a0e:	2009      	movs	r0, #9
 8003a10:	f7ff fe32 	bl	8003678 <p_menu_draw_BOT>
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	2000277c 	.word	0x2000277c
 8003a1c:	08012cd4 	.word	0x08012cd4
 8003a20:	08012cdc 	.word	0x08012cdc
 8003a24:	08012ce4 	.word	0x08012ce4
 8003a28:	08012cf0 	.word	0x08012cf0
 8003a2c:	08012d10 	.word	0x08012d10

08003a30 <p_menu_draw_BOT_CH1>:

//--------------------------------------------------------------
// draws submenu: "CH1"
//--------------------------------------------------------------
void p_menu_draw_BOT_CH1(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  p_menu_draw_BOT(MM_CH_VIS,UM_08,Menu.ch1.visible,0);
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <p_menu_draw_BOT_CH1+0x24>)
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4907      	ldr	r1, [pc, #28]	; (8003a58 <p_menu_draw_BOT_CH1+0x28>)
 8003a3c:	200a      	movs	r0, #10
 8003a3e:	f7ff fe1b 	bl	8003678 <p_menu_draw_BOT>
  p_menu_draw_BOT(MM_CH_POS,UM_07,0,2);
 8003a42:	2302      	movs	r3, #2
 8003a44:	2200      	movs	r2, #0
 8003a46:	4905      	ldr	r1, [pc, #20]	; (8003a5c <p_menu_draw_BOT_CH1+0x2c>)
 8003a48:	200b      	movs	r0, #11
 8003a4a:	f7ff fe15 	bl	8003678 <p_menu_draw_BOT>
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	2000277c 	.word	0x2000277c
 8003a58:	08012cf4 	.word	0x08012cf4
 8003a5c:	08012cf0 	.word	0x08012cf0

08003a60 <p_menu_draw_BOT_CH2>:

//--------------------------------------------------------------
// draws submenu: "CH2"
//--------------------------------------------------------------
void p_menu_draw_BOT_CH2(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  p_menu_draw_BOT(MM_CH_VIS,UM_08,Menu.ch2.visible,0);
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <p_menu_draw_BOT_CH2+0x24>)
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	4907      	ldr	r1, [pc, #28]	; (8003a88 <p_menu_draw_BOT_CH2+0x28>)
 8003a6c:	200a      	movs	r0, #10
 8003a6e:	f7ff fe03 	bl	8003678 <p_menu_draw_BOT>
  p_menu_draw_BOT(MM_CH_POS,UM_07,0,2);
 8003a72:	2302      	movs	r3, #2
 8003a74:	2200      	movs	r2, #0
 8003a76:	4905      	ldr	r1, [pc, #20]	; (8003a8c <p_menu_draw_BOT_CH2+0x2c>)
 8003a78:	200b      	movs	r0, #11
 8003a7a:	f7ff fdfd 	bl	8003678 <p_menu_draw_BOT>
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	2000277c 	.word	0x2000277c
 8003a88:	08012cf4 	.word	0x08012cf4
 8003a8c:	08012cf0 	.word	0x08012cf0

08003a90 <p_menu_draw_BOT_CUR>:

//--------------------------------------------------------------
// draws submenu: "CURSOR"
//--------------------------------------------------------------
void p_menu_draw_BOT_CUR(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af02      	add	r7, sp, #8
  uint16_t delta;

  p_menu_draw_BOT(MM_CUR_MODE,UM_09,Menu.cursor.mode,0);
 8003a96:	4b66      	ldr	r3, [pc, #408]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	4965      	ldr	r1, [pc, #404]	; (8003c34 <p_menu_draw_BOT_CUR+0x1a4>)
 8003a9e:	200c      	movs	r0, #12
 8003aa0:	f7ff fdea 	bl	8003678 <p_menu_draw_BOT>
  if((Menu.cursor.mode==1) || (Menu.cursor.mode==2)) {
 8003aa4:	4b62      	ldr	r3, [pc, #392]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d003      	beq.n	8003ab4 <p_menu_draw_BOT_CUR+0x24>
 8003aac:	4b60      	ldr	r3, [pc, #384]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d147      	bne.n	8003b44 <p_menu_draw_BOT_CUR+0xb4>
    // Cursor = CH1/CH2
    p_menu_draw_BOT(MM_CUR_P1,UM_07,0,3);
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	495f      	ldr	r1, [pc, #380]	; (8003c38 <p_menu_draw_BOT_CUR+0x1a8>)
 8003aba:	200d      	movs	r0, #13
 8003abc:	f7ff fddc 	bl	8003678 <p_menu_draw_BOT>
    p_menu_draw_BOT(MM_CUR_P2,UM_07,0,4);
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	495c      	ldr	r1, [pc, #368]	; (8003c38 <p_menu_draw_BOT_CUR+0x1a8>)
 8003ac6:	200e      	movs	r0, #14
 8003ac8:	f7ff fdd6 	bl	8003678 <p_menu_draw_BOT>
    if(Menu.cursor.p1>=Menu.cursor.p2) {
 8003acc:	4b58      	ldr	r3, [pc, #352]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003ace:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003ad0:	4b57      	ldr	r3, [pc, #348]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d306      	bcc.n	8003ae6 <p_menu_draw_BOT_CUR+0x56>
      delta=Menu.cursor.p1-Menu.cursor.p2;
 8003ad8:	4b55      	ldr	r3, [pc, #340]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003ada:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003adc:	4b54      	ldr	r3, [pc, #336]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	80fb      	strh	r3, [r7, #6]
 8003ae4:	e005      	b.n	8003af2 <p_menu_draw_BOT_CUR+0x62>
    }
    else {
      delta=Menu.cursor.p2-Menu.cursor.p1;
 8003ae6:	4b52      	ldr	r3, [pc, #328]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003ae8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003aea:	4b51      	ldr	r3, [pc, #324]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003aec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	80fb      	strh	r3, [r7, #6]
    }
    P_FloatToDezStr(FAKTOR_ADC*delta);
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fc fd1d 	bl	8000534 <__aeabi_i2d>
 8003afa:	a34b      	add	r3, pc, #300	; (adr r3, 8003c28 <p_menu_draw_BOT_CUR+0x198>)
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f7fc fd82 	bl	8000608 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f7fc ffd6 	bl	8000abc <__aeabi_d2f>
 8003b10:	4603      	mov	r3, r0
 8003b12:	ee00 3a10 	vmov	s0, r3
 8003b16:	f000 fa15 	bl	8003f44 <P_FloatToDezStr>
    sprintf(buf,"~=%sV",bval);
 8003b1a:	4a48      	ldr	r2, [pc, #288]	; (8003c3c <p_menu_draw_BOT_CUR+0x1ac>)
 8003b1c:	4948      	ldr	r1, [pc, #288]	; (8003c40 <p_menu_draw_BOT_CUR+0x1b0>)
 8003b1e:	4849      	ldr	r0, [pc, #292]	; (8003c44 <p_menu_draw_BOT_CUR+0x1b4>)
 8003b20:	f00e fa02 	bl	8011f28 <siprintf>
    UB_Font_DrawString(LINE(24),33*FONT_W,buf,&Arial_7x10,MENU_VG_COL,MENU_BG_COL);
 8003b24:	2018      	movs	r0, #24
 8003b26:	f001 f963 	bl	8004df0 <LINE>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	231f      	movs	r3, #31
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	4b43      	ldr	r3, [pc, #268]	; (8003c48 <p_menu_draw_BOT_CUR+0x1b8>)
 8003b3a:	4a42      	ldr	r2, [pc, #264]	; (8003c44 <p_menu_draw_BOT_CUR+0x1b4>)
 8003b3c:	21e7      	movs	r1, #231	; 0xe7
 8003b3e:	f00c fe11 	bl	8010764 <UB_Font_DrawString>
  }
  else if(Menu.cursor.mode==4) {
    // Cursor = FFT
    p_menu_draw_BOT(MM_CUR_P1,UM_07,0,8);
  }
}
 8003b42:	e06b      	b.n	8003c1c <p_menu_draw_BOT_CUR+0x18c>
  else if(Menu.cursor.mode==3) {
 8003b44:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d15d      	bne.n	8003c08 <p_menu_draw_BOT_CUR+0x178>
    p_menu_draw_BOT(MM_CUR_P1,UM_07,0,5);
 8003b4c:	2305      	movs	r3, #5
 8003b4e:	2200      	movs	r2, #0
 8003b50:	4939      	ldr	r1, [pc, #228]	; (8003c38 <p_menu_draw_BOT_CUR+0x1a8>)
 8003b52:	200d      	movs	r0, #13
 8003b54:	f7ff fd90 	bl	8003678 <p_menu_draw_BOT>
    p_menu_draw_BOT(MM_CUR_P2,UM_07,0,6);
 8003b58:	2306      	movs	r3, #6
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4936      	ldr	r1, [pc, #216]	; (8003c38 <p_menu_draw_BOT_CUR+0x1a8>)
 8003b5e:	200e      	movs	r0, #14
 8003b60:	f7ff fd8a 	bl	8003678 <p_menu_draw_BOT>
    if(Menu.cursor.t1>=Menu.cursor.t2) {
 8003b64:	4b32      	ldr	r3, [pc, #200]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003b66:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003b6a:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003b6c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d308      	bcc.n	8003b86 <p_menu_draw_BOT_CUR+0xf6>
      delta=Menu.cursor.t1-Menu.cursor.t2;
 8003b74:	4b2e      	ldr	r3, [pc, #184]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003b76:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003b7a:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003b7c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	80fb      	strh	r3, [r7, #6]
 8003b84:	e007      	b.n	8003b96 <p_menu_draw_BOT_CUR+0x106>
      delta=Menu.cursor.t2-Menu.cursor.t1;
 8003b86:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003b88:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003b8c:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	80fb      	strh	r3, [r7, #6]
    P_FloatToDezStr(P_Time_to_Float(Menu.timebase.value, (delta+2048)));
 8003b96:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f000 fb67 	bl	8004278 <P_Time_to_Float>
 8003baa:	eef0 7a40 	vmov.f32	s15, s0
 8003bae:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb2:	f000 f9c7 	bl	8003f44 <P_FloatToDezStr>
    if(Menu.timebase.value<3) {
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d805      	bhi.n	8003bca <p_menu_draw_BOT_CUR+0x13a>
      sprintf(buf,"~=%ss",bval);
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <p_menu_draw_BOT_CUR+0x1ac>)
 8003bc0:	4922      	ldr	r1, [pc, #136]	; (8003c4c <p_menu_draw_BOT_CUR+0x1bc>)
 8003bc2:	4820      	ldr	r0, [pc, #128]	; (8003c44 <p_menu_draw_BOT_CUR+0x1b4>)
 8003bc4:	f00e f9b0 	bl	8011f28 <siprintf>
 8003bc8:	e00e      	b.n	8003be8 <p_menu_draw_BOT_CUR+0x158>
    else if(Menu.timebase.value<12) {
 8003bca:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	2b0b      	cmp	r3, #11
 8003bd0:	d805      	bhi.n	8003bde <p_menu_draw_BOT_CUR+0x14e>
      sprintf(buf,"~=%sms",bval);
 8003bd2:	4a1a      	ldr	r2, [pc, #104]	; (8003c3c <p_menu_draw_BOT_CUR+0x1ac>)
 8003bd4:	491e      	ldr	r1, [pc, #120]	; (8003c50 <p_menu_draw_BOT_CUR+0x1c0>)
 8003bd6:	481b      	ldr	r0, [pc, #108]	; (8003c44 <p_menu_draw_BOT_CUR+0x1b4>)
 8003bd8:	f00e f9a6 	bl	8011f28 <siprintf>
 8003bdc:	e004      	b.n	8003be8 <p_menu_draw_BOT_CUR+0x158>
      sprintf(buf,"~=%sus",bval);
 8003bde:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <p_menu_draw_BOT_CUR+0x1ac>)
 8003be0:	491c      	ldr	r1, [pc, #112]	; (8003c54 <p_menu_draw_BOT_CUR+0x1c4>)
 8003be2:	4818      	ldr	r0, [pc, #96]	; (8003c44 <p_menu_draw_BOT_CUR+0x1b4>)
 8003be4:	f00e f9a0 	bl	8011f28 <siprintf>
    UB_Font_DrawString(LINE(24),33*FONT_W,buf,&Arial_7x10,MENU_VG_COL,MENU_BG_COL);
 8003be8:	2018      	movs	r0, #24
 8003bea:	f001 f901 	bl	8004df0 <LINE>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	231f      	movs	r3, #31
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <p_menu_draw_BOT_CUR+0x1b8>)
 8003bfe:	4a11      	ldr	r2, [pc, #68]	; (8003c44 <p_menu_draw_BOT_CUR+0x1b4>)
 8003c00:	21e7      	movs	r1, #231	; 0xe7
 8003c02:	f00c fdaf 	bl	8010764 <UB_Font_DrawString>
}
 8003c06:	e009      	b.n	8003c1c <p_menu_draw_BOT_CUR+0x18c>
  else if(Menu.cursor.mode==4) {
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <p_menu_draw_BOT_CUR+0x1a0>)
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d105      	bne.n	8003c1c <p_menu_draw_BOT_CUR+0x18c>
    p_menu_draw_BOT(MM_CUR_P1,UM_07,0,8);
 8003c10:	2308      	movs	r3, #8
 8003c12:	2200      	movs	r2, #0
 8003c14:	4908      	ldr	r1, [pc, #32]	; (8003c38 <p_menu_draw_BOT_CUR+0x1a8>)
 8003c16:	200d      	movs	r0, #13
 8003c18:	f7ff fd2e 	bl	8003678 <p_menu_draw_BOT>
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	f3af 8000 	nop.w
 8003c28:	e734d9b4 	.word	0xe734d9b4
 8003c2c:	3f4a680c 	.word	0x3f4a680c
 8003c30:	2000277c 	.word	0x2000277c
 8003c34:	08012cfc 	.word	0x08012cfc
 8003c38:	08012cf0 	.word	0x08012cf0
 8003c3c:	200035c0 	.word	0x200035c0
 8003c40:	08012a34 	.word	0x08012a34
 8003c44:	200035cc 	.word	0x200035cc
 8003c48:	20000060 	.word	0x20000060
 8003c4c:	08012a3c 	.word	0x08012a3c
 8003c50:	08012a44 	.word	0x08012a44
 8003c54:	08012a4c 	.word	0x08012a4c

08003c58 <p_menu_draw_BOT_FFT>:

//--------------------------------------------------------------
// draws submenu: "FFT"
//--------------------------------------------------------------
void p_menu_draw_BOT_FFT(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  p_menu_draw_BOT(MM_FFT_MODE,UM_13,Menu.fft.mode,0);
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <p_menu_draw_BOT_FFT+0x18>)
 8003c5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c60:	2300      	movs	r3, #0
 8003c62:	4904      	ldr	r1, [pc, #16]	; (8003c74 <p_menu_draw_BOT_FFT+0x1c>)
 8003c64:	2012      	movs	r0, #18
 8003c66:	f7ff fd07 	bl	8003678 <p_menu_draw_BOT>
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000277c 	.word	0x2000277c
 8003c74:	08012d4c 	.word	0x08012d4c

08003c78 <p_menu_draw_BOT_SEND>:

//--------------------------------------------------------------
// draws submenu: "SEND"
//--------------------------------------------------------------
void p_menu_draw_BOT_SEND(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  p_menu_draw_BOT(MM_SEND_MODE,UM_11,Menu.send.mode,0);
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <p_menu_draw_BOT_SEND+0x34>)
 8003c7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c80:	2300      	movs	r3, #0
 8003c82:	490b      	ldr	r1, [pc, #44]	; (8003cb0 <p_menu_draw_BOT_SEND+0x38>)
 8003c84:	200f      	movs	r0, #15
 8003c86:	f7ff fcf7 	bl	8003678 <p_menu_draw_BOT>
  p_menu_draw_BOT(MM_SEND_SCREEN,UM_14,Menu.send.screen,0);
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <p_menu_draw_BOT_SEND+0x34>)
 8003c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c8e:	2300      	movs	r3, #0
 8003c90:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <p_menu_draw_BOT_SEND+0x3c>)
 8003c92:	2010      	movs	r0, #16
 8003c94:	f7ff fcf0 	bl	8003678 <p_menu_draw_BOT>
  p_menu_draw_BOT(MM_SEND_DATA,UM_12,Menu.send.data,0);
 8003c98:	4b04      	ldr	r3, [pc, #16]	; (8003cac <p_menu_draw_BOT_SEND+0x34>)
 8003c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	4906      	ldr	r1, [pc, #24]	; (8003cb8 <p_menu_draw_BOT_SEND+0x40>)
 8003ca0:	2011      	movs	r0, #17
 8003ca2:	f7ff fce9 	bl	8003678 <p_menu_draw_BOT>
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000277c 	.word	0x2000277c
 8003cb0:	08012d28 	.word	0x08012d28
 8003cb4:	08012d58 	.word	0x08012d58
 8003cb8:	08012d44 	.word	0x08012d44

08003cbc <p_menu_draw_BOT_VERSION>:

//--------------------------------------------------------------
// draws submenu: "VERSION"
//--------------------------------------------------------------
void p_menu_draw_BOT_VERSION(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af02      	add	r7, sp, #8
 // UB_Font_DrawString(LINE(24),10,"STM32F429-Oszi | UB | V:1.6 | 24.03.2014",&Arial_7x10,MENU_VG_COL,MENU_BG_COL); // Noah 20141013
  UB_Font_DrawString(LINE(24),10,"STM32F429-Noah | Oszi/UB|V:0.1| 2014.10.13",&Arial_7x10,MENU_VG_COL,MENU_BG_COL);
 8003cc2:	2018      	movs	r0, #24
 8003cc4:	f001 f894 	bl	8004df0 <LINE>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	231f      	movs	r3, #31
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <p_menu_draw_BOT_VERSION+0x2c>)
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <p_menu_draw_BOT_VERSION+0x30>)
 8003cda:	210a      	movs	r1, #10
 8003cdc:	f00c fd42 	bl	8010764 <UB_Font_DrawString>
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000060 	.word	0x20000060
 8003cec:	08012a54 	.word	0x08012a54

08003cf0 <p_menu_draw_BOT_HELP>:

//--------------------------------------------------------------
// draws submenu: "HELP"
//--------------------------------------------------------------
void p_menu_draw_BOT_HELP(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af02      	add	r7, sp, #8
  UB_Font_DrawString(LINE(24),10,"CH1=PA5 | CH2=PA7 | TX=PA9 | 500Hz=PB2",&Arial_7x10,MENU_VG_COL,MENU_BG_COL); // Noah 20141013
 8003cf6:	2018      	movs	r0, #24
 8003cf8:	f001 f87a 	bl	8004df0 <LINE>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	231f      	movs	r3, #31
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <p_menu_draw_BOT_HELP+0x2c>)
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <p_menu_draw_BOT_HELP+0x30>)
 8003d0e:	210a      	movs	r1, #10
 8003d10:	f00c fd28 	bl	8010764 <UB_Font_DrawString>
//  UB_Font_DrawString(LINE(24),10,"CH1=PA3 | CH2=PA7 | TX=PA9 | 500Hz=PB2",&Arial_7x10,MENU_VG_COL,MENU_BG_COL);
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000060 	.word	0x20000060
 8003d20:	08012a80 	.word	0x08012a80

08003d24 <inc_uintval>:
// Change of value (increment unsigned)
// data area: 0 to 4095
// automatically increases the increment
//--------------------------------------------------------------
uint16_t inc_uintval(uint16_t data, uint16_t startdata)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	80fb      	strh	r3, [r7, #6]
 8003d30:	4613      	mov	r3, r2
 8003d32:	80bb      	strh	r3, [r7, #4]
  uint16_t return_val=0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	81bb      	strh	r3, [r7, #12]
  int16_t signed_int_data;
  static uint16_t inc_delay=0,inc_val=1;

  if(startdata>0) {
 8003d38:	88bb      	ldrh	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <inc_uintval+0x28>
    inc_delay=0;
 8003d3e:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <inc_uintval+0x80>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	801a      	strh	r2, [r3, #0]
    inc_val=startdata;
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <inc_uintval+0x84>)
 8003d46:	88bb      	ldrh	r3, [r7, #4]
 8003d48:	8013      	strh	r3, [r2, #0]
 8003d4a:	e012      	b.n	8003d72 <inc_uintval+0x4e>
  }
  else {
    inc_delay++;
 8003d4c:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <inc_uintval+0x80>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <inc_uintval+0x80>)
 8003d56:	801a      	strh	r2, [r3, #0]
    if(inc_delay>10) {
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <inc_uintval+0x80>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	2b0a      	cmp	r3, #10
 8003d5e:	d908      	bls.n	8003d72 <inc_uintval+0x4e>
      inc_delay=0;
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <inc_uintval+0x80>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	801a      	strh	r2, [r3, #0]
      inc_val+=10;
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <inc_uintval+0x84>)
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	330a      	adds	r3, #10
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <inc_uintval+0x84>)
 8003d70:	801a      	strh	r2, [r3, #0]
    }
  }

  signed_int_data=data;
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	81fb      	strh	r3, [r7, #14]
  signed_int_data+=inc_val;
 8003d76:	89fa      	ldrh	r2, [r7, #14]
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <inc_uintval+0x84>)
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	81fb      	strh	r3, [r7, #14]

  if(signed_int_data>4095) signed_int_data=4095;
 8003d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8a:	db02      	blt.n	8003d92 <inc_uintval+0x6e>
 8003d8c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003d90:	81fb      	strh	r3, [r7, #14]
  return_val=(uint16_t)(signed_int_data);
 8003d92:	89fb      	ldrh	r3, [r7, #14]
 8003d94:	81bb      	strh	r3, [r7, #12]

  return(return_val);
 8003d96:	89bb      	ldrh	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	20001912 	.word	0x20001912
 8003da8:	20000004 	.word	0x20000004

08003dac <dec_uintval>:
// Value change (decrement without sign)
// data range: 0 to 4095
// automatically increases the increment
//--------------------------------------------------------------
uint16_t dec_uintval(uint16_t data, uint16_t startdata)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	460a      	mov	r2, r1
 8003db6:	80fb      	strh	r3, [r7, #6]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80bb      	strh	r3, [r7, #4]
  uint16_t return_val=0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	81bb      	strh	r3, [r7, #12]
  int16_t signed_int_data;
  static uint16_t dec_delay=0,dec_val=1;

  if(startdata>0) {
 8003dc0:	88bb      	ldrh	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d006      	beq.n	8003dd4 <dec_uintval+0x28>
    dec_delay=0;
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <dec_uintval+0x7c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	801a      	strh	r2, [r3, #0]
    dec_val=startdata;
 8003dcc:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <dec_uintval+0x80>)
 8003dce:	88bb      	ldrh	r3, [r7, #4]
 8003dd0:	8013      	strh	r3, [r2, #0]
 8003dd2:	e012      	b.n	8003dfa <dec_uintval+0x4e>
  }
  else {
    dec_delay++;
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <dec_uintval+0x7c>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <dec_uintval+0x7c>)
 8003dde:	801a      	strh	r2, [r3, #0]
    if(dec_delay>10) {
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <dec_uintval+0x7c>)
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	2b0a      	cmp	r3, #10
 8003de6:	d908      	bls.n	8003dfa <dec_uintval+0x4e>
      dec_delay=0;
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <dec_uintval+0x7c>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	801a      	strh	r2, [r3, #0]
      dec_val+=10;
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <dec_uintval+0x80>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	330a      	adds	r3, #10
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <dec_uintval+0x80>)
 8003df8:	801a      	strh	r2, [r3, #0]
    }
  }

  signed_int_data=data;
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	81fb      	strh	r3, [r7, #14]
  signed_int_data-=dec_val;
 8003dfe:	89fa      	ldrh	r2, [r7, #14]
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <dec_uintval+0x80>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	81fb      	strh	r3, [r7, #14]

  if(signed_int_data<0) signed_int_data=0;
 8003e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	da01      	bge.n	8003e16 <dec_uintval+0x6a>
 8003e12:	2300      	movs	r3, #0
 8003e14:	81fb      	strh	r3, [r7, #14]
  return_val=(uint16_t)(signed_int_data);
 8003e16:	89fb      	ldrh	r3, [r7, #14]
 8003e18:	81bb      	strh	r3, [r7, #12]

  return(return_val);
 8003e1a:	89bb      	ldrh	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	20001914 	.word	0x20001914
 8003e2c:	20000006 	.word	0x20000006

08003e30 <inc_intval>:
// Change of value (increment with sign)
// data range: -200 to +200
// automatically increases the increment
//--------------------------------------------------------------
int16_t inc_intval(int16_t data, uint16_t startdata)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	460a      	mov	r2, r1
 8003e3a:	80fb      	strh	r3, [r7, #6]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	80bb      	strh	r3, [r7, #4]
  int16_t return_val=0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	81bb      	strh	r3, [r7, #12]
  int16_t signed_int_data;
  static uint16_t inc_delay=0,inc_val=1;

  if(startdata>0) {
 8003e44:	88bb      	ldrh	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d006      	beq.n	8003e58 <inc_intval+0x28>
    inc_delay=0;
 8003e4a:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <inc_intval+0x80>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	801a      	strh	r2, [r3, #0]
    inc_val=startdata;
 8003e50:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <inc_intval+0x84>)
 8003e52:	88bb      	ldrh	r3, [r7, #4]
 8003e54:	8013      	strh	r3, [r2, #0]
 8003e56:	e012      	b.n	8003e7e <inc_intval+0x4e>
  }
  else {
    inc_delay++;
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <inc_intval+0x80>)
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <inc_intval+0x80>)
 8003e62:	801a      	strh	r2, [r3, #0]
    if(inc_delay>10) {
 8003e64:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <inc_intval+0x80>)
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	2b0a      	cmp	r3, #10
 8003e6a:	d908      	bls.n	8003e7e <inc_intval+0x4e>
      inc_delay=0;
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <inc_intval+0x80>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	801a      	strh	r2, [r3, #0]
      inc_val+=10;
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <inc_intval+0x84>)
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	330a      	adds	r3, #10
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <inc_intval+0x84>)
 8003e7c:	801a      	strh	r2, [r3, #0]
    }
  }

  signed_int_data=data;
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	81fb      	strh	r3, [r7, #14]
  signed_int_data+=inc_val;
 8003e82:	89fa      	ldrh	r2, [r7, #14]
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <inc_intval+0x84>)
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	4413      	add	r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	81fb      	strh	r3, [r7, #14]

  if(signed_int_data>200) signed_int_data=200;
 8003e8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e92:	2bc8      	cmp	r3, #200	; 0xc8
 8003e94:	dd01      	ble.n	8003e9a <inc_intval+0x6a>
 8003e96:	23c8      	movs	r3, #200	; 0xc8
 8003e98:	81fb      	strh	r3, [r7, #14]
  return_val=(int16_t)(signed_int_data);
 8003e9a:	89fb      	ldrh	r3, [r7, #14]
 8003e9c:	81bb      	strh	r3, [r7, #12]

  return(return_val);
 8003e9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20001916 	.word	0x20001916
 8003eb4:	20000008 	.word	0x20000008

08003eb8 <dec_intval>:
// Value change (decrement with sign)
// data range: -200 to +200
// automatically increases the increment
//--------------------------------------------------------------
int16_t dec_intval(int16_t data, uint16_t startdata)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460a      	mov	r2, r1
 8003ec2:	80fb      	strh	r3, [r7, #6]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80bb      	strh	r3, [r7, #4]
  int16_t return_val=0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	81bb      	strh	r3, [r7, #12]
  int16_t signed_int_data;
  static uint16_t dec_delay=0,dec_val=1;

  if(startdata>0) {
 8003ecc:	88bb      	ldrh	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d006      	beq.n	8003ee0 <dec_intval+0x28>
    dec_delay=0;
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <dec_intval+0x84>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	801a      	strh	r2, [r3, #0]
    dec_val=startdata;
 8003ed8:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <dec_intval+0x88>)
 8003eda:	88bb      	ldrh	r3, [r7, #4]
 8003edc:	8013      	strh	r3, [r2, #0]
 8003ede:	e012      	b.n	8003f06 <dec_intval+0x4e>
  }
  else {
    dec_delay++;
 8003ee0:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <dec_intval+0x84>)
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <dec_intval+0x84>)
 8003eea:	801a      	strh	r2, [r3, #0]
    if(dec_delay>10) {
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <dec_intval+0x84>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	2b0a      	cmp	r3, #10
 8003ef2:	d908      	bls.n	8003f06 <dec_intval+0x4e>
      dec_delay=0;
 8003ef4:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <dec_intval+0x84>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	801a      	strh	r2, [r3, #0]
      dec_val+=10;
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <dec_intval+0x88>)
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	330a      	adds	r3, #10
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <dec_intval+0x88>)
 8003f04:	801a      	strh	r2, [r3, #0]
    }
  }

  signed_int_data=data;
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	81fb      	strh	r3, [r7, #14]
  signed_int_data-=dec_val;
 8003f0a:	89fa      	ldrh	r2, [r7, #14]
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <dec_intval+0x88>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	81fb      	strh	r3, [r7, #14]

  if(signed_int_data<-200) signed_int_data=-200;
 8003f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f1a:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8003f1e:	da02      	bge.n	8003f26 <dec_intval+0x6e>
 8003f20:	f64f 7338 	movw	r3, #65336	; 0xff38
 8003f24:	81fb      	strh	r3, [r7, #14]
  return_val=(int16_t)(signed_int_data);
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	81bb      	strh	r3, [r7, #12]

  return(return_val);
 8003f2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20001918 	.word	0x20001918
 8003f40:	2000000a 	.word	0x2000000a

08003f44 <P_FloatToDezStr>:

//--------------------------------------------------------------
// Conversion: float number into a string
//--------------------------------------------------------------
void P_FloatToDezStr(float data)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	ed87 0a01 	vstr	s0, [r7, #4]
  int16_t vorkomma;
  uint16_t nachkomma;
  float rest;

  if((data>32767) || (data<-32767)) {
 8003f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f52:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800406c <P_FloatToDezStr+0x128>
 8003f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	dc08      	bgt.n	8003f72 <P_FloatToDezStr+0x2e>
 8003f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f64:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8004070 <P_FloatToDezStr+0x12c>
 8003f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f70:	d505      	bpl.n	8003f7e <P_FloatToDezStr+0x3a>
	  // number too big or too small
    sprintf(bval,"%s","OVF");
 8003f72:	4a40      	ldr	r2, [pc, #256]	; (8004074 <P_FloatToDezStr+0x130>)
 8003f74:	4940      	ldr	r1, [pc, #256]	; (8004078 <P_FloatToDezStr+0x134>)
 8003f76:	4841      	ldr	r0, [pc, #260]	; (800407c <P_FloatToDezStr+0x138>)
 8003f78:	f00d ffd6 	bl	8011f28 <siprintf>
    return;
 8003f7c:	e073      	b.n	8004066 <P_FloatToDezStr+0x122>
  }

  vorkomma=(int16_t)(data);
 8003f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f86:	ee17 3a90 	vmov	r3, s15
 8003f8a:	82fb      	strh	r3, [r7, #22]
  if(data>=0.0) {
 8003f8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f98:	db2a      	blt.n	8003ff0 <P_FloatToDezStr+0xac>
    rest = data-(float)(vorkomma);
 8003f9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fae:	edc7 7a04 	vstr	s15, [r7, #16]
    nachkomma = (uint16_t)(rest*(float)(STRING_FLOAT_FAKTOR)+0.5);
 8003fb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fb6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004080 <P_FloatToDezStr+0x13c>
 8003fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fbe:	ee17 0a90 	vmov	r0, s15
 8003fc2:	f7fc fac9 	bl	8000558 <__aeabi_f2d>
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <P_FloatToDezStr+0x140>)
 8003fcc:	f7fc f966 	bl	800029c <__adddf3>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f7fc fd50 	bl	8000a7c <__aeabi_d2uiz>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	81fb      	strh	r3, [r7, #14]
    sprintf(bval,STRING_FLOAT_FORMAT,vorkomma,nachkomma);
 8003fe0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	4928      	ldr	r1, [pc, #160]	; (8004088 <P_FloatToDezStr+0x144>)
 8003fe8:	4824      	ldr	r0, [pc, #144]	; (800407c <P_FloatToDezStr+0x138>)
 8003fea:	f00d ff9d 	bl	8011f28 <siprintf>
 8003fee:	e03a      	b.n	8004066 <P_FloatToDezStr+0x122>
  }
  else {
    rest = (float)(vorkomma)-data;
 8003ff0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ffc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004004:	edc7 7a04 	vstr	s15, [r7, #16]
    nachkomma = (uint16_t)(rest*(float)(STRING_FLOAT_FAKTOR)+0.5);
 8004008:	edd7 7a04 	vldr	s15, [r7, #16]
 800400c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004080 <P_FloatToDezStr+0x13c>
 8004010:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004014:	ee17 0a90 	vmov	r0, s15
 8004018:	f7fc fa9e 	bl	8000558 <__aeabi_f2d>
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <P_FloatToDezStr+0x140>)
 8004022:	f7fc f93b 	bl	800029c <__adddf3>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	f7fc fd25 	bl	8000a7c <__aeabi_d2uiz>
 8004032:	4603      	mov	r3, r0
 8004034:	81fb      	strh	r3, [r7, #14]
    if(data<=-1.0) {
 8004036:	edd7 7a01 	vldr	s15, [r7, #4]
 800403a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800403e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004046:	d807      	bhi.n	8004058 <P_FloatToDezStr+0x114>
      sprintf(bval,STRING_FLOAT_FORMAT,vorkomma,nachkomma);
 8004048:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800404c:	89fb      	ldrh	r3, [r7, #14]
 800404e:	490e      	ldr	r1, [pc, #56]	; (8004088 <P_FloatToDezStr+0x144>)
 8004050:	480a      	ldr	r0, [pc, #40]	; (800407c <P_FloatToDezStr+0x138>)
 8004052:	f00d ff69 	bl	8011f28 <siprintf>
 8004056:	e006      	b.n	8004066 <P_FloatToDezStr+0x122>
    }
    else {
      sprintf(bval,STRING_FLOAT_FORMAT2,vorkomma,nachkomma);
 8004058:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800405c:	89fb      	ldrh	r3, [r7, #14]
 800405e:	490b      	ldr	r1, [pc, #44]	; (800408c <P_FloatToDezStr+0x148>)
 8004060:	4806      	ldr	r0, [pc, #24]	; (800407c <P_FloatToDezStr+0x138>)
 8004062:	f00d ff61 	bl	8011f28 <siprintf>
    }
  }
}
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	46fffe00 	.word	0x46fffe00
 8004070:	c6fffe00 	.word	0xc6fffe00
 8004074:	08012aa8 	.word	0x08012aa8
 8004078:	08012aac 	.word	0x08012aac
 800407c:	200035c0 	.word	0x200035c0
 8004080:	42c80000 	.word	0x42c80000
 8004084:	3fe00000 	.word	0x3fe00000
 8004088:	08012ab0 	.word	0x08012ab0
 800408c:	08012ab8 	.word	0x08012ab8

08004090 <P_Volt_to_Float>:

//--------------------------------------------------------------
// Conversion: data in volts (depending on the prescaler)
//--------------------------------------------------------------
float P_Volt_to_Float(uint32_t faktor, int16_t pos)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
  float return_val=0.0;
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b06      	cmp	r3, #6
 80040a6:	f200 80cb 	bhi.w	8004240 <P_Volt_to_Float+0x1b0>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <P_Volt_to_Float+0x20>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040cd 	.word	0x080040cd
 80040b4:	08004105 	.word	0x08004105
 80040b8:	0800413b 	.word	0x0800413b
 80040bc:	08004161 	.word	0x08004161
 80040c0:	08004199 	.word	0x08004199
 80040c4:	080041d1 	.word	0x080041d1
 80040c8:	08004209 	.word	0x08004209

  switch(faktor) {
    case 0 : return_val=pos*VFAKTOR_5V;break;
 80040cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fa2f 	bl	8000534 <__aeabi_i2d>
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	4b63      	ldr	r3, [pc, #396]	; (8004268 <P_Volt_to_Float+0x1d8>)
 80040dc:	f7fc fa94 	bl	8000608 <__aeabi_dmul>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	4b5f      	ldr	r3, [pc, #380]	; (800426c <P_Volt_to_Float+0x1dc>)
 80040ee:	f7fc fbb5 	bl	800085c <__aeabi_ddiv>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	f7fc fcdf 	bl	8000abc <__aeabi_d2f>
 80040fe:	4603      	mov	r3, r0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e09d      	b.n	8004240 <P_Volt_to_Float+0x1b0>
    case 1 : return_val=pos*VFAKTOR_2V;break;
 8004104:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc fa13 	bl	8000534 <__aeabi_i2d>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	f7fc f8c3 	bl	800029c <__adddf3>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	4b52      	ldr	r3, [pc, #328]	; (800426c <P_Volt_to_Float+0x1dc>)
 8004124:	f7fc fb9a 	bl	800085c <__aeabi_ddiv>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	f7fc fcc4 	bl	8000abc <__aeabi_d2f>
 8004134:	4603      	mov	r3, r0
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e082      	b.n	8004240 <P_Volt_to_Float+0x1b0>
    case 2 : return_val=pos*VFAKTOR_1V;break;
 800413a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc f9f8 	bl	8000534 <__aeabi_i2d>
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	4b48      	ldr	r3, [pc, #288]	; (800426c <P_Volt_to_Float+0x1dc>)
 800414a:	f7fc fb87 	bl	800085c <__aeabi_ddiv>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	f7fc fcb1 	bl	8000abc <__aeabi_d2f>
 800415a:	4603      	mov	r3, r0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e06f      	b.n	8004240 <P_Volt_to_Float+0x1b0>
    case 3 : return_val=pos*VFAKTOR_0V5;break;
 8004160:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004164:	4618      	mov	r0, r3
 8004166:	f7fc f9e5 	bl	8000534 <__aeabi_i2d>
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	4b40      	ldr	r3, [pc, #256]	; (8004270 <P_Volt_to_Float+0x1e0>)
 8004170:	f7fc fa4a 	bl	8000608 <__aeabi_dmul>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	4b3a      	ldr	r3, [pc, #232]	; (800426c <P_Volt_to_Float+0x1dc>)
 8004182:	f7fc fb6b 	bl	800085c <__aeabi_ddiv>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f7fc fc95 	bl	8000abc <__aeabi_d2f>
 8004192:	4603      	mov	r3, r0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e053      	b.n	8004240 <P_Volt_to_Float+0x1b0>
    case 4 : return_val=pos*VFAKTOR_0V2;break;
 8004198:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800419c:	4618      	mov	r0, r3
 800419e:	f7fc f9c9 	bl	8000534 <__aeabi_i2d>
 80041a2:	a32b      	add	r3, pc, #172	; (adr r3, 8004250 <P_Volt_to_Float+0x1c0>)
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f7fc fa2e 	bl	8000608 <__aeabi_dmul>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4610      	mov	r0, r2
 80041b2:	4619      	mov	r1, r3
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	4b2c      	ldr	r3, [pc, #176]	; (800426c <P_Volt_to_Float+0x1dc>)
 80041ba:	f7fc fb4f 	bl	800085c <__aeabi_ddiv>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	f7fc fc79 	bl	8000abc <__aeabi_d2f>
 80041ca:	4603      	mov	r3, r0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e037      	b.n	8004240 <P_Volt_to_Float+0x1b0>
    case 5 : return_val=pos*VFAKTOR_0V1;break;
 80041d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc f9ad 	bl	8000534 <__aeabi_i2d>
 80041da:	a31f      	add	r3, pc, #124	; (adr r3, 8004258 <P_Volt_to_Float+0x1c8>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f7fc fa12 	bl	8000608 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	4b1e      	ldr	r3, [pc, #120]	; (800426c <P_Volt_to_Float+0x1dc>)
 80041f2:	f7fc fb33 	bl	800085c <__aeabi_ddiv>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	f7fc fc5d 	bl	8000abc <__aeabi_d2f>
 8004202:	4603      	mov	r3, r0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e01b      	b.n	8004240 <P_Volt_to_Float+0x1b0>
    case 6 : return_val=pos*VFAKTOR_0V05;break;
 8004208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fc f991 	bl	8000534 <__aeabi_i2d>
 8004212:	a313      	add	r3, pc, #76	; (adr r3, 8004260 <P_Volt_to_Float+0x1d0>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f7fc f9f6 	bl	8000608 <__aeabi_dmul>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4610      	mov	r0, r2
 8004222:	4619      	mov	r1, r3
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <P_Volt_to_Float+0x1dc>)
 800422a:	f7fc fb17 	bl	800085c <__aeabi_ddiv>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4610      	mov	r0, r2
 8004234:	4619      	mov	r1, r3
 8004236:	f7fc fc41 	bl	8000abc <__aeabi_d2f>
 800423a:	4603      	mov	r3, r0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	bf00      	nop
  }

  return(return_val);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	ee07 3a90 	vmov	s15, r3
}
 8004246:	eeb0 0a67 	vmov.f32	s0, s15
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	9999999a 	.word	0x9999999a
 8004254:	3fc99999 	.word	0x3fc99999
 8004258:	9999999a 	.word	0x9999999a
 800425c:	3fb99999 	.word	0x3fb99999
 8004260:	9999999a 	.word	0x9999999a
 8004264:	3fa99999 	.word	0x3fa99999
 8004268:	40140000 	.word	0x40140000
 800426c:	40390000 	.word	0x40390000
 8004270:	3fe00000 	.word	0x3fe00000
 8004274:	00000000 	.word	0x00000000

08004278 <P_Time_to_Float>:

//--------------------------------------------------------------
// Conversion: data in time (depending on the timebase)
//--------------------------------------------------------------
float P_Time_to_Float(uint32_t faktor, uint16_t pos)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
  float return_val=0.0;
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
  int16_t signed_data=0;
 800428a:	2300      	movs	r3, #0
 800428c:	817b      	strh	r3, [r7, #10]

  signed_data=pos-2048;
 800428e:	887b      	ldrh	r3, [r7, #2]
 8004290:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004294:	b29b      	uxth	r3, r3
 8004296:	817b      	strh	r3, [r7, #10]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b10      	cmp	r3, #16
 800429c:	f200 8243 	bhi.w	8004726 <P_Time_to_Float+0x4ae>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <P_Time_to_Float+0x30>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042ed 	.word	0x080042ed
 80042ac:	0800432f 	.word	0x0800432f
 80042b0:	0800436f 	.word	0x0800436f
 80042b4:	08004389 	.word	0x08004389
 80042b8:	080043cb 	.word	0x080043cb
 80042bc:	0800440d 	.word	0x0800440d
 80042c0:	0800444f 	.word	0x0800444f
 80042c4:	08004491 	.word	0x08004491
 80042c8:	080044d3 	.word	0x080044d3
 80042cc:	08004515 	.word	0x08004515
 80042d0:	08004557 	.word	0x08004557
 80042d4:	08004597 	.word	0x08004597
 80042d8:	080045b1 	.word	0x080045b1
 80042dc:	080045f3 	.word	0x080045f3
 80042e0:	08004661 	.word	0x08004661
 80042e4:	080046a3 	.word	0x080046a3
 80042e8:	080046e5 	.word	0x080046e5

  switch(faktor) {
    case 0 : return_val=(float)(signed_data)*TFAKTOR_5;break;
 80042ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f8:	ee17 0a90 	vmov	r0, s15
 80042fc:	f7fc f92c 	bl	8000558 <__aeabi_f2d>
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	4bce      	ldr	r3, [pc, #824]	; (8004640 <P_Time_to_Float+0x3c8>)
 8004306:	f7fc f97f 	bl	8000608 <__aeabi_dmul>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	a3c9      	add	r3, pc, #804	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f7fc faa0 	bl	800085c <__aeabi_ddiv>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	f7fc fbca 	bl	8000abc <__aeabi_d2f>
 8004328:	4603      	mov	r3, r0
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	e1fb      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 1 : return_val=(float)(signed_data)*TFAKTOR_2;break;
 800432e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800433a:	ee17 0a90 	vmov	r0, s15
 800433e:	f7fc f90b 	bl	8000558 <__aeabi_f2d>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	f7fb ffa9 	bl	800029c <__adddf3>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	a3b9      	add	r3, pc, #740	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f7fc fa80 	bl	800085c <__aeabi_ddiv>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	f7fc fbaa 	bl	8000abc <__aeabi_d2f>
 8004368:	4603      	mov	r3, r0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e1db      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 2 : return_val=(float)(signed_data)*TFAKTOR_1;break;
 800436e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800437a:	eddf 6ab2 	vldr	s13, [pc, #712]	; 8004644 <P_Time_to_Float+0x3cc>
 800437e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004382:	edc7 7a03 	vstr	s15, [r7, #12]
 8004386:	e1ce      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 3 : return_val=(float)(signed_data)*TFAKTOR_500;break;
 8004388:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800438c:	ee07 3a90 	vmov	s15, r3
 8004390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004394:	ee17 0a90 	vmov	r0, s15
 8004398:	f7fc f8de 	bl	8000558 <__aeabi_f2d>
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	4ba9      	ldr	r3, [pc, #676]	; (8004648 <P_Time_to_Float+0x3d0>)
 80043a2:	f7fc f931 	bl	8000608 <__aeabi_dmul>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4610      	mov	r0, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	a3a2      	add	r3, pc, #648	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f7fc fa52 	bl	800085c <__aeabi_ddiv>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	f7fc fb7c 	bl	8000abc <__aeabi_d2f>
 80043c4:	4603      	mov	r3, r0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e1ad      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 4 : return_val=(float)(signed_data)*TFAKTOR_200;break;
 80043ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d6:	ee17 0a90 	vmov	r0, s15
 80043da:	f7fc f8bd 	bl	8000558 <__aeabi_f2d>
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	4b9a      	ldr	r3, [pc, #616]	; (800464c <P_Time_to_Float+0x3d4>)
 80043e4:	f7fc f910 	bl	8000608 <__aeabi_dmul>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	a391      	add	r3, pc, #580	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fc fa31 	bl	800085c <__aeabi_ddiv>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	f7fc fb5b 	bl	8000abc <__aeabi_d2f>
 8004406:	4603      	mov	r3, r0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e18c      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 5 : return_val=(float)(signed_data)*TFAKTOR_100;break;
 800440c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004418:	ee17 0a90 	vmov	r0, s15
 800441c:	f7fc f89c 	bl	8000558 <__aeabi_f2d>
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	4b8a      	ldr	r3, [pc, #552]	; (8004650 <P_Time_to_Float+0x3d8>)
 8004426:	f7fc f8ef 	bl	8000608 <__aeabi_dmul>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	a381      	add	r3, pc, #516	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f7fc fa10 	bl	800085c <__aeabi_ddiv>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	f7fc fb3a 	bl	8000abc <__aeabi_d2f>
 8004448:	4603      	mov	r3, r0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	e16b      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 6 : return_val=(float)(signed_data)*TFAKTOR_50;break;
 800444e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800445a:	ee17 0a90 	vmov	r0, s15
 800445e:	f7fc f87b 	bl	8000558 <__aeabi_f2d>
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	4b7b      	ldr	r3, [pc, #492]	; (8004654 <P_Time_to_Float+0x3dc>)
 8004468:	f7fc f8ce 	bl	8000608 <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	a370      	add	r3, pc, #448	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	f7fc f9ef 	bl	800085c <__aeabi_ddiv>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	f7fc fb19 	bl	8000abc <__aeabi_d2f>
 800448a:	4603      	mov	r3, r0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e14a      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 7 : return_val=(float)(signed_data)*TFAKTOR_20;break;
 8004490:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800449c:	ee17 0a90 	vmov	r0, s15
 80044a0:	f7fc f85a 	bl	8000558 <__aeabi_f2d>
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	4b6b      	ldr	r3, [pc, #428]	; (8004658 <P_Time_to_Float+0x3e0>)
 80044aa:	f7fc f8ad 	bl	8000608 <__aeabi_dmul>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	a360      	add	r3, pc, #384	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f7fc f9ce 	bl	800085c <__aeabi_ddiv>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	f7fc faf8 	bl	8000abc <__aeabi_d2f>
 80044cc:	4603      	mov	r3, r0
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e129      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 8 : return_val=(float)(signed_data)*TFAKTOR_10;break;
 80044d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044de:	ee17 0a90 	vmov	r0, s15
 80044e2:	f7fc f839 	bl	8000558 <__aeabi_f2d>
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	4b5c      	ldr	r3, [pc, #368]	; (800465c <P_Time_to_Float+0x3e4>)
 80044ec:	f7fc f88c 	bl	8000608 <__aeabi_dmul>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	a34f      	add	r3, pc, #316	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f7fc f9ad 	bl	800085c <__aeabi_ddiv>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	f7fc fad7 	bl	8000abc <__aeabi_d2f>
 800450e:	4603      	mov	r3, r0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e108      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 9 : return_val=(float)(signed_data)*TFAKTOR_5;break;
 8004514:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	ee17 0a90 	vmov	r0, s15
 8004524:	f7fc f818 	bl	8000558 <__aeabi_f2d>
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	4b44      	ldr	r3, [pc, #272]	; (8004640 <P_Time_to_Float+0x3c8>)
 800452e:	f7fc f86b 	bl	8000608 <__aeabi_dmul>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	a33f      	add	r3, pc, #252	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f7fc f98c 	bl	800085c <__aeabi_ddiv>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4610      	mov	r0, r2
 800454a:	4619      	mov	r1, r3
 800454c:	f7fc fab6 	bl	8000abc <__aeabi_d2f>
 8004550:	4603      	mov	r3, r0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e0e7      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 10 : return_val=(float)(signed_data)*TFAKTOR_2;break;
 8004556:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004562:	ee17 0a90 	vmov	r0, s15
 8004566:	f7fb fff7 	bl	8000558 <__aeabi_f2d>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	f7fb fe95 	bl	800029c <__adddf3>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	a32f      	add	r3, pc, #188	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f7fc f96c 	bl	800085c <__aeabi_ddiv>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	f7fc fa96 	bl	8000abc <__aeabi_d2f>
 8004590:	4603      	mov	r3, r0
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	e0c7      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 11 : return_val=(float)(signed_data)*TFAKTOR_1;break;
 8004596:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045a2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8004644 <P_Time_to_Float+0x3cc>
 80045a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045aa:	edc7 7a03 	vstr	s15, [r7, #12]
 80045ae:	e0ba      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 12 : return_val=(float)(signed_data)*TFAKTOR_500;break;
 80045b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045bc:	ee17 0a90 	vmov	r0, s15
 80045c0:	f7fb ffca 	bl	8000558 <__aeabi_f2d>
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <P_Time_to_Float+0x3d0>)
 80045ca:	f7fc f81d 	bl	8000608 <__aeabi_dmul>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	a318      	add	r3, pc, #96	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f7fc f93e 	bl	800085c <__aeabi_ddiv>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	f7fc fa68 	bl	8000abc <__aeabi_d2f>
 80045ec:	4603      	mov	r3, r0
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e099      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 13 : return_val=(float)(signed_data)*TFAKTOR_200;break;
 80045f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045fe:	ee17 0a90 	vmov	r0, s15
 8004602:	f7fb ffa9 	bl	8000558 <__aeabi_f2d>
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <P_Time_to_Float+0x3d4>)
 800460c:	f7fb fffc 	bl	8000608 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	a307      	add	r3, pc, #28	; (adr r3, 8004638 <P_Time_to_Float+0x3c0>)
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	f7fc f91d 	bl	800085c <__aeabi_ddiv>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f7fc fa47 	bl	8000abc <__aeabi_d2f>
 800462e:	4603      	mov	r3, r0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e078      	b.n	8004726 <P_Time_to_Float+0x4ae>
 8004634:	f3af 8000 	nop.w
 8004638:	00000000 	.word	0x00000000
 800463c:	40755000 	.word	0x40755000
 8004640:	40140000 	.word	0x40140000
 8004644:	43aa8000 	.word	0x43aa8000
 8004648:	407f4000 	.word	0x407f4000
 800464c:	40690000 	.word	0x40690000
 8004650:	40590000 	.word	0x40590000
 8004654:	40490000 	.word	0x40490000
 8004658:	40340000 	.word	0x40340000
 800465c:	40240000 	.word	0x40240000
    case 14 : return_val=(float)(signed_data)*TFAKTOR_100;break;
 8004660:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800466c:	ee17 0a90 	vmov	r0, s15
 8004670:	f7fb ff72 	bl	8000558 <__aeabi_f2d>
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	4b31      	ldr	r3, [pc, #196]	; (8004740 <P_Time_to_Float+0x4c8>)
 800467a:	f7fb ffc5 	bl	8000608 <__aeabi_dmul>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	a32c      	add	r3, pc, #176	; (adr r3, 8004738 <P_Time_to_Float+0x4c0>)
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f7fc f8e6 	bl	800085c <__aeabi_ddiv>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	f7fc fa10 	bl	8000abc <__aeabi_d2f>
 800469c:	4603      	mov	r3, r0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e041      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 15 : return_val=(float)(signed_data)*TFAKTOR_50;break;
 80046a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ae:	ee17 0a90 	vmov	r0, s15
 80046b2:	f7fb ff51 	bl	8000558 <__aeabi_f2d>
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	4b22      	ldr	r3, [pc, #136]	; (8004744 <P_Time_to_Float+0x4cc>)
 80046bc:	f7fb ffa4 	bl	8000608 <__aeabi_dmul>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	a31b      	add	r3, pc, #108	; (adr r3, 8004738 <P_Time_to_Float+0x4c0>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f7fc f8c5 	bl	800085c <__aeabi_ddiv>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	f7fc f9ef 	bl	8000abc <__aeabi_d2f>
 80046de:	4603      	mov	r3, r0
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e020      	b.n	8004726 <P_Time_to_Float+0x4ae>
    case 16 : return_val=(float)(signed_data)*TFAKTOR_25;break;
 80046e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f0:	ee17 0a90 	vmov	r0, s15
 80046f4:	f7fb ff30 	bl	8000558 <__aeabi_f2d>
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	4b12      	ldr	r3, [pc, #72]	; (8004748 <P_Time_to_Float+0x4d0>)
 80046fe:	f7fb ff83 	bl	8000608 <__aeabi_dmul>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	a30b      	add	r3, pc, #44	; (adr r3, 8004738 <P_Time_to_Float+0x4c0>)
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f7fc f8a4 	bl	800085c <__aeabi_ddiv>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	f7fc f9ce 	bl	8000abc <__aeabi_d2f>
 8004720:	4603      	mov	r3, r0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	bf00      	nop
  }

  return(return_val);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	ee07 3a90 	vmov	s15, r3
}
 800472c:	eeb0 0a67 	vmov.f32	s0, s15
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	00000000 	.word	0x00000000
 800473c:	40755000 	.word	0x40755000
 8004740:	40590000 	.word	0x40590000
 8004744:	40490000 	.word	0x40490000
 8004748:	40390000 	.word	0x40390000
 800474c:	00000000 	.word	0x00000000

08004750 <P_FFT_to_Float>:

//--------------------------------------------------------------
// Conversion: data in FFT (depending on the timebase)
//--------------------------------------------------------------
float P_FFT_to_Float(uint32_t faktor, uint16_t pos)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	807b      	strh	r3, [r7, #2]
  float return_val=0.0;
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
  int16_t signed_data=0;
 8004762:	2300      	movs	r3, #0
 8004764:	817b      	strh	r3, [r7, #10]

  signed_data=pos;
 8004766:	887b      	ldrh	r3, [r7, #2]
 8004768:	817b      	strh	r3, [r7, #10]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b10      	cmp	r3, #16
 800476e:	f200 831e 	bhi.w	8004dae <P_FFT_to_Float+0x65e>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <P_FFT_to_Float+0x28>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	080047bd 	.word	0x080047bd
 800477c:	08004813 	.word	0x08004813
 8004780:	08004869 	.word	0x08004869
 8004784:	080048bf 	.word	0x080048bf
 8004788:	08004915 	.word	0x08004915
 800478c:	0800496b 	.word	0x0800496b
 8004790:	080049c1 	.word	0x080049c1
 8004794:	08004a17 	.word	0x08004a17
 8004798:	08004a6d 	.word	0x08004a6d
 800479c:	08004ac3 	.word	0x08004ac3
 80047a0:	08004b55 	.word	0x08004b55
 80047a4:	08004bab 	.word	0x08004bab
 80047a8:	08004c01 	.word	0x08004c01
 80047ac:	08004c57 	.word	0x08004c57
 80047b0:	08004cad 	.word	0x08004cad
 80047b4:	08004d03 	.word	0x08004d03
 80047b8:	08004d59 	.word	0x08004d59

  switch(faktor) {
    case 0 : return_val=(float)(signed_data)*FFAKTOR_5s;break;
 80047bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c8:	ee17 0a90 	vmov	r0, s15
 80047cc:	f7fb fec4 	bl	8000558 <__aeabi_f2d>
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	4bd8      	ldr	r3, [pc, #864]	; (8004b38 <P_FFT_to_Float+0x3e8>)
 80047d6:	f7fb ff17 	bl	8000608 <__aeabi_dmul>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4610      	mov	r0, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	a3cd      	add	r3, pc, #820	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f7fc f838 	bl	800085c <__aeabi_ddiv>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047fc:	f7fc f82e 	bl	800085c <__aeabi_ddiv>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	f7fc f958 	bl	8000abc <__aeabi_d2f>
 800480c:	4603      	mov	r3, r0
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e2cd      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 1 : return_val=(float)(signed_data)*FFAKTOR_2s;break;
 8004812:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800481e:	ee17 0a90 	vmov	r0, s15
 8004822:	f7fb fe99 	bl	8000558 <__aeabi_f2d>
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	4bc4      	ldr	r3, [pc, #784]	; (8004b3c <P_FFT_to_Float+0x3ec>)
 800482c:	f7fb feec 	bl	8000608 <__aeabi_dmul>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	a3b7      	add	r3, pc, #732	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fc f80d 	bl	800085c <__aeabi_ddiv>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004852:	f7fc f803 	bl	800085c <__aeabi_ddiv>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	f7fc f92d 	bl	8000abc <__aeabi_d2f>
 8004862:	4603      	mov	r3, r0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e2a2      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 2 : return_val=(float)(signed_data)*FFAKTOR_1s;break;
 8004868:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004874:	ee17 0a90 	vmov	r0, s15
 8004878:	f7fb fe6e 	bl	8000558 <__aeabi_f2d>
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	4baf      	ldr	r3, [pc, #700]	; (8004b40 <P_FFT_to_Float+0x3f0>)
 8004882:	f7fb fec1 	bl	8000608 <__aeabi_dmul>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	a3a2      	add	r3, pc, #648	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f7fb ffe2 	bl	800085c <__aeabi_ddiv>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048a8:	f7fb ffd8 	bl	800085c <__aeabi_ddiv>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4610      	mov	r0, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	f7fc f902 	bl	8000abc <__aeabi_d2f>
 80048b8:	4603      	mov	r3, r0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e277      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 3 : return_val=(float)(signed_data)*FFAKTOR_500m;break;
 80048be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ca:	ee17 0a90 	vmov	r0, s15
 80048ce:	f7fb fe43 	bl	8000558 <__aeabi_f2d>
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	4b9b      	ldr	r3, [pc, #620]	; (8004b44 <P_FFT_to_Float+0x3f4>)
 80048d8:	f7fb fe96 	bl	8000608 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	a38c      	add	r3, pc, #560	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f7fb ffb7 	bl	800085c <__aeabi_ddiv>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048fe:	f7fb ffad 	bl	800085c <__aeabi_ddiv>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	f7fc f8d7 	bl	8000abc <__aeabi_d2f>
 800490e:	4603      	mov	r3, r0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	e24c      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 4 : return_val=(float)(signed_data)*FFAKTOR_200m;break;
 8004914:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004920:	ee17 0a90 	vmov	r0, s15
 8004924:	f7fb fe18 	bl	8000558 <__aeabi_f2d>
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	4b86      	ldr	r3, [pc, #536]	; (8004b48 <P_FFT_to_Float+0x3f8>)
 800492e:	f7fb fe6b 	bl	8000608 <__aeabi_dmul>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4610      	mov	r0, r2
 8004938:	4619      	mov	r1, r3
 800493a:	a377      	add	r3, pc, #476	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f7fb ff8c 	bl	800085c <__aeabi_ddiv>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4610      	mov	r0, r2
 800494a:	4619      	mov	r1, r3
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004954:	f7fb ff82 	bl	800085c <__aeabi_ddiv>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	f7fc f8ac 	bl	8000abc <__aeabi_d2f>
 8004964:	4603      	mov	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e221      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 5 : return_val=(float)(signed_data)*FFAKTOR_100m;break;
 800496a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004976:	ee17 0a90 	vmov	r0, s15
 800497a:	f7fb fded 	bl	8000558 <__aeabi_f2d>
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	4b72      	ldr	r3, [pc, #456]	; (8004b4c <P_FFT_to_Float+0x3fc>)
 8004984:	f7fb fe40 	bl	8000608 <__aeabi_dmul>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	a361      	add	r3, pc, #388	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f7fb ff61 	bl	800085c <__aeabi_ddiv>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049aa:	f7fb ff57 	bl	800085c <__aeabi_ddiv>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4610      	mov	r0, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	f7fc f881 	bl	8000abc <__aeabi_d2f>
 80049ba:	4603      	mov	r3, r0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e1f6      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 6 : return_val=(float)(signed_data)*FFAKTOR_50m;break;
 80049c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049cc:	ee17 0a90 	vmov	r0, s15
 80049d0:	f7fb fdc2 	bl	8000558 <__aeabi_f2d>
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	4b5d      	ldr	r3, [pc, #372]	; (8004b50 <P_FFT_to_Float+0x400>)
 80049da:	f7fb fe15 	bl	8000608 <__aeabi_dmul>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4610      	mov	r0, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	a34c      	add	r3, pc, #304	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f7fb ff36 	bl	800085c <__aeabi_ddiv>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a00:	f7fb ff2c 	bl	800085c <__aeabi_ddiv>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f7fc f856 	bl	8000abc <__aeabi_d2f>
 8004a10:	4603      	mov	r3, r0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e1cb      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 7 : return_val=(float)(signed_data)*FFAKTOR_20m;break;
 8004a16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a22:	ee17 0a90 	vmov	r0, s15
 8004a26:	f7fb fd97 	bl	8000558 <__aeabi_f2d>
 8004a2a:	a33d      	add	r3, pc, #244	; (adr r3, 8004b20 <P_FFT_to_Float+0x3d0>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fdea 	bl	8000608 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	a336      	add	r3, pc, #216	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f7fb ff0b 	bl	800085c <__aeabi_ddiv>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a56:	f7fb ff01 	bl	800085c <__aeabi_ddiv>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7fc f82b 	bl	8000abc <__aeabi_d2f>
 8004a66:	4603      	mov	r3, r0
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e1a0      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 8 : return_val=(float)(signed_data)*FFAKTOR_10m;break;
 8004a6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a78:	ee17 0a90 	vmov	r0, s15
 8004a7c:	f7fb fd6c 	bl	8000558 <__aeabi_f2d>
 8004a80:	a329      	add	r3, pc, #164	; (adr r3, 8004b28 <P_FFT_to_Float+0x3d8>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb fdbf 	bl	8000608 <__aeabi_dmul>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	a321      	add	r3, pc, #132	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f7fb fee0 	bl	800085c <__aeabi_ddiv>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aac:	f7fb fed6 	bl	800085c <__aeabi_ddiv>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f7fc f800 	bl	8000abc <__aeabi_d2f>
 8004abc:	4603      	mov	r3, r0
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e175      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 9 : return_val=(float)(signed_data)*FFAKTOR_5m;break;
 8004ac2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ace:	ee17 0a90 	vmov	r0, s15
 8004ad2:	f7fb fd41 	bl	8000558 <__aeabi_f2d>
 8004ad6:	a316      	add	r3, pc, #88	; (adr r3, 8004b30 <P_FFT_to_Float+0x3e0>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fb fd94 	bl	8000608 <__aeabi_dmul>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	a30b      	add	r3, pc, #44	; (adr r3, 8004b18 <P_FFT_to_Float+0x3c8>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f7fb feb5 	bl	800085c <__aeabi_ddiv>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b02:	f7fb feab 	bl	800085c <__aeabi_ddiv>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f7fb ffd5 	bl	8000abc <__aeabi_d2f>
 8004b12:	4603      	mov	r3, r0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e14a      	b.n	8004dae <P_FFT_to_Float+0x65e>
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	40affe00 	.word	0x40affe00
 8004b20:	00000000 	.word	0x00000000
 8004b24:	40938800 	.word	0x40938800
 8004b28:	00000000 	.word	0x00000000
 8004b2c:	40a38800 	.word	0x40a38800
 8004b30:	00000000 	.word	0x00000000
 8004b34:	40b38800 	.word	0x40b38800
 8004b38:	40140000 	.word	0x40140000
 8004b3c:	40290000 	.word	0x40290000
 8004b40:	40390000 	.word	0x40390000
 8004b44:	40490000 	.word	0x40490000
 8004b48:	405f4000 	.word	0x405f4000
 8004b4c:	406f4000 	.word	0x406f4000
 8004b50:	407f4000 	.word	0x407f4000
    case 10 : return_val=(float)(signed_data)*FFAKTOR_2m;break;
 8004b54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b60:	ee17 0a90 	vmov	r0, s15
 8004b64:	f7fb fcf8 	bl	8000558 <__aeabi_f2d>
 8004b68:	a39b      	add	r3, pc, #620	; (adr r3, 8004dd8 <P_FFT_to_Float+0x688>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb fd4b 	bl	8000608 <__aeabi_dmul>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	a391      	add	r3, pc, #580	; (adr r3, 8004dc0 <P_FFT_to_Float+0x670>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fe6c 	bl	800085c <__aeabi_ddiv>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b94:	f7fb fe62 	bl	800085c <__aeabi_ddiv>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f7fb ff8c 	bl	8000abc <__aeabi_d2f>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e101      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 11 : return_val=(float)(signed_data)*FFAKTOR_1m;break;
 8004baa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bb6:	ee17 0a90 	vmov	r0, s15
 8004bba:	f7fb fccd 	bl	8000558 <__aeabi_f2d>
 8004bbe:	a388      	add	r3, pc, #544	; (adr r3, 8004de0 <P_FFT_to_Float+0x690>)
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	f7fb fd20 	bl	8000608 <__aeabi_dmul>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	a37b      	add	r3, pc, #492	; (adr r3, 8004dc0 <P_FFT_to_Float+0x670>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f7fb fe41 	bl	800085c <__aeabi_ddiv>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bea:	f7fb fe37 	bl	800085c <__aeabi_ddiv>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	f7fb ff61 	bl	8000abc <__aeabi_d2f>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e0d6      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 12 : return_val=(float)(signed_data)*FFAKTOR_500u;break;
 8004c00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c0c:	ee17 0a90 	vmov	r0, s15
 8004c10:	f7fb fca2 	bl	8000558 <__aeabi_f2d>
 8004c14:	a374      	add	r3, pc, #464	; (adr r3, 8004de8 <P_FFT_to_Float+0x698>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fcf5 	bl	8000608 <__aeabi_dmul>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	a366      	add	r3, pc, #408	; (adr r3, 8004dc0 <P_FFT_to_Float+0x670>)
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f7fb fe16 	bl	800085c <__aeabi_ddiv>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4610      	mov	r0, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c40:	f7fb fe0c 	bl	800085c <__aeabi_ddiv>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	f7fb ff36 	bl	8000abc <__aeabi_d2f>
 8004c50:	4603      	mov	r3, r0
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e0ab      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 13 : return_val=(float)(signed_data)*FFAKTOR_200u;break;
 8004c56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c62:	ee17 0a90 	vmov	r0, s15
 8004c66:	f7fb fc77 	bl	8000558 <__aeabi_f2d>
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	4b56      	ldr	r3, [pc, #344]	; (8004dc8 <P_FFT_to_Float+0x678>)
 8004c70:	f7fb fcca 	bl	8000608 <__aeabi_dmul>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	a350      	add	r3, pc, #320	; (adr r3, 8004dc0 <P_FFT_to_Float+0x670>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fdeb 	bl	800085c <__aeabi_ddiv>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c96:	f7fb fde1 	bl	800085c <__aeabi_ddiv>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f7fb ff0b 	bl	8000abc <__aeabi_d2f>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e080      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 14 : return_val=(float)(signed_data)*FFAKTOR_100u;break;
 8004cac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004cb0:	ee07 3a90 	vmov	s15, r3
 8004cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb8:	ee17 0a90 	vmov	r0, s15
 8004cbc:	f7fb fc4c 	bl	8000558 <__aeabi_f2d>
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	4b41      	ldr	r3, [pc, #260]	; (8004dcc <P_FFT_to_Float+0x67c>)
 8004cc6:	f7fb fc9f 	bl	8000608 <__aeabi_dmul>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4610      	mov	r0, r2
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	a33b      	add	r3, pc, #236	; (adr r3, 8004dc0 <P_FFT_to_Float+0x670>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f7fb fdc0 	bl	800085c <__aeabi_ddiv>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cec:	f7fb fdb6 	bl	800085c <__aeabi_ddiv>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	f7fb fee0 	bl	8000abc <__aeabi_d2f>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e055      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 15 : return_val=(float)(signed_data)*FFAKTOR_50u;break;
 8004d02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d0e:	ee17 0a90 	vmov	r0, s15
 8004d12:	f7fb fc21 	bl	8000558 <__aeabi_f2d>
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <P_FFT_to_Float+0x680>)
 8004d1c:	f7fb fc74 	bl	8000608 <__aeabi_dmul>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4610      	mov	r0, r2
 8004d26:	4619      	mov	r1, r3
 8004d28:	a325      	add	r3, pc, #148	; (adr r3, 8004dc0 <P_FFT_to_Float+0x670>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f7fb fd95 	bl	800085c <__aeabi_ddiv>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d42:	f7fb fd8b 	bl	800085c <__aeabi_ddiv>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f7fb feb5 	bl	8000abc <__aeabi_d2f>
 8004d52:	4603      	mov	r3, r0
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e02a      	b.n	8004dae <P_FFT_to_Float+0x65e>
    case 16 : return_val=(float)(signed_data)*FFAKTOR_25u;break;
 8004d58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d5c:	ee07 3a90 	vmov	s15, r3
 8004d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d64:	ee17 0a90 	vmov	r0, s15
 8004d68:	f7fb fbf6 	bl	8000558 <__aeabi_f2d>
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <P_FFT_to_Float+0x684>)
 8004d72:	f7fb fc49 	bl	8000608 <__aeabi_dmul>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	a310      	add	r3, pc, #64	; (adr r3, 8004dc0 <P_FFT_to_Float+0x670>)
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f7fb fd6a 	bl	800085c <__aeabi_ddiv>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d98:	f7fb fd60 	bl	800085c <__aeabi_ddiv>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4610      	mov	r0, r2
 8004da2:	4619      	mov	r1, r3
 8004da4:	f7fb fe8a 	bl	8000abc <__aeabi_d2f>
 8004da8:	4603      	mov	r3, r0
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	bf00      	nop
  }

  return(return_val);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	ee07 3a90 	vmov	s15, r3
}
 8004db4:	eeb0 0a67 	vmov.f32	s0, s15
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	00000000 	.word	0x00000000
 8004dc4:	40affe00 	.word	0x40affe00
 8004dc8:	405f4000 	.word	0x405f4000
 8004dcc:	406f4000 	.word	0x406f4000
 8004dd0:	407f4000 	.word	0x407f4000
 8004dd4:	408f4000 	.word	0x408f4000
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	40c86a00 	.word	0x40c86a00
 8004de0:	00000000 	.word	0x00000000
 8004de4:	40d86a00 	.word	0x40d86a00
 8004de8:	00000000 	.word	0x00000000
 8004dec:	40e86a00 	.word	0x40e86a00

08004df0 <LINE>:
//--------------------------------------------------------------
// for converting a "line number" into a "pixel position"
// n : [1...24]
//--------------------------------------------------------------
uint16_t LINE(uint16_t n)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	80fb      	strh	r3, [r7, #6]
  uint16_t return_val=0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	81fb      	strh	r3, [r7, #14]

  return_val=LCD_MAXX-(n*FONT_H)-1;
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	461a      	mov	r2, r3
 8004e02:	0352      	lsls	r2, r2, #13
 8004e04:	1ad2      	subs	r2, r2, r3
 8004e06:	0092      	lsls	r2, r2, #2
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	33ef      	adds	r3, #239	; 0xef
 8004e10:	81fb      	strh	r3, [r7, #14]

  return(return_val);
 8004e12:	89fb      	ldrh	r3, [r7, #14]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <oszi_init>:

//--------------------------------------------------------------
// init vom Oszi
//--------------------------------------------------------------
void oszi_init(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af02      	add	r7, sp, #8
  uint32_t check;

  //---------------------------------------------
  // Hardware init
  //--------------------------------------------- 
  check=p_oszi_hw_init();
 8004e26:	f000 f9ed 	bl	8005204 <p_oszi_hw_init>
 8004e2a:	6078      	str	r0, [r7, #4]
  p_oszi_send_uart((uint8_t *)"OSZI 4 STM32F429 [UB]\r\n");
 8004e2c:	4819      	ldr	r0, [pc, #100]	; (8004e94 <oszi_init+0x74>)
 8004e2e:	f001 fbb7 	bl	80065a0 <p_oszi_send_uart>
  if(check==1) {
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d10d      	bne.n	8004e54 <oszi_init+0x34>
    // Touch init error
    UB_LCD_FillLayer(BACKGROUND_COL);
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f00c f937 	bl	80110ac <UB_LCD_FillLayer>
    UB_Font_DrawString(10,10,"Touch ERR",&Arial_7x10,FONT_COL,BACKGROUND_COL);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	231f      	movs	r3, #31
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <oszi_init+0x78>)
 8004e48:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <oszi_init+0x7c>)
 8004e4a:	210a      	movs	r1, #10
 8004e4c:	200a      	movs	r0, #10
 8004e4e:	f00b fc89 	bl	8010764 <UB_Font_DrawString>
    while(1);
 8004e52:	e7fe      	b.n	8004e52 <oszi_init+0x32>
  }
  else if(check==2) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d10d      	bne.n	8004e76 <oszi_init+0x56>
    // Fehler in den Defines
    UB_LCD_FillLayer(BACKGROUND_COL);
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f00c f926 	bl	80110ac <UB_LCD_FillLayer>
    UB_Font_DrawString(10,10,"Wrong ADC Array-LEN",&Arial_7x10,FONT_COL,BACKGROUND_COL);
 8004e60:	2300      	movs	r3, #0
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	231f      	movs	r3, #31
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <oszi_init+0x78>)
 8004e6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <oszi_init+0x80>)
 8004e6c:	210a      	movs	r1, #10
 8004e6e:	200a      	movs	r0, #10
 8004e70:	f00b fc78 	bl	8010764 <UB_Font_DrawString>
    while(1);
 8004e74:	e7fe      	b.n	8004e74 <oszi_init+0x54>


  //---------------------------------------------
  // FFT init
  //---------------------------------------------
  fft_init();
 8004e76:	f7fc fcbd 	bl	80017f4 <fft_init>

  //---------------------------------------------
  // Software init
  //---------------------------------------------
  p_oszi_sw_init();
 8004e7a:	f000 f9e3 	bl	8005244 <p_oszi_sw_init>
  ADC_change_Frq(Menu.timebase.value);
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <oszi_init+0x84>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb fffd 	bl	8000e84 <ADC_change_Frq>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	08012ac4 	.word	0x08012ac4
 8004e98:	20000060 	.word	0x20000060
 8004e9c:	08012adc 	.word	0x08012adc
 8004ea0:	08012ae8 	.word	0x08012ae8
 8004ea4:	2000277c 	.word	0x2000277c

08004ea8 <oszi_start>:

//--------------------------------------------------------------
// start vom Oszi (Endlosloop)
//--------------------------------------------------------------
void oszi_start(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
  MENU_Status_t status;

  p_oszi_draw_background();
 8004eae:	f000 fa56 	bl	800535e <p_oszi_draw_background>
  UB_Graphic2D_Copy2DMA(Menu.akt_transparenz);  
 8004eb2:	4ba1      	ldr	r3, [pc, #644]	; (8005138 <oszi_start+0x290>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f00b ffde 	bl	8010e78 <UB_Graphic2D_Copy2DMA>

  while(1) {
    //---------------------------------------------
    // warten bis GUI-Timer abgelaufen ist
    //---------------------------------------------
    if(GUI_Timer_ms==0) {
 8004ebc:	4b9f      	ldr	r3, [pc, #636]	; (800513c <oszi_start+0x294>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1fb      	bne.n	8004ebc <oszi_start+0x14>
      GUI_Timer_ms=GUI_INTERVALL_MS;
 8004ec4:	4b9d      	ldr	r3, [pc, #628]	; (800513c <oszi_start+0x294>)
 8004ec6:	2232      	movs	r2, #50	; 0x32
 8004ec8:	601a      	str	r2, [r3, #0]
      //--------------------------------------
      // User-Button einlesen (fuer RUN/STOP)
      //--------------------------------------
      if(UB_Button_OnClick(BLUE_BTN)==true) {
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f00b fb60 	bl	8010590 <UB_Button_OnClick>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d023      	beq.n	8004f1e <oszi_start+0x76>
        status=MENU_NO_CHANGE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	71fb      	strb	r3, [r7, #7]
        if(Menu.trigger.mode==2) { // "single"
 8004eda:	4b97      	ldr	r3, [pc, #604]	; (8005138 <oszi_start+0x290>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d109      	bne.n	8004ef6 <oszi_start+0x4e>
          if(Menu.trigger.single==4) {
 8004ee2:	4b95      	ldr	r3, [pc, #596]	; (8005138 <oszi_start+0x290>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d11d      	bne.n	8004f26 <oszi_start+0x7e>
            Menu.trigger.single=5;  // von "Ready" auf "Stop"
 8004eea:	4b93      	ldr	r3, [pc, #588]	; (8005138 <oszi_start+0x290>)
 8004eec:	2205      	movs	r2, #5
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
            status=MENU_CHANGE_NORMAL;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	71fb      	strb	r3, [r7, #7]
 8004ef4:	e017      	b.n	8004f26 <oszi_start+0x7e>
          }
        }
        else { // "normal" oder "auto"
          if(Menu.trigger.single==0) {
 8004ef6:	4b90      	ldr	r3, [pc, #576]	; (8005138 <oszi_start+0x290>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d105      	bne.n	8004f0a <oszi_start+0x62>
            Menu.trigger.single=1; // von "Run" auf "Stop"
 8004efe:	4b8e      	ldr	r3, [pc, #568]	; (8005138 <oszi_start+0x290>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
            status=MENU_CHANGE_NORMAL;
 8004f04:	2302      	movs	r3, #2
 8004f06:	71fb      	strb	r3, [r7, #7]
 8004f08:	e00d      	b.n	8004f26 <oszi_start+0x7e>
          }
          else if(Menu.trigger.single==1) {
 8004f0a:	4b8b      	ldr	r3, [pc, #556]	; (8005138 <oszi_start+0x290>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d109      	bne.n	8004f26 <oszi_start+0x7e>
            Menu.trigger.single=2; // von "Stop" auf "Weiter"
 8004f12:	4b89      	ldr	r3, [pc, #548]	; (8005138 <oszi_start+0x290>)
 8004f14:	2202      	movs	r2, #2
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
            status=MENU_CHANGE_NORMAL;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	71fb      	strb	r3, [r7, #7]
 8004f1c:	e003      	b.n	8004f26 <oszi_start+0x7e>
      }
      else {
        //--------------------------------------
        // Test ob Touch betaetigt
        //--------------------------------------
        status=menu_check_touch();
 8004f1e:	f7fe fa5d 	bl	80033dc <menu_check_touch>
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]
      }
      if(status!=MENU_NO_CHANGE) {
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d032      	beq.n	8004f92 <oszi_start+0xea>
        p_oszi_draw_background();
 8004f2c:	f000 fa17 	bl	800535e <p_oszi_draw_background>
        if(status==MENU_CHANGE_FRQ) ADC_change_Frq(Menu.timebase.value);
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d105      	bne.n	8004f42 <oszi_start+0x9a>
 8004f36:	4b80      	ldr	r3, [pc, #512]	; (8005138 <oszi_start+0x290>)
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fb ffa1 	bl	8000e84 <ADC_change_Frq>
        if(status==MENU_CHANGE_MODE) {
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d11d      	bne.n	8004f84 <oszi_start+0xdc>
          ADC_change_Mode(Menu.trigger.mode);
 8004f48:	4b7b      	ldr	r3, [pc, #492]	; (8005138 <oszi_start+0x290>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fc f882 	bl	8001058 <ADC_change_Mode>
          if(Menu.trigger.mode!=2) {
 8004f54:	4b78      	ldr	r3, [pc, #480]	; (8005138 <oszi_start+0x290>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d003      	beq.n	8004f64 <oszi_start+0xbc>
            Menu.trigger.single=0;
 8004f5c:	4b76      	ldr	r3, [pc, #472]	; (8005138 <oszi_start+0x290>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
 8004f62:	e002      	b.n	8004f6a <oszi_start+0xc2>
          }
          else {
            Menu.trigger.single=3;
 8004f64:	4b74      	ldr	r3, [pc, #464]	; (8005138 <oszi_start+0x290>)
 8004f66:	2203      	movs	r2, #3
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
          }
          p_oszi_draw_background(); // nochmal zeichnen, zum update
 8004f6a:	f000 f9f8 	bl	800535e <p_oszi_draw_background>
          ADC_UB.status=ADC_VORLAUF;
 8004f6e:	4b74      	ldr	r3, [pc, #464]	; (8005140 <oszi_start+0x298>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
          __HAL_TIM_ENABLE(&htim2);
 8004f74:	4b73      	ldr	r3, [pc, #460]	; (8005144 <oszi_start+0x29c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b72      	ldr	r3, [pc, #456]	; (8005144 <oszi_start+0x29c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
        }
        if(status==MENU_SEND_DATA) {
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d103      	bne.n	8004f92 <oszi_start+0xea>
          p_oszi_draw_background(); // nochmal zeichnen, zum update
 8004f8a:	f000 f9e8 	bl	800535e <p_oszi_draw_background>
          p_oszi_draw_adc();
 8004f8e:	f000 ff8b 	bl	8005ea8 <p_oszi_draw_adc>
          // gesendet wird am Ende
        }
      }

      if(Menu.trigger.mode==1) {
 8004f92:	4b69      	ldr	r3, [pc, #420]	; (8005138 <oszi_start+0x290>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d166      	bne.n	8005068 <oszi_start+0x1c0>
        //--------------------------------------
        // Trigger-Mode = "AUTO"
        // Screnn immer neu zeichnen
        //--------------------------------------
        if(Menu.trigger.single==0) {
 8004f9a:	4b67      	ldr	r3, [pc, #412]	; (8005138 <oszi_start+0x290>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d125      	bne.n	8004fee <oszi_start+0x146>
          if ((ADC1_DMA_STREAM->CR & DMA_SxCR_CT) == 0) {
 8004fa2:	4b69      	ldr	r3, [pc, #420]	; (8005148 <oszi_start+0x2a0>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <oszi_start+0x114>
            ADC_UB.trigger_pos=SCALE_X_MITTE;
 8004fae:	4b64      	ldr	r3, [pc, #400]	; (8005140 <oszi_start+0x298>)
 8004fb0:	2296      	movs	r2, #150	; 0x96
 8004fb2:	605a      	str	r2, [r3, #4]
            ADC_UB.trigger_quarter=2;
 8004fb4:	4b62      	ldr	r3, [pc, #392]	; (8005140 <oszi_start+0x298>)
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	609a      	str	r2, [r3, #8]
 8004fba:	e005      	b.n	8004fc8 <oszi_start+0x120>
          }
          else {
            ADC_UB.trigger_pos=SCALE_X_MITTE;
 8004fbc:	4b60      	ldr	r3, [pc, #384]	; (8005140 <oszi_start+0x298>)
 8004fbe:	2296      	movs	r2, #150	; 0x96
 8004fc0:	605a      	str	r2, [r3, #4]
            ADC_UB.trigger_quarter=4;
 8004fc2:	4b5f      	ldr	r3, [pc, #380]	; (8005140 <oszi_start+0x298>)
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	609a      	str	r2, [r3, #8]
          }
          p_oszi_sort_adc();
 8004fc8:	f000 fd16 	bl	80059f8 <p_oszi_sort_adc>
          p_oszi_fill_fft();
 8004fcc:	f000 fed4 	bl	8005d78 <p_oszi_fill_fft>
          if(Menu.fft.mode!=0) fft_calc();
 8004fd0:	4b59      	ldr	r3, [pc, #356]	; (8005138 <oszi_start+0x290>)
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <oszi_start+0x134>
 8004fd8:	f7fc fc34 	bl	8001844 <fft_calc>
          p_oszi_draw_adc();
 8004fdc:	f000 ff64 	bl	8005ea8 <p_oszi_draw_adc>
          ADC_UB.status=ADC_VORLAUF;
 8004fe0:	4b57      	ldr	r3, [pc, #348]	; (8005140 <oszi_start+0x298>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
          UB_Led_Toggle(LED_RED);
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	f00b faaa 	bl	8010540 <UB_Led_Toggle>
 8004fec:	e0e9      	b.n	80051c2 <oszi_start+0x31a>
        }
        else if(Menu.trigger.single==1) {
 8004fee:	4b52      	ldr	r3, [pc, #328]	; (8005138 <oszi_start+0x290>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d11e      	bne.n	8005034 <oszi_start+0x18c>
          // Button "STOP" wurde gedr�ckt
          // Timer analten
          __HAL_TIM_DISABLE(&htim2);
 8004ff6:	4b53      	ldr	r3, [pc, #332]	; (8005144 <oszi_start+0x29c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6a1a      	ldr	r2, [r3, #32]
 8004ffc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005000:	4013      	ands	r3, r2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10f      	bne.n	8005026 <oszi_start+0x17e>
 8005006:	4b4f      	ldr	r3, [pc, #316]	; (8005144 <oszi_start+0x29c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	f240 4344 	movw	r3, #1092	; 0x444
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d107      	bne.n	8005026 <oszi_start+0x17e>
 8005016:	4b4b      	ldr	r3, [pc, #300]	; (8005144 <oszi_start+0x29c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b49      	ldr	r3, [pc, #292]	; (8005144 <oszi_start+0x29c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
          if(status!=MENU_NO_CHANGE) p_oszi_draw_adc();
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80ca 	beq.w	80051c2 <oszi_start+0x31a>
 800502e:	f000 ff3b 	bl	8005ea8 <p_oszi_draw_adc>
 8005032:	e0c6      	b.n	80051c2 <oszi_start+0x31a>
        }
        else if(Menu.trigger.single==2) {
 8005034:	4b40      	ldr	r3, [pc, #256]	; (8005138 <oszi_start+0x290>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	2b02      	cmp	r3, #2
 800503a:	f040 80c2 	bne.w	80051c2 <oszi_start+0x31a>
          // Button "START" wurde gedr�ckt
          Menu.trigger.single=0;
 800503e:	4b3e      	ldr	r3, [pc, #248]	; (8005138 <oszi_start+0x290>)
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
          ADC_UB.status=ADC_VORLAUF;
 8005044:	4b3e      	ldr	r3, [pc, #248]	; (8005140 <oszi_start+0x298>)
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
          __HAL_TIM_ENABLE(&htim2);
 800504a:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <oszi_start+0x29c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4b3c      	ldr	r3, [pc, #240]	; (8005144 <oszi_start+0x29c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]
          if(status!=MENU_NO_CHANGE) p_oszi_draw_adc();
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80b0 	beq.w	80051c2 <oszi_start+0x31a>
 8005062:	f000 ff21 	bl	8005ea8 <p_oszi_draw_adc>
 8005066:	e0ac      	b.n	80051c2 <oszi_start+0x31a>
        }
      }
      else if(Menu.trigger.mode==0) {
 8005068:	4b33      	ldr	r3, [pc, #204]	; (8005138 <oszi_start+0x290>)
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d16d      	bne.n	800514c <oszi_start+0x2a4>
        //--------------------------------------
        // Trigger-Mode = "NORMAL"
        // Screnn nur zeichnen, nach Triggerevent
        //--------------------------------------
        if(Menu.trigger.single==0) {
 8005070:	4b31      	ldr	r3, [pc, #196]	; (8005138 <oszi_start+0x290>)
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	2b00      	cmp	r3, #0
 8005076:	d125      	bne.n	80050c4 <oszi_start+0x21c>
          if(ADC_UB.status==ADC_READY) {
 8005078:	4b31      	ldr	r3, [pc, #196]	; (8005140 <oszi_start+0x298>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b04      	cmp	r3, #4
 800507e:	d11a      	bne.n	80050b6 <oszi_start+0x20e>
            UB_Led_Toggle(LED_RED);
 8005080:	2001      	movs	r0, #1
 8005082:	f00b fa5d 	bl	8010540 <UB_Led_Toggle>
            p_oszi_sort_adc();
 8005086:	f000 fcb7 	bl	80059f8 <p_oszi_sort_adc>
            p_oszi_fill_fft();
 800508a:	f000 fe75 	bl	8005d78 <p_oszi_fill_fft>
            if(Menu.fft.mode!=0) fft_calc();
 800508e:	4b2a      	ldr	r3, [pc, #168]	; (8005138 <oszi_start+0x290>)
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <oszi_start+0x1f2>
 8005096:	f7fc fbd5 	bl	8001844 <fft_calc>
            p_oszi_draw_adc();
 800509a:	f000 ff05 	bl	8005ea8 <p_oszi_draw_adc>
            ADC_UB.status=ADC_VORLAUF;
 800509e:	4b28      	ldr	r3, [pc, #160]	; (8005140 <oszi_start+0x298>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_ENABLE(&htim2);
 80050a4:	4b27      	ldr	r3, [pc, #156]	; (8005144 <oszi_start+0x29c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b26      	ldr	r3, [pc, #152]	; (8005144 <oszi_start+0x29c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e085      	b.n	80051c2 <oszi_start+0x31a>
          }
          else {
            // oder wenn Menu ver�ndert wurde
            if(status!=MENU_NO_CHANGE) p_oszi_draw_adc();
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 8082 	beq.w	80051c2 <oszi_start+0x31a>
 80050be:	f000 fef3 	bl	8005ea8 <p_oszi_draw_adc>
 80050c2:	e07e      	b.n	80051c2 <oszi_start+0x31a>
          }
        }
        else if(Menu.trigger.single==1) {
 80050c4:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <oszi_start+0x290>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d11d      	bne.n	8005108 <oszi_start+0x260>
          // Button "STOP" wurde gedr�ckt
          // Timer analten
          __HAL_TIM_DISABLE(&htim2);
 80050cc:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <oszi_start+0x29c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10f      	bne.n	80050fc <oszi_start+0x254>
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <oszi_start+0x29c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	f240 4344 	movw	r3, #1092	; 0x444
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d107      	bne.n	80050fc <oszi_start+0x254>
 80050ec:	4b15      	ldr	r3, [pc, #84]	; (8005144 <oszi_start+0x29c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <oszi_start+0x29c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0201 	bic.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
          if(status!=MENU_NO_CHANGE) p_oszi_draw_adc();
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d05f      	beq.n	80051c2 <oszi_start+0x31a>
 8005102:	f000 fed1 	bl	8005ea8 <p_oszi_draw_adc>
 8005106:	e05c      	b.n	80051c2 <oszi_start+0x31a>
        }
        else if(Menu.trigger.single==2) {
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <oszi_start+0x290>)
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	2b02      	cmp	r3, #2
 800510e:	d158      	bne.n	80051c2 <oszi_start+0x31a>
          // Button "START" wurde gedr�ckt
          Menu.trigger.single=0;
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <oszi_start+0x290>)
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
          ADC_UB.status=ADC_VORLAUF;
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <oszi_start+0x298>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
          __HAL_TIM_ENABLE(&htim2);
 800511c:	4b09      	ldr	r3, [pc, #36]	; (8005144 <oszi_start+0x29c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <oszi_start+0x29c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
          if(status!=MENU_NO_CHANGE) p_oszi_draw_adc();
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d047      	beq.n	80051c2 <oszi_start+0x31a>
 8005132:	f000 feb9 	bl	8005ea8 <p_oszi_draw_adc>
 8005136:	e044      	b.n	80051c2 <oszi_start+0x31a>
 8005138:	2000277c 	.word	0x2000277c
 800513c:	2000191c 	.word	0x2000191c
 8005140:	20001dfc 	.word	0x20001dfc
 8005144:	20003510 	.word	0x20003510
 8005148:	40026410 	.word	0x40026410
      else {
        //--------------------------------------
        // Trigger-Mode = "SINGLE"
        // Screnn nur einmal zeichnen, nach Triggerevent
        //--------------------------------------
        if(Menu.trigger.single==3) {
 800514c:	4b29      	ldr	r3, [pc, #164]	; (80051f4 <oszi_start+0x34c>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	2b03      	cmp	r3, #3
 8005152:	d11c      	bne.n	800518e <oszi_start+0x2e6>
          // warten auf Trigger-Event
          if(ADC_UB.status==ADC_READY) {
 8005154:	4b28      	ldr	r3, [pc, #160]	; (80051f8 <oszi_start+0x350>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d112      	bne.n	8005182 <oszi_start+0x2da>
            Menu.trigger.single=4;
 800515c:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <oszi_start+0x34c>)
 800515e:	2204      	movs	r2, #4
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
            UB_Led_Toggle(LED_RED);
 8005162:	2001      	movs	r0, #1
 8005164:	f00b f9ec 	bl	8010540 <UB_Led_Toggle>
            p_oszi_sort_adc();
 8005168:	f000 fc46 	bl	80059f8 <p_oszi_sort_adc>
            p_oszi_fill_fft();
 800516c:	f000 fe04 	bl	8005d78 <p_oszi_fill_fft>
            if(Menu.fft.mode!=0) fft_calc();
 8005170:	4b20      	ldr	r3, [pc, #128]	; (80051f4 <oszi_start+0x34c>)
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <oszi_start+0x2d4>
 8005178:	f7fc fb64 	bl	8001844 <fft_calc>
            p_oszi_draw_adc();
 800517c:	f000 fe94 	bl	8005ea8 <p_oszi_draw_adc>
 8005180:	e01f      	b.n	80051c2 <oszi_start+0x31a>
          }
          else {
            // oder wenn Menu ver�ndert wurde
            if(status!=MENU_NO_CHANGE) p_oszi_draw_adc();
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01c      	beq.n	80051c2 <oszi_start+0x31a>
 8005188:	f000 fe8e 	bl	8005ea8 <p_oszi_draw_adc>
 800518c:	e019      	b.n	80051c2 <oszi_start+0x31a>
          }
        }
        else if(Menu.trigger.single==5) {
 800518e:	4b19      	ldr	r3, [pc, #100]	; (80051f4 <oszi_start+0x34c>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	2b05      	cmp	r3, #5
 8005194:	d110      	bne.n	80051b8 <oszi_start+0x310>
          // Button "Reset" wurde gedr�ckt
          Menu.trigger.single=3;
 8005196:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <oszi_start+0x34c>)
 8005198:	2203      	movs	r2, #3
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
          p_oszi_draw_adc();
 800519c:	f000 fe84 	bl	8005ea8 <p_oszi_draw_adc>
          ADC_UB.status=ADC_VORLAUF;
 80051a0:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <oszi_start+0x350>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
          __HAL_TIM_ENABLE(&htim2);
 80051a6:	4b15      	ldr	r3, [pc, #84]	; (80051fc <oszi_start+0x354>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <oszi_start+0x354>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e004      	b.n	80051c2 <oszi_start+0x31a>
        }
        else {
          // oder wenn Menu ver�ndert wurde
          if(status!=MENU_NO_CHANGE) p_oszi_draw_adc();
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <oszi_start+0x31a>
 80051be:	f000 fe73 	bl	8005ea8 <p_oszi_draw_adc>
        }
      }

      if(GUI.gui_xpos==GUI_XPOS_OFF) {
 80051c2:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <oszi_start+0x358>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d102      	bne.n	80051d0 <oszi_start+0x328>
        // ohne GUI => ohne Transparenz zeichnen
        UB_Graphic2D_Copy1DMA();
 80051ca:	f00b fe19 	bl	8010e00 <UB_Graphic2D_Copy1DMA>
 80051ce:	e004      	b.n	80051da <oszi_start+0x332>
      }
      else {
        // mit GUI => mit Transparenz zeichnen
        UB_Graphic2D_Copy2DMA(Menu.akt_transparenz);
 80051d0:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <oszi_start+0x34c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f00b fe4f 	bl	8010e78 <UB_Graphic2D_Copy2DMA>
      }

      // Refreh vom LCD
      UB_LCD_Refresh();
 80051da:	f00c f843 	bl	8011264 <UB_LCD_Refresh>

      // event. Daten senden
      if(Menu.send.data!=0) {
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <oszi_start+0x34c>)
 80051e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f43f ae6a 	beq.w	8004ebc <oszi_start+0x14>
        p_oszi_send_data();
 80051e8:	f001 f85e 	bl	80062a8 <p_oszi_send_data>
        Menu.send.data=0;
 80051ec:	4b01      	ldr	r3, [pc, #4]	; (80051f4 <oszi_start+0x34c>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	651a      	str	r2, [r3, #80]	; 0x50
    if(GUI_Timer_ms==0) {
 80051f2:	e663      	b.n	8004ebc <oszi_start+0x14>
 80051f4:	2000277c 	.word	0x2000277c
 80051f8:	20001dfc 	.word	0x20001dfc
 80051fc:	20003510 	.word	0x20003510
 8005200:	200022bc 	.word	0x200022bc

08005204 <p_oszi_hw_init>:

//--------------------------------------------------------------
// init der Hardware
//--------------------------------------------------------------
uint32_t p_oszi_hw_init(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
  uint32_t return_val=0;
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]

  // init Touch
  if(UB_Touch_Init()!=SUCCESS) {
 800520e:	f00c faf5 	bl	80117fc <UB_Touch_Init>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <p_oszi_hw_init+0x18>
    return_val=1; // Touch error
 8005218:	2301      	movs	r3, #1
 800521a:	607b      	str	r3, [r7, #4]
  if(ADC_ARRAY_LEN!=SCALE_W) {
    return_val=2; // define error
  }

  // init der LEDs
  UB_Led_Init();
 800521c:	f00b f989 	bl	8010532 <UB_Led_Init>

  // init vom Button
  UB_Button_Init();
 8005220:	f00b f9ae 	bl	8010580 <UB_Button_Init>


  // init vom LCD (und SD-RAM)
  UB_LCD_Init();
 8005224:	f00b fe96 	bl	8010f54 <UB_LCD_Init>
  UB_LCD_LayerInit_Fullscreen();
 8005228:	f00b fed8 	bl	8010fdc <UB_LCD_LayerInit_Fullscreen>
  UB_LCD_SetMode(LANDSCAPE);
 800522c:	2001      	movs	r0, #1
 800522e:	f00c f801 	bl	8011234 <UB_LCD_SetMode>

  // alle Puffer l�schen
   p_oszi_clear_all();
 8005232:	f000 f877 	bl	8005324 <p_oszi_clear_all>

  // init vom ADC
  ADC_Init_ALL();
 8005236:	f7fb fe0d 	bl	8000e54 <ADC_Init_ALL>

  return(return_val);
 800523a:	687b      	ldr	r3, [r7, #4]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <p_oszi_sw_init>:

//--------------------------------------------------------------
// init der Software
//--------------------------------------------------------------
void p_oszi_sw_init(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  //--------------------------------------
  // Default Einstellungen
  //--------------------------------------
  Menu.akt_transparenz=100;
 8005248:	4b34      	ldr	r3, [pc, #208]	; (800531c <p_oszi_sw_init+0xd8>)
 800524a:	2264      	movs	r2, #100	; 0x64
 800524c:	601a      	str	r2, [r3, #0]
  Menu.akt_setting=SETTING_TRIGGER;
 800524e:	4b33      	ldr	r3, [pc, #204]	; (800531c <p_oszi_sw_init+0xd8>)
 8005250:	2200      	movs	r2, #0
 8005252:	605a      	str	r2, [r3, #4]

  Menu.ch1.faktor=2;      // 1v/div
 8005254:	4b31      	ldr	r3, [pc, #196]	; (800531c <p_oszi_sw_init+0xd8>)
 8005256:	2202      	movs	r2, #2
 8005258:	609a      	str	r2, [r3, #8]
  Menu.ch1.visible=0;     // visible=true
 800525a:	4b30      	ldr	r3, [pc, #192]	; (800531c <p_oszi_sw_init+0xd8>)
 800525c:	2200      	movs	r2, #0
 800525e:	60da      	str	r2, [r3, #12]
  Menu.ch1.position=0;
 8005260:	4b2e      	ldr	r3, [pc, #184]	; (800531c <p_oszi_sw_init+0xd8>)
 8005262:	2200      	movs	r2, #0
 8005264:	821a      	strh	r2, [r3, #16]

  Menu.ch2.faktor=2;      // 1v/div
 8005266:	4b2d      	ldr	r3, [pc, #180]	; (800531c <p_oszi_sw_init+0xd8>)
 8005268:	2202      	movs	r2, #2
 800526a:	615a      	str	r2, [r3, #20]
  Menu.ch2.visible=0;     // visible=true
 800526c:	4b2b      	ldr	r3, [pc, #172]	; (800531c <p_oszi_sw_init+0xd8>)
 800526e:	2200      	movs	r2, #0
 8005270:	619a      	str	r2, [r3, #24]
  Menu.ch2.position=-100;
 8005272:	4b2a      	ldr	r3, [pc, #168]	; (800531c <p_oszi_sw_init+0xd8>)
 8005274:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8005278:	839a      	strh	r2, [r3, #28]

  Menu.timebase.value=12;  // 5ms/div
 800527a:	4b28      	ldr	r3, [pc, #160]	; (800531c <p_oszi_sw_init+0xd8>)
 800527c:	220c      	movs	r2, #12
 800527e:	621a      	str	r2, [r3, #32]

  Menu.trigger.source=0;  // trigger=CH1
 8005280:	4b26      	ldr	r3, [pc, #152]	; (800531c <p_oszi_sw_init+0xd8>)
 8005282:	2200      	movs	r2, #0
 8005284:	625a      	str	r2, [r3, #36]	; 0x24
  Menu.trigger.edge=0;    // hi-flanke
 8005286:	4b25      	ldr	r3, [pc, #148]	; (800531c <p_oszi_sw_init+0xd8>)
 8005288:	2200      	movs	r2, #0
 800528a:	629a      	str	r2, [r3, #40]	; 0x28
  Menu.trigger.mode=1;    // auto
 800528c:	4b23      	ldr	r3, [pc, #140]	; (800531c <p_oszi_sw_init+0xd8>)
 800528e:	2201      	movs	r2, #1
 8005290:	62da      	str	r2, [r3, #44]	; 0x2c
  Menu.trigger.single=0;
 8005292:	4b22      	ldr	r3, [pc, #136]	; (800531c <p_oszi_sw_init+0xd8>)
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
  Menu.trigger.value_ch1=2048;
 8005298:	4b20      	ldr	r3, [pc, #128]	; (800531c <p_oszi_sw_init+0xd8>)
 800529a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800529e:	869a      	strh	r2, [r3, #52]	; 0x34
  Menu.trigger.value_ch2=2048;
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <p_oszi_sw_init+0xd8>)
 80052a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a6:	86da      	strh	r2, [r3, #54]	; 0x36

  Menu.cursor.mode=0;     // cursor Off
 80052a8:	4b1c      	ldr	r3, [pc, #112]	; (800531c <p_oszi_sw_init+0xd8>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
  Menu.cursor.p1=2048;
 80052ae:	4b1b      	ldr	r3, [pc, #108]	; (800531c <p_oszi_sw_init+0xd8>)
 80052b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  Menu.cursor.p2=3072;
 80052b6:	4b19      	ldr	r3, [pc, #100]	; (800531c <p_oszi_sw_init+0xd8>)
 80052b8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80052bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  Menu.cursor.t1=1700;
 80052be:	4b17      	ldr	r3, [pc, #92]	; (800531c <p_oszi_sw_init+0xd8>)
 80052c0:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80052c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  Menu.cursor.t2=2300;
 80052c8:	4b14      	ldr	r3, [pc, #80]	; (800531c <p_oszi_sw_init+0xd8>)
 80052ca:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80052ce:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  Menu.cursor.f1=1000;
 80052d2:	4b12      	ldr	r3, [pc, #72]	; (800531c <p_oszi_sw_init+0xd8>)
 80052d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  Menu.send.mode=0; // nur CH1
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <p_oszi_sw_init+0xd8>)
 80052de:	2200      	movs	r2, #0
 80052e0:	649a      	str	r2, [r3, #72]	; 0x48
  Menu.send.screen=SETTING_TRIGGER;
 80052e2:	4b0e      	ldr	r3, [pc, #56]	; (800531c <p_oszi_sw_init+0xd8>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	64da      	str	r2, [r3, #76]	; 0x4c
  Menu.send.data=0;
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <p_oszi_sw_init+0xd8>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	651a      	str	r2, [r3, #80]	; 0x50

  Menu.fft.mode=0; // FFT=CH1
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <p_oszi_sw_init+0xd8>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54

  GUI.gui_xpos=GUI_XPOS_OFF;  // GUI ausgeblendet
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <p_oszi_sw_init+0xdc>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
  GUI.akt_menu=MM_NONE;
 80052fa:	4b09      	ldr	r3, [pc, #36]	; (8005320 <p_oszi_sw_init+0xdc>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	711a      	strb	r2, [r3, #4]
  GUI.old_menu=MM_CH1;
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <p_oszi_sw_init+0xdc>)
 8005302:	2201      	movs	r2, #1
 8005304:	715a      	strb	r2, [r3, #5]
  GUI.akt_button=GUI_BTN_NONE;
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <p_oszi_sw_init+0xdc>)
 8005308:	2200      	movs	r2, #0
 800530a:	719a      	strb	r2, [r3, #6]
  GUI.old_button=GUI_BTN_NONE;
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <p_oszi_sw_init+0xdc>)
 800530e:	2200      	movs	r2, #0
 8005310:	71da      	strb	r2, [r3, #7]
}
 8005312:	bf00      	nop
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	2000277c 	.word	0x2000277c
 8005320:	200022bc 	.word	0x200022bc

08005324 <p_oszi_clear_all>:

//--------------------------------------------------------------
// l�scht alle Speicher
//--------------------------------------------------------------
void p_oszi_clear_all(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  UB_LCD_SetLayer_1();
 8005328:	f00b fe60 	bl	8010fec <UB_LCD_SetLayer_1>
  UB_LCD_FillLayer(BACKGROUND_COL);
 800532c:	2000      	movs	r0, #0
 800532e:	f00b febd 	bl	80110ac <UB_LCD_FillLayer>
  UB_LCD_SetLayer_2();
 8005332:	f00b fe6d 	bl	8011010 <UB_LCD_SetLayer_2>
  UB_LCD_SetTransparency(255);
 8005336:	20ff      	movs	r0, #255	; 0xff
 8005338:	f00b feca 	bl	80110d0 <UB_LCD_SetTransparency>
  UB_LCD_FillLayer(BACKGROUND_COL);
 800533c:	2000      	movs	r0, #0
 800533e:	f00b feb5 	bl	80110ac <UB_LCD_FillLayer>
  //UB_LCD_Copy_Layer2_to_Layer1();
  UB_LCD_SetLayer_Menu();
 8005342:	f00b fe79 	bl	8011038 <UB_LCD_SetLayer_Menu>
  UB_LCD_FillLayer(BACKGROUND_COL);
 8005346:	2000      	movs	r0, #0
 8005348:	f00b feb0 	bl	80110ac <UB_LCD_FillLayer>
  UB_LCD_SetLayer_ADC();
 800534c:	f00b fe84 	bl	8011058 <UB_LCD_SetLayer_ADC>
  UB_LCD_FillLayer(BACKGROUND_COL);
 8005350:	2000      	movs	r0, #0
 8005352:	f00b feab 	bl	80110ac <UB_LCD_FillLayer>
  UB_LCD_SetLayer_Back();
 8005356:	f00b fe8f 	bl	8011078 <UB_LCD_SetLayer_Back>
}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}

0800535e <p_oszi_draw_background>:
// zeichnet den Hintergrund vom Oszi
// (Skala, Cursor, Men�s usw)
// Zieladresse im SD-RAM = [MENU]
//--------------------------------------------------------------
void p_oszi_draw_background(void)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	af00      	add	r7, sp, #0

  UB_LCD_SetLayer_Menu();
 8005362:	f00b fe69 	bl	8011038 <UB_LCD_SetLayer_Menu>
  UB_LCD_FillLayer(BACKGROUND_COL);
 8005366:	2000      	movs	r0, #0
 8005368:	f00b fea0 	bl	80110ac <UB_LCD_FillLayer>

  // Draw the GUI first
  menu_draw_all();
 800536c:	f7fd f84c 	bl	8002408 <menu_draw_all>
  // then draw the scale and cursor
  p_oszi_draw_scale();
 8005370:	f000 f804 	bl	800537c <p_oszi_draw_scale>

  UB_LCD_SetLayer_Back();
 8005374:	f00b fe80 	bl	8011078 <UB_LCD_SetLayer_Back>
}
 8005378:	bf00      	nop
 800537a:	bd80      	pop	{r7, pc}

0800537c <p_oszi_draw_scale>:

//--------------------------------------------------------------
// draws the scale and cursors from the oscillator
//--------------------------------------------------------------
void p_oszi_draw_scale(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af02      	add	r7, sp, #8
  uint32_t n,m;
  uint16_t xs,ys;
  int16_t signed_int;

  xs=SCALE_START_X;
 8005382:	230d      	movs	r3, #13
 8005384:	80bb      	strh	r3, [r7, #4]
  ys=SCALE_START_Y;
 8005386:	2309      	movs	r3, #9
 8005388:	807b      	strh	r3, [r7, #2]

  //---------------------------------------------
  // grid of individual points
  //---------------------------------------------
  for(m=0;m<=SCALE_H;m+=SCALE_SPACE) {
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	e01b      	b.n	80053c8 <p_oszi_draw_scale+0x4c>
    for(n=0;n<=SCALE_W;n+=SCALE_SPACE) {
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e011      	b.n	80053ba <p_oszi_draw_scale+0x3e>
      UB_Graphic2D_DrawPixelNormal(m+xs,n+ys,SCALE_COL);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	b29a      	uxth	r2, r3
 800539a:	88bb      	ldrh	r3, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	b298      	uxth	r0, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	887b      	ldrh	r3, [r7, #2]
 80053a6:	4413      	add	r3, r2
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f24f 72de 	movw	r2, #63454	; 0xf7de
 80053ae:	4619      	mov	r1, r3
 80053b0:	f00b fa20 	bl	80107f4 <UB_Graphic2D_DrawPixelNormal>
    for(n=0;n<=SCALE_W;n+=SCALE_SPACE) {
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3319      	adds	r3, #25
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80053c0:	d9e9      	bls.n	8005396 <p_oszi_draw_scale+0x1a>
  for(m=0;m<=SCALE_H;m+=SCALE_SPACE) {
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	3319      	adds	r3, #25
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2bc8      	cmp	r3, #200	; 0xc8
 80053cc:	d9e0      	bls.n	8005390 <p_oszi_draw_scale+0x14>
  }

  //---------------------------------------------
  // X-axis (horizontal center line)
  //---------------------------------------------
  signed_int=SCALE_Y_MITTE+xs;
 80053ce:	88bb      	ldrh	r3, [r7, #4]
 80053d0:	3364      	adds	r3, #100	; 0x64
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	80fb      	strh	r3, [r7, #6]
  p_oszi_draw_line_h(signed_int,SCALE_COL,0);
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	2200      	movs	r2, #0
 80053da:	f24f 71de 	movw	r1, #63454	; 0xf7de
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fa52 	bl	8005888 <p_oszi_draw_line_h>

  //---------------------------------------------
  // Y-axis (vertical center line)
  //---------------------------------------------
  signed_int=SCALE_X_MITTE+ys;
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	3396      	adds	r3, #150	; 0x96
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	80fb      	strh	r3, [r7, #6]
  p_oszi_draw_line_v(signed_int,SCALE_COL,0);
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f24f 71de 	movw	r1, #63454	; 0xf7de
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 faa4 	bl	8005942 <p_oszi_draw_line_v>
  //---------------------------------------------
  // border
  //---------------------------------------------
  // unterste linie

  UB_Graphic2D_DrawStraightDMA(xs-1,ys-1,SCALE_W+2,LCD_DIR_HORIZONTAL,SCALE_COL);
 80053fa:	88bb      	ldrh	r3, [r7, #4]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b298      	uxth	r0, r3
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	3b01      	subs	r3, #1
 8005404:	b299      	uxth	r1, r3
 8005406:	f24f 73de 	movw	r3, #63454	; 0xf7de
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2300      	movs	r3, #0
 800540e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8005412:	f00b fb1d 	bl	8010a50 <UB_Graphic2D_DrawStraightDMA>
  // oberste linie
  UB_Graphic2D_DrawStraightDMA(xs+SCALE_H+1,ys-1,SCALE_W+2,LCD_DIR_HORIZONTAL,SCALE_COL);
 8005416:	88bb      	ldrh	r3, [r7, #4]
 8005418:	33c9      	adds	r3, #201	; 0xc9
 800541a:	b298      	uxth	r0, r3
 800541c:	887b      	ldrh	r3, [r7, #2]
 800541e:	3b01      	subs	r3, #1
 8005420:	b299      	uxth	r1, r3
 8005422:	f24f 73de 	movw	r3, #63454	; 0xf7de
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2300      	movs	r3, #0
 800542a:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800542e:	f00b fb0f 	bl	8010a50 <UB_Graphic2D_DrawStraightDMA>
  // linke linie
  UB_Graphic2D_DrawStraightDMA(xs-1,ys-1,SCALE_H+2,LCD_DIR_VERTICAL,SCALE_COL);
 8005432:	88bb      	ldrh	r3, [r7, #4]
 8005434:	3b01      	subs	r3, #1
 8005436:	b298      	uxth	r0, r3
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	3b01      	subs	r3, #1
 800543c:	b299      	uxth	r1, r3
 800543e:	f24f 73de 	movw	r3, #63454	; 0xf7de
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	2301      	movs	r3, #1
 8005446:	22ca      	movs	r2, #202	; 0xca
 8005448:	f00b fb02 	bl	8010a50 <UB_Graphic2D_DrawStraightDMA>
  // rechte linie
  UB_Graphic2D_DrawStraightDMA(xs-1,ys+SCALE_W+1,SCALE_H+2,LCD_DIR_VERTICAL,SCALE_COL);
 800544c:	88bb      	ldrh	r3, [r7, #4]
 800544e:	3b01      	subs	r3, #1
 8005450:	b298      	uxth	r0, r3
 8005452:	887b      	ldrh	r3, [r7, #2]
 8005454:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8005458:	b299      	uxth	r1, r3
 800545a:	f24f 73de 	movw	r3, #63454	; 0xf7de
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2301      	movs	r3, #1
 8005462:	22ca      	movs	r2, #202	; 0xca
 8005464:	f00b faf4 	bl	8010a50 <UB_Graphic2D_DrawStraightDMA>


  //---------------------------------------------
  // trigger line (always visible)
  //---------------------------------------------
  if(Menu.trigger.source==0) {
 8005468:	4ba7      	ldr	r3, [pc, #668]	; (8005708 <p_oszi_draw_scale+0x38c>)
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	2b00      	cmp	r3, #0
 800546e:	d134      	bne.n	80054da <p_oszi_draw_scale+0x15e>
    signed_int=oszi_adc2pixel(Menu.trigger.value_ch1, Menu.ch1.faktor);
 8005470:	4ba5      	ldr	r3, [pc, #660]	; (8005708 <p_oszi_draw_scale+0x38c>)
 8005472:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005474:	4aa4      	ldr	r2, [pc, #656]	; (8005708 <p_oszi_draw_scale+0x38c>)
 8005476:	6892      	ldr	r2, [r2, #8]
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fe30 	bl	80060e0 <oszi_adc2pixel>
 8005480:	4603      	mov	r3, r0
 8005482:	80fb      	strh	r3, [r7, #6]
    signed_int+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch1.position;
 8005484:	4ba0      	ldr	r3, [pc, #640]	; (8005708 <p_oszi_draw_scale+0x38c>)
 8005486:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800548a:	b29a      	uxth	r2, r3
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	4413      	add	r3, r2
 8005490:	b29b      	uxth	r3, r3
 8005492:	3371      	adds	r3, #113	; 0x71
 8005494:	b29b      	uxth	r3, r3
 8005496:	80fb      	strh	r3, [r7, #6]
    if(signed_int<SCALE_START_X) signed_int=SCALE_START_X;
 8005498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800549c:	2b0c      	cmp	r3, #12
 800549e:	dc01      	bgt.n	80054a4 <p_oszi_draw_scale+0x128>
 80054a0:	230d      	movs	r3, #13
 80054a2:	80fb      	strh	r3, [r7, #6]
    if(signed_int>SCALE_MX_PIXEL) signed_int=SCALE_MX_PIXEL;
 80054a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a8:	2bd5      	cmp	r3, #213	; 0xd5
 80054aa:	dd01      	ble.n	80054b0 <p_oszi_draw_scale+0x134>
 80054ac:	23d5      	movs	r3, #213	; 0xd5
 80054ae:	80fb      	strh	r3, [r7, #6]

    p_oszi_draw_line_h(signed_int,ADC_CH1_COL,1);
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 f9e5 	bl	8005888 <p_oszi_draw_line_h>
    UB_Font_DrawString(signed_int-3,0,"T",&Arial_7x10,ADC_CH1_COL,BACKGROUND_COL);
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	3b03      	subs	r3, #3
 80054c2:	b298      	uxth	r0, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4b8f      	ldr	r3, [pc, #572]	; (800570c <p_oszi_draw_scale+0x390>)
 80054d0:	4a8f      	ldr	r2, [pc, #572]	; (8005710 <p_oszi_draw_scale+0x394>)
 80054d2:	2100      	movs	r1, #0
 80054d4:	f00b f946 	bl	8010764 <UB_Font_DrawString>
 80054d8:	e037      	b.n	800554a <p_oszi_draw_scale+0x1ce>
  }
  else if(Menu.trigger.source==1) {
 80054da:	4b8b      	ldr	r3, [pc, #556]	; (8005708 <p_oszi_draw_scale+0x38c>)
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d133      	bne.n	800554a <p_oszi_draw_scale+0x1ce>
    signed_int=oszi_adc2pixel(Menu.trigger.value_ch2, Menu.ch2.faktor);
 80054e2:	4b89      	ldr	r3, [pc, #548]	; (8005708 <p_oszi_draw_scale+0x38c>)
 80054e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e6:	4a88      	ldr	r2, [pc, #544]	; (8005708 <p_oszi_draw_scale+0x38c>)
 80054e8:	6952      	ldr	r2, [r2, #20]
 80054ea:	4611      	mov	r1, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fdf7 	bl	80060e0 <oszi_adc2pixel>
 80054f2:	4603      	mov	r3, r0
 80054f4:	80fb      	strh	r3, [r7, #6]
    signed_int+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch2.position;
 80054f6:	4b84      	ldr	r3, [pc, #528]	; (8005708 <p_oszi_draw_scale+0x38c>)
 80054f8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	4413      	add	r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	3371      	adds	r3, #113	; 0x71
 8005506:	b29b      	uxth	r3, r3
 8005508:	80fb      	strh	r3, [r7, #6]
    if(signed_int<SCALE_START_X) signed_int=SCALE_START_X;
 800550a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	dc01      	bgt.n	8005516 <p_oszi_draw_scale+0x19a>
 8005512:	230d      	movs	r3, #13
 8005514:	80fb      	strh	r3, [r7, #6]
    if(signed_int>SCALE_MX_PIXEL) signed_int=SCALE_MX_PIXEL;
 8005516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551a:	2bd5      	cmp	r3, #213	; 0xd5
 800551c:	dd01      	ble.n	8005522 <p_oszi_draw_scale+0x1a6>
 800551e:	23d5      	movs	r3, #213	; 0xd5
 8005520:	80fb      	strh	r3, [r7, #6]

    p_oszi_draw_line_h(signed_int,ADC_CH2_COL,1);
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	2201      	movs	r2, #1
 8005526:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f9ac 	bl	8005888 <p_oszi_draw_line_h>
    UB_Font_DrawString(signed_int-3,0,"T",&Arial_7x10,ADC_CH2_COL,BACKGROUND_COL);
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	3b03      	subs	r3, #3
 8005534:	b298      	uxth	r0, r3
 8005536:	2300      	movs	r3, #0
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	4b72      	ldr	r3, [pc, #456]	; (800570c <p_oszi_draw_scale+0x390>)
 8005542:	4a73      	ldr	r2, [pc, #460]	; (8005710 <p_oszi_draw_scale+0x394>)
 8005544:	2100      	movs	r1, #0
 8005546:	f00b f90d 	bl	8010764 <UB_Font_DrawString>
  }

  //---------------------------------------------
  // cursor lines (only if activated)
  //---------------------------------------------
  if(Menu.cursor.mode==1) {
 800554a:	4b6f      	ldr	r3, [pc, #444]	; (8005708 <p_oszi_draw_scale+0x38c>)
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	2b01      	cmp	r3, #1
 8005550:	d16a      	bne.n	8005628 <p_oszi_draw_scale+0x2ac>
    //------------------------------- 
    // Cursor (CH1)
    //-------------------------------
    signed_int=oszi_adc2pixel(Menu.cursor.p1, Menu.ch1.faktor);
 8005552:	4b6d      	ldr	r3, [pc, #436]	; (8005708 <p_oszi_draw_scale+0x38c>)
 8005554:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005556:	4a6c      	ldr	r2, [pc, #432]	; (8005708 <p_oszi_draw_scale+0x38c>)
 8005558:	6892      	ldr	r2, [r2, #8]
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fdbf 	bl	80060e0 <oszi_adc2pixel>
 8005562:	4603      	mov	r3, r0
 8005564:	80fb      	strh	r3, [r7, #6]
    signed_int+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch1.position;
 8005566:	4b68      	ldr	r3, [pc, #416]	; (8005708 <p_oszi_draw_scale+0x38c>)
 8005568:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800556c:	b29a      	uxth	r2, r3
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	4413      	add	r3, r2
 8005572:	b29b      	uxth	r3, r3
 8005574:	3371      	adds	r3, #113	; 0x71
 8005576:	b29b      	uxth	r3, r3
 8005578:	80fb      	strh	r3, [r7, #6]
    if(signed_int<SCALE_START_X) signed_int=SCALE_START_X;
 800557a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	dc01      	bgt.n	8005586 <p_oszi_draw_scale+0x20a>
 8005582:	230d      	movs	r3, #13
 8005584:	80fb      	strh	r3, [r7, #6]
    if(signed_int>SCALE_MX_PIXEL) signed_int=SCALE_MX_PIXEL;
 8005586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800558a:	2bd5      	cmp	r3, #213	; 0xd5
 800558c:	dd01      	ble.n	8005592 <p_oszi_draw_scale+0x216>
 800558e:	23d5      	movs	r3, #213	; 0xd5
 8005590:	80fb      	strh	r3, [r7, #6]

    p_oszi_draw_line_h(signed_int,CURSOR_COL,2);
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	2202      	movs	r2, #2
 8005596:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f974 	bl	8005888 <p_oszi_draw_line_h>
    UB_Font_DrawString(signed_int-3,312,"A",&Arial_7x10,CURSOR_COL,BACKGROUND_COL);
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	3b03      	subs	r3, #3
 80055a4:	b298      	uxth	r0, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	4b56      	ldr	r3, [pc, #344]	; (800570c <p_oszi_draw_scale+0x390>)
 80055b2:	4a58      	ldr	r2, [pc, #352]	; (8005714 <p_oszi_draw_scale+0x398>)
 80055b4:	f44f 719c 	mov.w	r1, #312	; 0x138
 80055b8:	f00b f8d4 	bl	8010764 <UB_Font_DrawString>

    signed_int=oszi_adc2pixel(Menu.cursor.p2, Menu.ch1.faktor);
 80055bc:	4b52      	ldr	r3, [pc, #328]	; (8005708 <p_oszi_draw_scale+0x38c>)
 80055be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c0:	4a51      	ldr	r2, [pc, #324]	; (8005708 <p_oszi_draw_scale+0x38c>)
 80055c2:	6892      	ldr	r2, [r2, #8]
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fd8a 	bl	80060e0 <oszi_adc2pixel>
 80055cc:	4603      	mov	r3, r0
 80055ce:	80fb      	strh	r3, [r7, #6]
    signed_int+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch1.position;
 80055d0:	4b4d      	ldr	r3, [pc, #308]	; (8005708 <p_oszi_draw_scale+0x38c>)
 80055d2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	4413      	add	r3, r2
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3371      	adds	r3, #113	; 0x71
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	80fb      	strh	r3, [r7, #6]
    if(signed_int<SCALE_START_X) signed_int=SCALE_START_X;
 80055e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055e8:	2b0c      	cmp	r3, #12
 80055ea:	dc01      	bgt.n	80055f0 <p_oszi_draw_scale+0x274>
 80055ec:	230d      	movs	r3, #13
 80055ee:	80fb      	strh	r3, [r7, #6]
    if(signed_int>SCALE_MX_PIXEL) signed_int=SCALE_MX_PIXEL;
 80055f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055f4:	2bd5      	cmp	r3, #213	; 0xd5
 80055f6:	dd01      	ble.n	80055fc <p_oszi_draw_scale+0x280>
 80055f8:	23d5      	movs	r3, #213	; 0xd5
 80055fa:	80fb      	strh	r3, [r7, #6]

    p_oszi_draw_line_h(signed_int,CURSOR_COL,2);
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	2202      	movs	r2, #2
 8005600:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f93f 	bl	8005888 <p_oszi_draw_line_h>
    UB_Font_DrawString(signed_int-3,312,"B",&Arial_7x10,CURSOR_COL,BACKGROUND_COL);
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	3b03      	subs	r3, #3
 800560e:	b298      	uxth	r0, r3
 8005610:	2300      	movs	r3, #0
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	4b3c      	ldr	r3, [pc, #240]	; (800570c <p_oszi_draw_scale+0x390>)
 800561c:	4a3e      	ldr	r2, [pc, #248]	; (8005718 <p_oszi_draw_scale+0x39c>)
 800561e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8005622:	f00b f89f 	bl	8010764 <UB_Font_DrawString>
    if(signed_int>(FFT_START_Y+FFT_VISIBLE_LENGTH)) signed_int=(FFT_START_Y+FFT_VISIBLE_LENGTH);

    p_oszi_draw_line_v(signed_int,CURSOR_COL,2);
    UB_Font_DrawString(215,signed_int-3,"A",&Arial_7x10,CURSOR_COL,BACKGROUND_COL);
  }
}
 8005626:	e120      	b.n	800586a <p_oszi_draw_scale+0x4ee>
  else if(Menu.cursor.mode==2) {
 8005628:	4b37      	ldr	r3, [pc, #220]	; (8005708 <p_oszi_draw_scale+0x38c>)
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	2b02      	cmp	r3, #2
 800562e:	d175      	bne.n	800571c <p_oszi_draw_scale+0x3a0>
    signed_int=oszi_adc2pixel(Menu.cursor.p1, Menu.ch2.faktor);
 8005630:	4b35      	ldr	r3, [pc, #212]	; (8005708 <p_oszi_draw_scale+0x38c>)
 8005632:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005634:	4a34      	ldr	r2, [pc, #208]	; (8005708 <p_oszi_draw_scale+0x38c>)
 8005636:	6952      	ldr	r2, [r2, #20]
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fd50 	bl	80060e0 <oszi_adc2pixel>
 8005640:	4603      	mov	r3, r0
 8005642:	80fb      	strh	r3, [r7, #6]
    signed_int+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch2.position;
 8005644:	4b30      	ldr	r3, [pc, #192]	; (8005708 <p_oszi_draw_scale+0x38c>)
 8005646:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800564a:	b29a      	uxth	r2, r3
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	4413      	add	r3, r2
 8005650:	b29b      	uxth	r3, r3
 8005652:	3371      	adds	r3, #113	; 0x71
 8005654:	b29b      	uxth	r3, r3
 8005656:	80fb      	strh	r3, [r7, #6]
    if(signed_int<SCALE_START_X) signed_int=SCALE_START_X;
 8005658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	dc01      	bgt.n	8005664 <p_oszi_draw_scale+0x2e8>
 8005660:	230d      	movs	r3, #13
 8005662:	80fb      	strh	r3, [r7, #6]
    if(signed_int>SCALE_MX_PIXEL) signed_int=SCALE_MX_PIXEL;
 8005664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005668:	2bd5      	cmp	r3, #213	; 0xd5
 800566a:	dd01      	ble.n	8005670 <p_oszi_draw_scale+0x2f4>
 800566c:	23d5      	movs	r3, #213	; 0xd5
 800566e:	80fb      	strh	r3, [r7, #6]
    p_oszi_draw_line_h(signed_int,CURSOR_COL,2);
 8005670:	88fb      	ldrh	r3, [r7, #6]
 8005672:	2202      	movs	r2, #2
 8005674:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f905 	bl	8005888 <p_oszi_draw_line_h>
    UB_Font_DrawString(signed_int-3,312,"A",&Arial_7x10,CURSOR_COL,BACKGROUND_COL);
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	3b03      	subs	r3, #3
 8005682:	b298      	uxth	r0, r3
 8005684:	2300      	movs	r3, #0
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	4b1f      	ldr	r3, [pc, #124]	; (800570c <p_oszi_draw_scale+0x390>)
 8005690:	4a20      	ldr	r2, [pc, #128]	; (8005714 <p_oszi_draw_scale+0x398>)
 8005692:	f44f 719c 	mov.w	r1, #312	; 0x138
 8005696:	f00b f865 	bl	8010764 <UB_Font_DrawString>
    signed_int=oszi_adc2pixel(Menu.cursor.p2, Menu.ch2.faktor);
 800569a:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <p_oszi_draw_scale+0x38c>)
 800569c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569e:	4a1a      	ldr	r2, [pc, #104]	; (8005708 <p_oszi_draw_scale+0x38c>)
 80056a0:	6952      	ldr	r2, [r2, #20]
 80056a2:	4611      	mov	r1, r2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fd1b 	bl	80060e0 <oszi_adc2pixel>
 80056aa:	4603      	mov	r3, r0
 80056ac:	80fb      	strh	r3, [r7, #6]
    signed_int+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch2.position;
 80056ae:	4b16      	ldr	r3, [pc, #88]	; (8005708 <p_oszi_draw_scale+0x38c>)
 80056b0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	4413      	add	r3, r2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3371      	adds	r3, #113	; 0x71
 80056be:	b29b      	uxth	r3, r3
 80056c0:	80fb      	strh	r3, [r7, #6]
    if(signed_int<SCALE_START_X) signed_int=SCALE_START_X;
 80056c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	dc01      	bgt.n	80056ce <p_oszi_draw_scale+0x352>
 80056ca:	230d      	movs	r3, #13
 80056cc:	80fb      	strh	r3, [r7, #6]
    if(signed_int>SCALE_MX_PIXEL) signed_int=SCALE_MX_PIXEL;
 80056ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d2:	2bd5      	cmp	r3, #213	; 0xd5
 80056d4:	dd01      	ble.n	80056da <p_oszi_draw_scale+0x35e>
 80056d6:	23d5      	movs	r3, #213	; 0xd5
 80056d8:	80fb      	strh	r3, [r7, #6]
    p_oszi_draw_line_h(signed_int,CURSOR_COL,2);
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	2202      	movs	r2, #2
 80056de:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f8d0 	bl	8005888 <p_oszi_draw_line_h>
    UB_Font_DrawString(signed_int-3,312,"B",&Arial_7x10,CURSOR_COL,BACKGROUND_COL);
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	3b03      	subs	r3, #3
 80056ec:	b298      	uxth	r0, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <p_oszi_draw_scale+0x390>)
 80056fa:	4a07      	ldr	r2, [pc, #28]	; (8005718 <p_oszi_draw_scale+0x39c>)
 80056fc:	f44f 719c 	mov.w	r1, #312	; 0x138
 8005700:	f00b f830 	bl	8010764 <UB_Font_DrawString>
}
 8005704:	e0b1      	b.n	800586a <p_oszi_draw_scale+0x4ee>
 8005706:	bf00      	nop
 8005708:	2000277c 	.word	0x2000277c
 800570c:	20000060 	.word	0x20000060
 8005710:	08012afc 	.word	0x08012afc
 8005714:	08012b00 	.word	0x08012b00
 8005718:	08012b04 	.word	0x08012b04
  else if(Menu.cursor.mode==3) {
 800571c:	4b55      	ldr	r3, [pc, #340]	; (8005874 <p_oszi_draw_scale+0x4f8>)
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	2b03      	cmp	r3, #3
 8005722:	d16c      	bne.n	80057fe <p_oszi_draw_scale+0x482>
    signed_int=Menu.cursor.t1*FAKTOR_T;
 8005724:	4b53      	ldr	r3, [pc, #332]	; (8005874 <p_oszi_draw_scale+0x4f8>)
 8005726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800572a:	461a      	mov	r2, r3
 800572c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005730:	fb03 f302 	mul.w	r3, r3, r2
 8005734:	4a50      	ldr	r2, [pc, #320]	; (8005878 <p_oszi_draw_scale+0x4fc>)
 8005736:	fb82 1203 	smull	r1, r2, r2, r3
 800573a:	441a      	add	r2, r3
 800573c:	12d2      	asrs	r2, r2, #11
 800573e:	17db      	asrs	r3, r3, #31
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	80fb      	strh	r3, [r7, #6]
    signed_int+=SCALE_START_Y;
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	3309      	adds	r3, #9
 8005748:	b29b      	uxth	r3, r3
 800574a:	80fb      	strh	r3, [r7, #6]
    if(signed_int<SCALE_START_Y) signed_int=SCALE_START_Y;
 800574c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005750:	2b08      	cmp	r3, #8
 8005752:	dc01      	bgt.n	8005758 <p_oszi_draw_scale+0x3dc>
 8005754:	2309      	movs	r3, #9
 8005756:	80fb      	strh	r3, [r7, #6]
    if(signed_int>SCALE_MY_PIXEL) signed_int=SCALE_MY_PIXEL;
 8005758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800575c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8005760:	db02      	blt.n	8005768 <p_oszi_draw_scale+0x3ec>
 8005762:	f240 1335 	movw	r3, #309	; 0x135
 8005766:	80fb      	strh	r3, [r7, #6]
    p_oszi_draw_line_v(signed_int,CURSOR_COL,2);
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	2202      	movs	r2, #2
 800576c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8005770:	4618      	mov	r0, r3
 8005772:	f000 f8e6 	bl	8005942 <p_oszi_draw_line_v>
    UB_Font_DrawString(215,signed_int-3,"A",&Arial_7x10,CURSOR_COL,BACKGROUND_COL);
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	3b03      	subs	r3, #3
 800577a:	b299      	uxth	r1, r3
 800577c:	2300      	movs	r3, #0
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	4b3d      	ldr	r3, [pc, #244]	; (800587c <p_oszi_draw_scale+0x500>)
 8005788:	4a3d      	ldr	r2, [pc, #244]	; (8005880 <p_oszi_draw_scale+0x504>)
 800578a:	20d7      	movs	r0, #215	; 0xd7
 800578c:	f00a ffea 	bl	8010764 <UB_Font_DrawString>
    signed_int=Menu.cursor.t2*FAKTOR_T;
 8005790:	4b38      	ldr	r3, [pc, #224]	; (8005874 <p_oszi_draw_scale+0x4f8>)
 8005792:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005796:	461a      	mov	r2, r3
 8005798:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800579c:	fb03 f302 	mul.w	r3, r3, r2
 80057a0:	4a35      	ldr	r2, [pc, #212]	; (8005878 <p_oszi_draw_scale+0x4fc>)
 80057a2:	fb82 1203 	smull	r1, r2, r2, r3
 80057a6:	441a      	add	r2, r3
 80057a8:	12d2      	asrs	r2, r2, #11
 80057aa:	17db      	asrs	r3, r3, #31
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	80fb      	strh	r3, [r7, #6]
    signed_int+=SCALE_START_Y;
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	3309      	adds	r3, #9
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	80fb      	strh	r3, [r7, #6]
    if(signed_int<SCALE_START_Y) signed_int=SCALE_START_Y;
 80057b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057bc:	2b08      	cmp	r3, #8
 80057be:	dc01      	bgt.n	80057c4 <p_oszi_draw_scale+0x448>
 80057c0:	2309      	movs	r3, #9
 80057c2:	80fb      	strh	r3, [r7, #6]
    if(signed_int>SCALE_MY_PIXEL) signed_int=SCALE_MY_PIXEL;
 80057c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057c8:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80057cc:	db02      	blt.n	80057d4 <p_oszi_draw_scale+0x458>
 80057ce:	f240 1335 	movw	r3, #309	; 0x135
 80057d2:	80fb      	strh	r3, [r7, #6]
    p_oszi_draw_line_v(signed_int,CURSOR_COL,2);
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f8b0 	bl	8005942 <p_oszi_draw_line_v>
    UB_Font_DrawString(215,signed_int-3,"B",&Arial_7x10,CURSOR_COL,BACKGROUND_COL);
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	3b03      	subs	r3, #3
 80057e6:	b299      	uxth	r1, r3
 80057e8:	2300      	movs	r3, #0
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	4b22      	ldr	r3, [pc, #136]	; (800587c <p_oszi_draw_scale+0x500>)
 80057f4:	4a23      	ldr	r2, [pc, #140]	; (8005884 <p_oszi_draw_scale+0x508>)
 80057f6:	20d7      	movs	r0, #215	; 0xd7
 80057f8:	f00a ffb4 	bl	8010764 <UB_Font_DrawString>
}
 80057fc:	e035      	b.n	800586a <p_oszi_draw_scale+0x4ee>
  else if(Menu.cursor.mode==4) {
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <p_oszi_draw_scale+0x4f8>)
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	2b04      	cmp	r3, #4
 8005804:	d131      	bne.n	800586a <p_oszi_draw_scale+0x4ee>
    signed_int=Menu.cursor.f1*FAKTOR_F;
 8005806:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <p_oszi_draw_scale+0x4f8>)
 8005808:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	4a1a      	ldr	r2, [pc, #104]	; (8005878 <p_oszi_draw_scale+0x4fc>)
 8005810:	fb82 1203 	smull	r1, r2, r2, r3
 8005814:	441a      	add	r2, r3
 8005816:	12d2      	asrs	r2, r2, #11
 8005818:	17db      	asrs	r3, r3, #31
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	80fb      	strh	r3, [r7, #6]
    signed_int+=FFT_START_Y+1;
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	3320      	adds	r3, #32
 8005822:	b29b      	uxth	r3, r3
 8005824:	80fb      	strh	r3, [r7, #6]
    if(signed_int<FFT_START_Y) signed_int=FFT_START_Y;
 8005826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800582a:	2b1e      	cmp	r3, #30
 800582c:	dc01      	bgt.n	8005832 <p_oszi_draw_scale+0x4b6>
 800582e:	231f      	movs	r3, #31
 8005830:	80fb      	strh	r3, [r7, #6]
    if(signed_int>(FFT_START_Y+FFT_VISIBLE_LENGTH)) signed_int=(FFT_START_Y+FFT_VISIBLE_LENGTH);
 8005832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005836:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800583a:	db02      	blt.n	8005842 <p_oszi_draw_scale+0x4c6>
 800583c:	f240 131f 	movw	r3, #287	; 0x11f
 8005840:	80fb      	strh	r3, [r7, #6]
    p_oszi_draw_line_v(signed_int,CURSOR_COL,2);
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	2202      	movs	r2, #2
 8005846:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f879 	bl	8005942 <p_oszi_draw_line_v>
    UB_Font_DrawString(215,signed_int-3,"A",&Arial_7x10,CURSOR_COL,BACKGROUND_COL);
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	3b03      	subs	r3, #3
 8005854:	b299      	uxth	r1, r3
 8005856:	2300      	movs	r3, #0
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <p_oszi_draw_scale+0x500>)
 8005862:	4a07      	ldr	r2, [pc, #28]	; (8005880 <p_oszi_draw_scale+0x504>)
 8005864:	20d7      	movs	r0, #215	; 0xd7
 8005866:	f00a ff7d 	bl	8010764 <UB_Font_DrawString>
}
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	2000277c 	.word	0x2000277c
 8005878:	80080081 	.word	0x80080081
 800587c:	20000060 	.word	0x20000060
 8005880:	08012b00 	.word	0x08012b00
 8005884:	08012b04 	.word	0x08012b04

08005888 <p_oszi_draw_line_h>:
//--------------------------------------------------------------
// draws a horizontal line on the Oszi grid
// at "xp", with color "c" and mode "m"
//--------------------------------------------------------------
void p_oszi_draw_line_h(uint16_t xp, uint32_t color, uint16_t m)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	6039      	str	r1, [r7, #0]
 8005892:	80fb      	strh	r3, [r7, #6]
 8005894:	4613      	mov	r3, r2
 8005896:	80bb      	strh	r3, [r7, #4]
  uint32_t n,t;

  if(m==0) {
 8005898:	88bb      	ldrh	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d113      	bne.n	80058c6 <p_oszi_draw_line_h+0x3e>
    // Linie : "X----X----X----X----X----X"
    for(n=0;n<=SCALE_W;n+=5) {
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e00b      	b.n	80058bc <p_oszi_draw_line_h+0x34>
      UB_Graphic2D_DrawPixelNormal(xp,n+SCALE_START_Y,color);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3309      	adds	r3, #9
 80058aa:	b299      	uxth	r1, r3
 80058ac:	88fb      	ldrh	r3, [r7, #6]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f00a ff9f 	bl	80107f4 <UB_Graphic2D_DrawPixelNormal>
    for(n=0;n<=SCALE_W;n+=5) {
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3305      	adds	r3, #5
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80058c2:	d9ef      	bls.n	80058a4 <p_oszi_draw_line_h+0x1c>
      if(t<2) UB_Graphic2D_DrawPixelNormal(xp,n+SCALE_START_Y,color);
      t++;
      if(t>4) t=0;
    }
  }
}
 80058c4:	e039      	b.n	800593a <p_oszi_draw_line_h+0xb2>
  else if(m==1) {
 80058c6:	88bb      	ldrh	r3, [r7, #4]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d113      	bne.n	80058f4 <p_oszi_draw_line_h+0x6c>
    for(n=0;n<=SCALE_W;n+=2) {
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e00b      	b.n	80058ea <p_oszi_draw_line_h+0x62>
      UB_Graphic2D_DrawPixelNormal(xp,n+SCALE_START_Y,color);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3309      	adds	r3, #9
 80058d8:	b299      	uxth	r1, r3
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f00a ff88 	bl	80107f4 <UB_Graphic2D_DrawPixelNormal>
    for(n=0;n<=SCALE_W;n+=2) {
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3302      	adds	r3, #2
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80058f0:	d9ef      	bls.n	80058d2 <p_oszi_draw_line_h+0x4a>
}
 80058f2:	e022      	b.n	800593a <p_oszi_draw_line_h+0xb2>
  else if(m==2) {
 80058f4:	88bb      	ldrh	r3, [r7, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d11f      	bne.n	800593a <p_oszi_draw_line_h+0xb2>
    t=0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60bb      	str	r3, [r7, #8]
    for(n=0;n<=SCALE_W;n++) {
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e016      	b.n	8005932 <p_oszi_draw_line_h+0xaa>
      if(t<2) UB_Graphic2D_DrawPixelNormal(xp,n+SCALE_START_Y,color);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d808      	bhi.n	800591c <p_oszi_draw_line_h+0x94>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	b29b      	uxth	r3, r3
 800590e:	3309      	adds	r3, #9
 8005910:	b299      	uxth	r1, r3
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f00a ff6c 	bl	80107f4 <UB_Graphic2D_DrawPixelNormal>
      t++;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	3301      	adds	r3, #1
 8005920:	60bb      	str	r3, [r7, #8]
      if(t>4) t=0;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b04      	cmp	r3, #4
 8005926:	d901      	bls.n	800592c <p_oszi_draw_line_h+0xa4>
 8005928:	2300      	movs	r3, #0
 800592a:	60bb      	str	r3, [r7, #8]
    for(n=0;n<=SCALE_W;n++) {
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005938:	d9e4      	bls.n	8005904 <p_oszi_draw_line_h+0x7c>
}
 800593a:	bf00      	nop
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <p_oszi_draw_line_v>:
//--------------------------------------------------------------
// draws a vertical line on the Oszi grid at "yp",
// with color "c" and mode "m"
//--------------------------------------------------------------
void p_oszi_draw_line_v(uint16_t yp, uint32_t color, uint16_t m)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	4603      	mov	r3, r0
 800594a:	6039      	str	r1, [r7, #0]
 800594c:	80fb      	strh	r3, [r7, #6]
 800594e:	4613      	mov	r3, r2
 8005950:	80bb      	strh	r3, [r7, #4]
  uint32_t n,t;

  if(m==0) {
 8005952:	88bb      	ldrh	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d112      	bne.n	800597e <p_oszi_draw_line_v+0x3c>
    // Linie : "X----X----X----X----X----X"
    for(n=0;n<=SCALE_H;n+=5) {
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e00b      	b.n	8005976 <p_oszi_draw_line_v+0x34>
      UB_Graphic2D_DrawPixelNormal(n+SCALE_START_X,yp,color);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	b29b      	uxth	r3, r3
 8005962:	330d      	adds	r3, #13
 8005964:	b29b      	uxth	r3, r3
 8005966:	88f9      	ldrh	r1, [r7, #6]
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f00a ff42 	bl	80107f4 <UB_Graphic2D_DrawPixelNormal>
    for(n=0;n<=SCALE_H;n+=5) {
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3305      	adds	r3, #5
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2bc8      	cmp	r3, #200	; 0xc8
 800597a:	d9f0      	bls.n	800595e <p_oszi_draw_line_v+0x1c>
      if(t<2) UB_Graphic2D_DrawPixelNormal(n+SCALE_START_X,yp,color);
      t++;
      if(t>4) t=0;
    }
  }
}
 800597c:	e037      	b.n	80059ee <p_oszi_draw_line_v+0xac>
  else if(m==1) {
 800597e:	88bb      	ldrh	r3, [r7, #4]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d112      	bne.n	80059aa <p_oszi_draw_line_v+0x68>
    for(n=0;n<=SCALE_H;n+=2) {
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e00b      	b.n	80059a2 <p_oszi_draw_line_v+0x60>
      UB_Graphic2D_DrawPixelNormal(n+SCALE_START_X,yp,color);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	b29b      	uxth	r3, r3
 800598e:	330d      	adds	r3, #13
 8005990:	b29b      	uxth	r3, r3
 8005992:	88f9      	ldrh	r1, [r7, #6]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f00a ff2c 	bl	80107f4 <UB_Graphic2D_DrawPixelNormal>
    for(n=0;n<=SCALE_H;n+=2) {
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3302      	adds	r3, #2
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2bc8      	cmp	r3, #200	; 0xc8
 80059a6:	d9f0      	bls.n	800598a <p_oszi_draw_line_v+0x48>
}
 80059a8:	e021      	b.n	80059ee <p_oszi_draw_line_v+0xac>
  else if(m==2) {
 80059aa:	88bb      	ldrh	r3, [r7, #4]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d11e      	bne.n	80059ee <p_oszi_draw_line_v+0xac>
    t=0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60bb      	str	r3, [r7, #8]
    for(n=0;n<=SCALE_H;n++) {
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e016      	b.n	80059e8 <p_oszi_draw_line_v+0xa6>
      if(t<2) UB_Graphic2D_DrawPixelNormal(n+SCALE_START_X,yp,color);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d808      	bhi.n	80059d2 <p_oszi_draw_line_v+0x90>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	330d      	adds	r3, #13
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	88f9      	ldrh	r1, [r7, #6]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f00a ff11 	bl	80107f4 <UB_Graphic2D_DrawPixelNormal>
      t++;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60bb      	str	r3, [r7, #8]
      if(t>4) t=0;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d901      	bls.n	80059e2 <p_oszi_draw_line_v+0xa0>
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]
    for(n=0;n<=SCALE_H;n++) {
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3301      	adds	r3, #1
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2bc8      	cmp	r3, #200	; 0xc8
 80059ec:	d9e5      	bls.n	80059ba <p_oszi_draw_line_v+0x78>
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <p_oszi_sort_adc>:
// Quadrant-2 = second half of Buffer-A
// Quadrant-3 = first half of Buffer-B
// Quadrant-4 = second half of Buffer-B
//--------------------------------------------------------------
void p_oszi_sort_adc(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
  uint32_t n=0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
  uint32_t start=0,anz1=0,anz2=0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
  uint16_t data;

  if(ADC_UB.trigger_quarter==1) {
 8005a0e:	4ba4      	ldr	r3, [pc, #656]	; (8005ca0 <p_oszi_sort_adc+0x2a8>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d163      	bne.n	8005ade <p_oszi_sort_adc+0xe6>
    //-------------------------------
    // The trigger point is in Q1
    //-------------------------------
    anz1=(SCALE_X_MITTE-ADC_UB.trigger_pos);
 8005a16:	4ba2      	ldr	r3, [pc, #648]	; (8005ca0 <p_oszi_sort_adc+0x2a8>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005a1e:	60fb      	str	r3, [r7, #12]
    start=SCALE_W-anz1;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005a26:	613b      	str	r3, [r7, #16]

    //-------------------------------
    // copy left part
    //-------------------------------
    for(n=0;n<anz1;n++) {
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e020      	b.n	8005a70 <p_oszi_sort_adc+0x78>
      data=ADC_DMA_Buffer_B[(start+n)*2];
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	4413      	add	r3, r2
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4a9b      	ldr	r2, [pc, #620]	; (8005ca4 <p_oszi_sort_adc+0x2ac>)
 8005a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a3c:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[n*2]=data;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	4999      	ldr	r1, [pc, #612]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005a44:	88fa      	ldrh	r2, [r7, #6]
 8005a46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      data=ADC_DMA_Buffer_B[((start+n)*2)+1];
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	4413      	add	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a93      	ldr	r2, [pc, #588]	; (8005ca4 <p_oszi_sort_adc+0x2ac>)
 8005a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a5a:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[(n*2)+1]=data;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	3301      	adds	r3, #1
 8005a62:	4991      	ldr	r1, [pc, #580]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005a64:	88fa      	ldrh	r2, [r7, #6]
 8005a66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(n=0;n<anz1;n++) {
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d3da      	bcc.n	8005a2e <p_oszi_sort_adc+0x36>
    }
    //-------------------------------
    // copy right part
    //-------------------------------
    anz2=SCALE_W-anz1;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005a7e:	60bb      	str	r3, [r7, #8]
    start=0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	613b      	str	r3, [r7, #16]
    for(n=0;n<anz2;n++) {
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e024      	b.n	8005ad4 <p_oszi_sort_adc+0xdc>
      data=ADC_DMA_Buffer_A[(start+n)*2];
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4a86      	ldr	r2, [pc, #536]	; (8005cac <p_oszi_sort_adc+0x2b4>)
 8005a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a98:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[(n+anz1)*2]=data;
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4981      	ldr	r1, [pc, #516]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005aa4:	88fa      	ldrh	r2, [r7, #6]
 8005aa6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      data=ADC_DMA_Buffer_A[((start+n)*2)+1];
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	4a7d      	ldr	r2, [pc, #500]	; (8005cac <p_oszi_sort_adc+0x2b4>)
 8005ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aba:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[((n+anz1)*2)+1]=data;
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	4978      	ldr	r1, [pc, #480]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005ac8:	88fa      	ldrh	r2, [r7, #6]
 8005aca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(n=0;n<anz2;n++) {
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d3d6      	bcc.n	8005a8a <p_oszi_sort_adc+0x92>
      ADC_DMA_Buffer_C[(n+anz1)*2]=data;
      data=ADC_DMA_Buffer_A[((start+n)*2)+1];
      ADC_DMA_Buffer_C[((n+anz1)*2)+1]=data;
    }
  }
}
 8005adc:	e13f      	b.n	8005d5e <p_oszi_sort_adc+0x366>
  else if(ADC_UB.trigger_quarter==2) {
 8005ade:	4b70      	ldr	r3, [pc, #448]	; (8005ca0 <p_oszi_sort_adc+0x2a8>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d163      	bne.n	8005bae <p_oszi_sort_adc+0x1b6>
    anz1=SCALE_W-((ADC_UB.trigger_pos-SCALE_X_MITTE));
 8005ae6:	4b6e      	ldr	r3, [pc, #440]	; (8005ca0 <p_oszi_sort_adc+0x2a8>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5c3 73e1 	rsb	r3, r3, #450	; 0x1c2
 8005aee:	60fb      	str	r3, [r7, #12]
    start=SCALE_W-anz1;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005af6:	613b      	str	r3, [r7, #16]
    for(n=0;n<anz1;n++) {
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e020      	b.n	8005b40 <p_oszi_sort_adc+0x148>
      data=ADC_DMA_Buffer_A[(start+n)*2];
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4413      	add	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4a69      	ldr	r2, [pc, #420]	; (8005cac <p_oszi_sort_adc+0x2b4>)
 8005b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b0c:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[n*2]=data;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4965      	ldr	r1, [pc, #404]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      data=ADC_DMA_Buffer_A[((start+n)*2)+1];
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a61      	ldr	r2, [pc, #388]	; (8005cac <p_oszi_sort_adc+0x2b4>)
 8005b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b2a:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[(n*2)+1]=data;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	3301      	adds	r3, #1
 8005b32:	495d      	ldr	r1, [pc, #372]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005b34:	88fa      	ldrh	r2, [r7, #6]
 8005b36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(n=0;n<anz1;n++) {
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d3da      	bcc.n	8005afe <p_oszi_sort_adc+0x106>
    anz2=SCALE_W-anz1;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005b4e:	60bb      	str	r3, [r7, #8]
    start=0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
    for(n=0;n<anz2;n++) {
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	e024      	b.n	8005ba4 <p_oszi_sort_adc+0x1ac>
      data=ADC_DMA_Buffer_B[(start+n)*2];
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	4413      	add	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4a50      	ldr	r2, [pc, #320]	; (8005ca4 <p_oszi_sort_adc+0x2ac>)
 8005b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b68:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[(n+anz1)*2]=data;
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	494d      	ldr	r1, [pc, #308]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005b74:	88fa      	ldrh	r2, [r7, #6]
 8005b76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      data=ADC_DMA_Buffer_B[((start+n)*2)+1];
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	3301      	adds	r3, #1
 8005b84:	4a47      	ldr	r2, [pc, #284]	; (8005ca4 <p_oszi_sort_adc+0x2ac>)
 8005b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b8a:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[((n+anz1)*2)+1]=data;
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	3301      	adds	r3, #1
 8005b96:	4944      	ldr	r1, [pc, #272]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005b98:	88fa      	ldrh	r2, [r7, #6]
 8005b9a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(n=0;n<anz2;n++) {
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d3d6      	bcc.n	8005b5a <p_oszi_sort_adc+0x162>
}
 8005bac:	e0d7      	b.n	8005d5e <p_oszi_sort_adc+0x366>
  else if(ADC_UB.trigger_quarter==3) {
 8005bae:	4b3c      	ldr	r3, [pc, #240]	; (8005ca0 <p_oszi_sort_adc+0x2a8>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d163      	bne.n	8005c7e <p_oszi_sort_adc+0x286>
    anz1=(SCALE_X_MITTE-ADC_UB.trigger_pos);
 8005bb6:	4b3a      	ldr	r3, [pc, #232]	; (8005ca0 <p_oszi_sort_adc+0x2a8>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005bbe:	60fb      	str	r3, [r7, #12]
    start=SCALE_W-anz1;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005bc6:	613b      	str	r3, [r7, #16]
    for(n=0;n<anz1;n++) {
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e020      	b.n	8005c10 <p_oszi_sort_adc+0x218>
      data=ADC_DMA_Buffer_A[(start+n)*2];
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	4a35      	ldr	r2, [pc, #212]	; (8005cac <p_oszi_sort_adc+0x2b4>)
 8005bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bdc:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[n*2]=data;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	4931      	ldr	r1, [pc, #196]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      data=ADC_DMA_Buffer_A[((start+n)*2)+1];
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	4413      	add	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	4a2d      	ldr	r2, [pc, #180]	; (8005cac <p_oszi_sort_adc+0x2b4>)
 8005bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bfa:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[(n*2)+1]=data;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	3301      	adds	r3, #1
 8005c02:	4929      	ldr	r1, [pc, #164]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(n=0;n<anz1;n++) {
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d3da      	bcc.n	8005bce <p_oszi_sort_adc+0x1d6>
    anz2=SCALE_W-anz1;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005c1e:	60bb      	str	r3, [r7, #8]
    start=0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	613b      	str	r3, [r7, #16]
    for(n=0;n<anz2;n++) {
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	e024      	b.n	8005c74 <p_oszi_sort_adc+0x27c>
      data=ADC_DMA_Buffer_B[(start+n)*2];
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	4413      	add	r3, r2
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4a1c      	ldr	r2, [pc, #112]	; (8005ca4 <p_oszi_sort_adc+0x2ac>)
 8005c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c38:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[(n+anz1)*2]=data;
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	4919      	ldr	r1, [pc, #100]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      data=ADC_DMA_Buffer_B[((start+n)*2)+1];
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	4413      	add	r3, r2
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	3301      	adds	r3, #1
 8005c54:	4a13      	ldr	r2, [pc, #76]	; (8005ca4 <p_oszi_sort_adc+0x2ac>)
 8005c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c5a:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[((n+anz1)*2)+1]=data;
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	3301      	adds	r3, #1
 8005c66:	4910      	ldr	r1, [pc, #64]	; (8005ca8 <p_oszi_sort_adc+0x2b0>)
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(n=0;n<anz2;n++) {
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	3301      	adds	r3, #1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d3d6      	bcc.n	8005c2a <p_oszi_sort_adc+0x232>
}
 8005c7c:	e06f      	b.n	8005d5e <p_oszi_sort_adc+0x366>
  else if(ADC_UB.trigger_quarter==4) {
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <p_oszi_sort_adc+0x2a8>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d16b      	bne.n	8005d5e <p_oszi_sort_adc+0x366>
    anz1=SCALE_W-((ADC_UB.trigger_pos-SCALE_X_MITTE));
 8005c86:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <p_oszi_sort_adc+0x2a8>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5c3 73e1 	rsb	r3, r3, #450	; 0x1c2
 8005c8e:	60fb      	str	r3, [r7, #12]
    start=SCALE_W-anz1;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005c96:	613b      	str	r3, [r7, #16]
    for(n=0;n<anz1;n++) {
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	e029      	b.n	8005cf2 <p_oszi_sort_adc+0x2fa>
 8005c9e:	bf00      	nop
 8005ca0:	20001dfc 	.word	0x20001dfc
 8005ca4:	200022cc 	.word	0x200022cc
 8005ca8:	20001948 	.word	0x20001948
 8005cac:	20001e0c 	.word	0x20001e0c
      data=ADC_DMA_Buffer_B[(start+n)*2];
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <p_oszi_sort_adc+0x374>)
 8005cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cbe:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[n*2]=data;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	492a      	ldr	r1, [pc, #168]	; (8005d70 <p_oszi_sort_adc+0x378>)
 8005cc6:	88fa      	ldrh	r2, [r7, #6]
 8005cc8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      data=ADC_DMA_Buffer_B[((start+n)*2)+1];
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <p_oszi_sort_adc+0x374>)
 8005cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cdc:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[(n*2)+1]=data;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	4922      	ldr	r1, [pc, #136]	; (8005d70 <p_oszi_sort_adc+0x378>)
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(n=0;n<anz1;n++) {
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d3da      	bcc.n	8005cb0 <p_oszi_sort_adc+0x2b8>
    anz2=SCALE_W-anz1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005d00:	60bb      	str	r3, [r7, #8]
    start=0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	613b      	str	r3, [r7, #16]
    for(n=0;n<anz2;n++) {
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e024      	b.n	8005d56 <p_oszi_sort_adc+0x35e>
      data=ADC_DMA_Buffer_A[(start+n)*2];
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <p_oszi_sort_adc+0x37c>)
 8005d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d1a:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[(n+anz1)*2]=data;
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	4912      	ldr	r1, [pc, #72]	; (8005d70 <p_oszi_sort_adc+0x378>)
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      data=ADC_DMA_Buffer_A[((start+n)*2)+1];
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	4413      	add	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	3301      	adds	r3, #1
 8005d36:	4a0f      	ldr	r2, [pc, #60]	; (8005d74 <p_oszi_sort_adc+0x37c>)
 8005d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d3c:	80fb      	strh	r3, [r7, #6]
      ADC_DMA_Buffer_C[((n+anz1)*2)+1]=data;
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	3301      	adds	r3, #1
 8005d48:	4909      	ldr	r1, [pc, #36]	; (8005d70 <p_oszi_sort_adc+0x378>)
 8005d4a:	88fa      	ldrh	r2, [r7, #6]
 8005d4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(n=0;n<anz2;n++) {
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	3301      	adds	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d3d6      	bcc.n	8005d0c <p_oszi_sort_adc+0x314>
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	200022cc 	.word	0x200022cc
 8005d70:	20001948 	.word	0x20001948
 8005d74:	20001e0c 	.word	0x20001e0c

08005d78 <p_oszi_fill_fft>:
//--------------------------------------------------------------
// fills the FFT input buffer with the
// sample data from CH1 or CH2 (fill the rest with 0)
//--------------------------------------------------------------
void p_oszi_fill_fft(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
  uint32_t n,m;

  if(Menu.fft.mode==1) {
 8005d7e:	4b45      	ldr	r3, [pc, #276]	; (8005e94 <p_oszi_fill_fft+0x11c>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d13e      	bne.n	8005e04 <p_oszi_fill_fft+0x8c>
    m=0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	603b      	str	r3, [r7, #0]
    for(n=0;n<FFT_LENGTH;n++) {
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	e034      	b.n	8005dfa <p_oszi_fill_fft+0x82>
      if(m<SCALE_W) {
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005d96:	d223      	bcs.n	8005de0 <p_oszi_fill_fft+0x68>
        FFT_DATA_IN[n]=(float)((ADC_DMA_Buffer_C[(m*2)]-2048.0)/1000.0);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4a3e      	ldr	r2, [pc, #248]	; (8005e98 <p_oszi_fill_fft+0x120>)
 8005d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fa fbc5 	bl	8000534 <__aeabi_i2d>
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <p_oszi_fill_fft+0x124>)
 8005db0:	f7fa fa72 	bl	8000298 <__aeabi_dsub>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4610      	mov	r0, r2
 8005dba:	4619      	mov	r1, r3
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	4b37      	ldr	r3, [pc, #220]	; (8005ea0 <p_oszi_fill_fft+0x128>)
 8005dc2:	f7fa fd4b 	bl	800085c <__aeabi_ddiv>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4610      	mov	r0, r2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	f7fa fe75 	bl	8000abc <__aeabi_d2f>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	4933      	ldr	r1, [pc, #204]	; (8005ea4 <p_oszi_fill_fft+0x12c>)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e006      	b.n	8005dee <p_oszi_fill_fft+0x76>
      }
      else {
        FFT_DATA_IN[n]=0.0;
 8005de0:	4a30      	ldr	r2, [pc, #192]	; (8005ea4 <p_oszi_fill_fft+0x12c>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
      }
      m++;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	603b      	str	r3, [r7, #0]
    for(n=0;n<FFT_LENGTH;n++) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3301      	adds	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d3c6      	bcc.n	8005d90 <p_oszi_fill_fft+0x18>
        FFT_DATA_IN[n]=0.0;
      }
      m++;
    }
  }
}
 8005e02:	e042      	b.n	8005e8a <p_oszi_fill_fft+0x112>
  else if(Menu.fft.mode==2) {
 8005e04:	4b23      	ldr	r3, [pc, #140]	; (8005e94 <p_oszi_fill_fft+0x11c>)
 8005e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d13e      	bne.n	8005e8a <p_oszi_fill_fft+0x112>
    m=0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	603b      	str	r3, [r7, #0]
    for(n=0;n<FFT_LENGTH;n++) {
 8005e10:	2300      	movs	r3, #0
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	e035      	b.n	8005e82 <p_oszi_fill_fft+0x10a>
      if(m<SCALE_W) {
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005e1c:	d224      	bcs.n	8005e68 <p_oszi_fill_fft+0xf0>
        FFT_DATA_IN[n]=(float)((ADC_DMA_Buffer_C[(m*2)+1]-2048.0)/1000.0);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	3301      	adds	r3, #1
 8005e24:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <p_oszi_fill_fft+0x120>)
 8005e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fa fb81 	bl	8000534 <__aeabi_i2d>
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <p_oszi_fill_fft+0x124>)
 8005e38:	f7fa fa2e 	bl	8000298 <__aeabi_dsub>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4610      	mov	r0, r2
 8005e42:	4619      	mov	r1, r3
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <p_oszi_fill_fft+0x128>)
 8005e4a:	f7fa fd07 	bl	800085c <__aeabi_ddiv>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4610      	mov	r0, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	f7fa fe31 	bl	8000abc <__aeabi_d2f>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	4911      	ldr	r1, [pc, #68]	; (8005ea4 <p_oszi_fill_fft+0x12c>)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	e006      	b.n	8005e76 <p_oszi_fill_fft+0xfe>
        FFT_DATA_IN[n]=0.0;
 8005e68:	4a0e      	ldr	r2, [pc, #56]	; (8005ea4 <p_oszi_fill_fft+0x12c>)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
      m++;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	603b      	str	r3, [r7, #0]
    for(n=0;n<FFT_LENGTH;n++) {
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	607b      	str	r3, [r7, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e88:	d3c5      	bcc.n	8005e16 <p_oszi_fill_fft+0x9e>
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	2000277c 	.word	0x2000277c
 8005e98:	20001948 	.word	0x20001948
 8005e9c:	40a00000 	.word	0x40a00000
 8005ea0:	408f4000 	.word	0x408f4000
 8005ea4:	200029ec 	.word	0x200029ec

08005ea8 <p_oszi_draw_adc>:

//--------------------------------------------------------------
// Records the data of the two ADC channels (and the FFT)
//--------------------------------------------------------------
void p_oszi_draw_adc(void)
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af02      	add	r7, sp, #8
  uint32_t n=0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
  int16_t ch1_data1,ch1_data2;
  int16_t ch2_data1,ch2_data2;
  int16_t fft_data1,fft_data2;

  p_oszi_draw_background();
 8005eb2:	f7ff fa54 	bl	800535e <p_oszi_draw_background>
  UB_LCD_SetLayer_Menu();
 8005eb6:	f00b f8bf 	bl	8011038 <UB_LCD_SetLayer_Menu>

  // startdatae
  ch1_data1=oszi_adc2pixel(ADC_DMA_Buffer_C[0], Menu.ch1.faktor);
 8005eba:	4b85      	ldr	r3, [pc, #532]	; (80060d0 <p_oszi_draw_adc+0x228>)
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	4a84      	ldr	r2, [pc, #528]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8005ec2:	6892      	ldr	r2, [r2, #8]
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f90a 	bl	80060e0 <oszi_adc2pixel>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	817b      	strh	r3, [r7, #10]
  ch1_data1+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch1.position;
 8005ed0:	4b80      	ldr	r3, [pc, #512]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8005ed2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	897b      	ldrh	r3, [r7, #10]
 8005eda:	4413      	add	r3, r2
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3371      	adds	r3, #113	; 0x71
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	817b      	strh	r3, [r7, #10]
  if(ch1_data1<SCALE_START_X) ch1_data1=SCALE_START_X;
 8005ee4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	dc01      	bgt.n	8005ef0 <p_oszi_draw_adc+0x48>
 8005eec:	230d      	movs	r3, #13
 8005eee:	817b      	strh	r3, [r7, #10]
  if(ch1_data1>SCALE_MX_PIXEL) ch1_data1=SCALE_MX_PIXEL;
 8005ef0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005ef4:	2bd5      	cmp	r3, #213	; 0xd5
 8005ef6:	dd01      	ble.n	8005efc <p_oszi_draw_adc+0x54>
 8005ef8:	23d5      	movs	r3, #213	; 0xd5
 8005efa:	817b      	strh	r3, [r7, #10]

  ch2_data1=oszi_adc2pixel(ADC_DMA_Buffer_C[1], Menu.ch2.faktor);
 8005efc:	4b74      	ldr	r3, [pc, #464]	; (80060d0 <p_oszi_draw_adc+0x228>)
 8005efe:	885b      	ldrh	r3, [r3, #2]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4a74      	ldr	r2, [pc, #464]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8005f04:	6952      	ldr	r2, [r2, #20]
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f8e9 	bl	80060e0 <oszi_adc2pixel>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	80fb      	strh	r3, [r7, #6]
  ch2_data1+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch2.position;
 8005f12:	4b70      	ldr	r3, [pc, #448]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8005f14:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3371      	adds	r3, #113	; 0x71
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	80fb      	strh	r3, [r7, #6]
  if(ch2_data1<SCALE_START_X) ch2_data1=SCALE_START_X;
 8005f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f2a:	2b0c      	cmp	r3, #12
 8005f2c:	dc01      	bgt.n	8005f32 <p_oszi_draw_adc+0x8a>
 8005f2e:	230d      	movs	r3, #13
 8005f30:	80fb      	strh	r3, [r7, #6]
  if(ch2_data1>SCALE_MX_PIXEL) ch2_data1=SCALE_MX_PIXEL;
 8005f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f36:	2bd5      	cmp	r3, #213	; 0xd5
 8005f38:	dd01      	ble.n	8005f3e <p_oszi_draw_adc+0x96>
 8005f3a:	23d5      	movs	r3, #213	; 0xd5
 8005f3c:	80fb      	strh	r3, [r7, #6]

  fft_data1=FFT_UINT_DATA[0];
 8005f3e:	4b66      	ldr	r3, [pc, #408]	; (80060d8 <p_oszi_draw_adc+0x230>)
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	807b      	strh	r3, [r7, #2]
  fft_data1+=FFT_START_X;
 8005f44:	887b      	ldrh	r3, [r7, #2]
 8005f46:	3314      	adds	r3, #20
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	807b      	strh	r3, [r7, #2]
  if(fft_data1<SCALE_START_X) fft_data1=SCALE_START_X;
 8005f4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f50:	2b0c      	cmp	r3, #12
 8005f52:	dc01      	bgt.n	8005f58 <p_oszi_draw_adc+0xb0>
 8005f54:	230d      	movs	r3, #13
 8005f56:	807b      	strh	r3, [r7, #2]
  if(fft_data1>SCALE_MX_PIXEL) fft_data1=SCALE_MX_PIXEL;
 8005f58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f5c:	2bd5      	cmp	r3, #213	; 0xd5
 8005f5e:	dd01      	ble.n	8005f64 <p_oszi_draw_adc+0xbc>
 8005f60:	23d5      	movs	r3, #213	; 0xd5
 8005f62:	807b      	strh	r3, [r7, #2]

  // komplette Kurve
  for(n=1;n<SCALE_W;n++) {
 8005f64:	2301      	movs	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e075      	b.n	8006056 <p_oszi_draw_adc+0x1ae>
    if(Menu.ch1.visible==0) {
 8005f6a:	4b5a      	ldr	r3, [pc, #360]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d134      	bne.n	8005fdc <p_oszi_draw_adc+0x134>
      ch1_data2=oszi_adc2pixel(ADC_DMA_Buffer_C[n*2], Menu.ch1.faktor);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	4a56      	ldr	r2, [pc, #344]	; (80060d0 <p_oszi_draw_adc+0x228>)
 8005f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	4a55      	ldr	r2, [pc, #340]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8005f80:	6892      	ldr	r2, [r2, #8]
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 f8ab 	bl	80060e0 <oszi_adc2pixel>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	813b      	strh	r3, [r7, #8]
      ch1_data2+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch1.position;
 8005f8e:	4b51      	ldr	r3, [pc, #324]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8005f90:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	893b      	ldrh	r3, [r7, #8]
 8005f98:	4413      	add	r3, r2
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3371      	adds	r3, #113	; 0x71
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	813b      	strh	r3, [r7, #8]
      if(ch1_data2<SCALE_START_X) ch1_data2=SCALE_START_X;
 8005fa2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005fa6:	2b0c      	cmp	r3, #12
 8005fa8:	dc01      	bgt.n	8005fae <p_oszi_draw_adc+0x106>
 8005faa:	230d      	movs	r3, #13
 8005fac:	813b      	strh	r3, [r7, #8]
      if(ch1_data2>SCALE_MX_PIXEL) ch1_data2=SCALE_MX_PIXEL;
 8005fae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005fb2:	2bd5      	cmp	r3, #213	; 0xd5
 8005fb4:	dd01      	ble.n	8005fba <p_oszi_draw_adc+0x112>
 8005fb6:	23d5      	movs	r3, #213	; 0xd5
 8005fb8:	813b      	strh	r3, [r7, #8]
      UB_Graphic2D_DrawLineNormal(ch1_data1,SCALE_START_Y+n,ch1_data2,SCALE_START_Y+n+1,ADC_CH1_COL);
 8005fba:	8978      	ldrh	r0, [r7, #10]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3309      	adds	r3, #9
 8005fc2:	b299      	uxth	r1, r3
 8005fc4:	893a      	ldrh	r2, [r7, #8]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	330a      	adds	r3, #10
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8005fd2:	9400      	str	r4, [sp, #0]
 8005fd4:	f00a fc2d 	bl	8010832 <UB_Graphic2D_DrawLineNormal>
      ch1_data1=ch1_data2;
 8005fd8:	893b      	ldrh	r3, [r7, #8]
 8005fda:	817b      	strh	r3, [r7, #10]
    }

    if(Menu.ch2.visible==0) {
 8005fdc:	4b3d      	ldr	r3, [pc, #244]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d135      	bne.n	8006050 <p_oszi_draw_adc+0x1a8>
      ch2_data2=oszi_adc2pixel(ADC_DMA_Buffer_C[(n*2)+1], Menu.ch2.faktor);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	3301      	adds	r3, #1
 8005fea:	4a39      	ldr	r2, [pc, #228]	; (80060d0 <p_oszi_draw_adc+0x228>)
 8005fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	4a38      	ldr	r2, [pc, #224]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8005ff4:	6952      	ldr	r2, [r2, #20]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 f871 	bl	80060e0 <oszi_adc2pixel>
 8005ffe:	4603      	mov	r3, r0
 8006000:	80bb      	strh	r3, [r7, #4]
      ch2_data2+=SCALE_Y_MITTE+SCALE_START_X+Menu.ch2.position;
 8006002:	4b34      	ldr	r3, [pc, #208]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8006004:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006008:	b29a      	uxth	r2, r3
 800600a:	88bb      	ldrh	r3, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	b29b      	uxth	r3, r3
 8006010:	3371      	adds	r3, #113	; 0x71
 8006012:	b29b      	uxth	r3, r3
 8006014:	80bb      	strh	r3, [r7, #4]
      if(ch2_data2<SCALE_START_X) ch2_data2=SCALE_START_X;
 8006016:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800601a:	2b0c      	cmp	r3, #12
 800601c:	dc01      	bgt.n	8006022 <p_oszi_draw_adc+0x17a>
 800601e:	230d      	movs	r3, #13
 8006020:	80bb      	strh	r3, [r7, #4]
      if(ch2_data2>SCALE_MX_PIXEL) ch2_data2=SCALE_MX_PIXEL;
 8006022:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006026:	2bd5      	cmp	r3, #213	; 0xd5
 8006028:	dd01      	ble.n	800602e <p_oszi_draw_adc+0x186>
 800602a:	23d5      	movs	r3, #213	; 0xd5
 800602c:	80bb      	strh	r3, [r7, #4]
      UB_Graphic2D_DrawLineNormal(ch2_data1,SCALE_START_Y+n,ch2_data2,SCALE_START_Y+n+1,ADC_CH2_COL);
 800602e:	88f8      	ldrh	r0, [r7, #6]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	b29b      	uxth	r3, r3
 8006034:	3309      	adds	r3, #9
 8006036:	b299      	uxth	r1, r3
 8006038:	88ba      	ldrh	r2, [r7, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	b29b      	uxth	r3, r3
 800603e:	330a      	adds	r3, #10
 8006040:	b29b      	uxth	r3, r3
 8006042:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8006046:	9400      	str	r4, [sp, #0]
 8006048:	f00a fbf3 	bl	8010832 <UB_Graphic2D_DrawLineNormal>
      ch2_data1=ch2_data2;
 800604c:	88bb      	ldrh	r3, [r7, #4]
 800604e:	80fb      	strh	r3, [r7, #6]
  for(n=1;n<SCALE_W;n++) {
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800605c:	d385      	bcc.n	8005f6a <p_oszi_draw_adc+0xc2>
    }
  }

  // nur die linke h�lfte der FFT zeichnen
  // (die rechte ist das Spiegelbild)
  if(Menu.fft.mode!=0) {
 800605e:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <p_oszi_draw_adc+0x22c>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	2b00      	cmp	r3, #0
 8006064:	d02e      	beq.n	80060c4 <p_oszi_draw_adc+0x21c>
    for(n=1;n<FFT_VISIBLE_LENGTH;n++) {
 8006066:	2301      	movs	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e028      	b.n	80060be <p_oszi_draw_adc+0x216>
      fft_data2=FFT_UINT_DATA[n];
 800606c:	4a1a      	ldr	r2, [pc, #104]	; (80060d8 <p_oszi_draw_adc+0x230>)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006074:	803b      	strh	r3, [r7, #0]
      fft_data2+=FFT_START_X;
 8006076:	883b      	ldrh	r3, [r7, #0]
 8006078:	3314      	adds	r3, #20
 800607a:	b29b      	uxth	r3, r3
 800607c:	803b      	strh	r3, [r7, #0]
      if(fft_data2<SCALE_START_X) fft_data2=SCALE_START_X;
 800607e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006082:	2b0c      	cmp	r3, #12
 8006084:	dc01      	bgt.n	800608a <p_oszi_draw_adc+0x1e2>
 8006086:	230d      	movs	r3, #13
 8006088:	803b      	strh	r3, [r7, #0]
      if(fft_data2>SCALE_MX_PIXEL) fft_data2=SCALE_MX_PIXEL;
 800608a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800608e:	2bd5      	cmp	r3, #213	; 0xd5
 8006090:	dd01      	ble.n	8006096 <p_oszi_draw_adc+0x1ee>
 8006092:	23d5      	movs	r3, #213	; 0xd5
 8006094:	803b      	strh	r3, [r7, #0]
      UB_Graphic2D_DrawLineNormal(fft_data1,FFT_START_Y+n,fft_data2,FFT_START_Y+n+1,FFT_COL);
 8006096:	8878      	ldrh	r0, [r7, #2]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	b29b      	uxth	r3, r3
 800609c:	331f      	adds	r3, #31
 800609e:	b299      	uxth	r1, r3
 80060a0:	883a      	ldrh	r2, [r7, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3320      	adds	r3, #32
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80060ae:	9400      	str	r4, [sp, #0]
 80060b0:	f00a fbbf 	bl	8010832 <UB_Graphic2D_DrawLineNormal>
      fft_data1=fft_data2;
 80060b4:	883b      	ldrh	r3, [r7, #0]
 80060b6:	807b      	strh	r3, [r7, #2]
    for(n=1;n<FFT_VISIBLE_LENGTH;n++) {
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2bff      	cmp	r3, #255	; 0xff
 80060c2:	d9d3      	bls.n	800606c <p_oszi_draw_adc+0x1c4>
    }
  }

  UB_LCD_SetLayer_Back();
 80060c4:	f00a ffd8 	bl	8011078 <UB_LCD_SetLayer_Back>
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd90      	pop	{r4, r7, pc}
 80060d0:	20001948 	.word	0x20001948
 80060d4:	2000277c 	.word	0x2000277c
 80060d8:	200027d4 	.word	0x200027d4
 80060dc:	00000000 	.word	0x00000000

080060e0 <oszi_adc2pixel>:

//--------------------------------------------------------------
// Convert adc-data into pixel position
//--------------------------------------------------------------
int16_t oszi_adc2pixel(uint16_t adc, uint32_t faktor)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	6039      	str	r1, [r7, #0]
 80060ea:	80fb      	strh	r3, [r7, #6]
  int16_t return_val=0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	81fb      	strh	r3, [r7, #14]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	f200 80b3 	bhi.w	800625e <oszi_adc2pixel+0x17e>
 80060f8:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <oszi_adc2pixel+0x20>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	0800611d 	.word	0x0800611d
 8006104:	0800614b 	.word	0x0800614b
 8006108:	08006179 	.word	0x08006179
 800610c:	080061a7 	.word	0x080061a7
 8006110:	080061d5 	.word	0x080061d5
 8006114:	08006203 	.word	0x08006203
 8006118:	08006231 	.word	0x08006231

  switch(faktor) {
    case 0 : return_val=adc*FAKTOR_5V;break;
 800611c:	88fa      	ldrh	r2, [r7, #6]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009a      	lsls	r2, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	4618      	mov	r0, r3
 800612a:	f7fa fa03 	bl	8000534 <__aeabi_i2d>
 800612e:	a350      	add	r3, pc, #320	; (adr r3, 8006270 <oszi_adc2pixel+0x190>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f7fa fb92 	bl	800085c <__aeabi_ddiv>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4610      	mov	r0, r2
 800613e:	4619      	mov	r1, r3
 8006140:	f7fa fc74 	bl	8000a2c <__aeabi_d2iz>
 8006144:	4603      	mov	r3, r0
 8006146:	81fb      	strh	r3, [r7, #14]
 8006148:	e089      	b.n	800625e <oszi_adc2pixel+0x17e>
    case 1 : return_val=adc*FAKTOR_2V;break;
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	009a      	lsls	r2, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f7fa f9ec 	bl	8000534 <__aeabi_i2d>
 800615c:	a346      	add	r3, pc, #280	; (adr r3, 8006278 <oszi_adc2pixel+0x198>)
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	f7fa fb7b 	bl	800085c <__aeabi_ddiv>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4610      	mov	r0, r2
 800616c:	4619      	mov	r1, r3
 800616e:	f7fa fc5d 	bl	8000a2c <__aeabi_d2iz>
 8006172:	4603      	mov	r3, r0
 8006174:	81fb      	strh	r3, [r7, #14]
 8006176:	e072      	b.n	800625e <oszi_adc2pixel+0x17e>
    case 2 : return_val=adc*FAKTOR_1V;break;
 8006178:	88fa      	ldrh	r2, [r7, #6]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009a      	lsls	r2, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	4618      	mov	r0, r3
 8006186:	f7fa f9d5 	bl	8000534 <__aeabi_i2d>
 800618a:	a33d      	add	r3, pc, #244	; (adr r3, 8006280 <oszi_adc2pixel+0x1a0>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f7fa fb64 	bl	800085c <__aeabi_ddiv>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	f7fa fc46 	bl	8000a2c <__aeabi_d2iz>
 80061a0:	4603      	mov	r3, r0
 80061a2:	81fb      	strh	r3, [r7, #14]
 80061a4:	e05b      	b.n	800625e <oszi_adc2pixel+0x17e>
    case 3 : return_val=adc*FAKTOR_0V5;break;
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009a      	lsls	r2, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fa f9be 	bl	8000534 <__aeabi_i2d>
 80061b8:	a333      	add	r3, pc, #204	; (adr r3, 8006288 <oszi_adc2pixel+0x1a8>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa fb4d 	bl	800085c <__aeabi_ddiv>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7fa fc2f 	bl	8000a2c <__aeabi_d2iz>
 80061ce:	4603      	mov	r3, r0
 80061d0:	81fb      	strh	r3, [r7, #14]
 80061d2:	e044      	b.n	800625e <oszi_adc2pixel+0x17e>
    case 4 : return_val=adc*FAKTOR_0V2;break;
 80061d4:	88fa      	ldrh	r2, [r7, #6]
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009a      	lsls	r2, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fa f9a7 	bl	8000534 <__aeabi_i2d>
 80061e6:	a32a      	add	r3, pc, #168	; (adr r3, 8006290 <oszi_adc2pixel+0x1b0>)
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f7fa fb36 	bl	800085c <__aeabi_ddiv>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4610      	mov	r0, r2
 80061f6:	4619      	mov	r1, r3
 80061f8:	f7fa fc18 	bl	8000a2c <__aeabi_d2iz>
 80061fc:	4603      	mov	r3, r0
 80061fe:	81fb      	strh	r3, [r7, #14]
 8006200:	e02d      	b.n	800625e <oszi_adc2pixel+0x17e>
    case 5 : return_val=adc*FAKTOR_0V1;break;
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	009a      	lsls	r2, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa f990 	bl	8000534 <__aeabi_i2d>
 8006214:	a320      	add	r3, pc, #128	; (adr r3, 8006298 <oszi_adc2pixel+0x1b8>)
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f7fa fb1f 	bl	800085c <__aeabi_ddiv>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4610      	mov	r0, r2
 8006224:	4619      	mov	r1, r3
 8006226:	f7fa fc01 	bl	8000a2c <__aeabi_d2iz>
 800622a:	4603      	mov	r3, r0
 800622c:	81fb      	strh	r3, [r7, #14]
 800622e:	e016      	b.n	800625e <oszi_adc2pixel+0x17e>
    case 6 : return_val=adc*FAKTOR_0V05;break;
 8006230:	88fa      	ldrh	r2, [r7, #6]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009a      	lsls	r2, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f7fa f979 	bl	8000534 <__aeabi_i2d>
 8006242:	a317      	add	r3, pc, #92	; (adr r3, 80062a0 <oszi_adc2pixel+0x1c0>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f7fa fb08 	bl	800085c <__aeabi_ddiv>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4610      	mov	r0, r2
 8006252:	4619      	mov	r1, r3
 8006254:	f7fa fbea 	bl	8000a2c <__aeabi_d2iz>
 8006258:	4603      	mov	r3, r0
 800625a:	81fb      	strh	r3, [r7, #14]
 800625c:	bf00      	nop
  }

  return(return_val);
 800625e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	f3af 8000 	nop.w
 8006270:	a2e8ba2f 	.word	0xa2e8ba2f
 8006274:	40b83c8b 	.word	0x40b83c8b
 8006278:	e8ba2e8c 	.word	0xe8ba2e8c
 800627c:	40a363a2 	.word	0x40a363a2
 8006280:	e8ba2e8c 	.word	0xe8ba2e8c
 8006284:	409363a2 	.word	0x409363a2
 8006288:	e8ba2e8c 	.word	0xe8ba2e8c
 800628c:	408363a2 	.word	0x408363a2
 8006290:	745d1746 	.word	0x745d1746
 8006294:	406f05d1 	.word	0x406f05d1
 8006298:	745d1746 	.word	0x745d1746
 800629c:	405f05d1 	.word	0x405f05d1
 80062a0:	745d1746 	.word	0x745d1746
 80062a4:	404f05d1 	.word	0x404f05d1

080062a8 <p_oszi_send_data>:

//--------------------------------------------------------------
// Daten per UART senden
//--------------------------------------------------------------
void p_oszi_send_data(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
  extern const SM_Item_t UM_02[];

  //--------------------------------
  // send Screen as Bitmap
  //--------------------------------
  if(Menu.send.mode==6) {
 80062ae:	4ba5      	ldr	r3, [pc, #660]	; (8006544 <p_oszi_send_data+0x29c>)
 80062b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b2:	2b06      	cmp	r3, #6
 80062b4:	d102      	bne.n	80062bc <p_oszi_send_data+0x14>
    p_oszi_send_screen();
 80062b6:	f000 f97f 	bl	80065b8 <p_oszi_send_screen>
 80062ba:	e140      	b.n	800653e <p_oszi_send_data+0x296>
  }

  //--------------------------------
  // send settings
  //--------------------------------
  p_oszi_send_uart((uint8_t *)"SETTINGS:\r\n");
 80062bc:	48a2      	ldr	r0, [pc, #648]	; (8006548 <p_oszi_send_data+0x2a0>)
 80062be:	f000 f96f 	bl	80065a0 <p_oszi_send_uart>
  if((Menu.send.mode==0) || (Menu.send.mode==1) || (Menu.send.mode==4) || (Menu.send.mode==5)) {
 80062c2:	4ba0      	ldr	r3, [pc, #640]	; (8006544 <p_oszi_send_data+0x29c>)
 80062c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00b      	beq.n	80062e2 <p_oszi_send_data+0x3a>
 80062ca:	4b9e      	ldr	r3, [pc, #632]	; (8006544 <p_oszi_send_data+0x29c>)
 80062cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d007      	beq.n	80062e2 <p_oszi_send_data+0x3a>
 80062d2:	4b9c      	ldr	r3, [pc, #624]	; (8006544 <p_oszi_send_data+0x29c>)
 80062d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d003      	beq.n	80062e2 <p_oszi_send_data+0x3a>
 80062da:	4b9a      	ldr	r3, [pc, #616]	; (8006544 <p_oszi_send_data+0x29c>)
 80062dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d10d      	bne.n	80062fe <p_oszi_send_data+0x56>
    sprintf(buf,"CH1=%s/div\r\n",UM_01[Menu.ch1.faktor].stxt);
 80062e2:	4b98      	ldr	r3, [pc, #608]	; (8006544 <p_oszi_send_data+0x29c>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	4a99      	ldr	r2, [pc, #612]	; (800654c <p_oszi_send_data+0x2a4>)
 80062e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062ec:	463b      	mov	r3, r7
 80062ee:	4998      	ldr	r1, [pc, #608]	; (8006550 <p_oszi_send_data+0x2a8>)
 80062f0:	4618      	mov	r0, r3
 80062f2:	f00b fe19 	bl	8011f28 <siprintf>
    p_oszi_send_uart((uint8_t *)buf);
 80062f6:	463b      	mov	r3, r7
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f951 	bl	80065a0 <p_oszi_send_uart>
  }
  if((Menu.send.mode==2) || (Menu.send.mode==3) || (Menu.send.mode==4) || (Menu.send.mode==5)) {
 80062fe:	4b91      	ldr	r3, [pc, #580]	; (8006544 <p_oszi_send_data+0x29c>)
 8006300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006302:	2b02      	cmp	r3, #2
 8006304:	d00b      	beq.n	800631e <p_oszi_send_data+0x76>
 8006306:	4b8f      	ldr	r3, [pc, #572]	; (8006544 <p_oszi_send_data+0x29c>)
 8006308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630a:	2b03      	cmp	r3, #3
 800630c:	d007      	beq.n	800631e <p_oszi_send_data+0x76>
 800630e:	4b8d      	ldr	r3, [pc, #564]	; (8006544 <p_oszi_send_data+0x29c>)
 8006310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006312:	2b04      	cmp	r3, #4
 8006314:	d003      	beq.n	800631e <p_oszi_send_data+0x76>
 8006316:	4b8b      	ldr	r3, [pc, #556]	; (8006544 <p_oszi_send_data+0x29c>)
 8006318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631a:	2b05      	cmp	r3, #5
 800631c:	d10d      	bne.n	800633a <p_oszi_send_data+0x92>
    sprintf(buf,"CH2=%s/div\r\n",UM_01[Menu.ch2.faktor].stxt);
 800631e:	4b89      	ldr	r3, [pc, #548]	; (8006544 <p_oszi_send_data+0x29c>)
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4a8a      	ldr	r2, [pc, #552]	; (800654c <p_oszi_send_data+0x2a4>)
 8006324:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006328:	463b      	mov	r3, r7
 800632a:	498a      	ldr	r1, [pc, #552]	; (8006554 <p_oszi_send_data+0x2ac>)
 800632c:	4618      	mov	r0, r3
 800632e:	f00b fdfb 	bl	8011f28 <siprintf>
    p_oszi_send_uart((uint8_t *)buf);
 8006332:	463b      	mov	r3, r7
 8006334:	4618      	mov	r0, r3
 8006336:	f000 f933 	bl	80065a0 <p_oszi_send_uart>
  }
  sprintf(buf,"Time=%s/div\r\n",UM_02[Menu.timebase.value].stxt);
 800633a:	4b82      	ldr	r3, [pc, #520]	; (8006544 <p_oszi_send_data+0x29c>)
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	4a86      	ldr	r2, [pc, #536]	; (8006558 <p_oszi_send_data+0x2b0>)
 8006340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006344:	463b      	mov	r3, r7
 8006346:	4985      	ldr	r1, [pc, #532]	; (800655c <p_oszi_send_data+0x2b4>)
 8006348:	4618      	mov	r0, r3
 800634a:	f00b fded 	bl	8011f28 <siprintf>
  p_oszi_send_uart((uint8_t *)buf);
 800634e:	463b      	mov	r3, r7
 8006350:	4618      	mov	r0, r3
 8006352:	f000 f925 	bl	80065a0 <p_oszi_send_uart>
  p_oszi_send_uart((uint8_t *)"1div=25\r\n");
 8006356:	4882      	ldr	r0, [pc, #520]	; (8006560 <p_oszi_send_data+0x2b8>)
 8006358:	f000 f922 	bl	80065a0 <p_oszi_send_uart>

  sprintf(buf,"count=%d\r\n",SCALE_W);
 800635c:	463b      	mov	r3, r7
 800635e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006362:	4980      	ldr	r1, [pc, #512]	; (8006564 <p_oszi_send_data+0x2bc>)
 8006364:	4618      	mov	r0, r3
 8006366:	f00b fddf 	bl	8011f28 <siprintf>
  p_oszi_send_uart((uint8_t *)buf);
 800636a:	463b      	mov	r3, r7
 800636c:	4618      	mov	r0, r3
 800636e:	f000 f917 	bl	80065a0 <p_oszi_send_uart>

  //--------------------------------
  // send data
  //--------------------------------
  p_oszi_send_uart((uint8_t *)"DATA:\r\n");
 8006372:	487d      	ldr	r0, [pc, #500]	; (8006568 <p_oszi_send_data+0x2c0>)
 8006374:	f000 f914 	bl	80065a0 <p_oszi_send_uart>
  if((Menu.send.mode==0) || (Menu.send.mode==1)) {
 8006378:	4b72      	ldr	r3, [pc, #456]	; (8006544 <p_oszi_send_data+0x29c>)
 800637a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <p_oszi_send_data+0xe0>
 8006380:	4b70      	ldr	r3, [pc, #448]	; (8006544 <p_oszi_send_data+0x29c>)
 8006382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006384:	2b01      	cmp	r3, #1
 8006386:	d11d      	bne.n	80063c4 <p_oszi_send_data+0x11c>
    p_oszi_send_uart((uint8_t *)"CH1\r\n");
 8006388:	4878      	ldr	r0, [pc, #480]	; (800656c <p_oszi_send_data+0x2c4>)
 800638a:	f000 f909 	bl	80065a0 <p_oszi_send_uart>
    for(n=0;n<SCALE_W;n++) {
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e012      	b.n	80063ba <p_oszi_send_data+0x112>
      data1=ADC_DMA_Buffer_C[n*2];
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	4a75      	ldr	r2, [pc, #468]	; (8006570 <p_oszi_send_data+0x2c8>)
 800639a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800639e:	827b      	strh	r3, [r7, #18]
      sprintf(buf,"%d\r\n",data1);
 80063a0:	8a7a      	ldrh	r2, [r7, #18]
 80063a2:	463b      	mov	r3, r7
 80063a4:	4973      	ldr	r1, [pc, #460]	; (8006574 <p_oszi_send_data+0x2cc>)
 80063a6:	4618      	mov	r0, r3
 80063a8:	f00b fdbe 	bl	8011f28 <siprintf>
      p_oszi_send_uart((uint8_t *)buf);
 80063ac:	463b      	mov	r3, r7
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 f8f6 	bl	80065a0 <p_oszi_send_uart>
    for(n=0;n<SCALE_W;n++) {
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	3301      	adds	r3, #1
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80063c0:	d3e8      	bcc.n	8006394 <p_oszi_send_data+0xec>
  if((Menu.send.mode==0) || (Menu.send.mode==1)) {
 80063c2:	e052      	b.n	800646a <p_oszi_send_data+0x1c2>
    }
  }
  else if((Menu.send.mode==2) || (Menu.send.mode==3)) {
 80063c4:	4b5f      	ldr	r3, [pc, #380]	; (8006544 <p_oszi_send_data+0x29c>)
 80063c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d003      	beq.n	80063d4 <p_oszi_send_data+0x12c>
 80063cc:	4b5d      	ldr	r3, [pc, #372]	; (8006544 <p_oszi_send_data+0x29c>)
 80063ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d11e      	bne.n	8006412 <p_oszi_send_data+0x16a>
    p_oszi_send_uart((uint8_t *)"CH2\r\n");
 80063d4:	4868      	ldr	r0, [pc, #416]	; (8006578 <p_oszi_send_data+0x2d0>)
 80063d6:	f000 f8e3 	bl	80065a0 <p_oszi_send_uart>
    for(n=0;n<SCALE_W;n++) {
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	e013      	b.n	8006408 <p_oszi_send_data+0x160>
      data2=ADC_DMA_Buffer_C[(n*2)+1];
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	3301      	adds	r3, #1
 80063e6:	4a62      	ldr	r2, [pc, #392]	; (8006570 <p_oszi_send_data+0x2c8>)
 80063e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ec:	823b      	strh	r3, [r7, #16]
      sprintf(buf,"%d\r\n",data2);
 80063ee:	8a3a      	ldrh	r2, [r7, #16]
 80063f0:	463b      	mov	r3, r7
 80063f2:	4960      	ldr	r1, [pc, #384]	; (8006574 <p_oszi_send_data+0x2cc>)
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00b fd97 	bl	8011f28 <siprintf>
      p_oszi_send_uart((uint8_t *)buf);
 80063fa:	463b      	mov	r3, r7
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 f8cf 	bl	80065a0 <p_oszi_send_uart>
    for(n=0;n<SCALE_W;n++) {
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	3301      	adds	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800640e:	d3e7      	bcc.n	80063e0 <p_oszi_send_data+0x138>
  else if((Menu.send.mode==2) || (Menu.send.mode==3)) {
 8006410:	e02b      	b.n	800646a <p_oszi_send_data+0x1c2>
    }
  }
  else if((Menu.send.mode==4) || (Menu.send.mode==5)) {
 8006412:	4b4c      	ldr	r3, [pc, #304]	; (8006544 <p_oszi_send_data+0x29c>)
 8006414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006416:	2b04      	cmp	r3, #4
 8006418:	d003      	beq.n	8006422 <p_oszi_send_data+0x17a>
 800641a:	4b4a      	ldr	r3, [pc, #296]	; (8006544 <p_oszi_send_data+0x29c>)
 800641c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641e:	2b05      	cmp	r3, #5
 8006420:	d123      	bne.n	800646a <p_oszi_send_data+0x1c2>
    p_oszi_send_uart((uint8_t *)"CH1,CH2\r\n");
 8006422:	4856      	ldr	r0, [pc, #344]	; (800657c <p_oszi_send_data+0x2d4>)
 8006424:	f000 f8bc 	bl	80065a0 <p_oszi_send_uart>
    for(n=0;n<SCALE_W;n++) {
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e019      	b.n	8006462 <p_oszi_send_data+0x1ba>
      data1=ADC_DMA_Buffer_C[n*2];
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	4a4f      	ldr	r2, [pc, #316]	; (8006570 <p_oszi_send_data+0x2c8>)
 8006434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006438:	827b      	strh	r3, [r7, #18]
      data2=ADC_DMA_Buffer_C[(n*2)+1];
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	3301      	adds	r3, #1
 8006440:	4a4b      	ldr	r2, [pc, #300]	; (8006570 <p_oszi_send_data+0x2c8>)
 8006442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006446:	823b      	strh	r3, [r7, #16]
      sprintf(buf,"%d,%d\r\n",data1,data2);
 8006448:	8a7a      	ldrh	r2, [r7, #18]
 800644a:	8a3b      	ldrh	r3, [r7, #16]
 800644c:	4638      	mov	r0, r7
 800644e:	494c      	ldr	r1, [pc, #304]	; (8006580 <p_oszi_send_data+0x2d8>)
 8006450:	f00b fd6a 	bl	8011f28 <siprintf>
      p_oszi_send_uart((uint8_t *)buf);
 8006454:	463b      	mov	r3, r7
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f8a2 	bl	80065a0 <p_oszi_send_uart>
    for(n=0;n<SCALE_W;n++) {
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	3301      	adds	r3, #1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006468:	d3e1      	bcc.n	800642e <p_oszi_send_data+0x186>
    }
  }
  //--------------------------------
  // send fft
  //--------------------------------
  if((Menu.send.mode==1) || (Menu.send.mode==3) || (Menu.send.mode==5)) {
 800646a:	4b36      	ldr	r3, [pc, #216]	; (8006544 <p_oszi_send_data+0x29c>)
 800646c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646e:	2b01      	cmp	r3, #1
 8006470:	d007      	beq.n	8006482 <p_oszi_send_data+0x1da>
 8006472:	4b34      	ldr	r3, [pc, #208]	; (8006544 <p_oszi_send_data+0x29c>)
 8006474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006476:	2b03      	cmp	r3, #3
 8006478:	d003      	beq.n	8006482 <p_oszi_send_data+0x1da>
 800647a:	4b32      	ldr	r3, [pc, #200]	; (8006544 <p_oszi_send_data+0x29c>)
 800647c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647e:	2b05      	cmp	r3, #5
 8006480:	d15a      	bne.n	8006538 <p_oszi_send_data+0x290>
    if(Menu.fft.mode==1) {
 8006482:	4b30      	ldr	r3, [pc, #192]	; (8006544 <p_oszi_send_data+0x29c>)
 8006484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006486:	2b01      	cmp	r3, #1
 8006488:	d129      	bne.n	80064de <p_oszi_send_data+0x236>
      p_oszi_send_uart((uint8_t *)"FFT:");
 800648a:	483e      	ldr	r0, [pc, #248]	; (8006584 <p_oszi_send_data+0x2dc>)
 800648c:	f000 f888 	bl	80065a0 <p_oszi_send_uart>
      p_oszi_send_uart((uint8_t *)"CH1");
 8006490:	483d      	ldr	r0, [pc, #244]	; (8006588 <p_oszi_send_data+0x2e0>)
 8006492:	f000 f885 	bl	80065a0 <p_oszi_send_uart>
      sprintf(buf,"count=%d",FFT_VISIBLE_LENGTH);
 8006496:	463b      	mov	r3, r7
 8006498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800649c:	493b      	ldr	r1, [pc, #236]	; (800658c <p_oszi_send_data+0x2e4>)
 800649e:	4618      	mov	r0, r3
 80064a0:	f00b fd42 	bl	8011f28 <siprintf>
      p_oszi_send_uart((uint8_t *)buf);
 80064a4:	463b      	mov	r3, r7
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 f87a 	bl	80065a0 <p_oszi_send_uart>
      for(n=0;n<FFT_VISIBLE_LENGTH;n++) {
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e011      	b.n	80064d6 <p_oszi_send_data+0x22e>
        data2=FFT_UINT_DATA[n];
 80064b2:	4a37      	ldr	r2, [pc, #220]	; (8006590 <p_oszi_send_data+0x2e8>)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ba:	823b      	strh	r3, [r7, #16]
        sprintf(buf,"%d",data2);
 80064bc:	8a3a      	ldrh	r2, [r7, #16]
 80064be:	463b      	mov	r3, r7
 80064c0:	4934      	ldr	r1, [pc, #208]	; (8006594 <p_oszi_send_data+0x2ec>)
 80064c2:	4618      	mov	r0, r3
 80064c4:	f00b fd30 	bl	8011f28 <siprintf>
        p_oszi_send_uart((uint8_t *)buf);
 80064c8:	463b      	mov	r3, r7
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f868 	bl	80065a0 <p_oszi_send_uart>
      for(n=0;n<FFT_VISIBLE_LENGTH;n++) {
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	3301      	adds	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2bff      	cmp	r3, #255	; 0xff
 80064da:	d9ea      	bls.n	80064b2 <p_oszi_send_data+0x20a>
 80064dc:	e02c      	b.n	8006538 <p_oszi_send_data+0x290>
      }
    }
    else if(Menu.fft.mode==2) {
 80064de:	4b19      	ldr	r3, [pc, #100]	; (8006544 <p_oszi_send_data+0x29c>)
 80064e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d128      	bne.n	8006538 <p_oszi_send_data+0x290>
      p_oszi_send_uart((uint8_t *)"FFT:\r\n");
 80064e6:	482c      	ldr	r0, [pc, #176]	; (8006598 <p_oszi_send_data+0x2f0>)
 80064e8:	f000 f85a 	bl	80065a0 <p_oszi_send_uart>
      p_oszi_send_uart((uint8_t *)"CH2\r\n");
 80064ec:	4822      	ldr	r0, [pc, #136]	; (8006578 <p_oszi_send_data+0x2d0>)
 80064ee:	f000 f857 	bl	80065a0 <p_oszi_send_uart>
      sprintf(buf,"count=%d\r\n",FFT_VISIBLE_LENGTH);
 80064f2:	463b      	mov	r3, r7
 80064f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064f8:	491a      	ldr	r1, [pc, #104]	; (8006564 <p_oszi_send_data+0x2bc>)
 80064fa:	4618      	mov	r0, r3
 80064fc:	f00b fd14 	bl	8011f28 <siprintf>
      p_oszi_send_uart((uint8_t *)buf);
 8006500:	463b      	mov	r3, r7
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f84c 	bl	80065a0 <p_oszi_send_uart>
      for(n=0;n<FFT_VISIBLE_LENGTH;n++) {
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e011      	b.n	8006532 <p_oszi_send_data+0x28a>
        data2=FFT_UINT_DATA[n];
 800650e:	4a20      	ldr	r2, [pc, #128]	; (8006590 <p_oszi_send_data+0x2e8>)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006516:	823b      	strh	r3, [r7, #16]
        sprintf(buf,"%d\r\n",data2);
 8006518:	8a3a      	ldrh	r2, [r7, #16]
 800651a:	463b      	mov	r3, r7
 800651c:	4915      	ldr	r1, [pc, #84]	; (8006574 <p_oszi_send_data+0x2cc>)
 800651e:	4618      	mov	r0, r3
 8006520:	f00b fd02 	bl	8011f28 <siprintf>
        p_oszi_send_uart((uint8_t *)buf);
 8006524:	463b      	mov	r3, r7
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f83a 	bl	80065a0 <p_oszi_send_uart>
      for(n=0;n<FFT_VISIBLE_LENGTH;n++) {
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	3301      	adds	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2bff      	cmp	r3, #255	; 0xff
 8006536:	d9ea      	bls.n	800650e <p_oszi_send_data+0x266>
      }
    }
  }
  p_oszi_send_uart((uint8_t *)"END.\r\n");
 8006538:	4818      	ldr	r0, [pc, #96]	; (800659c <p_oszi_send_data+0x2f4>)
 800653a:	f000 f831 	bl	80065a0 <p_oszi_send_uart>
}
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	2000277c 	.word	0x2000277c
 8006548:	08012b08 	.word	0x08012b08
 800654c:	08012c54 	.word	0x08012c54
 8006550:	08012b14 	.word	0x08012b14
 8006554:	08012b24 	.word	0x08012b24
 8006558:	08012c70 	.word	0x08012c70
 800655c:	08012b34 	.word	0x08012b34
 8006560:	08012b44 	.word	0x08012b44
 8006564:	08012b50 	.word	0x08012b50
 8006568:	08012b5c 	.word	0x08012b5c
 800656c:	08012b64 	.word	0x08012b64
 8006570:	20001948 	.word	0x20001948
 8006574:	08012b6c 	.word	0x08012b6c
 8006578:	08012b74 	.word	0x08012b74
 800657c:	08012b7c 	.word	0x08012b7c
 8006580:	08012b88 	.word	0x08012b88
 8006584:	08012b90 	.word	0x08012b90
 8006588:	08012b98 	.word	0x08012b98
 800658c:	08012b9c 	.word	0x08012b9c
 8006590:	200027d4 	.word	0x200027d4
 8006594:	08012ba8 	.word	0x08012ba8
 8006598:	08012bac 	.word	0x08012bac
 800659c:	08012bb4 	.word	0x08012bb4

080065a0 <p_oszi_send_uart>:

//--------------------------------------------------------------
// string per UART senden
//--------------------------------------------------------------
void p_oszi_send_uart(uint8_t *ptr)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UB_Uart_SendString(ptr);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f00b fc61 	bl	8011e70 <UB_Uart_SendString>
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <p_oszi_send_screen>:
//--------------------------------------------------------------
// Screen als Bitmap (*.bmp) per UART senden
// dauert bei 115200 Baud ca. 20 sekunden
//--------------------------------------------------------------
void p_oszi_send_screen(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
  uint32_t n,adr;
  uint16_t x,y,color;
  uint8_t r,g,b;

  // BMP-Header senden
  for(n=0;n<BMP_HEADER_LEN;n++) {
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e009      	b.n	80065d8 <p_oszi_send_screen+0x20>
    UB_Uart_SendByte(BMP_HEADER[n]);
 80065c4:	4a2c      	ldr	r2, [pc, #176]	; (8006678 <p_oszi_send_screen+0xc0>)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	4413      	add	r3, r2
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f00b fc31 	bl	8011e34 <UB_Uart_SendByte>
  for(n=0;n<BMP_HEADER_LEN;n++) {
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	3301      	adds	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2b35      	cmp	r3, #53	; 0x35
 80065dc:	d9f2      	bls.n	80065c4 <p_oszi_send_screen+0xc>
  }

  // den richigen Buffer zum senden raussuchen
  if(LCD_CurrentLayer==1) {
 80065de:	4b27      	ldr	r3, [pc, #156]	; (800667c <p_oszi_send_screen+0xc4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d103      	bne.n	80065ee <p_oszi_send_screen+0x36>
    adr=LCD_FRAME_BUFFER;
 80065e6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	e001      	b.n	80065f2 <p_oszi_send_screen+0x3a>
  }
  else {
    adr=LCD_FRAME_BUFFER + LCD_FRAME_OFFSET;
 80065ee:	4b24      	ldr	r3, [pc, #144]	; (8006680 <p_oszi_send_screen+0xc8>)
 80065f0:	613b      	str	r3, [r7, #16]
  }

  // alle Farb-Daten senden
  for(x=0;x<LCD_MAXX;x++) {
 80065f2:	2300      	movs	r3, #0
 80065f4:	81fb      	strh	r3, [r7, #14]
 80065f6:	e036      	b.n	8006666 <p_oszi_send_screen+0xae>
    for(y=0;y<LCD_MAXY;y++) {
 80065f8:	2300      	movs	r3, #0
 80065fa:	81bb      	strh	r3, [r7, #12]
 80065fc:	e02c      	b.n	8006658 <p_oszi_send_screen+0xa0>
      n=y*(LCD_MAXX*2)+(x*2);
 80065fe:	89ba      	ldrh	r2, [r7, #12]
 8006600:	4613      	mov	r3, r2
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	461a      	mov	r2, r3
 800660a:	89fb      	ldrh	r3, [r7, #14]
 800660c:	4413      	add	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	617b      	str	r3, [r7, #20]
      color=*(volatile uint16_t*)(adr+n);
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	817b      	strh	r3, [r7, #10]
      r=((color&0xF800)>>8);  // 5bit rot
 800661c:	897b      	ldrh	r3, [r7, #10]
 800661e:	121b      	asrs	r3, r3, #8
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f023 0307 	bic.w	r3, r3, #7
 8006626:	727b      	strb	r3, [r7, #9]
      g=((color&0x07E0)>>3);  // 6bit gruen
 8006628:	897b      	ldrh	r3, [r7, #10]
 800662a:	10db      	asrs	r3, r3, #3
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	723b      	strb	r3, [r7, #8]
      b=((color&0x001F)<<3);  // 5bit blau
 8006634:	897b      	ldrh	r3, [r7, #10]
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	71fb      	strb	r3, [r7, #7]
      UB_Uart_SendByte(b);
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	4618      	mov	r0, r3
 800663e:	f00b fbf9 	bl	8011e34 <UB_Uart_SendByte>
      UB_Uart_SendByte(g);
 8006642:	7a3b      	ldrb	r3, [r7, #8]
 8006644:	4618      	mov	r0, r3
 8006646:	f00b fbf5 	bl	8011e34 <UB_Uart_SendByte>
      UB_Uart_SendByte(r);
 800664a:	7a7b      	ldrb	r3, [r7, #9]
 800664c:	4618      	mov	r0, r3
 800664e:	f00b fbf1 	bl	8011e34 <UB_Uart_SendByte>
    for(y=0;y<LCD_MAXY;y++) {
 8006652:	89bb      	ldrh	r3, [r7, #12]
 8006654:	3301      	adds	r3, #1
 8006656:	81bb      	strh	r3, [r7, #12]
 8006658:	89bb      	ldrh	r3, [r7, #12]
 800665a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800665e:	d3ce      	bcc.n	80065fe <p_oszi_send_screen+0x46>
  for(x=0;x<LCD_MAXX;x++) {
 8006660:	89fb      	ldrh	r3, [r7, #14]
 8006662:	3301      	adds	r3, #1
 8006664:	81fb      	strh	r3, [r7, #14]
 8006666:	89fb      	ldrh	r3, [r7, #14]
 8006668:	2bef      	cmp	r3, #239	; 0xef
 800666a:	d9c5      	bls.n	80065f8 <p_oszi_send_screen+0x40>
    }
  }
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	2000000c 	.word	0x2000000c
 800667c:	200035f4 	.word	0x200035f4
 8006680:	d0025800 	.word	0xd0025800

08006684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800668a:	2300      	movs	r3, #0
 800668c:	607b      	str	r3, [r7, #4]
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <HAL_MspInit+0x54>)
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	4a11      	ldr	r2, [pc, #68]	; (80066d8 <HAL_MspInit+0x54>)
 8006694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006698:	6453      	str	r3, [r2, #68]	; 0x44
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <HAL_MspInit+0x54>)
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066a6:	2300      	movs	r3, #0
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <HAL_MspInit+0x54>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	4a0a      	ldr	r2, [pc, #40]	; (80066d8 <HAL_MspInit+0x54>)
 80066b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b4:	6413      	str	r3, [r2, #64]	; 0x40
 80066b6:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <HAL_MspInit+0x54>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80066c2:	2200      	movs	r2, #0
 80066c4:	210f      	movs	r1, #15
 80066c6:	f06f 0001 	mvn.w	r0, #1
 80066ca:	f003 fb54 	bl	8009d76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40023800 	.word	0x40023800

080066dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08c      	sub	sp, #48	; 0x30
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e4:	f107 031c 	add.w	r3, r7, #28
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	605a      	str	r2, [r3, #4]
 80066ee:	609a      	str	r2, [r3, #8]
 80066f0:	60da      	str	r2, [r3, #12]
 80066f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a46      	ldr	r2, [pc, #280]	; (8006814 <HAL_ADC_MspInit+0x138>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d159      	bne.n	80067b2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80066fe:	2300      	movs	r3, #0
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	4b45      	ldr	r3, [pc, #276]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	4a44      	ldr	r2, [pc, #272]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 8006708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670c:	6453      	str	r3, [r2, #68]	; 0x44
 800670e:	4b42      	ldr	r3, [pc, #264]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	4b3e      	ldr	r3, [pc, #248]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	4a3d      	ldr	r2, [pc, #244]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	6313      	str	r3, [r2, #48]	; 0x30
 800672a:	4b3b      	ldr	r3, [pc, #236]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006736:	2320      	movs	r3, #32
 8006738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800673a:	2303      	movs	r3, #3
 800673c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673e:	2300      	movs	r3, #0
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006742:	f107 031c 	add.w	r3, r7, #28
 8006746:	4619      	mov	r1, r3
 8006748:	4834      	ldr	r0, [pc, #208]	; (800681c <HAL_ADC_MspInit+0x140>)
 800674a:	f005 fd85 	bl	800c258 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800674e:	4b34      	ldr	r3, [pc, #208]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006750:	4a34      	ldr	r2, [pc, #208]	; (8006824 <HAL_ADC_MspInit+0x148>)
 8006752:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006754:	4b32      	ldr	r3, [pc, #200]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006756:	2200      	movs	r2, #0
 8006758:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800675a:	4b31      	ldr	r3, [pc, #196]	; (8006820 <HAL_ADC_MspInit+0x144>)
 800675c:	2200      	movs	r2, #0
 800675e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006760:	4b2f      	ldr	r3, [pc, #188]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006762:	2200      	movs	r2, #0
 8006764:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006766:	4b2e      	ldr	r3, [pc, #184]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800676c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800676e:	4b2c      	ldr	r3, [pc, #176]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006774:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006776:	4b2a      	ldr	r3, [pc, #168]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006778:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800677c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800677e:	4b28      	ldr	r3, [pc, #160]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006784:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006786:	4b26      	ldr	r3, [pc, #152]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006788:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800678c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800678e:	4b24      	ldr	r3, [pc, #144]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006790:	2200      	movs	r2, #0
 8006792:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006794:	4822      	ldr	r0, [pc, #136]	; (8006820 <HAL_ADC_MspInit+0x144>)
 8006796:	f003 fb33 	bl	8009e00 <HAL_DMA_Init>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80067a0:	f7fb fe14 	bl	80023cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <HAL_ADC_MspInit+0x144>)
 80067a8:	639a      	str	r2, [r3, #56]	; 0x38
 80067aa:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <HAL_ADC_MspInit+0x144>)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80067b0:	e02c      	b.n	800680c <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC2)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <HAL_ADC_MspInit+0x14c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d127      	bne.n	800680c <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	4b15      	ldr	r3, [pc, #84]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 80067c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c4:	4a14      	ldr	r2, [pc, #80]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 80067c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067ca:	6453      	str	r3, [r2, #68]	; 0x44
 80067cc:	4b12      	ldr	r3, [pc, #72]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 80067ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067d8:	2300      	movs	r3, #0
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	4b0e      	ldr	r3, [pc, #56]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	4a0d      	ldr	r2, [pc, #52]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	6313      	str	r3, [r2, #48]	; 0x30
 80067e8:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <HAL_ADC_MspInit+0x13c>)
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80067f4:	2380      	movs	r3, #128	; 0x80
 80067f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067f8:	2303      	movs	r3, #3
 80067fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006800:	f107 031c 	add.w	r3, r7, #28
 8006804:	4619      	mov	r1, r3
 8006806:	4805      	ldr	r0, [pc, #20]	; (800681c <HAL_ADC_MspInit+0x140>)
 8006808:	f005 fd26 	bl	800c258 <HAL_GPIO_Init>
}
 800680c:	bf00      	nop
 800680e:	3730      	adds	r7, #48	; 0x30
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40012000 	.word	0x40012000
 8006818:	40023800 	.word	0x40023800
 800681c:	40020000 	.word	0x40020000
 8006820:	20003470 	.word	0x20003470
 8006824:	40026410 	.word	0x40026410
 8006828:	40012100 	.word	0x40012100

0800682c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a0e      	ldr	r2, [pc, #56]	; (8006874 <HAL_DMA2D_MspInit+0x48>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d115      	bne.n	800686a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <HAL_DMA2D_MspInit+0x4c>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <HAL_DMA2D_MspInit+0x4c>)
 8006848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800684c:	6313      	str	r3, [r2, #48]	; 0x30
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <HAL_DMA2D_MspInit+0x4c>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800685a:	2200      	movs	r2, #0
 800685c:	2105      	movs	r1, #5
 800685e:	205a      	movs	r0, #90	; 0x5a
 8006860:	f003 fa89 	bl	8009d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006864:	205a      	movs	r0, #90	; 0x5a
 8006866:	f003 faa2 	bl	8009dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	4002b000 	.word	0x4002b000
 8006878:	40023800 	.word	0x40023800

0800687c <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a07      	ldr	r2, [pc, #28]	; (80068a8 <HAL_DMA2D_MspDeInit+0x2c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d108      	bne.n	80068a0 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 800688e:	4b07      	ldr	r3, [pc, #28]	; (80068ac <HAL_DMA2D_MspDeInit+0x30>)
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	4a06      	ldr	r2, [pc, #24]	; (80068ac <HAL_DMA2D_MspDeInit+0x30>)
 8006894:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006898:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 800689a:	205a      	movs	r0, #90	; 0x5a
 800689c:	f003 fa95 	bl	8009dca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	4002b000 	.word	0x4002b000
 80068ac:	40023800 	.word	0x40023800

080068b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	; 0x28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a29      	ldr	r2, [pc, #164]	; (8006974 <HAL_I2C_MspInit+0xc4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d14b      	bne.n	800696a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	4b28      	ldr	r3, [pc, #160]	; (8006978 <HAL_I2C_MspInit+0xc8>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	4a27      	ldr	r2, [pc, #156]	; (8006978 <HAL_I2C_MspInit+0xc8>)
 80068dc:	f043 0304 	orr.w	r3, r3, #4
 80068e0:	6313      	str	r3, [r2, #48]	; 0x30
 80068e2:	4b25      	ldr	r3, [pc, #148]	; (8006978 <HAL_I2C_MspInit+0xc8>)
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	4b21      	ldr	r3, [pc, #132]	; (8006978 <HAL_I2C_MspInit+0xc8>)
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	4a20      	ldr	r2, [pc, #128]	; (8006978 <HAL_I2C_MspInit+0xc8>)
 80068f8:	f043 0301 	orr.w	r3, r3, #1
 80068fc:	6313      	str	r3, [r2, #48]	; 0x30
 80068fe:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <HAL_I2C_MspInit+0xc8>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800690a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800690e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006910:	2312      	movs	r3, #18
 8006912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006914:	2301      	movs	r3, #1
 8006916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006918:	2300      	movs	r3, #0
 800691a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800691c:	2304      	movs	r3, #4
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	4619      	mov	r1, r3
 8006926:	4815      	ldr	r0, [pc, #84]	; (800697c <HAL_I2C_MspInit+0xcc>)
 8006928:	f005 fc96 	bl	800c258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800692c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006932:	2312      	movs	r3, #18
 8006934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006936:	2301      	movs	r3, #1
 8006938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800693a:	2300      	movs	r3, #0
 800693c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800693e:	2304      	movs	r3, #4
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8006942:	f107 0314 	add.w	r3, r7, #20
 8006946:	4619      	mov	r1, r3
 8006948:	480d      	ldr	r0, [pc, #52]	; (8006980 <HAL_I2C_MspInit+0xd0>)
 800694a:	f005 fc85 	bl	800c258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800694e:	2300      	movs	r3, #0
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <HAL_I2C_MspInit+0xc8>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <HAL_I2C_MspInit+0xc8>)
 8006958:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800695c:	6413      	str	r3, [r2, #64]	; 0x40
 800695e:	4b06      	ldr	r3, [pc, #24]	; (8006978 <HAL_I2C_MspInit+0xc8>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006966:	60bb      	str	r3, [r7, #8]
 8006968:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800696a:	bf00      	nop
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40005c00 	.word	0x40005c00
 8006978:	40023800 	.word	0x40023800
 800697c:	40020800 	.word	0x40020800
 8006980:	40020000 	.word	0x40020000

08006984 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08e      	sub	sp, #56	; 0x38
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800698c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	609a      	str	r2, [r3, #8]
 8006998:	60da      	str	r2, [r3, #12]
 800699a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a7b      	ldr	r2, [pc, #492]	; (8006b90 <HAL_LTDC_MspInit+0x20c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	f040 80f0 	bne.w	8006b88 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80069a8:	2300      	movs	r3, #0
 80069aa:	623b      	str	r3, [r7, #32]
 80069ac:	4b79      	ldr	r3, [pc, #484]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	4a78      	ldr	r2, [pc, #480]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 80069b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069b6:	6453      	str	r3, [r2, #68]	; 0x44
 80069b8:	4b76      	ldr	r3, [pc, #472]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 80069ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	4b72      	ldr	r3, [pc, #456]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	4a71      	ldr	r2, [pc, #452]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 80069ce:	f043 0320 	orr.w	r3, r3, #32
 80069d2:	6313      	str	r3, [r2, #48]	; 0x30
 80069d4:	4b6f      	ldr	r3, [pc, #444]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	61fb      	str	r3, [r7, #28]
 80069de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	4b6b      	ldr	r3, [pc, #428]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	4a6a      	ldr	r2, [pc, #424]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	6313      	str	r3, [r2, #48]	; 0x30
 80069f0:	4b68      	ldr	r3, [pc, #416]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	61bb      	str	r3, [r7, #24]
 80069fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	4b64      	ldr	r3, [pc, #400]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	4a63      	ldr	r2, [pc, #396]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a06:	f043 0302 	orr.w	r3, r3, #2
 8006a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a0c:	4b61      	ldr	r3, [pc, #388]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	4b5d      	ldr	r3, [pc, #372]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a20:	4a5c      	ldr	r2, [pc, #368]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a26:	6313      	str	r3, [r2, #48]	; 0x30
 8006a28:	4b5a      	ldr	r3, [pc, #360]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	4b56      	ldr	r3, [pc, #344]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	4a55      	ldr	r2, [pc, #340]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a3e:	f043 0304 	orr.w	r3, r3, #4
 8006a42:	6313      	str	r3, [r2, #48]	; 0x30
 8006a44:	4b53      	ldr	r3, [pc, #332]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a50:	2300      	movs	r3, #0
 8006a52:	60bb      	str	r3, [r7, #8]
 8006a54:	4b4f      	ldr	r3, [pc, #316]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	4a4e      	ldr	r2, [pc, #312]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a5a:	f043 0308 	orr.w	r3, r3, #8
 8006a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8006a60:	4b4c      	ldr	r3, [pc, #304]	; (8006b94 <HAL_LTDC_MspInit+0x210>)
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	f003 0308 	and.w	r3, r3, #8
 8006a68:	60bb      	str	r3, [r7, #8]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8006a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a72:	2302      	movs	r3, #2
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006a7e:	230e      	movs	r3, #14
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8006a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a86:	4619      	mov	r1, r3
 8006a88:	4843      	ldr	r0, [pc, #268]	; (8006b98 <HAL_LTDC_MspInit+0x214>)
 8006a8a:	f005 fbe5 	bl	800c258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8006a8e:	f641 0358 	movw	r3, #6232	; 0x1858
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a94:	2302      	movs	r3, #2
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006aa0:	230e      	movs	r3, #14
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	483c      	ldr	r0, [pc, #240]	; (8006b9c <HAL_LTDC_MspInit+0x218>)
 8006aac:	f005 fbd4 	bl	800c258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006abc:	2300      	movs	r3, #0
 8006abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006ac0:	2309      	movs	r3, #9
 8006ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4835      	ldr	r0, [pc, #212]	; (8006ba0 <HAL_LTDC_MspInit+0x21c>)
 8006acc:	f005 fbc4 	bl	800c258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8006ad0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006ae2:	230e      	movs	r3, #14
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aea:	4619      	mov	r1, r3
 8006aec:	482c      	ldr	r0, [pc, #176]	; (8006ba0 <HAL_LTDC_MspInit+0x21c>)
 8006aee:	f005 fbb3 	bl	800c258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8006af2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af8:	2302      	movs	r3, #2
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b00:	2300      	movs	r3, #0
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b04:	230e      	movs	r3, #14
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4825      	ldr	r0, [pc, #148]	; (8006ba4 <HAL_LTDC_MspInit+0x220>)
 8006b10:	f005 fba2 	bl	800c258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8006b14:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b22:	2300      	movs	r3, #0
 8006b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b26:	230e      	movs	r3, #14
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b2e:	4619      	mov	r1, r3
 8006b30:	481d      	ldr	r0, [pc, #116]	; (8006ba8 <HAL_LTDC_MspInit+0x224>)
 8006b32:	f005 fb91 	bl	800c258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8006b36:	2348      	movs	r3, #72	; 0x48
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b42:	2300      	movs	r3, #0
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006b46:	230e      	movs	r3, #14
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4816      	ldr	r0, [pc, #88]	; (8006bac <HAL_LTDC_MspInit+0x228>)
 8006b52:	f005 fb81 	bl	800c258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8006b56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b64:	2300      	movs	r3, #0
 8006b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006b68:	2309      	movs	r3, #9
 8006b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b70:	4619      	mov	r1, r3
 8006b72:	480c      	ldr	r0, [pc, #48]	; (8006ba4 <HAL_LTDC_MspInit+0x220>)
 8006b74:	f005 fb70 	bl	800c258 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2105      	movs	r1, #5
 8006b7c:	2058      	movs	r0, #88	; 0x58
 8006b7e:	f003 f8fa 	bl	8009d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006b82:	2058      	movs	r0, #88	; 0x58
 8006b84:	f003 f913 	bl	8009dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8006b88:	bf00      	nop
 8006b8a:	3738      	adds	r7, #56	; 0x38
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40016800 	.word	0x40016800
 8006b94:	40023800 	.word	0x40023800
 8006b98:	40021400 	.word	0x40021400
 8006b9c:	40020000 	.word	0x40020000
 8006ba0:	40020400 	.word	0x40020400
 8006ba4:	40021800 	.word	0x40021800
 8006ba8:	40020800 	.word	0x40020800
 8006bac:	40020c00 	.word	0x40020c00

08006bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08a      	sub	sp, #40	; 0x28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bb8:	f107 0314 	add.w	r3, r7, #20
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	605a      	str	r2, [r3, #4]
 8006bc2:	609a      	str	r2, [r3, #8]
 8006bc4:	60da      	str	r2, [r3, #12]
 8006bc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <HAL_SPI_MspInit+0x84>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d12c      	bne.n	8006c2c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	4b18      	ldr	r3, [pc, #96]	; (8006c38 <HAL_SPI_MspInit+0x88>)
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bda:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <HAL_SPI_MspInit+0x88>)
 8006bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006be0:	6453      	str	r3, [r2, #68]	; 0x44
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <HAL_SPI_MspInit+0x88>)
 8006be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bea:	613b      	str	r3, [r7, #16]
 8006bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <HAL_SPI_MspInit+0x88>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	4a10      	ldr	r2, [pc, #64]	; (8006c38 <HAL_SPI_MspInit+0x88>)
 8006bf8:	f043 0320 	orr.w	r3, r3, #32
 8006bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <HAL_SPI_MspInit+0x88>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8006c0a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c10:	2302      	movs	r3, #2
 8006c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006c1c:	2305      	movs	r3, #5
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006c20:	f107 0314 	add.w	r3, r7, #20
 8006c24:	4619      	mov	r1, r3
 8006c26:	4805      	ldr	r0, [pc, #20]	; (8006c3c <HAL_SPI_MspInit+0x8c>)
 8006c28:	f005 fb16 	bl	800c258 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006c2c:	bf00      	nop
 8006c2e:	3728      	adds	r7, #40	; 0x28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	40015000 	.word	0x40015000
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	40021400 	.word	0x40021400

08006c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c50:	d10e      	bne.n	8006c70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <HAL_TIM_Base_MspInit+0x70>)
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <HAL_TIM_Base_MspInit+0x70>)
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	6413      	str	r3, [r2, #64]	; 0x40
 8006c62:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <HAL_TIM_Base_MspInit+0x70>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006c6e:	e01a      	b.n	8006ca6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a0f      	ldr	r2, [pc, #60]	; (8006cb4 <HAL_TIM_Base_MspInit+0x74>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d115      	bne.n	8006ca6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <HAL_TIM_Base_MspInit+0x70>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	4a0b      	ldr	r2, [pc, #44]	; (8006cb0 <HAL_TIM_Base_MspInit+0x70>)
 8006c84:	f043 0308 	orr.w	r3, r3, #8
 8006c88:	6413      	str	r3, [r2, #64]	; 0x40
 8006c8a:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <HAL_TIM_Base_MspInit+0x70>)
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	60bb      	str	r3, [r7, #8]
 8006c94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006c96:	2200      	movs	r2, #0
 8006c98:	2100      	movs	r1, #0
 8006c9a:	2032      	movs	r0, #50	; 0x32
 8006c9c:	f003 f86b 	bl	8009d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006ca0:	2032      	movs	r0, #50	; 0x32
 8006ca2:	f003 f884 	bl	8009dae <HAL_NVIC_EnableIRQ>
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	40000c00 	.word	0x40000c00

08006cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc0:	f107 0314 	add.w	r3, r7, #20
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	605a      	str	r2, [r3, #4]
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	60da      	str	r2, [r3, #12]
 8006cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <HAL_UART_MspInit+0x84>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d12c      	bne.n	8006d34 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	4b18      	ldr	r3, [pc, #96]	; (8006d40 <HAL_UART_MspInit+0x88>)
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce2:	4a17      	ldr	r2, [pc, #92]	; (8006d40 <HAL_UART_MspInit+0x88>)
 8006ce4:	f043 0310 	orr.w	r3, r3, #16
 8006ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8006cea:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <HAL_UART_MspInit+0x88>)
 8006cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	4b11      	ldr	r3, [pc, #68]	; (8006d40 <HAL_UART_MspInit+0x88>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	4a10      	ldr	r2, [pc, #64]	; (8006d40 <HAL_UART_MspInit+0x88>)
 8006d00:	f043 0301 	orr.w	r3, r3, #1
 8006d04:	6313      	str	r3, [r2, #48]	; 0x30
 8006d06:	4b0e      	ldr	r3, [pc, #56]	; (8006d40 <HAL_UART_MspInit+0x88>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006d12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d20:	2303      	movs	r3, #3
 8006d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006d24:	2307      	movs	r3, #7
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d28:	f107 0314 	add.w	r3, r7, #20
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4805      	ldr	r0, [pc, #20]	; (8006d44 <HAL_UART_MspInit+0x8c>)
 8006d30:	f005 fa92 	bl	800c258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006d34:	bf00      	nop
 8006d36:	3728      	adds	r7, #40	; 0x28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40011000 	.word	0x40011000
 8006d40:	40023800 	.word	0x40023800
 8006d44:	40020000 	.word	0x40020000

08006d48 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006d4e:	1d3b      	adds	r3, r7, #4
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	605a      	str	r2, [r3, #4]
 8006d56:	609a      	str	r2, [r3, #8]
 8006d58:	60da      	str	r2, [r3, #12]
 8006d5a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006d5c:	4b3b      	ldr	r3, [pc, #236]	; (8006e4c <HAL_FMC_MspInit+0x104>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d16f      	bne.n	8006e44 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8006d64:	4b39      	ldr	r3, [pc, #228]	; (8006e4c <HAL_FMC_MspInit+0x104>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	4b38      	ldr	r3, [pc, #224]	; (8006e50 <HAL_FMC_MspInit+0x108>)
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	4a37      	ldr	r2, [pc, #220]	; (8006e50 <HAL_FMC_MspInit+0x108>)
 8006d74:	f043 0301 	orr.w	r3, r3, #1
 8006d78:	6393      	str	r3, [r2, #56]	; 0x38
 8006d7a:	4b35      	ldr	r3, [pc, #212]	; (8006e50 <HAL_FMC_MspInit+0x108>)
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8006d86:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006d8a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d94:	2303      	movs	r3, #3
 8006d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006d98:	230c      	movs	r3, #12
 8006d9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006d9c:	1d3b      	adds	r3, r7, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	482c      	ldr	r0, [pc, #176]	; (8006e54 <HAL_FMC_MspInit+0x10c>)
 8006da2:	f005 fa59 	bl	800c258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8006da6:	2301      	movs	r3, #1
 8006da8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006daa:	2302      	movs	r3, #2
 8006dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006db2:	2303      	movs	r3, #3
 8006db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006db6:	230c      	movs	r3, #12
 8006db8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8006dba:	1d3b      	adds	r3, r7, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4826      	ldr	r0, [pc, #152]	; (8006e58 <HAL_FMC_MspInit+0x110>)
 8006dc0:	f005 fa4a 	bl	800c258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8006dc4:	f248 1333 	movw	r3, #33075	; 0x8133
 8006dc8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006dda:	1d3b      	adds	r3, r7, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	481f      	ldr	r0, [pc, #124]	; (8006e5c <HAL_FMC_MspInit+0x114>)
 8006de0:	f005 fa3a 	bl	800c258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8006de4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006de8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dea:	2302      	movs	r3, #2
 8006dec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df2:	2303      	movs	r3, #3
 8006df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006df6:	230c      	movs	r3, #12
 8006df8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006dfa:	1d3b      	adds	r3, r7, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4818      	ldr	r0, [pc, #96]	; (8006e60 <HAL_FMC_MspInit+0x118>)
 8006e00:	f005 fa2a 	bl	800c258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8006e04:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006e08:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e12:	2303      	movs	r3, #3
 8006e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e16:	230c      	movs	r3, #12
 8006e18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e1a:	1d3b      	adds	r3, r7, #4
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4811      	ldr	r0, [pc, #68]	; (8006e64 <HAL_FMC_MspInit+0x11c>)
 8006e20:	f005 fa1a 	bl	800c258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006e24:	2360      	movs	r3, #96	; 0x60
 8006e26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e30:	2303      	movs	r3, #3
 8006e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e34:	230c      	movs	r3, #12
 8006e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e38:	1d3b      	adds	r3, r7, #4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	480a      	ldr	r0, [pc, #40]	; (8006e68 <HAL_FMC_MspInit+0x120>)
 8006e3e:	f005 fa0b 	bl	800c258 <HAL_GPIO_Init>
 8006e42:	e000      	b.n	8006e46 <HAL_FMC_MspInit+0xfe>
    return;
 8006e44:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20001920 	.word	0x20001920
 8006e50:	40023800 	.word	0x40023800
 8006e54:	40021400 	.word	0x40021400
 8006e58:	40020800 	.word	0x40020800
 8006e5c:	40021800 	.word	0x40021800
 8006e60:	40021000 	.word	0x40021000
 8006e64:	40020c00 	.word	0x40020c00
 8006e68:	40020400 	.word	0x40020400

08006e6c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006e74:	f7ff ff68 	bl	8006d48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006e84:	f007 fc9a 	bl	800e7bc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006e88:	bf00      	nop
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e90:	e7fe      	b.n	8006e90 <HardFault_Handler+0x4>

08006e92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e92:	b480      	push	{r7}
 8006e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e96:	e7fe      	b.n	8006e96 <MemManage_Handler+0x4>

08006e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e9c:	e7fe      	b.n	8006e9c <BusFault_Handler+0x4>

08006e9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ea2:	e7fe      	b.n	8006ea2 <UsageFault_Handler+0x4>

08006ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006ea8:	bf00      	nop
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006eb6:	bf00      	nop
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(GUI_Timer_ms!=0) {
 8006ed4:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <SysTick_Handler+0x28>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <SysTick_Handler+0x16>
	    GUI_Timer_ms--;
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <SysTick_Handler+0x28>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	4a05      	ldr	r2, [pc, #20]	; (8006ef8 <SysTick_Handler+0x28>)
 8006ee4:	6013      	str	r3, [r2, #0]
	  }
	HAL_IncTick();
 8006ee6:	f002 f87f 	bl	8008fe8 <HAL_IncTick>

	// 500Hz Test Signal
	HAL_GPIO_TogglePin(TEST_OUT_GPIO_Port,TEST_OUT_Pin);
 8006eea:	2104      	movs	r1, #4
 8006eec:	4803      	ldr	r0, [pc, #12]	; (8006efc <SysTick_Handler+0x2c>)
 8006eee:	f005 fb78 	bl	800c5e2 <HAL_GPIO_TogglePin>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ef2:	bf00      	nop
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	2000191c 	.word	0x2000191c
 8006efc:	40020400 	.word	0x40020400

08006f00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006f04:	4802      	ldr	r0, [pc, #8]	; (8006f10 <TIM5_IRQHandler+0x10>)
 8006f06:	f008 fafb 	bl	800f500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006f0a:	bf00      	nop
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	200032f4 	.word	0x200032f4

08006f14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006f18:	4802      	ldr	r0, [pc, #8]	; (8006f24 <DMA2_Stream0_IRQHandler+0x10>)
 8006f1a:	f003 f8e7 	bl	800a0ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006f1e:	bf00      	nop
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20003470 	.word	0x20003470

08006f28 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8006f2c:	4802      	ldr	r0, [pc, #8]	; (8006f38 <LTDC_IRQHandler+0x10>)
 8006f2e:	f006 fc7d 	bl	800d82c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8006f32:	bf00      	nop
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	2000333c 	.word	0x2000333c

08006f3c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8006f40:	4802      	ldr	r0, [pc, #8]	; (8006f4c <DMA2D_IRQHandler+0x10>)
 8006f42:	f003 fddd 	bl	800ab00 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8006f46:	bf00      	nop
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200034d0 	.word	0x200034d0

08006f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f58:	4a14      	ldr	r2, [pc, #80]	; (8006fac <_sbrk+0x5c>)
 8006f5a:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <_sbrk+0x60>)
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f64:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <_sbrk+0x64>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f6c:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <_sbrk+0x64>)
 8006f6e:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <_sbrk+0x68>)
 8006f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <_sbrk+0x64>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d207      	bcs.n	8006f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f80:	f00a ffa0 	bl	8011ec4 <__errno>
 8006f84:	4603      	mov	r3, r0
 8006f86:	220c      	movs	r2, #12
 8006f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8e:	e009      	b.n	8006fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f90:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <_sbrk+0x64>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <_sbrk+0x64>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	4a05      	ldr	r2, [pc, #20]	; (8006fb4 <_sbrk+0x64>)
 8006fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20030000 	.word	0x20030000
 8006fb0:	00000010 	.word	0x00000010
 8006fb4:	20001924 	.word	0x20001924
 8006fb8:	20003618 	.word	0x20003618

08006fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fc0:	4b08      	ldr	r3, [pc, #32]	; (8006fe4 <SystemInit+0x28>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc6:	4a07      	ldr	r2, [pc, #28]	; (8006fe4 <SystemInit+0x28>)
 8006fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006fd0:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <SystemInit+0x28>)
 8006fd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006fd6:	609a      	str	r2, [r3, #8]
#endif
}
 8006fd8:	bf00      	nop
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	e000ed00 	.word	0xe000ed00

08006fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
 ldr   sp, =_estack       /* set stack pointer */
 8006fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007020 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006fec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006fee:	e003      	b.n	8006ff8 <LoopCopyDataInit>

08006ff0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006ff0:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006ff2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006ff4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006ff6:	3104      	adds	r1, #4

08006ff8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006ff8:	480b      	ldr	r0, [pc, #44]	; (8007028 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006ffc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006ffe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007000:	d3f6      	bcc.n	8006ff0 <CopyDataInit>
  ldr  r2, =_sbss
 8007002:	4a0b      	ldr	r2, [pc, #44]	; (8007030 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007004:	e002      	b.n	800700c <LoopFillZerobss>

08007006 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007006:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007008:	f842 3b04 	str.w	r3, [r2], #4

0800700c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800700e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007010:	d3f9      	bcc.n	8007006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007012:	f7ff ffd3 	bl	8006fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007016:	f00a ff5b 	bl	8011ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800701a:	f7fa fc79 	bl	8001910 <main>
  bx  lr    
 800701e:	4770      	bx	lr
 ldr   sp, =_estack       /* set stack pointer */
 8007020:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007024:	0803f590 	.word	0x0803f590
  ldr  r0, =_sdata
 8007028:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800702c:	200000f4 	.word	0x200000f4
  ldr  r2, =_sbss
 8007030:	200000f4 	.word	0x200000f4
  ldr  r3, = _ebss
 8007034:	20003614 	.word	0x20003614

08007038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007038:	e7fe      	b.n	8007038 <ADC_IRQHandler>

0800703a <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b092      	sub	sp, #72	; 0x48
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	089b      	lsrs	r3, r3, #2
 800704a:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800704c:	e0c2      	b.n	80071d4 <arm_cmplx_mag_f32+0x19a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1d1a      	adds	r2, r3, #4
 8007052:	60fa      	str	r2, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	1d1a      	adds	r2, r3, #4
 800705c:	60fa      	str	r2, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8007062:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007066:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800706a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800706e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	1d1a      	adds	r2, r3, #4
 800707a:	60ba      	str	r2, [r7, #8]
 800707c:	edc7 7a08 	vstr	s15, [r7, #32]
 8007080:	61fb      	str	r3, [r7, #28]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8007082:	edd7 7a08 	vldr	s15, [r7, #32]
 8007086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800708a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708e:	db09      	blt.n	80070a4 <arm_cmplx_mag_f32+0x6a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8007090:	ed97 0a08 	vldr	s0, [r7, #32]
 8007094:	f00b fb76 	bl	8012784 <sqrtf>
 8007098:	eef0 7a40 	vmov.f32	s15, s0
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80070a2:	e004      	b.n	80070ae <arm_cmplx_mag_f32+0x74>
    }
    else
    {
      *pOut = 0.0f;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f04f 0200 	mov.w	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80070ac:	bf00      	nop

    realIn = *pSrc++;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1d1a      	adds	r2, r3, #4
 80070b2:	60fa      	str	r2, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	1d1a      	adds	r2, r3, #4
 80070bc:	60fa      	str	r2, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80070c2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80070c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80070ca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80070ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80070d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	1d1a      	adds	r2, r3, #4
 80070da:	60ba      	str	r2, [r7, #8]
 80070dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (in >= 0.0f)
 80070e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80070e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ee:	db09      	blt.n	8007104 <arm_cmplx_mag_f32+0xca>
      *pOut = __builtin_sqrtf(in);
 80070f0:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80070f4:	f00b fb46 	bl	8012784 <sqrtf>
 80070f8:	eef0 7a40 	vmov.f32	s15, s0
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8007102:	e004      	b.n	800710e <arm_cmplx_mag_f32+0xd4>
      *pOut = 0.0f;
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800710c:	bf00      	nop

    realIn = *pSrc++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	60fa      	str	r2, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	1d1a      	adds	r2, r3, #4
 800711c:	60fa      	str	r2, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8007122:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007126:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800712a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800712e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	1d1a      	adds	r2, r3, #4
 800713a:	60ba      	str	r2, [r7, #8]
 800713c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (in >= 0.0f)
 8007142:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800714a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714e:	db09      	blt.n	8007164 <arm_cmplx_mag_f32+0x12a>
      *pOut = __builtin_sqrtf(in);
 8007150:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8007154:	f00b fb16 	bl	8012784 <sqrtf>
 8007158:	eef0 7a40 	vmov.f32	s15, s0
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8007162:	e004      	b.n	800716e <arm_cmplx_mag_f32+0x134>
      *pOut = 0.0f;
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800716c:	bf00      	nop

    realIn = *pSrc++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1d1a      	adds	r2, r3, #4
 8007172:	60fa      	str	r2, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	60fa      	str	r2, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8007182:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007186:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800718a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800718e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	1d1a      	adds	r2, r3, #4
 800719a:	60ba      	str	r2, [r7, #8]
 800719c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80071a0:	637b      	str	r3, [r7, #52]	; 0x34
    if (in >= 0.0f)
 80071a2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80071a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ae:	db09      	blt.n	80071c4 <arm_cmplx_mag_f32+0x18a>
      *pOut = __builtin_sqrtf(in);
 80071b0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80071b4:	f00b fae6 	bl	8012784 <sqrtf>
 80071b8:	eef0 7a40 	vmov.f32	s15, s0
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80071c2:	e004      	b.n	80071ce <arm_cmplx_mag_f32+0x194>
      *pOut = 0.0f;
 80071c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80071cc:	bf00      	nop


    /* Decrement the loop counter */
    blkCnt--;
 80071ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d0:	3b01      	subs	r3, #1
 80071d2:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 80071d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f47f af39 	bne.w	800704e <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	647b      	str	r3, [r7, #68]	; 0x44

  while (blkCnt > 0U)
 80071e4:	e032      	b.n	800724c <arm_cmplx_mag_f32+0x212>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	1d1a      	adds	r2, r3, #4
 80071ea:	60fa      	str	r2, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	643b      	str	r3, [r7, #64]	; 0x40
    imagIn = *pSrc++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	1d1a      	adds	r2, r3, #4
 80071f4:	60fa      	str	r2, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80071fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80071fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007202:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007206:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800720a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	1d1a      	adds	r2, r3, #4
 8007212:	60ba      	str	r2, [r7, #8]
 8007214:	edc7 7a06 	vstr	s15, [r7, #24]
 8007218:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800721a:	edd7 7a06 	vldr	s15, [r7, #24]
 800721e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007226:	db09      	blt.n	800723c <arm_cmplx_mag_f32+0x202>
      *pOut = __builtin_sqrtf(in);
 8007228:	ed97 0a06 	vldr	s0, [r7, #24]
 800722c:	f00b faaa 	bl	8012784 <sqrtf>
 8007230:	eef0 7a40 	vmov.f32	s15, s0
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800723a:	e004      	b.n	8007246 <arm_cmplx_mag_f32+0x20c>
      *pOut = 0.0f;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8007244:	bf00      	nop

    /* Decrement the loop counter */
    blkCnt--;
 8007246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007248:	3b01      	subs	r3, #1
 800724a:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 800724c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1c9      	bne.n	80071e6 <arm_cmplx_mag_f32+0x1ac>
    numSamples--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	3748      	adds	r7, #72	; 0x48
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <arm_bitreversal_f32>:
void arm_bitreversal_f32(
float32_t * pSrc,
uint16_t fftSize,
uint16_t bitRevFactor,
uint16_t * pBitRevTab)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	607b      	str	r3, [r7, #4]
 8007266:	460b      	mov	r3, r1
 8007268:	817b      	strh	r3, [r7, #10]
 800726a:	4613      	mov	r3, r2
 800726c:	813b      	strh	r3, [r7, #8]
   uint16_t fftLenBy2, fftLenBy2p1;
   uint16_t i, j;
   float32_t in;

   /*  Initializations */
   j = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	83bb      	strh	r3, [r7, #28]
   fftLenBy2 = fftSize >> 1U;
 8007272:	897b      	ldrh	r3, [r7, #10]
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	837b      	strh	r3, [r7, #26]
   fftLenBy2p1 = (fftSize >> 1U) + 1U;
 8007278:	897b      	ldrh	r3, [r7, #10]
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	b29b      	uxth	r3, r3
 800727e:	3301      	adds	r3, #1
 8007280:	833b      	strh	r3, [r7, #24]

   /* Bit Reversal Implementation */
   for (i = 0U; i <= (fftLenBy2 - 2U); i += 2U)
 8007282:	2300      	movs	r3, #0
 8007284:	83fb      	strh	r3, [r7, #30]
 8007286:	e0ba      	b.n	80073fe <arm_bitreversal_f32+0x1a2>
   {
      if (i < j)
 8007288:	8bfa      	ldrh	r2, [r7, #30]
 800728a:	8bbb      	ldrh	r3, [r7, #28]
 800728c:	429a      	cmp	r2, r3
 800728e:	d26f      	bcs.n	8007370 <arm_bitreversal_f32+0x114>
      {
         /*  pSrc[i] <-> pSrc[j]; */
         in = pSrc[2U * i];
 8007290:	8bfb      	ldrh	r3, [r7, #30]
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	617b      	str	r3, [r7, #20]
         pSrc[2U * i] = pSrc[2U * j];
 800729c:	8bbb      	ldrh	r3, [r7, #28]
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	441a      	add	r2, r3
 80072a4:	8bfb      	ldrh	r3, [r7, #30]
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	68f9      	ldr	r1, [r7, #12]
 80072aa:	440b      	add	r3, r1
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	601a      	str	r2, [r3, #0]
         pSrc[2U * j] = in;
 80072b0:	8bbb      	ldrh	r3, [r7, #28]
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	601a      	str	r2, [r3, #0]

         /*  pSrc[i+1U] <-> pSrc[j+1U] */
         in = pSrc[(2U * i) + 1U];
 80072bc:	8bfb      	ldrh	r3, [r7, #30]
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	3304      	adds	r3, #4
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	617b      	str	r3, [r7, #20]
         pSrc[(2U * i) + 1U] = pSrc[(2U * j) + 1U];
 80072ca:	8bbb      	ldrh	r3, [r7, #28]
 80072cc:	00db      	lsls	r3, r3, #3
 80072ce:	3304      	adds	r3, #4
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	441a      	add	r2, r3
 80072d4:	8bfb      	ldrh	r3, [r7, #30]
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	3304      	adds	r3, #4
 80072da:	68f9      	ldr	r1, [r7, #12]
 80072dc:	440b      	add	r3, r1
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	601a      	str	r2, [r3, #0]
         pSrc[(2U * j) + 1U] = in;
 80072e2:	8bbb      	ldrh	r3, [r7, #28]
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	3304      	adds	r3, #4
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	601a      	str	r2, [r3, #0]

         /*  pSrc[i+fftLenBy2p1] <-> pSrc[j+fftLenBy2p1] */
         in = pSrc[2U * (i + fftLenBy2p1)];
 80072f0:	8bfa      	ldrh	r2, [r7, #30]
 80072f2:	8b3b      	ldrh	r3, [r7, #24]
 80072f4:	4413      	add	r3, r2
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	617b      	str	r3, [r7, #20]
         pSrc[2U * (i + fftLenBy2p1)] = pSrc[2U * (j + fftLenBy2p1)];
 8007300:	8bba      	ldrh	r2, [r7, #28]
 8007302:	8b3b      	ldrh	r3, [r7, #24]
 8007304:	4413      	add	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	441a      	add	r2, r3
 800730c:	8bf9      	ldrh	r1, [r7, #30]
 800730e:	8b3b      	ldrh	r3, [r7, #24]
 8007310:	440b      	add	r3, r1
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	68f9      	ldr	r1, [r7, #12]
 8007316:	440b      	add	r3, r1
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	601a      	str	r2, [r3, #0]
         pSrc[2U * (j + fftLenBy2p1)] = in;
 800731c:	8bba      	ldrh	r2, [r7, #28]
 800731e:	8b3b      	ldrh	r3, [r7, #24]
 8007320:	4413      	add	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	601a      	str	r2, [r3, #0]

         /*  pSrc[i+fftLenBy2p1+1U] <-> pSrc[j+fftLenBy2p1+1U] */
         in = pSrc[(2U * (i + fftLenBy2p1)) + 1U];
 800732c:	8bfa      	ldrh	r2, [r7, #30]
 800732e:	8b3b      	ldrh	r3, [r7, #24]
 8007330:	4413      	add	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	3304      	adds	r3, #4
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	617b      	str	r3, [r7, #20]
         pSrc[(2U * (i + fftLenBy2p1)) + 1U] =
         pSrc[(2U * (j + fftLenBy2p1)) + 1U];
 800733e:	8bba      	ldrh	r2, [r7, #28]
 8007340:	8b3b      	ldrh	r3, [r7, #24]
 8007342:	4413      	add	r3, r2
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	3304      	adds	r3, #4
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	441a      	add	r2, r3
         pSrc[(2U * (i + fftLenBy2p1)) + 1U] =
 800734c:	8bf9      	ldrh	r1, [r7, #30]
 800734e:	8b3b      	ldrh	r3, [r7, #24]
 8007350:	440b      	add	r3, r1
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	3304      	adds	r3, #4
 8007356:	68f9      	ldr	r1, [r7, #12]
 8007358:	440b      	add	r3, r1
         pSrc[(2U * (j + fftLenBy2p1)) + 1U];
 800735a:	6812      	ldr	r2, [r2, #0]
         pSrc[(2U * (i + fftLenBy2p1)) + 1U] =
 800735c:	601a      	str	r2, [r3, #0]
         pSrc[(2U * (j + fftLenBy2p1)) + 1U] = in;
 800735e:	8bba      	ldrh	r2, [r7, #28]
 8007360:	8b3b      	ldrh	r3, [r7, #24]
 8007362:	4413      	add	r3, r2
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	3304      	adds	r3, #4
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	601a      	str	r2, [r3, #0]

      }

      /*  pSrc[i+1U] <-> pSrc[j+1U] */
      in = pSrc[2U * (i + 1U)];
 8007370:	8bfb      	ldrh	r3, [r7, #30]
 8007372:	3301      	adds	r3, #1
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	617b      	str	r3, [r7, #20]
      pSrc[2U * (i + 1U)] = pSrc[2U * (j + fftLenBy2)];
 800737e:	8bba      	ldrh	r2, [r7, #28]
 8007380:	8b7b      	ldrh	r3, [r7, #26]
 8007382:	4413      	add	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	441a      	add	r2, r3
 800738a:	8bfb      	ldrh	r3, [r7, #30]
 800738c:	3301      	adds	r3, #1
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	68f9      	ldr	r1, [r7, #12]
 8007392:	440b      	add	r3, r1
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	601a      	str	r2, [r3, #0]
      pSrc[2U * (j + fftLenBy2)] = in;
 8007398:	8bba      	ldrh	r2, [r7, #28]
 800739a:	8b7b      	ldrh	r3, [r7, #26]
 800739c:	4413      	add	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	601a      	str	r2, [r3, #0]

      /*  pSrc[i+2U] <-> pSrc[j+2U] */
      in = pSrc[(2U * (i + 1U)) + 1U];
 80073a8:	8bfb      	ldrh	r3, [r7, #30]
 80073aa:	3301      	adds	r3, #1
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	3304      	adds	r3, #4
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	617b      	str	r3, [r7, #20]
      pSrc[(2U * (i + 1U)) + 1U] = pSrc[(2U * (j + fftLenBy2)) + 1U];
 80073b8:	8bba      	ldrh	r2, [r7, #28]
 80073ba:	8b7b      	ldrh	r3, [r7, #26]
 80073bc:	4413      	add	r3, r2
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	3304      	adds	r3, #4
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	441a      	add	r2, r3
 80073c6:	8bfb      	ldrh	r3, [r7, #30]
 80073c8:	3301      	adds	r3, #1
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	3304      	adds	r3, #4
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	440b      	add	r3, r1
 80073d2:	6812      	ldr	r2, [r2, #0]
 80073d4:	601a      	str	r2, [r3, #0]
      pSrc[(2U * (j + fftLenBy2)) + 1U] = in;
 80073d6:	8bba      	ldrh	r2, [r7, #28]
 80073d8:	8b7b      	ldrh	r3, [r7, #26]
 80073da:	4413      	add	r3, r2
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	3304      	adds	r3, #4
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	601a      	str	r2, [r3, #0]

      /*  Reading the index for the bit reversal */
      j = *pBitRevTab;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	83bb      	strh	r3, [r7, #28]

      /*  Updating the bit reversal index depending on the fft length  */
      pBitRevTab += bitRevFactor;
 80073ee:	893b      	ldrh	r3, [r7, #8]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4413      	add	r3, r2
 80073f6:	607b      	str	r3, [r7, #4]
   for (i = 0U; i <= (fftLenBy2 - 2U); i += 2U)
 80073f8:	8bfb      	ldrh	r3, [r7, #30]
 80073fa:	3302      	adds	r3, #2
 80073fc:	83fb      	strh	r3, [r7, #30]
 80073fe:	8bfa      	ldrh	r2, [r7, #30]
 8007400:	8b7b      	ldrh	r3, [r7, #26]
 8007402:	3b02      	subs	r3, #2
 8007404:	429a      	cmp	r2, r3
 8007406:	f67f af3f 	bls.w	8007288 <arm_bitreversal_f32+0x2c>
   }
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	3724      	adds	r7, #36	; 0x24
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <arm_radix4_butterfly_f32>:
void arm_radix4_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8007418:	b480      	push	{r7}
 800741a:	b0c1      	sub	sp, #260	; 0x104
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	461a      	mov	r2, r3
 8007424:	460b      	mov	r3, r1
 8007426:	817b      	strh	r3, [r7, #10]
 8007428:	4613      	mov	r3, r2
 800742a:	813b      	strh	r3, [r7, #8]
   float32_t *ptr1;
   float32_t p0,p1,p2,p3,p4,p5;
   float32_t a0,a1,a2,a3,a4,a5,a6,a7;

   /*  Initializations for the first stage */
   n2 = fftLen;
 800742c:	897b      	ldrh	r3, [r7, #10]
 800742e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   n1 = n2;
 8007432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   /* n2 = fftLen/4 */
   n2 >>= 2U;
 800743a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743e:	089b      	lsrs	r3, r3, #2
 8007440:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   i0 = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   ia1 = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

   j = n2;
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007454:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   /*  Calculation of first stage */
   do
   {
      /*  index calculation for the input as, */
      /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
      i1 = i0 + n2;
 8007458:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007460:	4413      	add	r3, r2
 8007462:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      i2 = i1 + n2;
 8007466:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800746a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746e:	4413      	add	r3, r2
 8007470:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      i3 = i2 + n2;
 8007474:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747c:	4413      	add	r3, r2
 800747e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

      xaIn = pSrc[(2U * i0)];
 8007482:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      yaIn = pSrc[(2U * i0) + 1U];
 8007492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	3304      	adds	r3, #4
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

      xbIn = pSrc[(2U * i1)];
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      ybIn = pSrc[(2U * i1) + 1U];
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	3304      	adds	r3, #4
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      xcIn = pSrc[(2U * i2)];
 80074c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      ycIn = pSrc[(2U * i2) + 1U];
 80074d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	3304      	adds	r3, #4
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

      xdIn = pSrc[(2U * i3)];
 80074e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      ydIn = pSrc[(2U * i3) + 1U];
 80074f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	3304      	adds	r3, #4
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
 800750a:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 800750e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8007512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007516:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
 800751a:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800751e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8007522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007526:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
 800752a:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 800752e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007536:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
 800753a:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800753e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007546:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
 800754a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      co2 = pCoef[ia2 * 2U];
 8007554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      si2 = pCoef[(ia2 * 2U) + 1U];
 8007564:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	3304      	adds	r3, #4
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4413      	add	r3, r2
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
 8007576:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 800757a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800757e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007582:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
 8007586:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800758a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800758e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007592:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
 8007596:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 800759a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800759e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075a2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
 80075a6:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80075aa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80075ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075b2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

      /* xa' = xa + xb + xc + xd */
      pSrc[(2U * i0)] = Xaplusc + Xbplusd;
 80075b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80075c4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80075c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075cc:	edc3 7a00 	vstr	s15, [r3]
      /* ya' = ya + yb + yc + yd */
      pSrc[(2U * i0) + 1U] = Yaplusc + Ybplusd;
 80075d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	3304      	adds	r3, #4
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80075e0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80075e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075e8:	edc3 7a00 	vstr	s15, [r3]

      /* (xa - xc) + (yb - yd) */
      Xb12C_out = (Xaminusc + Ybminusd);
 80075ec:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80075f0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80075f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075f8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc - Xbminusd);
 80075fc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8007600:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007608:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
 800760c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007610:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007618:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
 800761c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007620:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007628:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      /* (xa - xc) - (yb - yd) */
      Xd12C_out = (Xaminusc - Ybminusd);
 800762c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007630:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007638:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
      /* (ya - yc) + (xb - xd) */
      Yd12C_out = (Xbminusd + Yaminusc);
 800763c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8007640:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007648:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

      co1 = pCoef[ia1 * 2U];
 800764c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	4413      	add	r3, r2
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	673b      	str	r3, [r7, #112]	; 0x70
      si1 = pCoef[(ia1 * 2U) + 1U];
 800765a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	3304      	adds	r3, #4
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	4413      	add	r3, r2
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	66fb      	str	r3, [r7, #108]	; 0x6c

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
 800766a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800766e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007672:	4413      	add	r3, r2
 8007674:	66bb      	str	r3, [r7, #104]	; 0x68
      co3 = pCoef[ia3 * 2U];
 8007676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	667b      	str	r3, [r7, #100]	; 0x64
      si3 = pCoef[(ia3 * 2U) + 1U];
 8007682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	3304      	adds	r3, #4
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	4413      	add	r3, r2
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	663b      	str	r3, [r7, #96]	; 0x60

      Xb12_out = Xb12C_out * co1;
 8007690:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8007694:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      Yb12_out = Yb12C_out * co1;
 80076a0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80076a4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80076a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ac:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      Xc12_out = Xc12C_out * co2;
 80076b0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80076b4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80076b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076bc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      Yc12_out = Yc12C_out * co2;
 80076c0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80076c4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80076c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076cc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      Xd12_out = Xd12C_out * co3;
 80076d0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80076d4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80076d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076dc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      Yd12_out = Yd12C_out * co3;
 80076e0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80076e4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80076e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
 80076f0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80076f4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80076f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
 8007700:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8007704:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
 8007710:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8007714:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
 8007720:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007724:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
 8007730:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8007734:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
 8007740:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8007744:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

      Xb12_out += p0;
 8007750:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007754:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800775c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      Yb12_out -= p1;
 8007760:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007764:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800776c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      Xc12_out += p2;
 8007770:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007774:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800777c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      Yc12_out -= p3;
 8007780:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007784:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800778c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
      Xd12_out += p4;
 8007790:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007794:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800779c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      Yd12_out -= p5;
 80077a0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80077a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80077a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077ac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

      /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
      pSrc[2U * i1] = Xc12_out;
 80077b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b4:	00db      	lsls	r3, r3, #3
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4413      	add	r3, r2
 80077ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077bc:	601a      	str	r2, [r3, #0]

      /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
      pSrc[(2U * i1) + 1U] = Yc12_out;
 80077be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	3304      	adds	r3, #4
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4413      	add	r3, r2
 80077ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077cc:	601a      	str	r2, [r3, #0]

      /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
      pSrc[2U * i2] = Xb12_out;
 80077ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077da:	601a      	str	r2, [r3, #0]

      /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
      pSrc[(2U * i2) + 1U] = Yb12_out;
 80077dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	3304      	adds	r3, #4
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077ea:	601a      	str	r2, [r3, #0]

      /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
      pSrc[2U * i3] = Xd12_out;
 80077ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077f8:	601a      	str	r2, [r3, #0]

      /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
      pSrc[(2U * i3) + 1U] = Yd12_out;
 80077fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	3304      	adds	r3, #4
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007808:	601a      	str	r2, [r3, #0]

      /*  Twiddle coefficients index modifier */
      ia1 += twidCoefModifier;
 800780a:	893b      	ldrh	r3, [r7, #8]
 800780c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007810:	4413      	add	r3, r2
 8007812:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

      /*  Updating input index */
      i0++;
 8007816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800781a:	3301      	adds	r3, #1
 800781c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

   }
   while (--j);
 8007820:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007824:	3b01      	subs	r3, #1
 8007826:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800782a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800782e:	2b00      	cmp	r3, #0
 8007830:	f47f ae12 	bne.w	8007458 <arm_radix4_butterfly_f32+0x40>

   twidCoefModifier <<= 2U;
 8007834:	893b      	ldrh	r3, [r7, #8]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	813b      	strh	r3, [r7, #8]

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2U; k > 4U; k >>= 2U)
 800783a:	897b      	ldrh	r3, [r7, #10]
 800783c:	089b      	lsrs	r3, r3, #2
 800783e:	b29b      	uxth	r3, r3
 8007840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007844:	e213      	b.n	8007c6e <arm_radix4_butterfly_f32+0x856>
   {
      /*  Initializations for the first stage */
      n1 = n2;
 8007846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      n2 >>= 2U;
 800784e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007852:	089b      	lsrs	r3, r3, #2
 8007854:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      ia1 = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

      /*  Calculation of first stage */
      j = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
 8007864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
         ia3 = ia2 + ia1;
 800786e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007876:	4413      	add	r3, r2
 8007878:	66bb      	str	r3, [r7, #104]	; 0x68
         co1 = pCoef[ia1 * 2U];
 800787a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	673b      	str	r3, [r7, #112]	; 0x70
         si1 = pCoef[(ia1 * 2U) + 1U];
 8007888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	3304      	adds	r3, #4
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	4413      	add	r3, r2
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	66fb      	str	r3, [r7, #108]	; 0x6c
         co2 = pCoef[ia2 * 2U];
 8007898:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800789c:	00db      	lsls	r3, r3, #3
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4413      	add	r3, r2
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
         si2 = pCoef[(ia2 * 2U) + 1U];
 80078a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	3304      	adds	r3, #4
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
         co3 = pCoef[ia3 * 2U];
 80078ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	4413      	add	r3, r2
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	667b      	str	r3, [r7, #100]	; 0x64
         si3 = pCoef[(ia3 * 2U) + 1U];
 80078c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	3304      	adds	r3, #4
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	4413      	add	r3, r2
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	663b      	str	r3, [r7, #96]	; 0x60

         /*  Twiddle coefficients index modifier */
         ia1 += twidCoefModifier;
 80078d4:	893b      	ldrh	r3, [r7, #8]
 80078d6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80078da:	4413      	add	r3, r2
 80078dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

         i0 = j;
 80078e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
         do
         {
            /*  index calculation for the input as, */
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
 80078e8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f0:	4413      	add	r3, r2
 80078f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            i2 = i1 + n2;
 80078f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80078fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fe:	4413      	add	r3, r2
 8007900:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            i3 = i2 + n2;
 8007904:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790c:	4413      	add	r3, r2
 800790e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

            xaIn = pSrc[(2U * i0)];
 8007912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            yaIn = pSrc[(2U * i0) + 1U];
 8007922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	3304      	adds	r3, #4
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

            xbIn = pSrc[(2U * i1)];
 8007934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007938:	00db      	lsls	r3, r3, #3
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            ybIn = pSrc[(2U * i1) + 1U];
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	3304      	adds	r3, #4
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

            xcIn = pSrc[(2U * i2)];
 8007956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            ycIn = pSrc[(2U * i2) + 1U];
 8007966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	3304      	adds	r3, #4
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            xdIn = pSrc[(2U * i3)];
 8007978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            ydIn = pSrc[(2U * i3) + 1U];
 8007988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	3304      	adds	r3, #4
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
 800799a:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 800799e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80079a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079a6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
 80079aa:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80079ae:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80079b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079b6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
 80079ba:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 80079be:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80079c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079c6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
 80079ca:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80079ce:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80079d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079d6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
 80079da:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 80079de:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80079e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079e6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
 80079ea:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80079ee:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80079f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079f6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
 80079fa:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 80079fe:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a06:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
 8007a0a:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8007a0e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a16:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

            /* (xa - xc) + (yb - yd) */
            Xb12C_out = (Xaminusc + Ybminusd);
 8007a1a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007a1e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a26:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            /* (ya - yc) -  (xb - xd) */
            Yb12C_out = (Yaminusc - Xbminusd);
 8007a2a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8007a2e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a36:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
 8007a3a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007a3e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a46:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
 8007a4a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007a4e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a56:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            /* (xa - xc) - (yb - yd) */
            Xd12C_out = (Xaminusc - Ybminusd);
 8007a5a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007a5e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a66:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            /* (ya - yc) +  (xb - xd) */
            Yd12C_out = (Xbminusd + Yaminusc);
 8007a6a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8007a6e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a76:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

            pSrc[(2U * i0)] = Xaplusc + Xbplusd;
 8007a7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007a88:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a90:	edc3 7a00 	vstr	s15, [r3]
            pSrc[(2U * i0) + 1U] = Yaplusc + Ybplusd;
 8007a94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007aa4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007aac:	edc3 7a00 	vstr	s15, [r3]

            Xb12_out = Xb12C_out * co1;
 8007ab0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8007ab4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007abc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            Yb12_out = Yb12C_out * co1;
 8007ac0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8007ac4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8007ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007acc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            Xc12_out = Xc12C_out * co2;
 8007ad0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007ad4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007adc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            Yc12_out = Yc12C_out * co2;
 8007ae0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8007ae4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            Xd12_out = Xd12C_out * co3;
 8007af0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8007af4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            Yd12_out = Yd12C_out * co3;
 8007b00:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8007b04:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
 8007b10:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8007b14:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
 8007b20:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8007b24:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
 8007b30:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8007b34:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
 8007b40:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007b44:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
 8007b50:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8007b54:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
 8007b60:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8007b64:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8007b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

            Xb12_out += p0;
 8007b70:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8007b74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b7c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            Yb12_out -= p1;
 8007b80:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007b84:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b8c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            Xc12_out += p2;
 8007b90:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8007b94:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b9c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            Yc12_out -= p3;
 8007ba0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8007ba4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bac:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            Xd12_out += p4;
 8007bb0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007bb4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bbc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            Yd12_out -= p5;
 8007bc0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8007bc4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bcc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

            /* xc' = (xa-xb+xc-xd)co2 + (ya-yb+yc-yd)(si2) */
            pSrc[2U * i1] = Xc12_out;
 8007bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd4:	00db      	lsls	r3, r3, #3
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bdc:	601a      	str	r2, [r3, #0]

            /* yc' = (ya-yb+yc-yd)co2 - (xa-xb+xc-xd)(si2) */
            pSrc[(2U * i1) + 1U] = Yc12_out;
 8007bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	3304      	adds	r3, #4
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bec:	601a      	str	r2, [r3, #0]

            /* xb' = (xa+yb-xc-yd)co1 + (ya-xb-yc+xd)(si1) */
            pSrc[2U * i2] = Xb12_out;
 8007bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bfa:	601a      	str	r2, [r3, #0]

            /* yb' = (ya-xb-yc+xd)co1 - (xa+yb-xc-yd)(si1) */
            pSrc[(2U * i2) + 1U] = Yb12_out;
 8007bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	3304      	adds	r3, #4
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	4413      	add	r3, r2
 8007c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c0a:	601a      	str	r2, [r3, #0]

            /* xd' = (xa-yb-xc+yd)co3 + (ya+xb-yc-xd)(si3) */
            pSrc[2U * i3] = Xd12_out;
 8007c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4413      	add	r3, r2
 8007c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c18:	601a      	str	r2, [r3, #0]

            /* yd' = (ya+xb-yc-xd)co3 - (xa-yb-xc+yd)(si3) */
            pSrc[(2U * i3) + 1U] = Yd12_out;
 8007c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	3304      	adds	r3, #4
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c28:	601a      	str	r2, [r3, #0]

            i0 += n1;
 8007c2a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c32:	4413      	add	r3, r2
 8007c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
         } while (i0 < fftLen);
 8007c38:	897b      	ldrh	r3, [r7, #10]
 8007c3a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	f4ff ae52 	bcc.w	80078e8 <arm_radix4_butterfly_f32+0x4d0>
         j++;
 8007c44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c48:	3301      	adds	r3, #1
 8007c4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      } while (j <= (n2 - 1U));
 8007c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c52:	3b01      	subs	r3, #1
 8007c54:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	f67f ae03 	bls.w	8007864 <arm_radix4_butterfly_f32+0x44c>
      twidCoefModifier <<= 2U;
 8007c5e:	893b      	ldrh	r3, [r7, #8]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	813b      	strh	r3, [r7, #8]
   for (k = fftLen >> 2U; k > 4U; k >>= 2U)
 8007c64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c68:	089b      	lsrs	r3, r3, #2
 8007c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	f63f ade7 	bhi.w	8007846 <arm_radix4_butterfly_f32+0x42e>
   }

   j = fftLen >> 2;
 8007c78:	897b      	ldrh	r3, [r7, #10]
 8007c7a:	089b      	lsrs	r3, r3, #2
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
   ptr1 = &pSrc[0];
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
 8007c88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      yaIn = ptr1[1];
 8007c92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      xbIn = ptr1[2];
 8007c9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      ybIn = ptr1[3];
 8007ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      xcIn = ptr1[4];
 8007cb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      ycIn = ptr1[5];
 8007cba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      xdIn = ptr1[6];
 8007cc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      ydIn = ptr1[7];
 8007cce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
 8007cd8:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8007cdc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8007ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ce4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
 8007ce8:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8007cec:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8007cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cf4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
 8007cf8:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8007cfc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d04:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
 8007d08:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8007d0c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d14:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
 8007d18:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8007d1c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8007d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d24:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
 8007d28:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8007d2c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d34:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
 8007d38:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8007d3c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8007d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d44:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
 8007d48:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8007d4c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d54:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

      /* xa' = xa + xb + xc + xd */
      a0 = (Xaplusc + Xbplusd);
 8007d58:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007d5c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d64:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      /* ya' = ya + yb + yc + yd */
      a1 = (Yaplusc + Ybplusd);
 8007d68:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007d6c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d74:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* xc' = (xa-xb+xc-xd) */
      a2 = (Xaplusc - Xbplusd);
 8007d78:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007d7c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8007d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      /* yc' = (ya-yb+yc-yd) */
      a3 = (Yaplusc - Ybplusd);
 8007d88:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8007d8c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8007d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d94:	edc7 7a08 	vstr	s15, [r7, #32]
      /* xb' = (xa+yb-xc-yd) */
      a4 = (Xaminusc + Ybminusd);
 8007d98:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007d9c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007da4:	edc7 7a07 	vstr	s15, [r7, #28]
      /* yb' = (ya-xb-yc+xd) */
      a5 = (Yaminusc - Xbminusd);
 8007da8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8007dac:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007db4:	edc7 7a06 	vstr	s15, [r7, #24]
      /* xd' = (xa-yb-xc+yd)) */
      a6 = (Xaminusc - Ybminusd);
 8007db8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8007dbc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dc4:	edc7 7a05 	vstr	s15, [r7, #20]
      /* yd' = (ya+xb-yc-xd) */
      a7 = (Xbminusd + Yaminusc);
 8007dc8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8007dcc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dd4:	edc7 7a04 	vstr	s15, [r7, #16]

      ptr1[0] = a0;
 8007dd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dde:	601a      	str	r2, [r3, #0]
      ptr1[1] = a1;
 8007de0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007de4:	3304      	adds	r3, #4
 8007de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007de8:	601a      	str	r2, [r3, #0]
      ptr1[2] = a2;
 8007dea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dee:	3308      	adds	r3, #8
 8007df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df2:	601a      	str	r2, [r3, #0]
      ptr1[3] = a3;
 8007df4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007df8:	330c      	adds	r3, #12
 8007dfa:	6a3a      	ldr	r2, [r7, #32]
 8007dfc:	601a      	str	r2, [r3, #0]
      ptr1[4] = a4;
 8007dfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e02:	3310      	adds	r3, #16
 8007e04:	69fa      	ldr	r2, [r7, #28]
 8007e06:	601a      	str	r2, [r3, #0]
      ptr1[5] = a5;
 8007e08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	601a      	str	r2, [r3, #0]
      ptr1[6] = a6;
 8007e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e16:	3318      	adds	r3, #24
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	601a      	str	r2, [r3, #0]
      ptr1[7] = a7;
 8007e1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e20:	331c      	adds	r3, #28
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	601a      	str	r2, [r3, #0]

      /* increment pointer by 8 */
      ptr1 += 8U;
 8007e26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e2a:	3320      	adds	r3, #32
 8007e2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   } while (--j);
 8007e30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e34:	3b01      	subs	r3, #1
 8007e36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f47f af22 	bne.w	8007c88 <arm_radix4_butterfly_f32+0x870>
      twidCoefModifier <<= 2U;
   }

#endif /* #if defined (ARM_MATH_DSP) */

}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop
 8007e48:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <arm_radix4_butterfly_inverse_f32>:
float32_t * pSrc,
uint16_t fftLen,
float32_t * pCoef,
uint16_t twidCoefModifier,
float32_t onebyfftLen)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b0c3      	sub	sp, #268	; 0x10c
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	1d39      	adds	r1, r7, #4
 8007e60:	600a      	str	r2, [r1, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	463b      	mov	r3, r7
 8007e66:	ed83 0a00 	vstr	s0, [r3]
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	817b      	strh	r3, [r7, #10]
 8007e6e:	f107 0308 	add.w	r3, r7, #8
 8007e72:	801a      	strh	r2, [r3, #0]
   float32_t p0,p1,p2,p3,p4,p5,p6,p7;
   float32_t a0,a1,a2,a3,a4,a5,a6,a7;


   /*  Initializations for the first stage */
   n2 = fftLen;
 8007e74:	897b      	ldrh	r3, [r7, #10]
 8007e76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   n1 = n2;
 8007e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

   /* n2 = fftLen/4 */
   n2 >>= 2U;
 8007e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e86:	089b      	lsrs	r3, r3, #2
 8007e88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   i0 = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   ia1 = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

   j = n2;
 8007e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   /*  Calculation of first stage */
   do
   {
      /*  index calculation for the input as, */
      /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
      i1 = i0 + n2;
 8007ea0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8007ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      i2 = i1 + n2;
 8007eae:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8007eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i3 = i2 + n2;
 8007ebc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      /*  Butterfly implementation */
      xaIn = pSrc[(2U * i0)];
 8007eca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      yaIn = pSrc[(2U * i0) + 1U];
 8007eda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

      xcIn = pSrc[(2U * i2)];
 8007eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      ycIn = pSrc[(2U * i2) + 1U];
 8007efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	3304      	adds	r3, #4
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

      xbIn = pSrc[(2U * i1)];
 8007f0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      ybIn = pSrc[(2U * i1) + 1U];
 8007f1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	3304      	adds	r3, #4
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4413      	add	r3, r2
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      xdIn = pSrc[(2U * i3)];
 8007f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4413      	add	r3, r2
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      ydIn = pSrc[(2U * i3) + 1U];
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f44:	00db      	lsls	r3, r3, #3
 8007f46:	3304      	adds	r3, #4
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

      /* xa + xc */
      Xaplusc = xaIn + xcIn;
 8007f52:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007f56:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8007f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f5e:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
      /* xb + xd */
      Xbplusd = xbIn + xdIn;
 8007f62:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8007f66:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8007f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f6e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
      /* ya + yc */
      Yaplusc = yaIn + ycIn;
 8007f72:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8007f76:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8007f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f7e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
      /* yb + yd */
      Ybplusd = ybIn + ydIn;
 8007f82:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8007f86:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f8e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

      /*  index calculation for the coefficients */
      ia2 = ia1 + ia1;
 8007f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      co2 = pCoef[ia2 * 2U];
 8007f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fa0:	00db      	lsls	r3, r3, #3
 8007fa2:	1d3a      	adds	r2, r7, #4
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      si2 = pCoef[(ia2 * 2U) + 1U];
 8007fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	1d3a      	adds	r2, r7, #4
 8007fb8:	6812      	ldr	r2, [r2, #0]
 8007fba:	4413      	add	r3, r2
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
 8007fc2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8007fc6:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8007fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fce:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
      /* xb - xd */
      Xbminusd = xbIn - xdIn;
 8007fd2:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8007fd6:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8007fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fde:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
      /* ya - yc */
      Yaminusc = yaIn - ycIn;
 8007fe2:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8007fe6:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8007fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fee:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
      /* yb - yd */
      Ybminusd = ybIn - ydIn;
 8007ff2:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8007ff6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8007ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ffe:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

      /* xa' = xa + xb + xc + xd */
      pSrc[(2U * i0)] = Xaplusc + Xbplusd;
 8008002:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	4413      	add	r3, r2
 800800c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8008010:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008018:	edc3 7a00 	vstr	s15, [r3]

      /* ya' = ya + yb + yc + yd */
      pSrc[(2U * i0) + 1U] = Yaplusc + Ybplusd;
 800801c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	3304      	adds	r3, #4
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800802c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008034:	edc3 7a00 	vstr	s15, [r3]

      /* (xa - xc) - (yb - yd) */
      Xb12C_out = (Xaminusc - Ybminusd);
 8008038:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800803c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008044:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
      /* (ya - yc) + (xb - xd) */
      Yb12C_out = (Yaminusc + Xbminusd);
 8008048:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800804c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008054:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
      /* (xa + xc) - (xb + xd) */
      Xc12C_out = (Xaplusc - Xbplusd);
 8008058:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800805c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8008060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008064:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
      /* (ya + yc) - (yb + yd) */
      Yc12C_out = (Yaplusc - Ybplusd);
 8008068:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800806c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008074:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
      /* (xa - xc) + (yb - yd) */
      Xd12C_out = (Xaminusc + Ybminusd);
 8008078:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800807c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008084:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      /* (ya - yc) - (xb - xd) */
      Yd12C_out = (Yaminusc - Xbminusd);
 8008088:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800808c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008094:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

      co1 = pCoef[ia1 * 2U];
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809c:	00db      	lsls	r3, r3, #3
 800809e:	1d3a      	adds	r2, r7, #4
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	4413      	add	r3, r2
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	67bb      	str	r3, [r7, #120]	; 0x78
      si1 = pCoef[(ia1 * 2U) + 1U];
 80080a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	3304      	adds	r3, #4
 80080b0:	1d3a      	adds	r2, r7, #4
 80080b2:	6812      	ldr	r2, [r2, #0]
 80080b4:	4413      	add	r3, r2
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	677b      	str	r3, [r7, #116]	; 0x74

      /*  index calculation for the coefficients */
      ia3 = ia2 + ia1;
 80080ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80080be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c2:	4413      	add	r3, r2
 80080c4:	673b      	str	r3, [r7, #112]	; 0x70
      co3 = pCoef[ia3 * 2U];
 80080c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	1d3a      	adds	r2, r7, #4
 80080cc:	6812      	ldr	r2, [r2, #0]
 80080ce:	4413      	add	r3, r2
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	66fb      	str	r3, [r7, #108]	; 0x6c
      si3 = pCoef[(ia3 * 2U) + 1U];
 80080d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	3304      	adds	r3, #4
 80080da:	1d3a      	adds	r2, r7, #4
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	4413      	add	r3, r2
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	66bb      	str	r3, [r7, #104]	; 0x68

      Xb12_out = Xb12C_out * co1;
 80080e4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80080e8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80080ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
      Yb12_out = Yb12C_out * co1;
 80080f4:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80080f8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80080fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008100:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      Xc12_out = Xc12C_out * co2;
 8008104:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008108:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800810c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008110:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      Yc12_out = Yc12C_out * co2;
 8008114:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8008118:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800811c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008120:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      Xd12_out = Xd12C_out * co3;
 8008124:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008128:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800812c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008130:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      Yd12_out = Yd12C_out * co3;
 8008134:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8008138:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800813c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008140:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      //Xb12_out -= Yb12C_out * si1;
      p0 = Yb12C_out * si1;
 8008144:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8008148:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800814c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008150:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      //Yb12_out += Xb12C_out * si1;
      p1 = Xb12C_out * si1;
 8008154:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8008158:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800815c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008160:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      //Xc12_out -= Yc12C_out * si2;
      p2 = Yc12C_out * si2;
 8008164:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8008168:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800816c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008170:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      //Yc12_out += Xc12C_out * si2;
      p3 = Xc12C_out * si2;
 8008174:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008178:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800817c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008180:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      //Xd12_out -= Yd12C_out * si3;
      p4 = Yd12C_out * si3;
 8008184:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8008188:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800818c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008190:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      //Yd12_out += Xd12C_out * si3;
      p5 = Xd12C_out * si3;
 8008194:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008198:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800819c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

      Xb12_out -= p0;
 80081a4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80081a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80081ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081b0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
      Yb12_out += p1;
 80081b4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80081b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80081bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081c0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      Xc12_out -= p2;
 80081c4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80081c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80081cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081d0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      Yc12_out += p3;
 80081d4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80081d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80081dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081e0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      Xd12_out -= p4;
 80081e4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80081e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80081ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081f0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      Yd12_out += p5;
 80081f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80081f8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80081fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008200:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

      /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
      pSrc[2U * i1] = Xc12_out;
 8008204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008210:	601a      	str	r2, [r3, #0]

      /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
      pSrc[(2U * i1) + 1U] = Yc12_out;
 8008212:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	3304      	adds	r3, #4
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008220:	601a      	str	r2, [r3, #0]

      /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
      pSrc[2U * i2] = Xb12_out;
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800822e:	601a      	str	r2, [r3, #0]

      /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
      pSrc[(2U * i2) + 1U] = Yb12_out;
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	3304      	adds	r3, #4
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800823e:	601a      	str	r2, [r3, #0]

      /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
      pSrc[2U * i3] = Xd12_out;
 8008240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4413      	add	r3, r2
 800824a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800824c:	601a      	str	r2, [r3, #0]

      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      pSrc[(2U * i3) + 1U] = Yd12_out;
 800824e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	3304      	adds	r3, #4
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800825c:	601a      	str	r2, [r3, #0]

      /*  Twiddle coefficients index modifier */
      ia1 = ia1 + twidCoefModifier;
 800825e:	f107 0308 	add.w	r3, r7, #8
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008268:	4413      	add	r3, r2
 800826a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

      /*  Updating input index */
      i0 = i0 + 1U;
 800826e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008272:	3301      	adds	r3, #1
 8008274:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

   } while (--j);
 8008278:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800827c:	3b01      	subs	r3, #1
 800827e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008286:	2b00      	cmp	r3, #0
 8008288:	f47f ae0a 	bne.w	8007ea0 <arm_radix4_butterfly_inverse_f32+0x4c>

   twidCoefModifier <<= 2U;
 800828c:	f107 0308 	add.w	r3, r7, #8
 8008290:	f107 0208 	add.w	r2, r7, #8
 8008294:	8812      	ldrh	r2, [r2, #0]
 8008296:	0092      	lsls	r2, r2, #2
 8008298:	801a      	strh	r2, [r3, #0]

   /*  Calculation of second stage to excluding last stage */
   for (k = fftLen >> 2U; k > 4U; k >>= 2U)
 800829a:	897b      	ldrh	r3, [r7, #10]
 800829c:	089b      	lsrs	r3, r3, #2
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082a4:	e21f      	b.n	80086e6 <arm_radix4_butterfly_inverse_f32+0x892>
   {
      /*  Initializations for the first stage */
      n1 = n2;
 80082a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      n2 >>= 2U;
 80082ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082b2:	089b      	lsrs	r3, r3, #2
 80082b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      ia1 = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

      /*  Calculation of first stage */
      j = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      do
      {
         /*  index calculation for the coefficients */
         ia2 = ia1 + ia1;
 80082c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
         ia3 = ia2 + ia1;
 80082ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d6:	4413      	add	r3, r2
 80082d8:	673b      	str	r3, [r7, #112]	; 0x70
         co1 = pCoef[ia1 * 2U];
 80082da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	1d3a      	adds	r2, r7, #4
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	4413      	add	r3, r2
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	67bb      	str	r3, [r7, #120]	; 0x78
         si1 = pCoef[(ia1 * 2U) + 1U];
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	3304      	adds	r3, #4
 80082f2:	1d3a      	adds	r2, r7, #4
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	4413      	add	r3, r2
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	677b      	str	r3, [r7, #116]	; 0x74
         co2 = pCoef[ia2 * 2U];
 80082fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	1d3a      	adds	r2, r7, #4
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	4413      	add	r3, r2
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
         si2 = pCoef[(ia2 * 2U) + 1U];
 800830e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	3304      	adds	r3, #4
 8008316:	1d3a      	adds	r2, r7, #4
 8008318:	6812      	ldr	r2, [r2, #0]
 800831a:	4413      	add	r3, r2
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
         co3 = pCoef[ia3 * 2U];
 8008322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	1d3a      	adds	r2, r7, #4
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	4413      	add	r3, r2
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	66fb      	str	r3, [r7, #108]	; 0x6c
         si3 = pCoef[(ia3 * 2U) + 1U];
 8008330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	3304      	adds	r3, #4
 8008336:	1d3a      	adds	r2, r7, #4
 8008338:	6812      	ldr	r2, [r2, #0]
 800833a:	4413      	add	r3, r2
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	66bb      	str	r3, [r7, #104]	; 0x68

         /*  Twiddle coefficients index modifier */
         ia1 = ia1 + twidCoefModifier;
 8008340:	f107 0308 	add.w	r3, r7, #8
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800834a:	4413      	add	r3, r2
 800834c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

         i0 = j;
 8008350:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008354:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         do
         {
            /*  index calculation for the input as, */
            /*  pSrc[i0 + 0], pSrc[i0 + fftLen/4], pSrc[i0 + fftLen/2], pSrc[i0 + 3fftLen/4] */
            i1 = i0 + n2;
 8008358:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800835c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008360:	4413      	add	r3, r2
 8008362:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            i2 = i1 + n2;
 8008366:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800836a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800836e:	4413      	add	r3, r2
 8008370:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            i3 = i2 + n2;
 8008374:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837c:	4413      	add	r3, r2
 800837e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

            xaIn = pSrc[(2U * i0)];
 8008382:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4413      	add	r3, r2
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            yaIn = pSrc[(2U * i0) + 1U];
 8008392:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	3304      	adds	r3, #4
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4413      	add	r3, r2
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

            xbIn = pSrc[(2U * i1)];
 80083a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            ybIn = pSrc[(2U * i1) + 1U];
 80083b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	3304      	adds	r3, #4
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

            xcIn = pSrc[(2U * i2)];
 80083c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            ycIn = pSrc[(2U * i2) + 1U];
 80083d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	3304      	adds	r3, #4
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

            xdIn = pSrc[(2U * i3)];
 80083e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            ydIn = pSrc[(2U * i3) + 1U];
 80083f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	3304      	adds	r3, #4
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            /* xa - xc */
            Xaminusc = xaIn - xcIn;
 800840a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800840e:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8008412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008416:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            /* (xb - xd) */
            Xbminusd = xbIn - xdIn;
 800841a:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800841e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8008422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008426:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            /* ya - yc */
            Yaminusc = yaIn - ycIn;
 800842a:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 800842e:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8008432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008436:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            /* (yb - yd) */
            Ybminusd = ybIn - ydIn;
 800843a:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800843e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008446:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

            /* xa + xc */
            Xaplusc = xaIn + xcIn;
 800844a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800844e:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8008452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008456:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
            /* xb + xd */
            Xbplusd = xbIn + xdIn;
 800845a:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800845e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8008462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008466:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            /* ya + yc */
            Yaplusc = yaIn + ycIn;
 800846a:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 800846e:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8008472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008476:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            /* yb + yd */
            Ybplusd = ybIn + ydIn;
 800847a:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800847e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008486:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

            /* (xa - xc) - (yb - yd) */
            Xb12C_out = (Xaminusc - Ybminusd);
 800848a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800848e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008496:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            /* (ya - yc) +  (xb - xd) */
            Yb12C_out = (Yaminusc + Xbminusd);
 800849a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800849e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80084a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084a6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            /* xa + xc -(xb + xd) */
            Xc12C_out = (Xaplusc - Xbplusd);
 80084aa:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80084ae:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80084b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084b6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            /* (ya + yc) - (yb + yd) */
            Yc12C_out = (Yaplusc - Ybplusd);
 80084ba:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80084be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80084c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084c6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            /* (xa - xc) + (yb - yd) */
            Xd12C_out = (Xaminusc + Ybminusd);
 80084ca:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80084ce:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80084d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084d6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            /* (ya - yc) -  (xb - xd) */
            Yd12C_out = (Yaminusc - Xbminusd);
 80084da:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80084de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80084e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084e6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

            pSrc[(2U * i0)] = Xaplusc + Xbplusd;
 80084ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80084f8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80084fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008500:	edc3 7a00 	vstr	s15, [r3]
            pSrc[(2U * i0) + 1U] = Yaplusc + Ybplusd;
 8008504:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	3304      	adds	r3, #4
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008514:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800851c:	edc3 7a00 	vstr	s15, [r3]

            Xb12_out = Xb12C_out * co1;
 8008520:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8008524:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8008528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            Yb12_out = Yb12C_out * co1;
 8008530:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8008534:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8008538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
            Xc12_out = Xc12C_out * co2;
 8008540:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8008544:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            Yc12_out = Yc12C_out * co2;
 8008550:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8008554:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8008558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800855c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            Xd12_out = Xd12C_out * co3;
 8008560:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008564:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8008568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            Yd12_out = Yd12C_out * co3;
 8008570:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8008574:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8008578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            //Xb12_out -= Yb12C_out * si1;
            p0 = Yb12C_out * si1;
 8008580:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8008584:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            //Yb12_out += Xb12C_out * si1;
            p1 = Xb12C_out * si1;
 8008590:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8008594:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8008598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            //Xc12_out -= Yc12C_out * si2;
            p2 = Yc12C_out * si2;
 80085a0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80085a4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80085a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            //Yc12_out += Xc12C_out * si2;
            p3 = Xc12C_out * si2;
 80085b0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80085b4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80085b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085bc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            //Xd12_out -= Yd12C_out * si3;
            p4 = Yd12C_out * si3;
 80085c0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80085c4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80085c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085cc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            //Yd12_out += Xd12C_out * si3;
            p5 = Xd12C_out * si3;
 80085d0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80085d4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80085d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085dc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            Xb12_out -= p0;
 80085e0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80085e4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80085e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085ec:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            Yb12_out += p1;
 80085f0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80085f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80085f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085fc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
            Xc12_out -= p2;
 8008600:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008604:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800860c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            Yc12_out += p3;
 8008610:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008614:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800861c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            Xd12_out -= p4;
 8008620:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008624:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800862c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            Yd12_out += p5;
 8008630:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008634:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800863c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

            /* xc' = (xa-xb+xc-xd)co2 - (ya-yb+yc-yd)(si2) */
            pSrc[2U * i1] = Xc12_out;
 8008640:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800864c:	601a      	str	r2, [r3, #0]

            /* yc' = (ya-yb+yc-yd)co2 + (xa-xb+xc-xd)(si2) */
            pSrc[(2U * i1) + 1U] = Yc12_out;
 800864e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	3304      	adds	r3, #4
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4413      	add	r3, r2
 800865a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800865c:	601a      	str	r2, [r3, #0]

            /* xb' = (xa+yb-xc-yd)co1 - (ya-xb-yc+xd)(si1) */
            pSrc[2U * i2] = Xb12_out;
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800866a:	601a      	str	r2, [r3, #0]

            /* yb' = (ya-xb-yc+xd)co1 + (xa+yb-xc-yd)(si1) */
            pSrc[(2U * i2) + 1U] = Yb12_out;
 800866c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	3304      	adds	r3, #4
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4413      	add	r3, r2
 8008678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800867a:	601a      	str	r2, [r3, #0]

            /* xd' = (xa-yb-xc+yd)co3 - (ya+xb-yc-xd)(si3) */
            pSrc[2U * i3] = Xd12_out;
 800867c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	4413      	add	r3, r2
 8008686:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008688:	601a      	str	r2, [r3, #0]

            /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
            pSrc[(2U * i3) + 1U] = Yd12_out;
 800868a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	3304      	adds	r3, #4
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	4413      	add	r3, r2
 8008696:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008698:	601a      	str	r2, [r3, #0]

            i0 += n1;
 800869a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800869e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086a2:	4413      	add	r3, r2
 80086a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         } while (i0 < fftLen);
 80086a8:	897b      	ldrh	r3, [r7, #10]
 80086aa:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80086ae:	429a      	cmp	r2, r3
 80086b0:	f4ff ae52 	bcc.w	8008358 <arm_radix4_butterfly_inverse_f32+0x504>
         j++;
 80086b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086b8:	3301      	adds	r3, #1
 80086ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
      } while (j <= (n2 - 1U));
 80086be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c2:	3b01      	subs	r3, #1
 80086c4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80086c8:	429a      	cmp	r2, r3
 80086ca:	f67f adfb 	bls.w	80082c4 <arm_radix4_butterfly_inverse_f32+0x470>
      twidCoefModifier <<= 2U;
 80086ce:	f107 0308 	add.w	r3, r7, #8
 80086d2:	f107 0208 	add.w	r2, r7, #8
 80086d6:	8812      	ldrh	r2, [r2, #0]
 80086d8:	0092      	lsls	r2, r2, #2
 80086da:	801a      	strh	r2, [r3, #0]
   for (k = fftLen >> 2U; k > 4U; k >>= 2U)
 80086dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e0:	089b      	lsrs	r3, r3, #2
 80086e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	f63f addb 	bhi.w	80082a6 <arm_radix4_butterfly_inverse_f32+0x452>
   }
   /*  Initializations of last stage */

   j = fftLen >> 2;
 80086f0:	897b      	ldrh	r3, [r7, #10]
 80086f2:	089b      	lsrs	r3, r3, #2
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   ptr1 = &pSrc[0];
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

   /*  Calculations of last stage */
   do
   {
      xaIn = ptr1[0];
 8008700:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      yaIn = ptr1[1];
 800870a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      xbIn = ptr1[2];
 8008714:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      ybIn = ptr1[3];
 800871e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      xcIn = ptr1[4];
 8008728:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      ycIn = ptr1[5];
 8008732:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008736:	695b      	ldr	r3, [r3, #20]
 8008738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      xdIn = ptr1[6];
 800873c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      ydIn = ptr1[7];
 8008746:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

      /*  Butterfly implementation */
      /* xa + xc */
      Xaplusc = xaIn + xcIn;
 8008750:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8008754:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8008758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800875c:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

      /* xa - xc */
      Xaminusc = xaIn - xcIn;
 8008760:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8008764:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8008768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800876c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

      /* ya + yc */
      Yaplusc = yaIn + ycIn;
 8008770:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8008774:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8008778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800877c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

      /* ya - yc */
      Yaminusc = yaIn - ycIn;
 8008780:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8008784:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8008788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800878c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

      /* xb + xd */
      Xbplusd = xbIn + xdIn;
 8008790:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8008794:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8008798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800879c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

      /* yb + yd */
      Ybplusd = ybIn + ydIn;
 80087a0:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80087a4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80087a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ac:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

      /* (xb-xd) */
      Xbminusd = xbIn - xdIn;
 80087b0:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80087b4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80087b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087bc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

      /* (yb-yd) */
      Ybminusd = ybIn - ydIn;
 80087c0:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80087c4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80087c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087cc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      a0 = (Xaplusc + Xbplusd);
 80087d0:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80087d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80087d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087dc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      a1 = (Yaplusc + Ybplusd);
 80087e0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80087e4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80087e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      a2 = (Xaplusc - Xbplusd);
 80087f0:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80087f4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80087f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087fc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      a3 = (Yaplusc - Ybplusd);
 8008800:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8008804:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8008808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800880c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      a4 = (Xaminusc - Ybminusd);
 8008810:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8008814:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800881c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      a5 = (Yaminusc + Xbminusd);
 8008820:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008824:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800882c:	edc7 7a08 	vstr	s15, [r7, #32]
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      a6 = (Xaminusc + Ybminusd);
 8008830:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8008834:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8008838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800883c:	edc7 7a07 	vstr	s15, [r7, #28]
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      a7 = (Yaminusc - Xbminusd);
 8008840:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8008844:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8008848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800884c:	edc7 7a06 	vstr	s15, [r7, #24]

      p0 = a0 * onebyfftLen;
 8008850:	463b      	mov	r3, r7
 8008852:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008856:	edd3 7a00 	vldr	s15, [r3]
 800885a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      p1 = a1 * onebyfftLen;
 8008862:	463b      	mov	r3, r7
 8008864:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008868:	edd3 7a00 	vldr	s15, [r3]
 800886c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008870:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      p2 = a2 * onebyfftLen;
 8008874:	463b      	mov	r3, r7
 8008876:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800887a:	edd3 7a00 	vldr	s15, [r3]
 800887e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008882:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      p3 = a3 * onebyfftLen;
 8008886:	463b      	mov	r3, r7
 8008888:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800888c:	edd3 7a00 	vldr	s15, [r3]
 8008890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008894:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      p4 = a4 * onebyfftLen;
 8008898:	463b      	mov	r3, r7
 800889a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800889e:	edd3 7a00 	vldr	s15, [r3]
 80088a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
      p5 = a5 * onebyfftLen;
 80088aa:	463b      	mov	r3, r7
 80088ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80088b0:	edd3 7a00 	vldr	s15, [r3]
 80088b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      p6 = a6 * onebyfftLen;
 80088bc:	463b      	mov	r3, r7
 80088be:	ed97 7a07 	vldr	s14, [r7, #28]
 80088c2:	edd3 7a00 	vldr	s15, [r3]
 80088c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ca:	edc7 7a05 	vstr	s15, [r7, #20]
      p7 = a7 * onebyfftLen;
 80088ce:	463b      	mov	r3, r7
 80088d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80088d4:	edd3 7a00 	vldr	s15, [r3]
 80088d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088dc:	edc7 7a04 	vstr	s15, [r7, #16]

      /* xa' = (xa+xb+xc+xd) * onebyfftLen */
      ptr1[0] = p0;
 80088e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088e6:	601a      	str	r2, [r3, #0]
      /* ya' = (ya+yb+yc+yd) * onebyfftLen */
      ptr1[1] = p1;
 80088e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088ec:	3304      	adds	r3, #4
 80088ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088f0:	601a      	str	r2, [r3, #0]
      /* xc' = (xa-xb+xc-xd) * onebyfftLen */
      ptr1[2] = p2;
 80088f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088f6:	3308      	adds	r3, #8
 80088f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088fa:	601a      	str	r2, [r3, #0]
      /* yc' = (ya-yb+yc-yd) * onebyfftLen  */
      ptr1[3] = p3;
 80088fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008900:	330c      	adds	r3, #12
 8008902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008904:	601a      	str	r2, [r3, #0]
      /* xb' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[4] = p4;
 8008906:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800890a:	3310      	adds	r3, #16
 800890c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800890e:	601a      	str	r2, [r3, #0]
      /* yb' = (ya+xb-yc-xd) * onebyfftLen */
      ptr1[5] = p5;
 8008910:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008914:	3314      	adds	r3, #20
 8008916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008918:	601a      	str	r2, [r3, #0]
      /* xd' = (xa-yb-xc+yd) * onebyfftLen */
      ptr1[6] = p6;
 800891a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800891e:	3318      	adds	r3, #24
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	601a      	str	r2, [r3, #0]
      /* yd' = (ya-xb-yc+xd) * onebyfftLen */
      ptr1[7] = p7;
 8008924:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008928:	331c      	adds	r3, #28
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	601a      	str	r2, [r3, #0]

      /* increment source pointer by 8 for next calculations */
      ptr1 = ptr1 + 8U;
 800892e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008932:	3320      	adds	r3, #32
 8008934:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

   } while (--j);
 8008938:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800893c:	3b01      	subs	r3, #1
 800893e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008946:	2b00      	cmp	r3, #0
 8008948:	f47f aeda 	bne.w	8008700 <arm_radix4_butterfly_inverse_f32+0x8ac>
      /* yd' = (ya+xb-yc-xd)co3 + (xa-yb-xc+yd)(si3) */
      pSrc[(2U * i3) + 1U] = s2 * onebyfftLen;
   }

#endif /* #if defined (ARM_MATH_DSP) */
}
 800894c:	bf00      	nop
 800894e:	bf00      	nop
 8008950:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <arm_cfft_radix4_init_f32>:
arm_status arm_cfft_radix4_init_f32(
  arm_cfft_radix4_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	461a      	mov	r2, r3
 800896a:	4603      	mov	r3, r0
 800896c:	807b      	strh	r3, [r7, #2]
 800896e:	460b      	mov	r3, r1
 8008970:	707b      	strb	r3, [r7, #1]
 8008972:	4613      	mov	r3, r2
 8008974:	703b      	strb	r3, [r7, #0]
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]

  /*  Initialise the FFT length */
  S->fftLen = fftLen;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	887a      	ldrh	r2, [r7, #2]
 800897e:	801a      	strh	r2, [r3, #0]

  /*  Initialise the Twiddle coefficient pointer */
  S->pTwiddle = (float32_t *) twiddleCoef;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a3a      	ldr	r2, [pc, #232]	; (8008a6c <arm_cfft_radix4_init_f32+0x110>)
 8008984:	605a      	str	r2, [r3, #4]

  /*  Initialise the Flag for selection of CFFT or CIFFT */
  S->ifftFlag = ifftFlag;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	787a      	ldrb	r2, [r7, #1]
 800898a:	709a      	strb	r2, [r3, #2]

  /*  Initialise the Flag for calculation Bit reversal or not */
  S->bitReverseFlag = bitReverseFlag;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	783a      	ldrb	r2, [r7, #0]
 8008990:	70da      	strb	r2, [r3, #3]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (S->fftLen)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800899a:	d013      	beq.n	80089c4 <arm_cfft_radix4_init_f32+0x68>
 800899c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a0:	dc58      	bgt.n	8008a54 <arm_cfft_radix4_init_f32+0xf8>
 80089a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a6:	d01b      	beq.n	80089e0 <arm_cfft_radix4_init_f32+0x84>
 80089a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ac:	dc52      	bgt.n	8008a54 <arm_cfft_radix4_init_f32+0xf8>
 80089ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b2:	d023      	beq.n	80089fc <arm_cfft_radix4_init_f32+0xa0>
 80089b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b8:	dc4c      	bgt.n	8008a54 <arm_cfft_radix4_init_f32+0xf8>
 80089ba:	2b10      	cmp	r3, #16
 80089bc:	d03a      	beq.n	8008a34 <arm_cfft_radix4_init_f32+0xd8>
 80089be:	2b40      	cmp	r3, #64	; 0x40
 80089c0:	d02a      	beq.n	8008a18 <arm_cfft_radix4_init_f32+0xbc>
 80089c2:	e047      	b.n	8008a54 <arm_cfft_radix4_init_f32+0xf8>

  case 4096U:
    /*  Initializations of structure parameters for 4096 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 1U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 1U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	81da      	strh	r2, [r3, #14]
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) armBitRevTable;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a27      	ldr	r2, [pc, #156]	; (8008a70 <arm_cfft_radix4_init_f32+0x114>)
 80089d4:	609a      	str	r2, [r3, #8]
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.000244140625;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80089dc:	611a      	str	r2, [r3, #16]
    break;
 80089de:	e03c      	b.n	8008a5a <arm_cfft_radix4_init_f32+0xfe>

  case 1024U:
    /*  Initializations of structure parameters for 1024 point FFT */

    /*  Initialise the twiddle coef modifier value */
    S->twidCoefModifier = 4U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2204      	movs	r2, #4
 80089e4:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table modifier */
    S->bitRevFactor = 4U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2204      	movs	r2, #4
 80089ea:	81da      	strh	r2, [r3, #14]
    /*  Initialise the bit reversal table pointer */
    S->pBitRevTable = (uint16_t *) & armBitRevTable[3];
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <arm_cfft_radix4_init_f32+0x118>)
 80089f0:	609a      	str	r2, [r3, #8]
    /*  Initialise the 1/fftLen Value */
    S->onebyfftLen = 0.0009765625f;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 80089f8:	611a      	str	r2, [r3, #16]
    break;
 80089fa:	e02e      	b.n	8008a5a <arm_cfft_radix4_init_f32+0xfe>


  case 256U:
    /*  Initializations of structure parameters for 256 point FFT */
    S->twidCoefModifier = 16U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2210      	movs	r2, #16
 8008a00:	819a      	strh	r2, [r3, #12]
    S->bitRevFactor = 16U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2210      	movs	r2, #16
 8008a06:	81da      	strh	r2, [r3, #14]
    S->pBitRevTable = (uint16_t *) & armBitRevTable[15];
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a1b      	ldr	r2, [pc, #108]	; (8008a78 <arm_cfft_radix4_init_f32+0x11c>)
 8008a0c:	609a      	str	r2, [r3, #8]
    S->onebyfftLen = 0.00390625f;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 8008a14:	611a      	str	r2, [r3, #16]
    break;
 8008a16:	e020      	b.n	8008a5a <arm_cfft_radix4_init_f32+0xfe>

  case 64U:
    /*  Initializations of structure parameters for 64 point FFT */
    S->twidCoefModifier = 64U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2240      	movs	r2, #64	; 0x40
 8008a1c:	819a      	strh	r2, [r3, #12]
    S->bitRevFactor = 64U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2240      	movs	r2, #64	; 0x40
 8008a22:	81da      	strh	r2, [r3, #14]
    S->pBitRevTable = (uint16_t *) & armBitRevTable[63];
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a15      	ldr	r2, [pc, #84]	; (8008a7c <arm_cfft_radix4_init_f32+0x120>)
 8008a28:	609a      	str	r2, [r3, #8]
    S->onebyfftLen = 0.015625f;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8008a30:	611a      	str	r2, [r3, #16]
    break;
 8008a32:	e012      	b.n	8008a5a <arm_cfft_radix4_init_f32+0xfe>

  case 16U:
    /*  Initializations of structure parameters for 16 point FFT */
    S->twidCoefModifier = 256U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a3a:	819a      	strh	r2, [r3, #12]
    S->bitRevFactor = 256U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a42:	81da      	strh	r2, [r3, #14]
    S->pBitRevTable = (uint16_t *) & armBitRevTable[255];
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a0e      	ldr	r2, [pc, #56]	; (8008a80 <arm_cfft_radix4_init_f32+0x124>)
 8008a48:	609a      	str	r2, [r3, #8]
    S->onebyfftLen = 0.0625f;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8008a50:	611a      	str	r2, [r3, #16]
    break;
 8008a52:	e002      	b.n	8008a5a <arm_cfft_radix4_init_f32+0xfe>


  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 8008a54:	23ff      	movs	r3, #255	; 0xff
 8008a56:	73fb      	strb	r3, [r7, #15]
    break;
 8008a58:	bf00      	nop
  }

  return (status);
 8008a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	08013578 	.word	0x08013578
 8008a70:	08012d78 	.word	0x08012d78
 8008a74:	08012d7e 	.word	0x08012d7e
 8008a78:	08012d96 	.word	0x08012d96
 8008a7c:	08012df6 	.word	0x08012df6
 8008a80:	08012f76 	.word	0x08012f76

08008a84 <arm_rfft_f32>:

void arm_rfft_f32(
  const arm_rfft_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  const arm_cfft_radix4_instance_f32 *S_CFFT = S->pCfft;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	617b      	str	r3, [r7, #20]


  /* Calculation of Real IFFT of input */
  if (S->ifftFlagR == 1U)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	799b      	ldrb	r3, [r3, #6]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d12d      	bne.n	8008afa <arm_rfft_f32+0x76>
  {
    /*  Real IFFT core process */
    arm_split_rifft_f32(pSrc, S->fftLenBy2, S->pTwiddleAReal,
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	889b      	ldrh	r3, [r3, #4]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6919      	ldr	r1, [r3, #16]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4601      	mov	r1, r0
 8008aba:	68b8      	ldr	r0, [r7, #8]
 8008abc:	f000 f932 	bl	8008d24 <arm_split_rifft_f32>
                        S->pTwiddleBReal, pDst, S->twidCoefRModifier);


    /* Complex radix-4 IFFT process */
    arm_radix4_butterfly_inverse_f32(pDst, S_CFFT->fftLen,
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	8819      	ldrh	r1, [r3, #0]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	8998      	ldrh	r0, [r3, #12]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	edd3 7a04 	vldr	s15, [r3, #16]
 8008ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7ff f9bb 	bl	8007e54 <arm_radix4_butterfly_inverse_f32>
                                     S_CFFT->pTwiddle,
                                     S_CFFT->twidCoefModifier,
                                     S_CFFT->onebyfftLen);

    /* Bit reversal process */
    if (S->bitReverseFlagR == 1U)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	79db      	ldrb	r3, [r3, #7]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d130      	bne.n	8008b48 <arm_rfft_f32+0xc4>
    {
      arm_bitreversal_f32(pDst, S_CFFT->fftLen,
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	8819      	ldrh	r1, [r3, #0]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	89da      	ldrh	r2, [r3, #14]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7fe fbb2 	bl	800725c <arm_bitreversal_f32>
    /*  Real FFT core process */
    arm_split_rfft_f32(pSrc, S->fftLenBy2, S->pTwiddleAReal,
                       S->pTwiddleBReal, pDst, S->twidCoefRModifier);
  }

}
 8008af8:	e026      	b.n	8008b48 <arm_rfft_f32+0xc4>
    arm_radix4_butterfly_f32(pSrc, S_CFFT->fftLen,
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	8819      	ldrh	r1, [r3, #0]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	899b      	ldrh	r3, [r3, #12]
 8008b06:	68b8      	ldr	r0, [r7, #8]
 8008b08:	f7fe fc86 	bl	8007418 <arm_radix4_butterfly_f32>
    if (S->bitReverseFlagR == 1U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	79db      	ldrb	r3, [r3, #7]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d108      	bne.n	8008b26 <arm_rfft_f32+0xa2>
      arm_bitreversal_f32(pSrc, S_CFFT->fftLen,
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	8819      	ldrh	r1, [r3, #0]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	89da      	ldrh	r2, [r3, #14]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	68b8      	ldr	r0, [r7, #8]
 8008b22:	f7fe fb9b 	bl	800725c <arm_bitreversal_f32>
    arm_split_rfft_f32(pSrc, S->fftLenBy2, S->pTwiddleAReal,
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	889b      	ldrh	r3, [r3, #4]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6919      	ldr	r1, [r3, #16]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4601      	mov	r1, r0
 8008b42:	68b8      	ldr	r0, [r7, #8]
 8008b44:	f000 f804 	bl	8008b50 <arm_split_rfft_f32>
}
 8008b48:	bf00      	nop
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <arm_split_rfft_f32>:
  uint32_t fftLen,
  float32_t * pATable,
  float32_t * pBTable,
  float32_t * pDst,
  uint32_t modifier)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b091      	sub	sp, #68	; 0x44
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	603b      	str	r3, [r7, #0]
  uint32_t i;                                    /* Loop Counter */
  float32_t outR, outI;                          /* Temporary variables for output */
  float32_t *pCoefA, *pCoefB;                    /* Temporary pointers for twiddle factors */
  float32_t CoefA1, CoefA2, CoefB1;              /* Temporary variables for twiddle coefficients */
  float32_t *pDst1 = &pDst[2], *pDst2 = &pDst[(4U * fftLen) - 1U];      /* temp pointers for output buffer */
 8008b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b60:	3308      	adds	r3, #8
 8008b62:	633b      	str	r3, [r7, #48]	; 0x30
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	3b04      	subs	r3, #4
 8008b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b6c:	4413      	add	r3, r2
 8008b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *pSrc1 = &pSrc[2], *pSrc2 = &pSrc[(2U * fftLen) - 1U];      /* temp pointers for input buffer */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3308      	adds	r3, #8
 8008b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	3b04      	subs	r3, #4
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init coefficient pointers */
  pCoefA = &pATable[modifier * 2U];
 8008b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  pCoefB = &pBTable[modifier * 2U];
 8008b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	4413      	add	r3, r2
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34

  i = fftLen - 1U;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (i > 0U)
 8008b9c:	e090      	b.n	8008cc0 <arm_split_rfft_f32+0x170>
    /* outI = (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] +
       pIn[2 * n - 2 * i] * pBTable[2 * i + 1] -
       pIn[2 * n - 2 * i + 1] * pBTable[2 * i]); */

    /* read pATable[2 * i] */
    CoefA1 = *pCoefA++;
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	1d1a      	adds	r2, r3, #4
 8008ba2:	63ba      	str	r2, [r7, #56]	; 0x38
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	623b      	str	r3, [r7, #32]
    /* pATable[2 * i + 1] */
    CoefA2 = *pCoefA;
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	61fb      	str	r3, [r7, #28]

    /* pSrc[2 * i] * pATable[2 * i] */
    outR = *pSrc1 * CoefA1;
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	edd3 7a00 	vldr	s15, [r3]
 8008bb4:	ed97 7a08 	vldr	s14, [r7, #32]
 8008bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bbc:	edc7 7a06 	vstr	s15, [r7, #24]
    /* pSrc[2 * i] * CoefA2 */
    outI = *pSrc1++ * CoefA2;
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	1d1a      	adds	r2, r3, #4
 8008bc4:	62ba      	str	r2, [r7, #40]	; 0x28
 8008bc6:	edd3 7a00 	vldr	s15, [r3]
 8008bca:	ed97 7a07 	vldr	s14, [r7, #28]
 8008bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd2:	edc7 7a05 	vstr	s15, [r7, #20]

    /* (pSrc[2 * i + 1] + pSrc[2 * fftLen - 2 * i + 1]) * CoefA2 */
    outR -= (*pSrc1 + *pSrc2) * CoefA2;
 8008bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd8:	ed93 7a00 	vldr	s14, [r3]
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	edd3 7a00 	vldr	s15, [r3]
 8008be2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008be6:	edd7 7a07 	vldr	s15, [r7, #28]
 8008bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bee:	ed97 7a06 	vldr	s14, [r7, #24]
 8008bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bf6:	edc7 7a06 	vstr	s15, [r7, #24]
    /* pSrc[2 * i + 1] * CoefA1 */
    outI += *pSrc1++ * CoefA1;
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	1d1a      	adds	r2, r3, #4
 8008bfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8008c00:	ed93 7a00 	vldr	s14, [r3]
 8008c04:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c14:	edc7 7a05 	vstr	s15, [r7, #20]

    CoefB1 = *pCoefB;
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	613b      	str	r3, [r7, #16]

    /* pSrc[2 * fftLen - 2 * i + 1] * CoefB1 */
    outI -= *pSrc2-- * CoefB1;
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	1f1a      	subs	r2, r3, #4
 8008c22:	627a      	str	r2, [r7, #36]	; 0x24
 8008c24:	ed93 7a00 	vldr	s14, [r3]
 8008c28:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c30:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c38:	edc7 7a05 	vstr	s15, [r7, #20]
    /* pSrc[2 * fftLen - 2 * i] * CoefA2 */
    outI -= *pSrc2 * CoefA2;
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	ed93 7a00 	vldr	s14, [r3]
 8008c42:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8008c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c52:	edc7 7a05 	vstr	s15, [r7, #20]

    /* pSrc[2 * fftLen - 2 * i] * CoefB1 */
    outR += *pSrc2-- * CoefB1;
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	1f1a      	subs	r2, r3, #4
 8008c5a:	627a      	str	r2, [r7, #36]	; 0x24
 8008c5c:	ed93 7a00 	vldr	s14, [r3]
 8008c60:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c68:	ed97 7a06 	vldr	s14, [r7, #24]
 8008c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c70:	edc7 7a06 	vstr	s15, [r7, #24]

    /* write output */
    *pDst1++ = outR;
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	1d1a      	adds	r2, r3, #4
 8008c78:	633a      	str	r2, [r7, #48]	; 0x30
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	601a      	str	r2, [r3, #0]
    *pDst1++ = outI;
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	1d1a      	adds	r2, r3, #4
 8008c82:	633a      	str	r2, [r7, #48]	; 0x30
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	601a      	str	r2, [r3, #0]

    /* write complex conjugate output */
    *pDst2-- = -outI;
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	1f1a      	subs	r2, r3, #4
 8008c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c92:	eef1 7a67 	vneg.f32	s15, s15
 8008c96:	edc3 7a00 	vstr	s15, [r3]
    *pDst2-- = outR;
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	1f1a      	subs	r2, r3, #4
 8008c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	601a      	str	r2, [r3, #0]

    /* update coefficient pointer */
    pCoefB = pCoefB + (modifier * 2U);
 8008ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008caa:	4413      	add	r3, r2
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
    pCoefA = pCoefA + ((modifier * 2U) - 1U);
 8008cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	3b04      	subs	r3, #4
 8008cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cb6:	4413      	add	r3, r2
 8008cb8:	63bb      	str	r3, [r7, #56]	; 0x38

    i--;
 8008cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (i > 0U)
 8008cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f47f af6b 	bne.w	8008b9e <arm_split_rfft_f32+0x4e>

  }

  pDst[2U * fftLen] = pSrc[0] - pSrc[1];
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	ed93 7a00 	vldr	s14, [r3]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	edd3 7a00 	vldr	s15, [r3]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cdc:	4413      	add	r3, r2
 8008cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ce2:	edc3 7a00 	vstr	s15, [r3]
  pDst[(2U * fftLen) + 1U] = 0.0f;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	3304      	adds	r3, #4
 8008cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cee:	4413      	add	r3, r2
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]

  pDst[0] = pSrc[0] + pSrc[1];
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	ed93 7a00 	vldr	s14, [r3]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	edd3 7a00 	vldr	s15, [r3]
 8008d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d0a:	edc3 7a00 	vstr	s15, [r3]
  pDst[1] = 0.0f;
 8008d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d10:	3304      	adds	r3, #4
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

}
 8008d18:	bf00      	nop
 8008d1a:	3744      	adds	r7, #68	; 0x44
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <arm_split_rifft_f32>:
  uint32_t fftLen,
  float32_t * pATable,
  float32_t * pBTable,
  float32_t * pDst,
  uint32_t modifier)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b08f      	sub	sp, #60	; 0x3c
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
  float32_t outR, outI;                          /* Temporary variables for output */
  float32_t *pCoefA, *pCoefB;                    /* Temporary pointers for twiddle factors */
  float32_t CoefA1, CoefA2, CoefB1;              /* Temporary variables for twiddle coefficients */
  float32_t *pSrc1 = &pSrc[0], *pSrc2 = &pSrc[(2U * fftLen) + 1U];
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28

  pCoefA = &pATable[0];
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
  pCoefB = &pBTable[0];
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	633b      	str	r3, [r7, #48]	; 0x30

  while (fftLen > 0U)
 8008d4a:	e084      	b.n	8008e56 <arm_split_rifft_f32+0x132>
       pIn[2 * n - 2 * i] * pBTable[2 * i + 1] -
       pIn[2 * n - 2 * i + 1] * pBTable[2 * i]);

     */

    CoefA1 = *pCoefA++;
 8008d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4e:	1d1a      	adds	r2, r3, #4
 8008d50:	637a      	str	r2, [r7, #52]	; 0x34
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
    CoefA2 = *pCoefA;
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	623b      	str	r3, [r7, #32]

    /* outR = (pSrc[2 * i] * CoefA1 */
    outR = *pSrc1 * CoefA1;
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	edd3 7a00 	vldr	s15, [r3]
 8008d62:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6a:	edc7 7a07 	vstr	s15, [r7, #28]

    /* - pSrc[2 * i] * CoefA2 */
    outI = -(*pSrc1++) * CoefA2;
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	1d1a      	adds	r2, r3, #4
 8008d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d74:	edd3 7a00 	vldr	s15, [r3]
 8008d78:	eef1 7a67 	vneg.f32	s15, s15
 8008d7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8008d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d84:	edc7 7a06 	vstr	s15, [r7, #24]

    /* (pSrc[2 * i + 1] + pSrc[2 * fftLen - 2 * i + 1]) * CoefA2 */
    outR += (*pSrc1 + *pSrc2) * CoefA2;
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	ed93 7a00 	vldr	s14, [r3]
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	edd3 7a00 	vldr	s15, [r3]
 8008d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d98:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da0:	ed97 7a07 	vldr	s14, [r7, #28]
 8008da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008da8:	edc7 7a07 	vstr	s15, [r7, #28]

    /* pSrc[2 * i + 1] * CoefA1 */
    outI += (*pSrc1++) * CoefA1;
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	1d1a      	adds	r2, r3, #4
 8008db0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008db2:	ed93 7a00 	vldr	s14, [r3]
 8008db6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dbe:	ed97 7a06 	vldr	s14, [r7, #24]
 8008dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dc6:	edc7 7a06 	vstr	s15, [r7, #24]

    CoefB1 = *pCoefB;
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	617b      	str	r3, [r7, #20]

    /* - pSrc[2 * fftLen - 2 * i + 1] * CoefB1 */
    outI -= *pSrc2-- * CoefB1;
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	1f1a      	subs	r2, r3, #4
 8008dd4:	62ba      	str	r2, [r7, #40]	; 0x28
 8008dd6:	ed93 7a00 	vldr	s14, [r3]
 8008dda:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	ed97 7a06 	vldr	s14, [r7, #24]
 8008de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dea:	edc7 7a06 	vstr	s15, [r7, #24]

    /* pSrc[2 * fftLen - 2 * i] * CoefB1 */
    outR += *pSrc2 * CoefB1;
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	ed93 7a00 	vldr	s14, [r3]
 8008df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8008df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfc:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e04:	edc7 7a07 	vstr	s15, [r7, #28]

    /* pSrc[2 * fftLen - 2 * i] * CoefA2 */
    outI += *pSrc2-- * CoefA2;
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	1f1a      	subs	r2, r3, #4
 8008e0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8008e0e:	ed93 7a00 	vldr	s14, [r3]
 8008e12:	edd7 7a08 	vldr	s15, [r7, #32]
 8008e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1a:	ed97 7a06 	vldr	s14, [r7, #24]
 8008e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e22:	edc7 7a06 	vstr	s15, [r7, #24]

    /* write output */
    *pDst++ = outR;
 8008e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e28:	1d1a      	adds	r2, r3, #4
 8008e2a:	643a      	str	r2, [r7, #64]	; 0x40
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	601a      	str	r2, [r3, #0]
    *pDst++ = outI;
 8008e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e32:	1d1a      	adds	r2, r3, #4
 8008e34:	643a      	str	r2, [r7, #64]	; 0x40
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	601a      	str	r2, [r3, #0]

    /* update coefficient pointer */
    pCoefB = pCoefB + (modifier * 2U);
 8008e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e40:	4413      	add	r3, r2
 8008e42:	633b      	str	r3, [r7, #48]	; 0x30
    pCoefA = pCoefA + ((modifier * 2U) - 1U);
 8008e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e46:	00db      	lsls	r3, r3, #3
 8008e48:	3b04      	subs	r3, #4
 8008e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e4c:	4413      	add	r3, r2
 8008e4e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop count */
    fftLen--;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	60bb      	str	r3, [r7, #8]
  while (fftLen > 0U)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f47f af77 	bne.w	8008d4c <arm_split_rifft_f32+0x28>
  }

}
 8008e5e:	bf00      	nop
 8008e60:	bf00      	nop
 8008e62:	373c      	adds	r7, #60	; 0x3c
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <arm_rfft_init_f32>:
  arm_rfft_instance_f32 * S,
  arm_cfft_radix4_instance_f32 * S_CFFT,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]

  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	75fb      	strb	r3, [r7, #23]

  /*  Initialize the Real FFT length */
  S->fftLenReal = (uint16_t) fftLenReal;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	461a      	mov	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	601a      	str	r2, [r3, #0]

  /*  Initialize the Complex FFT length */
  S->fftLenBy2 = (uint16_t) fftLenReal / 2U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	085b      	lsrs	r3, r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	809a      	strh	r2, [r3, #4]

  /*  Initialize the Twiddle coefficientA pointer */
  S->pTwiddleAReal = (float32_t *) realCoefA;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4a29      	ldr	r2, [pc, #164]	; (8008f3c <arm_rfft_init_f32+0xd0>)
 8008e98:	60da      	str	r2, [r3, #12]

  /*  Initialize the Twiddle coefficientB pointer */
  S->pTwiddleBReal = (float32_t *) realCoefB;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4a28      	ldr	r2, [pc, #160]	; (8008f40 <arm_rfft_init_f32+0xd4>)
 8008e9e:	611a      	str	r2, [r3, #16]

  /*  Initialize the Flag for selection of RFFT or RIFFT */
  S->ifftFlagR = (uint8_t) ifftFlagR;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	719a      	strb	r2, [r3, #6]

  /*  Initialize the Flag for calculation Bit reversal or not */
  S->bitReverseFlagR = (uint8_t) bitReverseFlag;
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	71da      	strb	r2, [r3, #7]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (S->fftLenReal)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eb8:	d00e      	beq.n	8008ed8 <arm_rfft_init_f32+0x6c>
 8008eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ebe:	d81b      	bhi.n	8008ef8 <arm_rfft_init_f32+0x8c>
 8008ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ec4:	d00c      	beq.n	8008ee0 <arm_rfft_init_f32+0x74>
 8008ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eca:	d815      	bhi.n	8008ef8 <arm_rfft_init_f32+0x8c>
 8008ecc:	2b80      	cmp	r3, #128	; 0x80
 8008ece:	d00f      	beq.n	8008ef0 <arm_rfft_init_f32+0x84>
 8008ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ed4:	d008      	beq.n	8008ee8 <arm_rfft_init_f32+0x7c>
 8008ed6:	e00f      	b.n	8008ef8 <arm_rfft_init_f32+0x8c>
  {
    /* Init table modifier value */
  case 8192U:
    S->twidCoefRModifier = 1U;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2201      	movs	r2, #1
 8008edc:	609a      	str	r2, [r3, #8]
    break;
 8008ede:	e00e      	b.n	8008efe <arm_rfft_init_f32+0x92>
  case 2048U:
    S->twidCoefRModifier = 4U;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	609a      	str	r2, [r3, #8]
    break;
 8008ee6:	e00a      	b.n	8008efe <arm_rfft_init_f32+0x92>
  case 512U:
    S->twidCoefRModifier = 16U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2210      	movs	r2, #16
 8008eec:	609a      	str	r2, [r3, #8]
    break;
 8008eee:	e006      	b.n	8008efe <arm_rfft_init_f32+0x92>
  case 128U:
    S->twidCoefRModifier = 64U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2240      	movs	r2, #64	; 0x40
 8008ef4:	609a      	str	r2, [r3, #8]
    break;
 8008ef6:	e002      	b.n	8008efe <arm_rfft_init_f32+0x92>
  default:
    /*  Reporting argument error if rfftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 8008ef8:	23ff      	movs	r3, #255	; 0xff
 8008efa:	75fb      	strb	r3, [r7, #23]
    break;
 8008efc:	bf00      	nop
  }

  /* Init Complex FFT Instance */
  S->pCfft = S_CFFT;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	615a      	str	r2, [r3, #20]

  if (S->ifftFlagR)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	799b      	ldrb	r3, [r3, #6]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d008      	beq.n	8008f1e <arm_rfft_init_f32+0xb2>
  {
    /* Initializes the CIFFT Module for fftLenreal/2 length */
    arm_cfft_radix4_init_f32(S->pCfft, S->fftLenBy2, 1U, 0U);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6958      	ldr	r0, [r3, #20]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8899      	ldrh	r1, [r3, #4]
 8008f14:	2300      	movs	r3, #0
 8008f16:	2201      	movs	r2, #1
 8008f18:	f7ff fd20 	bl	800895c <arm_cfft_radix4_init_f32>
 8008f1c:	e007      	b.n	8008f2e <arm_rfft_init_f32+0xc2>
  }
  else
  {
    /* Initializes the CFFT Module for fftLenreal/2 length */
    arm_cfft_radix4_init_f32(S->pCfft, S->fftLenBy2, 0U, 0U);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6958      	ldr	r0, [r3, #20]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8899      	ldrh	r1, [r3, #4]
 8008f26:	2300      	movs	r3, #0
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f7ff fd17 	bl	800895c <arm_cfft_radix4_init_f32>
  }

  /* return the status of RFFT Init function */
  return (status);
 8008f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	0801b578 	.word	0x0801b578
 8008f40:	08023578 	.word	0x08023578

08008f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008f48:	4b0e      	ldr	r3, [pc, #56]	; (8008f84 <HAL_Init+0x40>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a0d      	ldr	r2, [pc, #52]	; (8008f84 <HAL_Init+0x40>)
 8008f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008f54:	4b0b      	ldr	r3, [pc, #44]	; (8008f84 <HAL_Init+0x40>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a0a      	ldr	r2, [pc, #40]	; (8008f84 <HAL_Init+0x40>)
 8008f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f60:	4b08      	ldr	r3, [pc, #32]	; (8008f84 <HAL_Init+0x40>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a07      	ldr	r2, [pc, #28]	; (8008f84 <HAL_Init+0x40>)
 8008f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f6c:	2003      	movs	r0, #3
 8008f6e:	f000 fef7 	bl	8009d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f72:	2000      	movs	r0, #0
 8008f74:	f000 f808 	bl	8008f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008f78:	f7fd fb84 	bl	8006684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	40023c00 	.word	0x40023c00

08008f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008f90:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <HAL_InitTick+0x54>)
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <HAL_InitTick+0x58>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 ff1d 	bl	8009de6 <HAL_SYSTICK_Config>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e00e      	b.n	8008fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b0f      	cmp	r3, #15
 8008fba:	d80a      	bhi.n	8008fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	6879      	ldr	r1, [r7, #4]
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc4:	f000 fed7 	bl	8009d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008fc8:	4a06      	ldr	r2, [pc, #24]	; (8008fe4 <HAL_InitTick+0x5c>)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e000      	b.n	8008fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20000044 	.word	0x20000044
 8008fe0:	2000004c 	.word	0x2000004c
 8008fe4:	20000048 	.word	0x20000048

08008fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <HAL_IncTick+0x20>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4b06      	ldr	r3, [pc, #24]	; (800900c <HAL_IncTick+0x24>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	4a04      	ldr	r2, [pc, #16]	; (800900c <HAL_IncTick+0x24>)
 8008ffa:	6013      	str	r3, [r2, #0]
}
 8008ffc:	bf00      	nop
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	2000004c 	.word	0x2000004c
 800900c:	200035ec 	.word	0x200035ec

08009010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
  return uwTick;
 8009014:	4b03      	ldr	r3, [pc, #12]	; (8009024 <HAL_GetTick+0x14>)
 8009016:	681b      	ldr	r3, [r3, #0]
}
 8009018:	4618      	mov	r0, r3
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	200035ec 	.word	0x200035ec

08009028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009030:	f7ff ffee 	bl	8009010 <HAL_GetTick>
 8009034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d005      	beq.n	800904e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009042:	4b0a      	ldr	r3, [pc, #40]	; (800906c <HAL_Delay+0x44>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4413      	add	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800904e:	bf00      	nop
 8009050:	f7ff ffde 	bl	8009010 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	429a      	cmp	r2, r3
 800905e:	d8f7      	bhi.n	8009050 <HAL_Delay+0x28>
  {
  }
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	2000004c 	.word	0x2000004c

08009070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e033      	b.n	80090ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	d109      	bne.n	80090a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7fd fb24 	bl	80066dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f003 0310 	and.w	r3, r3, #16
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d118      	bne.n	80090e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80090b6:	f023 0302 	bic.w	r3, r3, #2
 80090ba:	f043 0202 	orr.w	r2, r3, #2
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa86 	bl	80095d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d2:	f023 0303 	bic.w	r3, r3, #3
 80090d6:	f043 0201 	orr.w	r2, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	641a      	str	r2, [r3, #64]	; 0x40
 80090de:	e001      	b.n	80090e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800910a:	2b01      	cmp	r3, #1
 800910c:	d101      	bne.n	8009112 <HAL_ADC_Start+0x1a>
 800910e:	2302      	movs	r3, #2
 8009110:	e0b2      	b.n	8009278 <HAL_ADC_Start+0x180>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b01      	cmp	r3, #1
 8009126:	d018      	beq.n	800915a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0201 	orr.w	r2, r2, #1
 8009136:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009138:	4b52      	ldr	r3, [pc, #328]	; (8009284 <HAL_ADC_Start+0x18c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a52      	ldr	r2, [pc, #328]	; (8009288 <HAL_ADC_Start+0x190>)
 800913e:	fba2 2303 	umull	r2, r3, r2, r3
 8009142:	0c9a      	lsrs	r2, r3, #18
 8009144:	4613      	mov	r3, r2
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	4413      	add	r3, r2
 800914a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800914c:	e002      	b.n	8009154 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	3b01      	subs	r3, #1
 8009152:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1f9      	bne.n	800914e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b01      	cmp	r3, #1
 8009166:	d17a      	bne.n	800925e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009170:	f023 0301 	bic.w	r3, r3, #1
 8009174:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009192:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091a6:	d106      	bne.n	80091b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ac:	f023 0206 	bic.w	r2, r3, #6
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	645a      	str	r2, [r3, #68]	; 0x44
 80091b4:	e002      	b.n	80091bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80091c4:	4b31      	ldr	r3, [pc, #196]	; (800928c <HAL_ADC_Start+0x194>)
 80091c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80091d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f003 031f 	and.w	r3, r3, #31
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d12a      	bne.n	8009234 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a2b      	ldr	r2, [pc, #172]	; (8009290 <HAL_ADC_Start+0x198>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d015      	beq.n	8009214 <HAL_ADC_Start+0x11c>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a29      	ldr	r2, [pc, #164]	; (8009294 <HAL_ADC_Start+0x19c>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d105      	bne.n	80091fe <HAL_ADC_Start+0x106>
 80091f2:	4b26      	ldr	r3, [pc, #152]	; (800928c <HAL_ADC_Start+0x194>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f003 031f 	and.w	r3, r3, #31
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a25      	ldr	r2, [pc, #148]	; (8009298 <HAL_ADC_Start+0x1a0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d136      	bne.n	8009276 <HAL_ADC_Start+0x17e>
 8009208:	4b20      	ldr	r3, [pc, #128]	; (800928c <HAL_ADC_Start+0x194>)
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b00      	cmp	r3, #0
 8009212:	d130      	bne.n	8009276 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d129      	bne.n	8009276 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009230:	609a      	str	r2, [r3, #8]
 8009232:	e020      	b.n	8009276 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a15      	ldr	r2, [pc, #84]	; (8009290 <HAL_ADC_Start+0x198>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d11b      	bne.n	8009276 <HAL_ADC_Start+0x17e>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d114      	bne.n	8009276 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800925a:	609a      	str	r2, [r3, #8]
 800925c:	e00b      	b.n	8009276 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	f043 0210 	orr.w	r2, r3, #16
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800926e:	f043 0201 	orr.w	r2, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	20000044 	.word	0x20000044
 8009288:	431bde83 	.word	0x431bde83
 800928c:	40012300 	.word	0x40012300
 8009290:	40012000 	.word	0x40012000
 8009294:	40012100 	.word	0x40012100
 8009298:	40012200 	.word	0x40012200

0800929c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_ADC_ConfigChannel+0x1c>
 80092c8:	2302      	movs	r3, #2
 80092ca:	e113      	b.n	80094f4 <HAL_ADC_ConfigChannel+0x244>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b09      	cmp	r3, #9
 80092da:	d925      	bls.n	8009328 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68d9      	ldr	r1, [r3, #12]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	4613      	mov	r3, r2
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	4413      	add	r3, r2
 80092f0:	3b1e      	subs	r3, #30
 80092f2:	2207      	movs	r2, #7
 80092f4:	fa02 f303 	lsl.w	r3, r2, r3
 80092f8:	43da      	mvns	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	400a      	ands	r2, r1
 8009300:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68d9      	ldr	r1, [r3, #12]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	b29b      	uxth	r3, r3
 8009312:	4618      	mov	r0, r3
 8009314:	4603      	mov	r3, r0
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	4403      	add	r3, r0
 800931a:	3b1e      	subs	r3, #30
 800931c:	409a      	lsls	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	60da      	str	r2, [r3, #12]
 8009326:	e022      	b.n	800936e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6919      	ldr	r1, [r3, #16]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	b29b      	uxth	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	4613      	mov	r3, r2
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	4413      	add	r3, r2
 800933c:	2207      	movs	r2, #7
 800933e:	fa02 f303 	lsl.w	r3, r2, r3
 8009342:	43da      	mvns	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	400a      	ands	r2, r1
 800934a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6919      	ldr	r1, [r3, #16]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	689a      	ldr	r2, [r3, #8]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	4618      	mov	r0, r3
 800935e:	4603      	mov	r3, r0
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	4403      	add	r3, r0
 8009364:	409a      	lsls	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b06      	cmp	r3, #6
 8009374:	d824      	bhi.n	80093c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	3b05      	subs	r3, #5
 8009388:	221f      	movs	r2, #31
 800938a:	fa02 f303 	lsl.w	r3, r2, r3
 800938e:	43da      	mvns	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	400a      	ands	r2, r1
 8009396:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	4618      	mov	r0, r3
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	3b05      	subs	r3, #5
 80093b2:	fa00 f203 	lsl.w	r2, r0, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	635a      	str	r2, [r3, #52]	; 0x34
 80093be:	e04c      	b.n	800945a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	2b0c      	cmp	r3, #12
 80093c6:	d824      	bhi.n	8009412 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	3b23      	subs	r3, #35	; 0x23
 80093da:	221f      	movs	r2, #31
 80093dc:	fa02 f303 	lsl.w	r3, r2, r3
 80093e0:	43da      	mvns	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	400a      	ands	r2, r1
 80093e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	4618      	mov	r0, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	4613      	mov	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	3b23      	subs	r3, #35	; 0x23
 8009404:	fa00 f203 	lsl.w	r2, r0, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	631a      	str	r2, [r3, #48]	; 0x30
 8009410:	e023      	b.n	800945a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	3b41      	subs	r3, #65	; 0x41
 8009424:	221f      	movs	r2, #31
 8009426:	fa02 f303 	lsl.w	r3, r2, r3
 800942a:	43da      	mvns	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	400a      	ands	r2, r1
 8009432:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	4618      	mov	r0, r3
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	3b41      	subs	r3, #65	; 0x41
 800944e:	fa00 f203 	lsl.w	r2, r0, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800945a:	4b29      	ldr	r3, [pc, #164]	; (8009500 <HAL_ADC_ConfigChannel+0x250>)
 800945c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a28      	ldr	r2, [pc, #160]	; (8009504 <HAL_ADC_ConfigChannel+0x254>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d10f      	bne.n	8009488 <HAL_ADC_ConfigChannel+0x1d8>
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b12      	cmp	r3, #18
 800946e:	d10b      	bne.n	8009488 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a1d      	ldr	r2, [pc, #116]	; (8009504 <HAL_ADC_ConfigChannel+0x254>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d12b      	bne.n	80094ea <HAL_ADC_ConfigChannel+0x23a>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a1c      	ldr	r2, [pc, #112]	; (8009508 <HAL_ADC_ConfigChannel+0x258>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d003      	beq.n	80094a4 <HAL_ADC_ConfigChannel+0x1f4>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b11      	cmp	r3, #17
 80094a2:	d122      	bne.n	80094ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a11      	ldr	r2, [pc, #68]	; (8009508 <HAL_ADC_ConfigChannel+0x258>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d111      	bne.n	80094ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80094c6:	4b11      	ldr	r3, [pc, #68]	; (800950c <HAL_ADC_ConfigChannel+0x25c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a11      	ldr	r2, [pc, #68]	; (8009510 <HAL_ADC_ConfigChannel+0x260>)
 80094cc:	fba2 2303 	umull	r2, r3, r2, r3
 80094d0:	0c9a      	lsrs	r2, r3, #18
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80094dc:	e002      	b.n	80094e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1f9      	bne.n	80094de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	40012300 	.word	0x40012300
 8009504:	40012000 	.word	0x40012000
 8009508:	10000012 	.word	0x10000012
 800950c:	20000044 	.word	0x20000044
 8009510:	431bde83 	.word	0x431bde83

08009514 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_ADC_AnalogWDGConfig+0x18>
 8009528:	2302      	movs	r3, #2
 800952a:	e04d      	b.n	80095c8 <HAL_ADC_AnalogWDGConfig+0xb4>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	7c1b      	ldrb	r3, [r3, #16]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d108      	bne.n	800954e <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800954a:	605a      	str	r2, [r3, #4]
 800954c:	e007      	b.n	800955e <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800955c:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800956c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009570:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6859      	ldr	r1, [r3, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	6852      	ldr	r2, [r2, #4]
 800958c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	6892      	ldr	r2, [r2, #8]
 8009596:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 021f 	bic.w	r2, r2, #31
 80095a6:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	4619      	mov	r1, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80095dc:	4b79      	ldr	r3, [pc, #484]	; (80097c4 <ADC_Init+0x1f0>)
 80095de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	431a      	orrs	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6859      	ldr	r1, [r3, #4]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	021a      	lsls	r2, r3, #8
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800962c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6859      	ldr	r1, [r3, #4]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689a      	ldr	r2, [r3, #8]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800964e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6899      	ldr	r1, [r3, #8]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	4a58      	ldr	r2, [pc, #352]	; (80097c8 <ADC_Init+0x1f4>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d022      	beq.n	80096b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689a      	ldr	r2, [r3, #8]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800967a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6899      	ldr	r1, [r3, #8]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800969c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6899      	ldr	r1, [r3, #8]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	609a      	str	r2, [r3, #8]
 80096b0:	e00f      	b.n	80096d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689a      	ldr	r2, [r3, #8]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689a      	ldr	r2, [r3, #8]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80096d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0202 	bic.w	r2, r2, #2
 80096e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6899      	ldr	r1, [r3, #8]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	7e1b      	ldrb	r3, [r3, #24]
 80096ec:	005a      	lsls	r2, r3, #1
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01b      	beq.n	8009738 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800970e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800971e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6859      	ldr	r1, [r3, #4]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	3b01      	subs	r3, #1
 800972c:	035a      	lsls	r2, r3, #13
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	e007      	b.n	8009748 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	3b01      	subs	r3, #1
 8009764:	051a      	lsls	r2, r3, #20
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800977c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6899      	ldr	r1, [r3, #8]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800978a:	025a      	lsls	r2, r3, #9
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6899      	ldr	r1, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	029a      	lsls	r2, r3, #10
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	430a      	orrs	r2, r1
 80097b6:	609a      	str	r2, [r3, #8]
}
 80097b8:	bf00      	nop
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	40012300 	.word	0x40012300
 80097c8:	0f000001 	.word	0x0f000001

080097cc <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored. 
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d101      	bne.n	80097ea <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 80097e6:	2302      	movs	r3, #2
 80097e8:	e0ab      	b.n	8009942 <HAL_ADCEx_MultiModeStart_DMA+0x176>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d018      	beq.n	8009832 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689a      	ldr	r2, [r3, #8]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0201 	orr.w	r2, r2, #1
 800980e:	609a      	str	r2, [r3, #8]
    
    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009810:	4b4e      	ldr	r3, [pc, #312]	; (800994c <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a4e      	ldr	r2, [pc, #312]	; (8009950 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8009816:	fba2 2303 	umull	r2, r3, r2, r3
 800981a:	0c9a      	lsrs	r2, r3, #18
 800981c:	4613      	mov	r3, r2
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	4413      	add	r3, r2
 8009822:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009824:	e002      	b.n	800982c <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	3b01      	subs	r3, #1
 800982a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1f9      	bne.n	8009826 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	2b01      	cmp	r3, #1
 800983e:	d173      	bne.n	8009928 <HAL_ADCEx_MultiModeStart_DMA+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009844:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009848:	f023 0301 	bic.w	r3, r3, #1
 800984c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800985e:	2b00      	cmp	r3, #0
 8009860:	d007      	beq.n	8009872 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800986a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800987a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800987e:	d106      	bne.n	800988e <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009884:	f023 0206 	bic.w	r2, r3, #6
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	645a      	str	r2, [r3, #68]	; 0x44
 800988c:	e002      	b.n	8009894 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a0:	4a2c      	ldr	r2, [pc, #176]	; (8009954 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80098a2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	4a2b      	ldr	r2, [pc, #172]	; (8009958 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 80098aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b0:	4a2a      	ldr	r2, [pc, #168]	; (800995c <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 80098b2:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f06f 0202 	mvn.w	r2, #2
 80098bc:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80098cc:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80098ce:	4b24      	ldr	r3, [pc, #144]	; (8009960 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 80098d0:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d006      	beq.n	80098ea <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	605a      	str	r2, [r3, #4]
 80098e8:	e005      	b.n	80098f6 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	605a      	str	r2, [r3, #4]
    }
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	3308      	adds	r3, #8
 80098fe:	4619      	mov	r1, r3
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f000 fb2a 	bl	8009f5c <HAL_DMA_Start_IT>
    
    /* if no external trigger present enable software conversion of regular channels */
    if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d114      	bne.n	8009940 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009924:	609a      	str	r2, [r3, #8]
 8009926:	e00b      	b.n	8009940 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992c:	f043 0210 	orr.w	r2, r3, #16
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009938:	f043 0201 	orr.w	r2, r3, #1
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20000044 	.word	0x20000044
 8009950:	431bde83 	.word	0x431bde83
 8009954:	08009a89 	.word	0x08009a89
 8009958:	08009b2f 	.word	0x08009b2f
 800995c:	08009b4b 	.word	0x08009b4b
 8009960:	40012300 	.word	0x40012300

08009964 <HAL_ADCEx_MultiModeStop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <HAL_ADCEx_MultiModeStop_DMA+0x1a>
 800997a:	2302      	movs	r3, #2
 800997c:	e038      	b.n	80099f0 <HAL_ADCEx_MultiModeStop_DMA+0x8c>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f022 0201 	bic.w	r2, r2, #1
 8009994:	609a      	str	r2, [r3, #8]

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009996:	4b18      	ldr	r3, [pc, #96]	; (80099f8 <HAL_ADCEx_MultiModeStop_DMA+0x94>)
 8009998:	60bb      	str	r3, [r7, #8]

  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d11e      	bne.n	80099e6 <HAL_ADCEx_MultiModeStop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode for multimode */
    tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	605a      	str	r2, [r3, #4]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 fb27 	bl	800a00c <HAL_DMA_Abort>
 80099be:	4603      	mov	r3, r0
 80099c0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80099d0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80099da:	f023 0301 	bic.w	r3, r3, #1
 80099de:	f043 0201 	orr.w	r2, r3, #1
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	40012300 	.word	0x40012300

080099fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d101      	bne.n	8009a14 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8009a10:	2302      	movs	r3, #2
 8009a12:	e031      	b.n	8009a78 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009a1c:	4b19      	ldr	r3, [pc, #100]	; (8009a84 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	f023 021f 	bic.w	r2, r3, #31
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	431a      	orrs	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	431a      	orrs	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	40012300 	.word	0x40012300

08009a88 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d13c      	bne.n	8009b1c <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d12b      	bne.n	8009b14 <ADC_MultiModeDMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d127      	bne.n	8009b14 <ADC_MultiModeDMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d006      	beq.n	8009ae0 <ADC_MultiModeDMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d119      	bne.n	8009b14 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0220 	bic.w	r2, r2, #32
 8009aee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d105      	bne.n	8009b14 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	f043 0201 	orr.w	r2, r3, #1
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7f7 fc11 	bl	800133c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8009b1a:	e004      	b.n	8009b26 <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	4798      	blx	r3
}
 8009b26:	bf00      	nop
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_ADC_ConvHalfCpltCallback(hadc); 
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f7f7 fbd1 	bl	80012e4 <HAL_ADC_ConvHalfCpltCallback>
}
 8009b42:	bf00      	nop
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
    ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b56:	60fb      	str	r3, [r7, #12]
    hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2240      	movs	r2, #64	; 0x40
 8009b5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set ADC error code to DMA error */
    hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b62:	f043 0204 	orr.w	r2, r3, #4
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc); 
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f7ff fb96 	bl	800929c <HAL_ADC_ErrorCallback>
}
 8009b70:	bf00      	nop
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b88:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <__NVIC_SetPriorityGrouping+0x44>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009b94:	4013      	ands	r3, r2
 8009b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009baa:	4a04      	ldr	r2, [pc, #16]	; (8009bbc <__NVIC_SetPriorityGrouping+0x44>)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	60d3      	str	r3, [r2, #12]
}
 8009bb0:	bf00      	nop
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	e000ed00 	.word	0xe000ed00

08009bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009bc4:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	0a1b      	lsrs	r3, r3, #8
 8009bca:	f003 0307 	and.w	r3, r3, #7
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	e000ed00 	.word	0xe000ed00

08009bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	db0b      	blt.n	8009c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bee:	79fb      	ldrb	r3, [r7, #7]
 8009bf0:	f003 021f 	and.w	r2, r3, #31
 8009bf4:	4907      	ldr	r1, [pc, #28]	; (8009c14 <__NVIC_EnableIRQ+0x38>)
 8009bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8009c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	e000e100 	.word	0xe000e100

08009c18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	db12      	blt.n	8009c50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c2a:	79fb      	ldrb	r3, [r7, #7]
 8009c2c:	f003 021f 	and.w	r2, r3, #31
 8009c30:	490a      	ldr	r1, [pc, #40]	; (8009c5c <__NVIC_DisableIRQ+0x44>)
 8009c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	2001      	movs	r0, #1
 8009c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8009c3e:	3320      	adds	r3, #32
 8009c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009c44:	f3bf 8f4f 	dsb	sy
}
 8009c48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009c4a:	f3bf 8f6f 	isb	sy
}
 8009c4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	e000e100 	.word	0xe000e100

08009c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	4603      	mov	r3, r0
 8009c68:	6039      	str	r1, [r7, #0]
 8009c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	db0a      	blt.n	8009c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	490c      	ldr	r1, [pc, #48]	; (8009cac <__NVIC_SetPriority+0x4c>)
 8009c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c7e:	0112      	lsls	r2, r2, #4
 8009c80:	b2d2      	uxtb	r2, r2
 8009c82:	440b      	add	r3, r1
 8009c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009c88:	e00a      	b.n	8009ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	4908      	ldr	r1, [pc, #32]	; (8009cb0 <__NVIC_SetPriority+0x50>)
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	f003 030f 	and.w	r3, r3, #15
 8009c96:	3b04      	subs	r3, #4
 8009c98:	0112      	lsls	r2, r2, #4
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	761a      	strb	r2, [r3, #24]
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	e000e100 	.word	0xe000e100
 8009cb0:	e000ed00 	.word	0xe000ed00

08009cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b089      	sub	sp, #36	; 0x24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f1c3 0307 	rsb	r3, r3, #7
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	bf28      	it	cs
 8009cd2:	2304      	movcs	r3, #4
 8009cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	2b06      	cmp	r3, #6
 8009cdc:	d902      	bls.n	8009ce4 <NVIC_EncodePriority+0x30>
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	3b03      	subs	r3, #3
 8009ce2:	e000      	b.n	8009ce6 <NVIC_EncodePriority+0x32>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf2:	43da      	mvns	r2, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	401a      	ands	r2, r3
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	fa01 f303 	lsl.w	r3, r1, r3
 8009d06:	43d9      	mvns	r1, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d0c:	4313      	orrs	r3, r2
         );
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3724      	adds	r7, #36	; 0x24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
	...

08009d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d2c:	d301      	bcc.n	8009d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e00f      	b.n	8009d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009d32:	4a0a      	ldr	r2, [pc, #40]	; (8009d5c <SysTick_Config+0x40>)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009d3a:	210f      	movs	r1, #15
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	f7ff ff8e 	bl	8009c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009d44:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <SysTick_Config+0x40>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009d4a:	4b04      	ldr	r3, [pc, #16]	; (8009d5c <SysTick_Config+0x40>)
 8009d4c:	2207      	movs	r2, #7
 8009d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	e000e010 	.word	0xe000e010

08009d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff ff05 	bl	8009b78 <__NVIC_SetPriorityGrouping>
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b086      	sub	sp, #24
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	607a      	str	r2, [r7, #4]
 8009d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009d88:	f7ff ff1a 	bl	8009bc0 <__NVIC_GetPriorityGrouping>
 8009d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	68b9      	ldr	r1, [r7, #8]
 8009d92:	6978      	ldr	r0, [r7, #20]
 8009d94:	f7ff ff8e 	bl	8009cb4 <NVIC_EncodePriority>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7ff ff5d 	bl	8009c60 <__NVIC_SetPriority>
}
 8009da6:	bf00      	nop
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	4603      	mov	r3, r0
 8009db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff ff0d 	bl	8009bdc <__NVIC_EnableIRQ>
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff ff1d 	bl	8009c18 <__NVIC_DisableIRQ>
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff ff94 	bl	8009d1c <SysTick_Config>
 8009df4:	4603      	mov	r3, r0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009e0c:	f7ff f900 	bl	8009010 <HAL_GetTick>
 8009e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e099      	b.n	8009f50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f022 0201 	bic.w	r2, r2, #1
 8009e3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e3c:	e00f      	b.n	8009e5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009e3e:	f7ff f8e7 	bl	8009010 <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b05      	cmp	r3, #5
 8009e4a:	d908      	bls.n	8009e5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2220      	movs	r2, #32
 8009e50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2203      	movs	r2, #3
 8009e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e078      	b.n	8009f50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e8      	bne.n	8009e3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	4b38      	ldr	r3, [pc, #224]	; (8009f58 <HAL_DMA_Init+0x158>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a1b      	ldr	r3, [r3, #32]
 8009ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	2b04      	cmp	r3, #4
 8009eb6:	d107      	bne.n	8009ec8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f023 0307 	bic.w	r3, r3, #7
 8009ede:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d117      	bne.n	8009f22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00e      	beq.n	8009f22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 faed 	bl	800a4e4 <DMA_CheckFifoParam>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d008      	beq.n	8009f22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2240      	movs	r2, #64	; 0x40
 8009f14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e016      	b.n	8009f50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 faa4 	bl	800a478 <DMA_CalcBaseAndBitshift>
 8009f30:	4603      	mov	r3, r0
 8009f32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f38:	223f      	movs	r2, #63	; 0x3f
 8009f3a:	409a      	lsls	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	f010803f 	.word	0xf010803f

08009f5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <HAL_DMA_Start_IT+0x26>
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e040      	b.n	800a004 <HAL_DMA_Start_IT+0xa8>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d12f      	bne.n	8009ff6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	68b9      	ldr	r1, [r7, #8]
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 fa36 	bl	800a41c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fb4:	223f      	movs	r2, #63	; 0x3f
 8009fb6:	409a      	lsls	r2, r3
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f042 0216 	orr.w	r2, r2, #22
 8009fca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d007      	beq.n	8009fe4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0208 	orr.w	r2, r2, #8
 8009fe2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0201 	orr.w	r2, r2, #1
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	e005      	b.n	800a002 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009ffe:	2302      	movs	r3, #2
 800a000:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a002:	7dfb      	ldrb	r3, [r7, #23]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a018:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a01a:	f7fe fff9 	bl	8009010 <HAL_GetTick>
 800a01e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d008      	beq.n	800a03e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2280      	movs	r2, #128	; 0x80
 800a030:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e052      	b.n	800a0e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0216 	bic.w	r2, r2, #22
 800a04c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	695a      	ldr	r2, [r3, #20]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a05c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	2b00      	cmp	r3, #0
 800a064:	d103      	bne.n	800a06e <HAL_DMA_Abort+0x62>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d007      	beq.n	800a07e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f022 0208 	bic.w	r2, r2, #8
 800a07c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 0201 	bic.w	r2, r2, #1
 800a08c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a08e:	e013      	b.n	800a0b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a090:	f7fe ffbe 	bl	8009010 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	d90c      	bls.n	800a0b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2203      	movs	r2, #3
 800a0b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e015      	b.n	800a0e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1e4      	bne.n	800a090 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ca:	223f      	movs	r2, #63	; 0x3f
 800a0cc:	409a      	lsls	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a0f8:	4b92      	ldr	r3, [pc, #584]	; (800a344 <HAL_DMA_IRQHandler+0x258>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a92      	ldr	r2, [pc, #584]	; (800a348 <HAL_DMA_IRQHandler+0x25c>)
 800a0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a102:	0a9b      	lsrs	r3, r3, #10
 800a104:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a116:	2208      	movs	r2, #8
 800a118:	409a      	lsls	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4013      	ands	r3, r2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d01a      	beq.n	800a158 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d013      	beq.n	800a158 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0204 	bic.w	r2, r2, #4
 800a13e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a144:	2208      	movs	r2, #8
 800a146:	409a      	lsls	r2, r3
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a150:	f043 0201 	orr.w	r2, r3, #1
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a15c:	2201      	movs	r2, #1
 800a15e:	409a      	lsls	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4013      	ands	r3, r2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d012      	beq.n	800a18e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00b      	beq.n	800a18e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a17a:	2201      	movs	r2, #1
 800a17c:	409a      	lsls	r2, r3
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a186:	f043 0202 	orr.w	r2, r3, #2
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a192:	2204      	movs	r2, #4
 800a194:	409a      	lsls	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4013      	ands	r3, r2
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d012      	beq.n	800a1c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b0:	2204      	movs	r2, #4
 800a1b2:	409a      	lsls	r2, r3
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1bc:	f043 0204 	orr.w	r2, r3, #4
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1c8:	2210      	movs	r2, #16
 800a1ca:	409a      	lsls	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d043      	beq.n	800a25c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 0308 	and.w	r3, r3, #8
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d03c      	beq.n	800a25c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e6:	2210      	movs	r2, #16
 800a1e8:	409a      	lsls	r2, r3
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d018      	beq.n	800a22e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d108      	bne.n	800a21c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d024      	beq.n	800a25c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	4798      	blx	r3
 800a21a:	e01f      	b.n	800a25c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a220:	2b00      	cmp	r3, #0
 800a222:	d01b      	beq.n	800a25c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	4798      	blx	r3
 800a22c:	e016      	b.n	800a25c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d107      	bne.n	800a24c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f022 0208 	bic.w	r2, r2, #8
 800a24a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	2b00      	cmp	r3, #0
 800a252:	d003      	beq.n	800a25c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a260:	2220      	movs	r2, #32
 800a262:	409a      	lsls	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4013      	ands	r3, r2
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 808e 	beq.w	800a38a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 0310 	and.w	r3, r3, #16
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 8086 	beq.w	800a38a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a282:	2220      	movs	r2, #32
 800a284:	409a      	lsls	r2, r3
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a290:	b2db      	uxtb	r3, r3
 800a292:	2b05      	cmp	r3, #5
 800a294:	d136      	bne.n	800a304 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f022 0216 	bic.w	r2, r2, #22
 800a2a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	695a      	ldr	r2, [r3, #20]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d103      	bne.n	800a2c6 <HAL_DMA_IRQHandler+0x1da>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d007      	beq.n	800a2d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f022 0208 	bic.w	r2, r2, #8
 800a2d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2da:	223f      	movs	r2, #63	; 0x3f
 800a2dc:	409a      	lsls	r2, r3
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d07d      	beq.n	800a3f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	4798      	blx	r3
        }
        return;
 800a302:	e078      	b.n	800a3f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d01c      	beq.n	800a34c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d108      	bne.n	800a332 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a324:	2b00      	cmp	r3, #0
 800a326:	d030      	beq.n	800a38a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	4798      	blx	r3
 800a330:	e02b      	b.n	800a38a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d027      	beq.n	800a38a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	4798      	blx	r3
 800a342:	e022      	b.n	800a38a <HAL_DMA_IRQHandler+0x29e>
 800a344:	20000044 	.word	0x20000044
 800a348:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10f      	bne.n	800a37a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f022 0210 	bic.w	r2, r2, #16
 800a368:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d032      	beq.n	800a3f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a396:	f003 0301 	and.w	r3, r3, #1
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d022      	beq.n	800a3e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2205      	movs	r2, #5
 800a3a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 0201 	bic.w	r2, r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	60bb      	str	r3, [r7, #8]
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d307      	bcc.n	800a3d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1f2      	bne.n	800a3b6 <HAL_DMA_IRQHandler+0x2ca>
 800a3d0:	e000      	b.n	800a3d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a3d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d005      	beq.n	800a3f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	4798      	blx	r3
 800a3f4:	e000      	b.n	800a3f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a3f6:	bf00      	nop
    }
  }
}
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop

0800a400 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a40e:	b2db      	uxtb	r3, r3
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a438:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	2b40      	cmp	r3, #64	; 0x40
 800a448:	d108      	bne.n	800a45c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a45a:	e007      	b.n	800a46c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	60da      	str	r2, [r3, #12]
}
 800a46c:	bf00      	nop
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	b2db      	uxtb	r3, r3
 800a486:	3b10      	subs	r3, #16
 800a488:	4a14      	ldr	r2, [pc, #80]	; (800a4dc <DMA_CalcBaseAndBitshift+0x64>)
 800a48a:	fba2 2303 	umull	r2, r3, r2, r3
 800a48e:	091b      	lsrs	r3, r3, #4
 800a490:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a492:	4a13      	ldr	r2, [pc, #76]	; (800a4e0 <DMA_CalcBaseAndBitshift+0x68>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	4413      	add	r3, r2
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d909      	bls.n	800a4ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a4ae:	f023 0303 	bic.w	r3, r3, #3
 800a4b2:	1d1a      	adds	r2, r3, #4
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	659a      	str	r2, [r3, #88]	; 0x58
 800a4b8:	e007      	b.n	800a4ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a4c2:	f023 0303 	bic.w	r3, r3, #3
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	aaaaaaab 	.word	0xaaaaaaab
 800a4e0:	0802b578 	.word	0x0802b578

0800a4e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d11f      	bne.n	800a53e <DMA_CheckFifoParam+0x5a>
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b03      	cmp	r3, #3
 800a502:	d856      	bhi.n	800a5b2 <DMA_CheckFifoParam+0xce>
 800a504:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <DMA_CheckFifoParam+0x28>)
 800a506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50a:	bf00      	nop
 800a50c:	0800a51d 	.word	0x0800a51d
 800a510:	0800a52f 	.word	0x0800a52f
 800a514:	0800a51d 	.word	0x0800a51d
 800a518:	0800a5b3 	.word	0x0800a5b3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d046      	beq.n	800a5b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a52c:	e043      	b.n	800a5b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a532:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a536:	d140      	bne.n	800a5ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a53c:	e03d      	b.n	800a5ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a546:	d121      	bne.n	800a58c <DMA_CheckFifoParam+0xa8>
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d837      	bhi.n	800a5be <DMA_CheckFifoParam+0xda>
 800a54e:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <DMA_CheckFifoParam+0x70>)
 800a550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a554:	0800a565 	.word	0x0800a565
 800a558:	0800a56b 	.word	0x0800a56b
 800a55c:	0800a565 	.word	0x0800a565
 800a560:	0800a57d 	.word	0x0800a57d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	73fb      	strb	r3, [r7, #15]
      break;
 800a568:	e030      	b.n	800a5cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d025      	beq.n	800a5c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a57a:	e022      	b.n	800a5c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a580:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a584:	d11f      	bne.n	800a5c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a58a:	e01c      	b.n	800a5c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d903      	bls.n	800a59a <DMA_CheckFifoParam+0xb6>
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b03      	cmp	r3, #3
 800a596:	d003      	beq.n	800a5a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a598:	e018      	b.n	800a5cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	73fb      	strb	r3, [r7, #15]
      break;
 800a59e:	e015      	b.n	800a5cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00e      	beq.n	800a5ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b0:	e00b      	b.n	800a5ca <DMA_CheckFifoParam+0xe6>
      break;
 800a5b2:	bf00      	nop
 800a5b4:	e00a      	b.n	800a5cc <DMA_CheckFifoParam+0xe8>
      break;
 800a5b6:	bf00      	nop
 800a5b8:	e008      	b.n	800a5cc <DMA_CheckFifoParam+0xe8>
      break;
 800a5ba:	bf00      	nop
 800a5bc:	e006      	b.n	800a5cc <DMA_CheckFifoParam+0xe8>
      break;
 800a5be:	bf00      	nop
 800a5c0:	e004      	b.n	800a5cc <DMA_CheckFifoParam+0xe8>
      break;
 800a5c2:	bf00      	nop
 800a5c4:	e002      	b.n	800a5cc <DMA_CheckFifoParam+0xe8>
      break;   
 800a5c6:	bf00      	nop
 800a5c8:	e000      	b.n	800a5cc <DMA_CheckFifoParam+0xe8>
      break;
 800a5ca:	bf00      	nop
    }
  } 
  
  return status; 
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop

0800a5dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e03b      	b.n	800a666 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d106      	bne.n	800a608 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7fc f912 	bl	800682c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2202      	movs	r2, #2
 800a60c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62c:	f023 0107 	bic.w	r1, r3, #7
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689a      	ldr	r2, [r3, #8]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a642:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a646:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	68d1      	ldr	r1, [r2, #12]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	6812      	ldr	r2, [r2, #0]
 800a652:	430b      	orrs	r3, r1
 800a654:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_DMA2D_DeInit+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e05f      	b.n	800a742 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800a682:	4b32      	ldr	r3, [pc, #200]	; (800a74c <HAL_DMA2D_DeInit+0xdc>)
 800a684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d02e      	beq.n	800a6ec <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d107      	bne.n	800a6ac <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f8b1 	bl	800a804 <HAL_DMA2D_Abort>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d021      	beq.n	800a6ec <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e04a      	b.n	800a742 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	f003 0320 	and.w	r3, r3, #32
 800a6b6:	2b20      	cmp	r3, #32
 800a6b8:	d108      	bne.n	800a6cc <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f8e7 	bl	800a890 <HAL_DMA2D_CLUTLoading_Abort>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d011      	beq.n	800a6ec <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e03a      	b.n	800a742 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b20      	cmp	r3, #32
 800a6d8:	d108      	bne.n	800a6ec <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800a6da:	2101      	movs	r1, #1
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f8d7 	bl	800a890 <HAL_DMA2D_CLUTLoading_Abort>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e02a      	b.n	800a742 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	223f      	movs	r2, #63	; 0x3f
 800a6fa:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2200      	movs	r2, #0
 800a702:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2200      	movs	r2, #0
 800a70a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2200      	movs	r2, #0
 800a712:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2200      	movs	r2, #0
 800a71a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2200      	movs	r2, #0
 800a722:	635a      	str	r2, [r3, #52]	; 0x34
  /* DeInit the low level hardware */
  hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7fc f8a9 	bl	800687c <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	40023800 	.word	0x40023800

0800a750 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af02      	add	r7, sp, #8
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a764:	2b01      	cmp	r3, #1
 800a766:	d101      	bne.n	800a76c <HAL_DMA2D_Start+0x1c>
 800a768:	2302      	movs	r3, #2
 800a76a:	e018      	b.n	800a79e <HAL_DMA2D_Start+0x4e>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2202      	movs	r2, #2
 800a778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	68b9      	ldr	r1, [r7, #8]
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 fb5c 	bl	800ae44 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f042 0201 	orr.w	r2, r2, #1
 800a79a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <HAL_DMA2D_BlendingStart>:
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2,
                                          uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b086      	sub	sp, #24
 800a7aa:	af02      	add	r7, sp, #8
 800a7ac:	60f8      	str	r0, [r7, #12]
 800a7ae:	60b9      	str	r1, [r7, #8]
 800a7b0:	607a      	str	r2, [r7, #4]
 800a7b2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <HAL_DMA2D_BlendingStart+0x1c>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e01c      	b.n	800a7fc <HAL_DMA2D_BlendingStart+0x56>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 fb2d 	bl	800ae44 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f042 0201 	orr.w	r2, r2, #1
 800a7f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT | DMA2D_CR_START, DMA2D_CR_ABORT);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f023 0205 	bic.w	r2, r3, #5
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0204 	orr.w	r2, r2, #4
 800a81e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a820:	f7fe fbf6 	bl	8009010 <HAL_GetTick>
 800a824:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800a826:	e017      	b.n	800a858 <HAL_DMA2D_Abort+0x54>
  {
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 800a828:	f7fe fbf2 	bl	8009010 <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a836:	d90f      	bls.n	800a858 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83c:	f043 0220 	orr.w	r2, r3, #32
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2203      	movs	r2, #3
 800a848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e017      	b.n	800a888 <HAL_DMA2D_Abort+0x84>
  while ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1e0      	bne.n	800a828 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800a874:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t *reg =  &(hdma2d->Instance->BGPFCCR);  /* by default, point at background register */
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3324      	adds	r3, #36	; 0x24
 800a8a0:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f042 0204 	orr.w	r2, r2, #4
 800a8b0:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if (LayerIdx == DMA2D_FOREGROUND_LAYER)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d103      	bne.n	800a8c0 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	331c      	adds	r3, #28
 800a8be:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800a8c0:	f7fe fba6 	bl	8009010 <HAL_GetTick>
 800a8c4:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 800a8c6:	e017      	b.n	800a8f8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if ((HAL_GetTick() - tickstart) > DMA2D_TIMEOUT_ABORT)
 800a8c8:	f7fe fba2 	bl	8009010 <HAL_GetTick>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8d6:	d90f      	bls.n	800a8f8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8dc:	f043 0220 	orr.w	r2, r3, #32
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2203      	movs	r2, #3
 800a8e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e016      	b.n	800a926 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while ((*reg & DMA2D_BGPFCCR_START) != 0U)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0320 	and.w	r3, r3, #32
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1e1      	bne.n	800a8c8 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE | DMA2D_IT_CAE);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800a912:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b086      	sub	sp, #24
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	2b00      	cmp	r3, #0
 800a948:	d056      	beq.n	800a9f8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a94a:	f7fe fb61 	bl	8009010 <HAL_GetTick>
 800a94e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a950:	e04b      	b.n	800a9ea <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800a960:	2b00      	cmp	r3, #0
 800a962:	d023      	beq.n	800a9ac <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f003 0320 	and.w	r3, r3, #32
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d005      	beq.n	800a97a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a972:	f043 0202 	orr.w	r2, r3, #2
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d005      	beq.n	800a990 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a988:	f043 0201 	orr.w	r2, r3, #1
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2221      	movs	r2, #33	; 0x21
 800a996:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2204      	movs	r2, #4
 800a99c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e0a5      	b.n	800aaf8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b2:	d01a      	beq.n	800a9ea <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a9b4:	f7fe fb2c 	bl	8009010 <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d302      	bcc.n	800a9ca <HAL_DMA2D_PollForTransfer+0x9c>
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10f      	bne.n	800a9ea <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ce:	f043 0220 	orr.w	r2, r3, #32
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2203      	movs	r2, #3
 800a9da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e086      	b.n	800aaf8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d0ac      	beq.n	800a952 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f003 0320 	and.w	r3, r3, #32
 800aa02:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0a:	f003 0320 	and.w	r3, r3, #32
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d061      	beq.n	800aade <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa1a:	f7fe faf9 	bl	8009010 <HAL_GetTick>
 800aa1e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800aa20:	e056      	b.n	800aad0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d02e      	beq.n	800aa92 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f003 0308 	and.w	r3, r3, #8
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d005      	beq.n	800aa4a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa42:	f043 0204 	orr.w	r2, r3, #4
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d005      	beq.n	800aa60 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa58:	f043 0202 	orr.w	r2, r3, #2
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d005      	beq.n	800aa76 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6e:	f043 0201 	orr.w	r2, r3, #1
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2229      	movs	r2, #41	; 0x29
 800aa7c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2204      	movs	r2, #4
 800aa82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e032      	b.n	800aaf8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa98:	d01a      	beq.n	800aad0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aa9a:	f7fe fab9 	bl	8009010 <HAL_GetTick>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d302      	bcc.n	800aab0 <HAL_DMA2D_PollForTransfer+0x182>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10f      	bne.n	800aad0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab4:	f043 0220 	orr.w	r2, r3, #32
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2203      	movs	r2, #3
 800aac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e013      	b.n	800aaf8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f003 0310 	and.w	r3, r3, #16
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0a1      	beq.n	800aa22 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2212      	movs	r2, #18
 800aae4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d026      	beq.n	800ab70 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d021      	beq.n	800ab70 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab3a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab40:	f043 0201 	orr.w	r2, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2204      	movs	r2, #4
 800ab54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	695b      	ldr	r3, [r3, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d003      	beq.n	800ab70 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f003 0320 	and.w	r3, r3, #32
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d026      	beq.n	800abc8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d021      	beq.n	800abc8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab92:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2220      	movs	r2, #32
 800ab9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba0:	f043 0202 	orr.w	r2, r3, #2
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2204      	movs	r2, #4
 800abac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f003 0308 	and.w	r3, r3, #8
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d026      	beq.n	800ac20 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d021      	beq.n	800ac20 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2208      	movs	r2, #8
 800abf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf8:	f043 0204 	orr.w	r2, r3, #4
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2204      	movs	r2, #4
 800ac04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f003 0304 	and.w	r3, r3, #4
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d013      	beq.n	800ac52 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00e      	beq.n	800ac52 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac42:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2204      	movs	r2, #4
 800ac4a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f853 	bl	800acf8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f003 0302 	and.w	r3, r3, #2
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d024      	beq.n	800aca6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d01f      	beq.n	800aca6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ac74:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f003 0310 	and.w	r3, r3, #16
 800acac:	2b00      	cmp	r3, #0
 800acae:	d01f      	beq.n	800acf0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d01a      	beq.n	800acf0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800acc8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2210      	movs	r2, #16
 800acd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f80e 	bl	800ad0c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800acf0:	bf00      	nop
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d101      	bne.n	800ad40 <HAL_DMA2D_ConfigLayer+0x20>
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	e079      	b.n	800ae34 <HAL_DMA2D_ConfigLayer+0x114>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	011b      	lsls	r3, r3, #4
 800ad54:	3318      	adds	r3, #24
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	4413      	add	r3, r2
 800ad5a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	041b      	lsls	r3, r3, #16
 800ad66:	4313      	orrs	r3, r2
 800ad68:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800ad6a:	4b35      	ldr	r3, [pc, #212]	; (800ae40 <HAL_DMA2D_ConfigLayer+0x120>)
 800ad6c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2b0a      	cmp	r3, #10
 800ad74:	d003      	beq.n	800ad7e <HAL_DMA2D_ConfigLayer+0x5e>
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	2b09      	cmp	r3, #9
 800ad7c:	d107      	bne.n	800ad8e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	617b      	str	r3, [r7, #20]
 800ad8c:	e005      	b.n	800ad9a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	061b      	lsls	r3, r3, #24
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d120      	bne.n	800ade2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	43db      	mvns	r3, r3
 800adaa:	ea02 0103 	and.w	r1, r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	6812      	ldr	r2, [r2, #0]
 800adc0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	2b0a      	cmp	r3, #10
 800adc8:	d003      	beq.n	800add2 <HAL_DMA2D_ConfigLayer+0xb2>
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	2b09      	cmp	r3, #9
 800add0:	d127      	bne.n	800ae22 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	68da      	ldr	r2, [r3, #12]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800adde:	629a      	str	r2, [r3, #40]	; 0x28
 800ade0:	e01f      	b.n	800ae22 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	69da      	ldr	r2, [r3, #28]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	43db      	mvns	r3, r3
 800adec:	ea02 0103 	and.w	r1, r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	430a      	orrs	r2, r1
 800adf8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	6812      	ldr	r2, [r2, #0]
 800ae02:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	2b0a      	cmp	r3, #10
 800ae0a:	d003      	beq.n	800ae14 <HAL_DMA2D_ConfigLayer+0xf4>
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	2b09      	cmp	r3, #9
 800ae12:	d106      	bne.n	800ae22 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	68da      	ldr	r2, [r3, #12]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ae20:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	371c      	adds	r7, #28
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	ff03000f 	.word	0xff03000f

0800ae44 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b08b      	sub	sp, #44	; 0x2c
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae58:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	041a      	lsls	r2, r3, #16
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	431a      	orrs	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae7c:	d174      	bne.n	800af68 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ae84:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae8c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae94:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d108      	bne.n	800aeb6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800aea4:	69ba      	ldr	r2, [r7, #24]
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	627b      	str	r3, [r7, #36]	; 0x24
 800aeb4:	e053      	b.n	800af5e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d106      	bne.n	800aecc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	697a      	ldr	r2, [r7, #20]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	627b      	str	r3, [r7, #36]	; 0x24
 800aeca:	e048      	b.n	800af5e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d111      	bne.n	800aef8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	0cdb      	lsrs	r3, r3, #19
 800aed8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	0a9b      	lsrs	r3, r3, #10
 800aede:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	08db      	lsrs	r3, r3, #3
 800aee4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	015a      	lsls	r2, r3, #5
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	02db      	lsls	r3, r3, #11
 800aeee:	4313      	orrs	r3, r2
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
 800aef6:	e032      	b.n	800af5e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d117      	bne.n	800af30 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	0fdb      	lsrs	r3, r3, #31
 800af04:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	0cdb      	lsrs	r3, r3, #19
 800af0a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	0adb      	lsrs	r3, r3, #11
 800af10:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	08db      	lsrs	r3, r3, #3
 800af16:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	029b      	lsls	r3, r3, #10
 800af20:	431a      	orrs	r2, r3
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	03db      	lsls	r3, r3, #15
 800af26:	4313      	orrs	r3, r2
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	627b      	str	r3, [r7, #36]	; 0x24
 800af2e:	e016      	b.n	800af5e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	0f1b      	lsrs	r3, r3, #28
 800af34:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	0d1b      	lsrs	r3, r3, #20
 800af3a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	0b1b      	lsrs	r3, r3, #12
 800af40:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	091b      	lsrs	r3, r3, #4
 800af46:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	011a      	lsls	r2, r3, #4
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	021b      	lsls	r3, r3, #8
 800af50:	431a      	orrs	r2, r3
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	031b      	lsls	r3, r3, #12
 800af56:	4313      	orrs	r3, r2
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af64:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800af66:	e003      	b.n	800af70 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	60da      	str	r2, [r3, #12]
}
 800af70:	bf00      	nop
 800af72:	372c      	adds	r7, #44	; 0x2c
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	2b80      	cmp	r3, #128	; 0x80
 800af94:	d106      	bne.n	800afa4 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	f001 b913 	b.w	800c1ca <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d007      	beq.n	800afbc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d003      	beq.n	800afbc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d105      	bne.n	800afc8 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2240      	movs	r2, #64	; 0x40
 800afc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	f001 b901 	b.w	800c1ca <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d102      	bne.n	800afd8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800afd2:	2302      	movs	r3, #2
 800afd4:	f001 b8f9 	b.w	800c1ca <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	2b01      	cmp	r3, #1
 800afea:	f041 80e7 	bne.w	800c1bc <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2202      	movs	r2, #2
 800aff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b00a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	68b9      	ldr	r1, [r7, #8]
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f001 f8f6 	bl	800c20c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	461a      	mov	r2, r3
 800b026:	4b99      	ldr	r3, [pc, #612]	; (800b28c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800b028:	429a      	cmp	r2, r3
 800b02a:	d960      	bls.n	800b0ee <HAL_DMAEx_MultiBufferStart_IT+0x172>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a97      	ldr	r2, [pc, #604]	; (800b290 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d057      	beq.n	800b0e6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a96      	ldr	r2, [pc, #600]	; (800b294 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d050      	beq.n	800b0e2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a94      	ldr	r2, [pc, #592]	; (800b298 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d049      	beq.n	800b0de <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a93      	ldr	r2, [pc, #588]	; (800b29c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d042      	beq.n	800b0da <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a91      	ldr	r2, [pc, #580]	; (800b2a0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d03a      	beq.n	800b0d4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a90      	ldr	r2, [pc, #576]	; (800b2a4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d032      	beq.n	800b0ce <HAL_DMAEx_MultiBufferStart_IT+0x152>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a8e      	ldr	r2, [pc, #568]	; (800b2a8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d02a      	beq.n	800b0c8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a8d      	ldr	r2, [pc, #564]	; (800b2ac <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d022      	beq.n	800b0c2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a8b      	ldr	r2, [pc, #556]	; (800b2b0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d01a      	beq.n	800b0bc <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a8a      	ldr	r2, [pc, #552]	; (800b2b4 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d012      	beq.n	800b0b6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a88      	ldr	r2, [pc, #544]	; (800b2b8 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d00a      	beq.n	800b0b0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a87      	ldr	r2, [pc, #540]	; (800b2bc <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d102      	bne.n	800b0aa <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 800b0a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0a8:	e01e      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0ae:	e01b      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0b4:	e018      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0ba:	e015      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0c0:	e012      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0c6:	e00f      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0cc:	e00c      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0d2:	e009      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0d8:	e006      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0da:	2320      	movs	r3, #32
 800b0dc:	e004      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0de:	2320      	movs	r3, #32
 800b0e0:	e002      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0e2:	2320      	movs	r3, #32
 800b0e4:	e000      	b.n	800b0e8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800b0e6:	2320      	movs	r3, #32
 800b0e8:	4a75      	ldr	r2, [pc, #468]	; (800b2c0 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800b0ea:	60d3      	str	r3, [r2, #12]
 800b0ec:	e150      	b.n	800b390 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	4b73      	ldr	r3, [pc, #460]	; (800b2c4 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d960      	bls.n	800b1bc <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a64      	ldr	r2, [pc, #400]	; (800b290 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d057      	beq.n	800b1b4 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a62      	ldr	r2, [pc, #392]	; (800b294 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d050      	beq.n	800b1b0 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a61      	ldr	r2, [pc, #388]	; (800b298 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d049      	beq.n	800b1ac <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a5f      	ldr	r2, [pc, #380]	; (800b29c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d042      	beq.n	800b1a8 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a5e      	ldr	r2, [pc, #376]	; (800b2a0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d03a      	beq.n	800b1a2 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a5c      	ldr	r2, [pc, #368]	; (800b2a4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d032      	beq.n	800b19c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a5b      	ldr	r2, [pc, #364]	; (800b2a8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d02a      	beq.n	800b196 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a59      	ldr	r2, [pc, #356]	; (800b2ac <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d022      	beq.n	800b190 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a58      	ldr	r2, [pc, #352]	; (800b2b0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d01a      	beq.n	800b18a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a56      	ldr	r2, [pc, #344]	; (800b2b4 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d012      	beq.n	800b184 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a55      	ldr	r2, [pc, #340]	; (800b2b8 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d00a      	beq.n	800b17e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a53      	ldr	r2, [pc, #332]	; (800b2bc <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d102      	bne.n	800b178 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800b172:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b176:	e01e      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b17c:	e01b      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b17e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b182:	e018      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b184:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b188:	e015      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b18a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b18e:	e012      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b190:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b194:	e00f      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b19a:	e00c      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b19c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1a0:	e009      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b1a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1a6:	e006      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b1a8:	2320      	movs	r3, #32
 800b1aa:	e004      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b1ac:	2320      	movs	r3, #32
 800b1ae:	e002      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b1b0:	2320      	movs	r3, #32
 800b1b2:	e000      	b.n	800b1b6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800b1b4:	2320      	movs	r3, #32
 800b1b6:	4a42      	ldr	r2, [pc, #264]	; (800b2c0 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800b1b8:	6093      	str	r3, [r2, #8]
 800b1ba:	e0e9      	b.n	800b390 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4b41      	ldr	r3, [pc, #260]	; (800b2c8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	f240 8083 	bls.w	800b2d0 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a30      	ldr	r2, [pc, #192]	; (800b290 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d057      	beq.n	800b284 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a2e      	ldr	r2, [pc, #184]	; (800b294 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d050      	beq.n	800b280 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a2d      	ldr	r2, [pc, #180]	; (800b298 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d049      	beq.n	800b27c <HAL_DMAEx_MultiBufferStart_IT+0x300>
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a2b      	ldr	r2, [pc, #172]	; (800b29c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d042      	beq.n	800b278 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a2a      	ldr	r2, [pc, #168]	; (800b2a0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d03a      	beq.n	800b272 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a28      	ldr	r2, [pc, #160]	; (800b2a4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d032      	beq.n	800b26c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a27      	ldr	r2, [pc, #156]	; (800b2a8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d02a      	beq.n	800b266 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a25      	ldr	r2, [pc, #148]	; (800b2ac <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d022      	beq.n	800b260 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a24      	ldr	r2, [pc, #144]	; (800b2b0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d01a      	beq.n	800b25a <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a22      	ldr	r2, [pc, #136]	; (800b2b4 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d012      	beq.n	800b254 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a21      	ldr	r2, [pc, #132]	; (800b2b8 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d00a      	beq.n	800b24e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a1f      	ldr	r2, [pc, #124]	; (800b2bc <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d102      	bne.n	800b248 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800b242:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b246:	e01e      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b248:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b24c:	e01b      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b24e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b252:	e018      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b258:	e015      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b25a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b25e:	e012      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b264:	e00f      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b266:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b26a:	e00c      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b26c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b270:	e009      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b272:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b276:	e006      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b278:	2320      	movs	r3, #32
 800b27a:	e004      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b27c:	2320      	movs	r3, #32
 800b27e:	e002      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b280:	2320      	movs	r3, #32
 800b282:	e000      	b.n	800b286 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 800b284:	2320      	movs	r3, #32
 800b286:	4a11      	ldr	r2, [pc, #68]	; (800b2cc <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 800b288:	60d3      	str	r3, [r2, #12]
 800b28a:	e081      	b.n	800b390 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800b28c:	40026458 	.word	0x40026458
 800b290:	40026010 	.word	0x40026010
 800b294:	40026410 	.word	0x40026410
 800b298:	40026070 	.word	0x40026070
 800b29c:	40026470 	.word	0x40026470
 800b2a0:	40026028 	.word	0x40026028
 800b2a4:	40026428 	.word	0x40026428
 800b2a8:	40026088 	.word	0x40026088
 800b2ac:	40026488 	.word	0x40026488
 800b2b0:	40026040 	.word	0x40026040
 800b2b4:	40026440 	.word	0x40026440
 800b2b8:	400260a0 	.word	0x400260a0
 800b2bc:	400264a0 	.word	0x400264a0
 800b2c0:	40026400 	.word	0x40026400
 800b2c4:	400260b8 	.word	0x400260b8
 800b2c8:	40026058 	.word	0x40026058
 800b2cc:	40026000 	.word	0x40026000
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a96      	ldr	r2, [pc, #600]	; (800b530 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d057      	beq.n	800b38a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a95      	ldr	r2, [pc, #596]	; (800b534 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d050      	beq.n	800b386 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a93      	ldr	r2, [pc, #588]	; (800b538 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d049      	beq.n	800b382 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a92      	ldr	r2, [pc, #584]	; (800b53c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d042      	beq.n	800b37e <HAL_DMAEx_MultiBufferStart_IT+0x402>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a90      	ldr	r2, [pc, #576]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d03a      	beq.n	800b378 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a8f      	ldr	r2, [pc, #572]	; (800b544 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d032      	beq.n	800b372 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a8d      	ldr	r2, [pc, #564]	; (800b548 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d02a      	beq.n	800b36c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a8c      	ldr	r2, [pc, #560]	; (800b54c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d022      	beq.n	800b366 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a8a      	ldr	r2, [pc, #552]	; (800b550 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d01a      	beq.n	800b360 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a89      	ldr	r2, [pc, #548]	; (800b554 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d012      	beq.n	800b35a <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a87      	ldr	r2, [pc, #540]	; (800b558 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d00a      	beq.n	800b354 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a86      	ldr	r2, [pc, #536]	; (800b55c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d102      	bne.n	800b34e <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 800b348:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b34c:	e01e      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b34e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b352:	e01b      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b358:	e018      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b35a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b35e:	e015      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b360:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b364:	e012      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b366:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b36a:	e00f      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b36c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b370:	e00c      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b376:	e009      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b37c:	e006      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b37e:	2320      	movs	r3, #32
 800b380:	e004      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b382:	2320      	movs	r3, #32
 800b384:	e002      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b386:	2320      	movs	r3, #32
 800b388:	e000      	b.n	800b38c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 800b38a:	2320      	movs	r3, #32
 800b38c:	4a74      	ldr	r2, [pc, #464]	; (800b560 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 800b38e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	461a      	mov	r2, r3
 800b396:	4b73      	ldr	r3, [pc, #460]	; (800b564 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 800b398:	429a      	cmp	r2, r3
 800b39a:	d960      	bls.n	800b45e <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a63      	ldr	r2, [pc, #396]	; (800b530 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d057      	beq.n	800b456 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a62      	ldr	r2, [pc, #392]	; (800b534 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d050      	beq.n	800b452 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a60      	ldr	r2, [pc, #384]	; (800b538 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d049      	beq.n	800b44e <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a5f      	ldr	r2, [pc, #380]	; (800b53c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d042      	beq.n	800b44a <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a5d      	ldr	r2, [pc, #372]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d03a      	beq.n	800b444 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a5c      	ldr	r2, [pc, #368]	; (800b544 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d032      	beq.n	800b43e <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a5a      	ldr	r2, [pc, #360]	; (800b548 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d02a      	beq.n	800b438 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a59      	ldr	r2, [pc, #356]	; (800b54c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d022      	beq.n	800b432 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a57      	ldr	r2, [pc, #348]	; (800b550 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d01a      	beq.n	800b42c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a56      	ldr	r2, [pc, #344]	; (800b554 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d012      	beq.n	800b426 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a54      	ldr	r2, [pc, #336]	; (800b558 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d00a      	beq.n	800b420 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a53      	ldr	r2, [pc, #332]	; (800b55c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d102      	bne.n	800b41a <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 800b414:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b418:	e01e      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b41a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b41e:	e01b      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b420:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b424:	e018      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b426:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b42a:	e015      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b42c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b430:	e012      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b436:	e00f      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b43c:	e00c      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b442:	e009      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b448:	e006      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b44a:	2310      	movs	r3, #16
 800b44c:	e004      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b44e:	2310      	movs	r3, #16
 800b450:	e002      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b452:	2310      	movs	r3, #16
 800b454:	e000      	b.n	800b458 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800b456:	2310      	movs	r3, #16
 800b458:	4a43      	ldr	r2, [pc, #268]	; (800b568 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800b45a:	60d3      	str	r3, [r2, #12]
 800b45c:	e14f      	b.n	800b6fe <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	4b41      	ldr	r3, [pc, #260]	; (800b56c <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 800b466:	429a      	cmp	r2, r3
 800b468:	f240 8082 	bls.w	800b570 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a2f      	ldr	r2, [pc, #188]	; (800b530 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d057      	beq.n	800b526 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a2e      	ldr	r2, [pc, #184]	; (800b534 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d050      	beq.n	800b522 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a2c      	ldr	r2, [pc, #176]	; (800b538 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d049      	beq.n	800b51e <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a2b      	ldr	r2, [pc, #172]	; (800b53c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d042      	beq.n	800b51a <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a29      	ldr	r2, [pc, #164]	; (800b540 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d03a      	beq.n	800b514 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a28      	ldr	r2, [pc, #160]	; (800b544 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d032      	beq.n	800b50e <HAL_DMAEx_MultiBufferStart_IT+0x592>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a26      	ldr	r2, [pc, #152]	; (800b548 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d02a      	beq.n	800b508 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a25      	ldr	r2, [pc, #148]	; (800b54c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d022      	beq.n	800b502 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a23      	ldr	r2, [pc, #140]	; (800b550 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d01a      	beq.n	800b4fc <HAL_DMAEx_MultiBufferStart_IT+0x580>
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a22      	ldr	r2, [pc, #136]	; (800b554 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d012      	beq.n	800b4f6 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a20      	ldr	r2, [pc, #128]	; (800b558 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d00a      	beq.n	800b4f0 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a1f      	ldr	r2, [pc, #124]	; (800b55c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d102      	bne.n	800b4ea <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 800b4e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b4e8:	e01e      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b4ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b4ee:	e01b      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b4f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b4f4:	e018      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b4f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b4fa:	e015      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b4fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b500:	e012      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b506:	e00f      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b50c:	e00c      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b50e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b512:	e009      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b518:	e006      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b51a:	2310      	movs	r3, #16
 800b51c:	e004      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b51e:	2310      	movs	r3, #16
 800b520:	e002      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b522:	2310      	movs	r3, #16
 800b524:	e000      	b.n	800b528 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800b526:	2310      	movs	r3, #16
 800b528:	4a0f      	ldr	r2, [pc, #60]	; (800b568 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800b52a:	6093      	str	r3, [r2, #8]
 800b52c:	e0e7      	b.n	800b6fe <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800b52e:	bf00      	nop
 800b530:	40026010 	.word	0x40026010
 800b534:	40026410 	.word	0x40026410
 800b538:	40026070 	.word	0x40026070
 800b53c:	40026470 	.word	0x40026470
 800b540:	40026028 	.word	0x40026028
 800b544:	40026428 	.word	0x40026428
 800b548:	40026088 	.word	0x40026088
 800b54c:	40026488 	.word	0x40026488
 800b550:	40026040 	.word	0x40026040
 800b554:	40026440 	.word	0x40026440
 800b558:	400260a0 	.word	0x400260a0
 800b55c:	400264a0 	.word	0x400264a0
 800b560:	40026000 	.word	0x40026000
 800b564:	40026458 	.word	0x40026458
 800b568:	40026400 	.word	0x40026400
 800b56c:	400260b8 	.word	0x400260b8
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	461a      	mov	r2, r3
 800b576:	4b96      	ldr	r3, [pc, #600]	; (800b7d0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800b578:	429a      	cmp	r2, r3
 800b57a:	d960      	bls.n	800b63e <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a94      	ldr	r2, [pc, #592]	; (800b7d4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d057      	beq.n	800b636 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a93      	ldr	r2, [pc, #588]	; (800b7d8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d050      	beq.n	800b632 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a91      	ldr	r2, [pc, #580]	; (800b7dc <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d049      	beq.n	800b62e <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a90      	ldr	r2, [pc, #576]	; (800b7e0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d042      	beq.n	800b62a <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a8e      	ldr	r2, [pc, #568]	; (800b7e4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d03a      	beq.n	800b624 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a8d      	ldr	r2, [pc, #564]	; (800b7e8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d032      	beq.n	800b61e <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a8b      	ldr	r2, [pc, #556]	; (800b7ec <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d02a      	beq.n	800b618 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a8a      	ldr	r2, [pc, #552]	; (800b7f0 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d022      	beq.n	800b612 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a88      	ldr	r2, [pc, #544]	; (800b7f4 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d01a      	beq.n	800b60c <HAL_DMAEx_MultiBufferStart_IT+0x690>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a87      	ldr	r2, [pc, #540]	; (800b7f8 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d012      	beq.n	800b606 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a85      	ldr	r2, [pc, #532]	; (800b7fc <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00a      	beq.n	800b600 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a84      	ldr	r2, [pc, #528]	; (800b800 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d102      	bne.n	800b5fa <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 800b5f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b5f8:	e01e      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b5fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b5fe:	e01b      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b600:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b604:	e018      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b606:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b60a:	e015      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b60c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b610:	e012      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b616:	e00f      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b61c:	e00c      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b61e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b622:	e009      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b628:	e006      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b62a:	2310      	movs	r3, #16
 800b62c:	e004      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b62e:	2310      	movs	r3, #16
 800b630:	e002      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b632:	2310      	movs	r3, #16
 800b634:	e000      	b.n	800b638 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800b636:	2310      	movs	r3, #16
 800b638:	4a72      	ldr	r2, [pc, #456]	; (800b804 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800b63a:	60d3      	str	r3, [r2, #12]
 800b63c:	e05f      	b.n	800b6fe <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a64      	ldr	r2, [pc, #400]	; (800b7d4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d057      	beq.n	800b6f8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a62      	ldr	r2, [pc, #392]	; (800b7d8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d050      	beq.n	800b6f4 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a61      	ldr	r2, [pc, #388]	; (800b7dc <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d049      	beq.n	800b6f0 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a5f      	ldr	r2, [pc, #380]	; (800b7e0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d042      	beq.n	800b6ec <HAL_DMAEx_MultiBufferStart_IT+0x770>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a5e      	ldr	r2, [pc, #376]	; (800b7e4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d03a      	beq.n	800b6e6 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a5c      	ldr	r2, [pc, #368]	; (800b7e8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d032      	beq.n	800b6e0 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a5b      	ldr	r2, [pc, #364]	; (800b7ec <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d02a      	beq.n	800b6da <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a59      	ldr	r2, [pc, #356]	; (800b7f0 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d022      	beq.n	800b6d4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a58      	ldr	r2, [pc, #352]	; (800b7f4 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d01a      	beq.n	800b6ce <HAL_DMAEx_MultiBufferStart_IT+0x752>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a56      	ldr	r2, [pc, #344]	; (800b7f8 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d012      	beq.n	800b6c8 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a55      	ldr	r2, [pc, #340]	; (800b7fc <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d00a      	beq.n	800b6c2 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a53      	ldr	r2, [pc, #332]	; (800b800 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d102      	bne.n	800b6bc <HAL_DMAEx_MultiBufferStart_IT+0x740>
 800b6b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6ba:	e01e      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b6c0:	e01b      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6c6:	e018      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6cc:	e015      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6d2:	e012      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6d8:	e00f      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6de:	e00c      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6e4:	e009      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ea:	e006      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6ec:	2310      	movs	r3, #16
 800b6ee:	e004      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6f0:	2310      	movs	r3, #16
 800b6f2:	e002      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6f4:	2310      	movs	r3, #16
 800b6f6:	e000      	b.n	800b6fa <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 800b6f8:	2310      	movs	r3, #16
 800b6fa:	4a42      	ldr	r2, [pc, #264]	; (800b804 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800b6fc:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	4b40      	ldr	r3, [pc, #256]	; (800b808 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 800b706:	429a      	cmp	r2, r3
 800b708:	f240 8082 	bls.w	800b810 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a30      	ldr	r2, [pc, #192]	; (800b7d4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d057      	beq.n	800b7c6 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a2f      	ldr	r2, [pc, #188]	; (800b7d8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d050      	beq.n	800b7c2 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a2d      	ldr	r2, [pc, #180]	; (800b7dc <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d049      	beq.n	800b7be <HAL_DMAEx_MultiBufferStart_IT+0x842>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a2c      	ldr	r2, [pc, #176]	; (800b7e0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d042      	beq.n	800b7ba <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a2a      	ldr	r2, [pc, #168]	; (800b7e4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d03a      	beq.n	800b7b4 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a29      	ldr	r2, [pc, #164]	; (800b7e8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d032      	beq.n	800b7ae <HAL_DMAEx_MultiBufferStart_IT+0x832>
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a27      	ldr	r2, [pc, #156]	; (800b7ec <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d02a      	beq.n	800b7a8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a26      	ldr	r2, [pc, #152]	; (800b7f0 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d022      	beq.n	800b7a2 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a24      	ldr	r2, [pc, #144]	; (800b7f4 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d01a      	beq.n	800b79c <HAL_DMAEx_MultiBufferStart_IT+0x820>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a23      	ldr	r2, [pc, #140]	; (800b7f8 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d012      	beq.n	800b796 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a21      	ldr	r2, [pc, #132]	; (800b7fc <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d00a      	beq.n	800b790 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a20      	ldr	r2, [pc, #128]	; (800b800 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d102      	bne.n	800b78a <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 800b784:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b788:	e01e      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b78a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b78e:	e01b      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b790:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b794:	e018      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b796:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b79a:	e015      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b79c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b7a0:	e012      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b7a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7a6:	e00f      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b7a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7ac:	e00c      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b7ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7b2:	e009      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b7b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7b8:	e006      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b7ba:	2308      	movs	r3, #8
 800b7bc:	e004      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b7be:	2308      	movs	r3, #8
 800b7c0:	e002      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b7c2:	2308      	movs	r3, #8
 800b7c4:	e000      	b.n	800b7c8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800b7c6:	2308      	movs	r3, #8
 800b7c8:	4a10      	ldr	r2, [pc, #64]	; (800b80c <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 800b7ca:	60d3      	str	r3, [r2, #12]
 800b7cc:	e16f      	b.n	800baae <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800b7ce:	bf00      	nop
 800b7d0:	40026058 	.word	0x40026058
 800b7d4:	40026010 	.word	0x40026010
 800b7d8:	40026410 	.word	0x40026410
 800b7dc:	40026070 	.word	0x40026070
 800b7e0:	40026470 	.word	0x40026470
 800b7e4:	40026028 	.word	0x40026028
 800b7e8:	40026428 	.word	0x40026428
 800b7ec:	40026088 	.word	0x40026088
 800b7f0:	40026488 	.word	0x40026488
 800b7f4:	40026040 	.word	0x40026040
 800b7f8:	40026440 	.word	0x40026440
 800b7fc:	400260a0 	.word	0x400260a0
 800b800:	400264a0 	.word	0x400264a0
 800b804:	40026000 	.word	0x40026000
 800b808:	40026458 	.word	0x40026458
 800b80c:	40026400 	.word	0x40026400
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	461a      	mov	r2, r3
 800b816:	4b94      	ldr	r3, [pc, #592]	; (800ba68 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800b818:	429a      	cmp	r2, r3
 800b81a:	d960      	bls.n	800b8de <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a92      	ldr	r2, [pc, #584]	; (800ba6c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d057      	beq.n	800b8d6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a91      	ldr	r2, [pc, #580]	; (800ba70 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d050      	beq.n	800b8d2 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a8f      	ldr	r2, [pc, #572]	; (800ba74 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d049      	beq.n	800b8ce <HAL_DMAEx_MultiBufferStart_IT+0x952>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a8e      	ldr	r2, [pc, #568]	; (800ba78 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d042      	beq.n	800b8ca <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a8c      	ldr	r2, [pc, #560]	; (800ba7c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d03a      	beq.n	800b8c4 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a8b      	ldr	r2, [pc, #556]	; (800ba80 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d032      	beq.n	800b8be <HAL_DMAEx_MultiBufferStart_IT+0x942>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a89      	ldr	r2, [pc, #548]	; (800ba84 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d02a      	beq.n	800b8b8 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a88      	ldr	r2, [pc, #544]	; (800ba88 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d022      	beq.n	800b8b2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a86      	ldr	r2, [pc, #536]	; (800ba8c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d01a      	beq.n	800b8ac <HAL_DMAEx_MultiBufferStart_IT+0x930>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a85      	ldr	r2, [pc, #532]	; (800ba90 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d012      	beq.n	800b8a6 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a83      	ldr	r2, [pc, #524]	; (800ba94 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d00a      	beq.n	800b8a0 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a82      	ldr	r2, [pc, #520]	; (800ba98 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d102      	bne.n	800b89a <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 800b894:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b898:	e01e      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b89a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b89e:	e01b      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8a4:	e018      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8aa:	e015      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8b0:	e012      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8b6:	e00f      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8bc:	e00c      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8c2:	e009      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8c8:	e006      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8ca:	2308      	movs	r3, #8
 800b8cc:	e004      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8ce:	2308      	movs	r3, #8
 800b8d0:	e002      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8d2:	2308      	movs	r3, #8
 800b8d4:	e000      	b.n	800b8d8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800b8d6:	2308      	movs	r3, #8
 800b8d8:	4a70      	ldr	r2, [pc, #448]	; (800ba9c <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 800b8da:	6093      	str	r3, [r2, #8]
 800b8dc:	e0e7      	b.n	800baae <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	4b6e      	ldr	r3, [pc, #440]	; (800baa0 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d960      	bls.n	800b9ac <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a5f      	ldr	r2, [pc, #380]	; (800ba6c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d057      	beq.n	800b9a4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a5d      	ldr	r2, [pc, #372]	; (800ba70 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d050      	beq.n	800b9a0 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a5c      	ldr	r2, [pc, #368]	; (800ba74 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d049      	beq.n	800b99c <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a5a      	ldr	r2, [pc, #360]	; (800ba78 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d042      	beq.n	800b998 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a59      	ldr	r2, [pc, #356]	; (800ba7c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d03a      	beq.n	800b992 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a57      	ldr	r2, [pc, #348]	; (800ba80 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d032      	beq.n	800b98c <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a56      	ldr	r2, [pc, #344]	; (800ba84 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d02a      	beq.n	800b986 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a54      	ldr	r2, [pc, #336]	; (800ba88 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d022      	beq.n	800b980 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a53      	ldr	r2, [pc, #332]	; (800ba8c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d01a      	beq.n	800b97a <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a51      	ldr	r2, [pc, #324]	; (800ba90 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d012      	beq.n	800b974 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a50      	ldr	r2, [pc, #320]	; (800ba94 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d00a      	beq.n	800b96e <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a4e      	ldr	r2, [pc, #312]	; (800ba98 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d102      	bne.n	800b968 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800b962:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b966:	e01e      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b96c:	e01b      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b96e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b972:	e018      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b974:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b978:	e015      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b97a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b97e:	e012      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b980:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b984:	e00f      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b98a:	e00c      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b98c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b990:	e009      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b992:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b996:	e006      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b998:	2308      	movs	r3, #8
 800b99a:	e004      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b99c:	2308      	movs	r3, #8
 800b99e:	e002      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b9a0:	2308      	movs	r3, #8
 800b9a2:	e000      	b.n	800b9a6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800b9a4:	2308      	movs	r3, #8
 800b9a6:	4a3f      	ldr	r2, [pc, #252]	; (800baa4 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 800b9a8:	60d3      	str	r3, [r2, #12]
 800b9aa:	e080      	b.n	800baae <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a2e      	ldr	r2, [pc, #184]	; (800ba6c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d078      	beq.n	800baa8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a2d      	ldr	r2, [pc, #180]	; (800ba70 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d050      	beq.n	800ba62 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a2b      	ldr	r2, [pc, #172]	; (800ba74 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d049      	beq.n	800ba5e <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a2a      	ldr	r2, [pc, #168]	; (800ba78 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d042      	beq.n	800ba5a <HAL_DMAEx_MultiBufferStart_IT+0xade>
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a28      	ldr	r2, [pc, #160]	; (800ba7c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d03a      	beq.n	800ba54 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a27      	ldr	r2, [pc, #156]	; (800ba80 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d032      	beq.n	800ba4e <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a25      	ldr	r2, [pc, #148]	; (800ba84 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d02a      	beq.n	800ba48 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a24      	ldr	r2, [pc, #144]	; (800ba88 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d022      	beq.n	800ba42 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a22      	ldr	r2, [pc, #136]	; (800ba8c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d01a      	beq.n	800ba3c <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a21      	ldr	r2, [pc, #132]	; (800ba90 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d012      	beq.n	800ba36 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a1f      	ldr	r2, [pc, #124]	; (800ba94 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d00a      	beq.n	800ba30 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a1e      	ldr	r2, [pc, #120]	; (800ba98 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d102      	bne.n	800ba2a <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 800ba24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba28:	e03f      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba2e:	e03c      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba34:	e039      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba3a:	e036      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba40:	e033      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba46:	e030      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba4c:	e02d      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba52:	e02a      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba58:	e027      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba5a:	2308      	movs	r3, #8
 800ba5c:	e025      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba5e:	2308      	movs	r3, #8
 800ba60:	e023      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba62:	2308      	movs	r3, #8
 800ba64:	e021      	b.n	800baaa <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800ba66:	bf00      	nop
 800ba68:	400260b8 	.word	0x400260b8
 800ba6c:	40026010 	.word	0x40026010
 800ba70:	40026410 	.word	0x40026410
 800ba74:	40026070 	.word	0x40026070
 800ba78:	40026470 	.word	0x40026470
 800ba7c:	40026028 	.word	0x40026028
 800ba80:	40026428 	.word	0x40026428
 800ba84:	40026088 	.word	0x40026088
 800ba88:	40026488 	.word	0x40026488
 800ba8c:	40026040 	.word	0x40026040
 800ba90:	40026440 	.word	0x40026440
 800ba94:	400260a0 	.word	0x400260a0
 800ba98:	400264a0 	.word	0x400264a0
 800ba9c:	40026400 	.word	0x40026400
 800baa0:	40026058 	.word	0x40026058
 800baa4:	40026000 	.word	0x40026000
 800baa8:	2308      	movs	r3, #8
 800baaa:	4a9a      	ldr	r2, [pc, #616]	; (800bd14 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800baac:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	4b98      	ldr	r3, [pc, #608]	; (800bd18 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d960      	bls.n	800bb7c <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a97      	ldr	r2, [pc, #604]	; (800bd1c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d057      	beq.n	800bb74 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a95      	ldr	r2, [pc, #596]	; (800bd20 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d050      	beq.n	800bb70 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a94      	ldr	r2, [pc, #592]	; (800bd24 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d049      	beq.n	800bb6c <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a92      	ldr	r2, [pc, #584]	; (800bd28 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d042      	beq.n	800bb68 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a91      	ldr	r2, [pc, #580]	; (800bd2c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d03a      	beq.n	800bb62 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a8f      	ldr	r2, [pc, #572]	; (800bd30 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d032      	beq.n	800bb5c <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a8e      	ldr	r2, [pc, #568]	; (800bd34 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d02a      	beq.n	800bb56 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a8c      	ldr	r2, [pc, #560]	; (800bd38 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d022      	beq.n	800bb50 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a8b      	ldr	r2, [pc, #556]	; (800bd3c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d01a      	beq.n	800bb4a <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a89      	ldr	r2, [pc, #548]	; (800bd40 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d012      	beq.n	800bb44 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a88      	ldr	r2, [pc, #544]	; (800bd44 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00a      	beq.n	800bb3e <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a86      	ldr	r2, [pc, #536]	; (800bd48 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d102      	bne.n	800bb38 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 800bb32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb36:	e01e      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb3c:	e01b      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb3e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb42:	e018      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb48:	e015      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb4e:	e012      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb54:	e00f      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb5a:	e00c      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb60:	e009      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb66:	e006      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb68:	2304      	movs	r3, #4
 800bb6a:	e004      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb6c:	2304      	movs	r3, #4
 800bb6e:	e002      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb70:	2304      	movs	r3, #4
 800bb72:	e000      	b.n	800bb76 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800bb74:	2304      	movs	r3, #4
 800bb76:	4a75      	ldr	r2, [pc, #468]	; (800bd4c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 800bb78:	60d3      	str	r3, [r2, #12]
 800bb7a:	e151      	b.n	800be20 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	461a      	mov	r2, r3
 800bb82:	4b73      	ldr	r3, [pc, #460]	; (800bd50 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d960      	bls.n	800bc4a <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a63      	ldr	r2, [pc, #396]	; (800bd1c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d057      	beq.n	800bc42 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a62      	ldr	r2, [pc, #392]	; (800bd20 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d050      	beq.n	800bc3e <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a60      	ldr	r2, [pc, #384]	; (800bd24 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d049      	beq.n	800bc3a <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a5f      	ldr	r2, [pc, #380]	; (800bd28 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d042      	beq.n	800bc36 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a5d      	ldr	r2, [pc, #372]	; (800bd2c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d03a      	beq.n	800bc30 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a5c      	ldr	r2, [pc, #368]	; (800bd30 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d032      	beq.n	800bc2a <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a5a      	ldr	r2, [pc, #360]	; (800bd34 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d02a      	beq.n	800bc24 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a59      	ldr	r2, [pc, #356]	; (800bd38 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d022      	beq.n	800bc1e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a57      	ldr	r2, [pc, #348]	; (800bd3c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d01a      	beq.n	800bc18 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a56      	ldr	r2, [pc, #344]	; (800bd40 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d012      	beq.n	800bc12 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a54      	ldr	r2, [pc, #336]	; (800bd44 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d00a      	beq.n	800bc0c <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a53      	ldr	r2, [pc, #332]	; (800bd48 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d102      	bne.n	800bc06 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 800bc00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc04:	e01e      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc0a:	e01b      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc10:	e018      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc16:	e015      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc1c:	e012      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc22:	e00f      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc28:	e00c      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc2e:	e009      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc34:	e006      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc36:	2304      	movs	r3, #4
 800bc38:	e004      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc3a:	2304      	movs	r3, #4
 800bc3c:	e002      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc3e:	2304      	movs	r3, #4
 800bc40:	e000      	b.n	800bc44 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800bc42:	2304      	movs	r3, #4
 800bc44:	4a41      	ldr	r2, [pc, #260]	; (800bd4c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 800bc46:	6093      	str	r3, [r2, #8]
 800bc48:	e0ea      	b.n	800be20 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	4b40      	ldr	r3, [pc, #256]	; (800bd54 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 800bc52:	429a      	cmp	r2, r3
 800bc54:	f240 8084 	bls.w	800bd60 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a2f      	ldr	r2, [pc, #188]	; (800bd1c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d07a      	beq.n	800bd58 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a2e      	ldr	r2, [pc, #184]	; (800bd20 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d050      	beq.n	800bd0e <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a2c      	ldr	r2, [pc, #176]	; (800bd24 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d049      	beq.n	800bd0a <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a2b      	ldr	r2, [pc, #172]	; (800bd28 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d042      	beq.n	800bd06 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a29      	ldr	r2, [pc, #164]	; (800bd2c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d03a      	beq.n	800bd00 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a28      	ldr	r2, [pc, #160]	; (800bd30 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d032      	beq.n	800bcfa <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a26      	ldr	r2, [pc, #152]	; (800bd34 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d02a      	beq.n	800bcf4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a25      	ldr	r2, [pc, #148]	; (800bd38 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d022      	beq.n	800bcee <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a23      	ldr	r2, [pc, #140]	; (800bd3c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d01a      	beq.n	800bce8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a22      	ldr	r2, [pc, #136]	; (800bd40 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d012      	beq.n	800bce2 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a20      	ldr	r2, [pc, #128]	; (800bd44 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d00a      	beq.n	800bcdc <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a1f      	ldr	r2, [pc, #124]	; (800bd48 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d102      	bne.n	800bcd6 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 800bcd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bcd4:	e041      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bcd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcda:	e03e      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bcdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bce0:	e03b      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bce2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bce6:	e038      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bce8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bcec:	e035      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bcee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcf2:	e032      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bcf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcf8:	e02f      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bcfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcfe:	e02c      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bd00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd04:	e029      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bd06:	2304      	movs	r3, #4
 800bd08:	e027      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bd0a:	2304      	movs	r3, #4
 800bd0c:	e025      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bd0e:	2304      	movs	r3, #4
 800bd10:	e023      	b.n	800bd5a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800bd12:	bf00      	nop
 800bd14:	40026000 	.word	0x40026000
 800bd18:	40026458 	.word	0x40026458
 800bd1c:	40026010 	.word	0x40026010
 800bd20:	40026410 	.word	0x40026410
 800bd24:	40026070 	.word	0x40026070
 800bd28:	40026470 	.word	0x40026470
 800bd2c:	40026028 	.word	0x40026028
 800bd30:	40026428 	.word	0x40026428
 800bd34:	40026088 	.word	0x40026088
 800bd38:	40026488 	.word	0x40026488
 800bd3c:	40026040 	.word	0x40026040
 800bd40:	40026440 	.word	0x40026440
 800bd44:	400260a0 	.word	0x400260a0
 800bd48:	400264a0 	.word	0x400264a0
 800bd4c:	40026400 	.word	0x40026400
 800bd50:	400260b8 	.word	0x400260b8
 800bd54:	40026058 	.word	0x40026058
 800bd58:	2304      	movs	r3, #4
 800bd5a:	4a94      	ldr	r2, [pc, #592]	; (800bfac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800bd5c:	60d3      	str	r3, [r2, #12]
 800bd5e:	e05f      	b.n	800be20 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a92      	ldr	r2, [pc, #584]	; (800bfb0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d057      	beq.n	800be1a <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a91      	ldr	r2, [pc, #580]	; (800bfb4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d050      	beq.n	800be16 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a8f      	ldr	r2, [pc, #572]	; (800bfb8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d049      	beq.n	800be12 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a8e      	ldr	r2, [pc, #568]	; (800bfbc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d042      	beq.n	800be0e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a8c      	ldr	r2, [pc, #560]	; (800bfc0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d03a      	beq.n	800be08 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a8b      	ldr	r2, [pc, #556]	; (800bfc4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d032      	beq.n	800be02 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a89      	ldr	r2, [pc, #548]	; (800bfc8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d02a      	beq.n	800bdfc <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a88      	ldr	r2, [pc, #544]	; (800bfcc <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d022      	beq.n	800bdf6 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a86      	ldr	r2, [pc, #536]	; (800bfd0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d01a      	beq.n	800bdf0 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a85      	ldr	r2, [pc, #532]	; (800bfd4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d012      	beq.n	800bdea <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a83      	ldr	r2, [pc, #524]	; (800bfd8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d00a      	beq.n	800bde4 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a82      	ldr	r2, [pc, #520]	; (800bfdc <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d102      	bne.n	800bdde <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 800bdd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bddc:	e01e      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800bdde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bde2:	e01b      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800bde4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bde8:	e018      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800bdea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bdee:	e015      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800bdf0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bdf4:	e012      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800bdf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdfa:	e00f      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800bdfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be00:	e00c      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800be02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be06:	e009      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800be08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be0c:	e006      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800be0e:	2304      	movs	r3, #4
 800be10:	e004      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800be12:	2304      	movs	r3, #4
 800be14:	e002      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800be16:	2304      	movs	r3, #4
 800be18:	e000      	b.n	800be1c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800be1a:	2304      	movs	r3, #4
 800be1c:	4a63      	ldr	r2, [pc, #396]	; (800bfac <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800be1e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	461a      	mov	r2, r3
 800be26:	4b6e      	ldr	r3, [pc, #440]	; (800bfe0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 800be28:	429a      	cmp	r2, r3
 800be2a:	d95c      	bls.n	800bee6 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a5f      	ldr	r2, [pc, #380]	; (800bfb0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d053      	beq.n	800bede <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a5e      	ldr	r2, [pc, #376]	; (800bfb4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d04c      	beq.n	800beda <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a5c      	ldr	r2, [pc, #368]	; (800bfb8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d045      	beq.n	800bed6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a5b      	ldr	r2, [pc, #364]	; (800bfbc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d03e      	beq.n	800bed2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a59      	ldr	r2, [pc, #356]	; (800bfc0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d037      	beq.n	800bece <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a58      	ldr	r2, [pc, #352]	; (800bfc4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d030      	beq.n	800beca <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a56      	ldr	r2, [pc, #344]	; (800bfc8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d029      	beq.n	800bec6 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a55      	ldr	r2, [pc, #340]	; (800bfcc <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d022      	beq.n	800bec2 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a53      	ldr	r2, [pc, #332]	; (800bfd0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d01a      	beq.n	800bebc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a52      	ldr	r2, [pc, #328]	; (800bfd4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d012      	beq.n	800beb6 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a50      	ldr	r2, [pc, #320]	; (800bfd8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d00a      	beq.n	800beb0 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a4f      	ldr	r2, [pc, #316]	; (800bfdc <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d102      	bne.n	800beaa <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 800bea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bea8:	e01a      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800beaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800beae:	e017      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800beb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800beb4:	e014      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800beb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800beba:	e011      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800bebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bec0:	e00e      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800bec2:	2340      	movs	r3, #64	; 0x40
 800bec4:	e00c      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800bec6:	2340      	movs	r3, #64	; 0x40
 800bec8:	e00a      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800beca:	2340      	movs	r3, #64	; 0x40
 800becc:	e008      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800bece:	2340      	movs	r3, #64	; 0x40
 800bed0:	e006      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800bed2:	2301      	movs	r3, #1
 800bed4:	e004      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800bed6:	2301      	movs	r3, #1
 800bed8:	e002      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800bede:	2301      	movs	r3, #1
 800bee0:	4a40      	ldr	r2, [pc, #256]	; (800bfe4 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 800bee2:	60d3      	str	r3, [r2, #12]
 800bee4:	e141      	b.n	800c16a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	4b3e      	ldr	r3, [pc, #248]	; (800bfe8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 800beee:	429a      	cmp	r2, r3
 800bef0:	d97c      	bls.n	800bfec <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a2e      	ldr	r2, [pc, #184]	; (800bfb0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d053      	beq.n	800bfa4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a2c      	ldr	r2, [pc, #176]	; (800bfb4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d04c      	beq.n	800bfa0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a2b      	ldr	r2, [pc, #172]	; (800bfb8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d045      	beq.n	800bf9c <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a29      	ldr	r2, [pc, #164]	; (800bfbc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d03e      	beq.n	800bf98 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a28      	ldr	r2, [pc, #160]	; (800bfc0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d037      	beq.n	800bf94 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a26      	ldr	r2, [pc, #152]	; (800bfc4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d030      	beq.n	800bf90 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a25      	ldr	r2, [pc, #148]	; (800bfc8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d029      	beq.n	800bf8c <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a23      	ldr	r2, [pc, #140]	; (800bfcc <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d022      	beq.n	800bf88 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a22      	ldr	r2, [pc, #136]	; (800bfd0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d01a      	beq.n	800bf82 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a20      	ldr	r2, [pc, #128]	; (800bfd4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d012      	beq.n	800bf7c <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a1f      	ldr	r2, [pc, #124]	; (800bfd8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d00a      	beq.n	800bf76 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a1d      	ldr	r2, [pc, #116]	; (800bfdc <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d102      	bne.n	800bf70 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 800bf6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bf6e:	e01a      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bf74:	e017      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bf7a:	e014      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bf80:	e011      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bf86:	e00e      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf88:	2340      	movs	r3, #64	; 0x40
 800bf8a:	e00c      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf8c:	2340      	movs	r3, #64	; 0x40
 800bf8e:	e00a      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf90:	2340      	movs	r3, #64	; 0x40
 800bf92:	e008      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf94:	2340      	movs	r3, #64	; 0x40
 800bf96:	e006      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e004      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e002      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e000      	b.n	800bfa6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	4a0f      	ldr	r2, [pc, #60]	; (800bfe4 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 800bfa8:	6093      	str	r3, [r2, #8]
 800bfaa:	e0de      	b.n	800c16a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800bfac:	40026000 	.word	0x40026000
 800bfb0:	40026010 	.word	0x40026010
 800bfb4:	40026410 	.word	0x40026410
 800bfb8:	40026070 	.word	0x40026070
 800bfbc:	40026470 	.word	0x40026470
 800bfc0:	40026028 	.word	0x40026028
 800bfc4:	40026428 	.word	0x40026428
 800bfc8:	40026088 	.word	0x40026088
 800bfcc:	40026488 	.word	0x40026488
 800bfd0:	40026040 	.word	0x40026040
 800bfd4:	40026440 	.word	0x40026440
 800bfd8:	400260a0 	.word	0x400260a0
 800bfdc:	400264a0 	.word	0x400264a0
 800bfe0:	40026458 	.word	0x40026458
 800bfe4:	40026400 	.word	0x40026400
 800bfe8:	400260b8 	.word	0x400260b8
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	461a      	mov	r2, r3
 800bff2:	4b78      	ldr	r3, [pc, #480]	; (800c1d4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d95c      	bls.n	800c0b2 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a76      	ldr	r2, [pc, #472]	; (800c1d8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d053      	beq.n	800c0aa <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a75      	ldr	r2, [pc, #468]	; (800c1dc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d04c      	beq.n	800c0a6 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a73      	ldr	r2, [pc, #460]	; (800c1e0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d045      	beq.n	800c0a2 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a72      	ldr	r2, [pc, #456]	; (800c1e4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d03e      	beq.n	800c09e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a70      	ldr	r2, [pc, #448]	; (800c1e8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d037      	beq.n	800c09a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a6f      	ldr	r2, [pc, #444]	; (800c1ec <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d030      	beq.n	800c096 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a6d      	ldr	r2, [pc, #436]	; (800c1f0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d029      	beq.n	800c092 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a6c      	ldr	r2, [pc, #432]	; (800c1f4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d022      	beq.n	800c08e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a6a      	ldr	r2, [pc, #424]	; (800c1f8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d01a      	beq.n	800c088 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a69      	ldr	r2, [pc, #420]	; (800c1fc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d012      	beq.n	800c082 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a67      	ldr	r2, [pc, #412]	; (800c200 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d00a      	beq.n	800c07c <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a66      	ldr	r2, [pc, #408]	; (800c204 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d102      	bne.n	800c076 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 800c070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c074:	e01a      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c07a:	e017      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c07c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c080:	e014      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c086:	e011      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c08c:	e00e      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c08e:	2340      	movs	r3, #64	; 0x40
 800c090:	e00c      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c092:	2340      	movs	r3, #64	; 0x40
 800c094:	e00a      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c096:	2340      	movs	r3, #64	; 0x40
 800c098:	e008      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c09a:	2340      	movs	r3, #64	; 0x40
 800c09c:	e006      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e004      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e002      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e000      	b.n	800c0ac <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	4a56      	ldr	r2, [pc, #344]	; (800c208 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800c0ae:	60d3      	str	r3, [r2, #12]
 800c0b0:	e05b      	b.n	800c16a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a48      	ldr	r2, [pc, #288]	; (800c1d8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d053      	beq.n	800c164 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a46      	ldr	r2, [pc, #280]	; (800c1dc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d04c      	beq.n	800c160 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a45      	ldr	r2, [pc, #276]	; (800c1e0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d045      	beq.n	800c15c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a43      	ldr	r2, [pc, #268]	; (800c1e4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d03e      	beq.n	800c158 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a42      	ldr	r2, [pc, #264]	; (800c1e8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d037      	beq.n	800c154 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a40      	ldr	r2, [pc, #256]	; (800c1ec <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d030      	beq.n	800c150 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a3f      	ldr	r2, [pc, #252]	; (800c1f0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d029      	beq.n	800c14c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a3d      	ldr	r2, [pc, #244]	; (800c1f4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d022      	beq.n	800c148 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a3c      	ldr	r2, [pc, #240]	; (800c1f8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d01a      	beq.n	800c142 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a3a      	ldr	r2, [pc, #232]	; (800c1fc <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d012      	beq.n	800c13c <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a39      	ldr	r2, [pc, #228]	; (800c200 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d00a      	beq.n	800c136 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a37      	ldr	r2, [pc, #220]	; (800c204 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d102      	bne.n	800c130 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 800c12a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c12e:	e01a      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c130:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c134:	e017      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c13a:	e014      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c13c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c140:	e011      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c146:	e00e      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c148:	2340      	movs	r3, #64	; 0x40
 800c14a:	e00c      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c14c:	2340      	movs	r3, #64	; 0x40
 800c14e:	e00a      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c150:	2340      	movs	r3, #64	; 0x40
 800c152:	e008      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c154:	2340      	movs	r3, #64	; 0x40
 800c156:	e006      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c158:	2301      	movs	r3, #1
 800c15a:	e004      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c15c:	2301      	movs	r3, #1
 800c15e:	e002      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c160:	2301      	movs	r3, #1
 800c162:	e000      	b.n	800c166 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800c164:	2301      	movs	r3, #1
 800c166:	4a28      	ldr	r2, [pc, #160]	; (800c208 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800c168:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f042 0216 	orr.w	r2, r2, #22
 800c178:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	695a      	ldr	r2, [r3, #20]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c188:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d103      	bne.n	800c19a <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c196:	2b00      	cmp	r3, #0
 800c198:	d007      	beq.n	800c1aa <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f042 0208 	orr.w	r2, r2, #8
 800c1a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f042 0201 	orr.w	r2, r2, #1
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	e005      	b.n	800c1c8 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3718      	adds	r7, #24
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	40026058 	.word	0x40026058
 800c1d8:	40026010 	.word	0x40026010
 800c1dc:	40026410 	.word	0x40026410
 800c1e0:	40026070 	.word	0x40026070
 800c1e4:	40026470 	.word	0x40026470
 800c1e8:	40026028 	.word	0x40026028
 800c1ec:	40026428 	.word	0x40026428
 800c1f0:	40026088 	.word	0x40026088
 800c1f4:	40026488 	.word	0x40026488
 800c1f8:	40026040 	.word	0x40026040
 800c1fc:	40026440 	.word	0x40026440
 800c200:	400260a0 	.word	0x400260a0
 800c204:	400264a0 	.word	0x400264a0
 800c208:	40026000 	.word	0x40026000

0800c20c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	2b40      	cmp	r3, #64	; 0x40
 800c228:	d108      	bne.n	800c23c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c23a:	e007      	b.n	800c24c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	60da      	str	r2, [r3, #12]
}
 800c24c:	bf00      	nop
 800c24e:	3714      	adds	r7, #20
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c258:	b480      	push	{r7}
 800c25a:	b089      	sub	sp, #36	; 0x24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c262:	2300      	movs	r3, #0
 800c264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c266:	2300      	movs	r3, #0
 800c268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c26a:	2300      	movs	r3, #0
 800c26c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c26e:	2300      	movs	r3, #0
 800c270:	61fb      	str	r3, [r7, #28]
 800c272:	e177      	b.n	800c564 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c274:	2201      	movs	r2, #1
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	fa02 f303 	lsl.w	r3, r2, r3
 800c27c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	4013      	ands	r3, r2
 800c286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c288:	693a      	ldr	r2, [r7, #16]
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	f040 8166 	bne.w	800c55e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	f003 0303 	and.w	r3, r3, #3
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d005      	beq.n	800c2aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d130      	bne.n	800c30c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	005b      	lsls	r3, r3, #1
 800c2b4:	2203      	movs	r2, #3
 800c2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ba:	43db      	mvns	r3, r3
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	4013      	ands	r3, r2
 800c2c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	69ba      	ldr	r2, [r7, #24]
 800c2d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e8:	43db      	mvns	r3, r3
 800c2ea:	69ba      	ldr	r2, [r7, #24]
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	091b      	lsrs	r3, r3, #4
 800c2f6:	f003 0201 	and.w	r2, r3, #1
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c300:	69ba      	ldr	r2, [r7, #24]
 800c302:	4313      	orrs	r3, r2
 800c304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	69ba      	ldr	r2, [r7, #24]
 800c30a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	f003 0303 	and.w	r3, r3, #3
 800c314:	2b03      	cmp	r3, #3
 800c316:	d017      	beq.n	800c348 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	2203      	movs	r2, #3
 800c324:	fa02 f303 	lsl.w	r3, r2, r3
 800c328:	43db      	mvns	r3, r3
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	4013      	ands	r3, r2
 800c32e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	689a      	ldr	r2, [r3, #8]
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	fa02 f303 	lsl.w	r3, r2, r3
 800c33c:	69ba      	ldr	r2, [r7, #24]
 800c33e:	4313      	orrs	r3, r2
 800c340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	69ba      	ldr	r2, [r7, #24]
 800c346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	f003 0303 	and.w	r3, r3, #3
 800c350:	2b02      	cmp	r3, #2
 800c352:	d123      	bne.n	800c39c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	08da      	lsrs	r2, r3, #3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	3208      	adds	r2, #8
 800c35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	f003 0307 	and.w	r3, r3, #7
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	220f      	movs	r2, #15
 800c36c:	fa02 f303 	lsl.w	r3, r2, r3
 800c370:	43db      	mvns	r3, r3
 800c372:	69ba      	ldr	r2, [r7, #24]
 800c374:	4013      	ands	r3, r2
 800c376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	691a      	ldr	r2, [r3, #16]
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	f003 0307 	and.w	r3, r3, #7
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	fa02 f303 	lsl.w	r3, r2, r3
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	08da      	lsrs	r2, r3, #3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	3208      	adds	r2, #8
 800c396:	69b9      	ldr	r1, [r7, #24]
 800c398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	005b      	lsls	r3, r3, #1
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ac:	43db      	mvns	r3, r3
 800c3ae:	69ba      	ldr	r2, [r7, #24]
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	f003 0203 	and.w	r2, r3, #3
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c4:	69ba      	ldr	r2, [r7, #24]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	69ba      	ldr	r2, [r7, #24]
 800c3ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 80c0 	beq.w	800c55e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60fb      	str	r3, [r7, #12]
 800c3e2:	4b66      	ldr	r3, [pc, #408]	; (800c57c <HAL_GPIO_Init+0x324>)
 800c3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3e6:	4a65      	ldr	r2, [pc, #404]	; (800c57c <HAL_GPIO_Init+0x324>)
 800c3e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c3ec:	6453      	str	r3, [r2, #68]	; 0x44
 800c3ee:	4b63      	ldr	r3, [pc, #396]	; (800c57c <HAL_GPIO_Init+0x324>)
 800c3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3f6:	60fb      	str	r3, [r7, #12]
 800c3f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c3fa:	4a61      	ldr	r2, [pc, #388]	; (800c580 <HAL_GPIO_Init+0x328>)
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	089b      	lsrs	r3, r3, #2
 800c400:	3302      	adds	r3, #2
 800c402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	f003 0303 	and.w	r3, r3, #3
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	220f      	movs	r2, #15
 800c412:	fa02 f303 	lsl.w	r3, r2, r3
 800c416:	43db      	mvns	r3, r3
 800c418:	69ba      	ldr	r2, [r7, #24]
 800c41a:	4013      	ands	r3, r2
 800c41c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a58      	ldr	r2, [pc, #352]	; (800c584 <HAL_GPIO_Init+0x32c>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d037      	beq.n	800c496 <HAL_GPIO_Init+0x23e>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a57      	ldr	r2, [pc, #348]	; (800c588 <HAL_GPIO_Init+0x330>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d031      	beq.n	800c492 <HAL_GPIO_Init+0x23a>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a56      	ldr	r2, [pc, #344]	; (800c58c <HAL_GPIO_Init+0x334>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d02b      	beq.n	800c48e <HAL_GPIO_Init+0x236>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a55      	ldr	r2, [pc, #340]	; (800c590 <HAL_GPIO_Init+0x338>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d025      	beq.n	800c48a <HAL_GPIO_Init+0x232>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a54      	ldr	r2, [pc, #336]	; (800c594 <HAL_GPIO_Init+0x33c>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d01f      	beq.n	800c486 <HAL_GPIO_Init+0x22e>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a53      	ldr	r2, [pc, #332]	; (800c598 <HAL_GPIO_Init+0x340>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d019      	beq.n	800c482 <HAL_GPIO_Init+0x22a>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a52      	ldr	r2, [pc, #328]	; (800c59c <HAL_GPIO_Init+0x344>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d013      	beq.n	800c47e <HAL_GPIO_Init+0x226>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a51      	ldr	r2, [pc, #324]	; (800c5a0 <HAL_GPIO_Init+0x348>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d00d      	beq.n	800c47a <HAL_GPIO_Init+0x222>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a50      	ldr	r2, [pc, #320]	; (800c5a4 <HAL_GPIO_Init+0x34c>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d007      	beq.n	800c476 <HAL_GPIO_Init+0x21e>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a4f      	ldr	r2, [pc, #316]	; (800c5a8 <HAL_GPIO_Init+0x350>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d101      	bne.n	800c472 <HAL_GPIO_Init+0x21a>
 800c46e:	2309      	movs	r3, #9
 800c470:	e012      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c472:	230a      	movs	r3, #10
 800c474:	e010      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c476:	2308      	movs	r3, #8
 800c478:	e00e      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c47a:	2307      	movs	r3, #7
 800c47c:	e00c      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c47e:	2306      	movs	r3, #6
 800c480:	e00a      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c482:	2305      	movs	r3, #5
 800c484:	e008      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c486:	2304      	movs	r3, #4
 800c488:	e006      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c48a:	2303      	movs	r3, #3
 800c48c:	e004      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c48e:	2302      	movs	r3, #2
 800c490:	e002      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c492:	2301      	movs	r3, #1
 800c494:	e000      	b.n	800c498 <HAL_GPIO_Init+0x240>
 800c496:	2300      	movs	r3, #0
 800c498:	69fa      	ldr	r2, [r7, #28]
 800c49a:	f002 0203 	and.w	r2, r2, #3
 800c49e:	0092      	lsls	r2, r2, #2
 800c4a0:	4093      	lsls	r3, r2
 800c4a2:	69ba      	ldr	r2, [r7, #24]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c4a8:	4935      	ldr	r1, [pc, #212]	; (800c580 <HAL_GPIO_Init+0x328>)
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	089b      	lsrs	r3, r3, #2
 800c4ae:	3302      	adds	r3, #2
 800c4b0:	69ba      	ldr	r2, [r7, #24]
 800c4b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c4b6:	4b3d      	ldr	r3, [pc, #244]	; (800c5ac <HAL_GPIO_Init+0x354>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	43db      	mvns	r3, r3
 800c4c0:	69ba      	ldr	r2, [r7, #24]
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c4d2:	69ba      	ldr	r2, [r7, #24]
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c4da:	4a34      	ldr	r2, [pc, #208]	; (800c5ac <HAL_GPIO_Init+0x354>)
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c4e0:	4b32      	ldr	r3, [pc, #200]	; (800c5ac <HAL_GPIO_Init+0x354>)
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	43db      	mvns	r3, r3
 800c4ea:	69ba      	ldr	r2, [r7, #24]
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	4313      	orrs	r3, r2
 800c502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c504:	4a29      	ldr	r2, [pc, #164]	; (800c5ac <HAL_GPIO_Init+0x354>)
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c50a:	4b28      	ldr	r3, [pc, #160]	; (800c5ac <HAL_GPIO_Init+0x354>)
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	43db      	mvns	r3, r3
 800c514:	69ba      	ldr	r2, [r7, #24]
 800c516:	4013      	ands	r3, r2
 800c518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c526:	69ba      	ldr	r2, [r7, #24]
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c52e:	4a1f      	ldr	r2, [pc, #124]	; (800c5ac <HAL_GPIO_Init+0x354>)
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c534:	4b1d      	ldr	r3, [pc, #116]	; (800c5ac <HAL_GPIO_Init+0x354>)
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	43db      	mvns	r3, r3
 800c53e:	69ba      	ldr	r2, [r7, #24]
 800c540:	4013      	ands	r3, r2
 800c542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d003      	beq.n	800c558 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c550:	69ba      	ldr	r2, [r7, #24]
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	4313      	orrs	r3, r2
 800c556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c558:	4a14      	ldr	r2, [pc, #80]	; (800c5ac <HAL_GPIO_Init+0x354>)
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	3301      	adds	r3, #1
 800c562:	61fb      	str	r3, [r7, #28]
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	2b0f      	cmp	r3, #15
 800c568:	f67f ae84 	bls.w	800c274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c56c:	bf00      	nop
 800c56e:	bf00      	nop
 800c570:	3724      	adds	r7, #36	; 0x24
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	40023800 	.word	0x40023800
 800c580:	40013800 	.word	0x40013800
 800c584:	40020000 	.word	0x40020000
 800c588:	40020400 	.word	0x40020400
 800c58c:	40020800 	.word	0x40020800
 800c590:	40020c00 	.word	0x40020c00
 800c594:	40021000 	.word	0x40021000
 800c598:	40021400 	.word	0x40021400
 800c59c:	40021800 	.word	0x40021800
 800c5a0:	40021c00 	.word	0x40021c00
 800c5a4:	40022000 	.word	0x40022000
 800c5a8:	40022400 	.word	0x40022400
 800c5ac:	40013c00 	.word	0x40013c00

0800c5b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	807b      	strh	r3, [r7, #2]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c5c0:	787b      	ldrb	r3, [r7, #1]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c5c6:	887a      	ldrh	r2, [r7, #2]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c5cc:	e003      	b.n	800c5d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c5ce:	887b      	ldrh	r3, [r7, #2]
 800c5d0:	041a      	lsls	r2, r3, #16
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	619a      	str	r2, [r3, #24]
}
 800c5d6:	bf00      	nop
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b085      	sub	sp, #20
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	695b      	ldr	r3, [r3, #20]
 800c5f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c5f4:	887a      	ldrh	r2, [r7, #2]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	041a      	lsls	r2, r3, #16
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	43d9      	mvns	r1, r3
 800c600:	887b      	ldrh	r3, [r7, #2]
 800c602:	400b      	ands	r3, r1
 800c604:	431a      	orrs	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	619a      	str	r2, [r3, #24]
}
 800c60a:	bf00      	nop
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
	...

0800c618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e12b      	b.n	800c882 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d106      	bne.n	800c644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7fa f936 	bl	80068b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2224      	movs	r2, #36	; 0x24
 800c648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f022 0201 	bic.w	r2, r2, #1
 800c65a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c66a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c67a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c67c:	f002 f876 	bl	800e76c <HAL_RCC_GetPCLK1Freq>
 800c680:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	4a81      	ldr	r2, [pc, #516]	; (800c88c <HAL_I2C_Init+0x274>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d807      	bhi.n	800c69c <HAL_I2C_Init+0x84>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4a80      	ldr	r2, [pc, #512]	; (800c890 <HAL_I2C_Init+0x278>)
 800c690:	4293      	cmp	r3, r2
 800c692:	bf94      	ite	ls
 800c694:	2301      	movls	r3, #1
 800c696:	2300      	movhi	r3, #0
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	e006      	b.n	800c6aa <HAL_I2C_Init+0x92>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	4a7d      	ldr	r2, [pc, #500]	; (800c894 <HAL_I2C_Init+0x27c>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	bf94      	ite	ls
 800c6a4:	2301      	movls	r3, #1
 800c6a6:	2300      	movhi	r3, #0
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e0e7      	b.n	800c882 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	4a78      	ldr	r2, [pc, #480]	; (800c898 <HAL_I2C_Init+0x280>)
 800c6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ba:	0c9b      	lsrs	r3, r3, #18
 800c6bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	430a      	orrs	r2, r1
 800c6d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6a1b      	ldr	r3, [r3, #32]
 800c6d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	4a6a      	ldr	r2, [pc, #424]	; (800c88c <HAL_I2C_Init+0x274>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d802      	bhi.n	800c6ec <HAL_I2C_Init+0xd4>
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	e009      	b.n	800c700 <HAL_I2C_Init+0xe8>
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c6f2:	fb02 f303 	mul.w	r3, r2, r3
 800c6f6:	4a69      	ldr	r2, [pc, #420]	; (800c89c <HAL_I2C_Init+0x284>)
 800c6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c6fc:	099b      	lsrs	r3, r3, #6
 800c6fe:	3301      	adds	r3, #1
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	6812      	ldr	r2, [r2, #0]
 800c704:	430b      	orrs	r3, r1
 800c706:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c712:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	495c      	ldr	r1, [pc, #368]	; (800c88c <HAL_I2C_Init+0x274>)
 800c71c:	428b      	cmp	r3, r1
 800c71e:	d819      	bhi.n	800c754 <HAL_I2C_Init+0x13c>
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	1e59      	subs	r1, r3, #1
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	005b      	lsls	r3, r3, #1
 800c72a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c72e:	1c59      	adds	r1, r3, #1
 800c730:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c734:	400b      	ands	r3, r1
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00a      	beq.n	800c750 <HAL_I2C_Init+0x138>
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	1e59      	subs	r1, r3, #1
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	fbb1 f3f3 	udiv	r3, r1, r3
 800c748:	3301      	adds	r3, #1
 800c74a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c74e:	e051      	b.n	800c7f4 <HAL_I2C_Init+0x1dc>
 800c750:	2304      	movs	r3, #4
 800c752:	e04f      	b.n	800c7f4 <HAL_I2C_Init+0x1dc>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d111      	bne.n	800c780 <HAL_I2C_Init+0x168>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	1e58      	subs	r0, r3, #1
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6859      	ldr	r1, [r3, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	440b      	add	r3, r1
 800c76a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c76e:	3301      	adds	r3, #1
 800c770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c774:	2b00      	cmp	r3, #0
 800c776:	bf0c      	ite	eq
 800c778:	2301      	moveq	r3, #1
 800c77a:	2300      	movne	r3, #0
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	e012      	b.n	800c7a6 <HAL_I2C_Init+0x18e>
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	1e58      	subs	r0, r3, #1
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6859      	ldr	r1, [r3, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	440b      	add	r3, r1
 800c78e:	0099      	lsls	r1, r3, #2
 800c790:	440b      	add	r3, r1
 800c792:	fbb0 f3f3 	udiv	r3, r0, r3
 800c796:	3301      	adds	r3, #1
 800c798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	bf0c      	ite	eq
 800c7a0:	2301      	moveq	r3, #1
 800c7a2:	2300      	movne	r3, #0
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <HAL_I2C_Init+0x196>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e022      	b.n	800c7f4 <HAL_I2C_Init+0x1dc>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10e      	bne.n	800c7d4 <HAL_I2C_Init+0x1bc>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	1e58      	subs	r0, r3, #1
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6859      	ldr	r1, [r3, #4]
 800c7be:	460b      	mov	r3, r1
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	440b      	add	r3, r1
 800c7c4:	fbb0 f3f3 	udiv	r3, r0, r3
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7d2:	e00f      	b.n	800c7f4 <HAL_I2C_Init+0x1dc>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	1e58      	subs	r0, r3, #1
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6859      	ldr	r1, [r3, #4]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	440b      	add	r3, r1
 800c7e2:	0099      	lsls	r1, r3, #2
 800c7e4:	440b      	add	r3, r1
 800c7e6:	fbb0 f3f3 	udiv	r3, r0, r3
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c7f4:	6879      	ldr	r1, [r7, #4]
 800c7f6:	6809      	ldr	r1, [r1, #0]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	69da      	ldr	r2, [r3, #28]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a1b      	ldr	r3, [r3, #32]
 800c80e:	431a      	orrs	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	430a      	orrs	r2, r1
 800c816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	6911      	ldr	r1, [r2, #16]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	68d2      	ldr	r2, [r2, #12]
 800c82e:	4311      	orrs	r1, r2
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	6812      	ldr	r2, [r2, #0]
 800c834:	430b      	orrs	r3, r1
 800c836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	695a      	ldr	r2, [r3, #20]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	431a      	orrs	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	430a      	orrs	r2, r1
 800c852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f042 0201 	orr.w	r2, r2, #1
 800c862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2220      	movs	r2, #32
 800c86e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	000186a0 	.word	0x000186a0
 800c890:	001e847f 	.word	0x001e847f
 800c894:	003d08ff 	.word	0x003d08ff
 800c898:	431bde83 	.word	0x431bde83
 800c89c:	10624dd3 	.word	0x10624dd3

0800c8a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af02      	add	r7, sp, #8
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	817b      	strh	r3, [r7, #10]
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	813b      	strh	r3, [r7, #8]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c8ba:	f7fc fba9 	bl	8009010 <HAL_GetTick>
 800c8be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	2b20      	cmp	r3, #32
 800c8ca:	f040 80d9 	bne.w	800ca80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	2319      	movs	r3, #25
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	496d      	ldr	r1, [pc, #436]	; (800ca8c <HAL_I2C_Mem_Write+0x1ec>)
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 fc7f 	bl	800d1dc <I2C_WaitOnFlagUntilTimeout>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e0cc      	b.n	800ca82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d101      	bne.n	800c8f6 <HAL_I2C_Mem_Write+0x56>
 800c8f2:	2302      	movs	r3, #2
 800c8f4:	e0c5      	b.n	800ca82 <HAL_I2C_Mem_Write+0x1e2>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0301 	and.w	r3, r3, #1
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d007      	beq.n	800c91c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f042 0201 	orr.w	r2, r2, #1
 800c91a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c92a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2221      	movs	r2, #33	; 0x21
 800c930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2240      	movs	r2, #64	; 0x40
 800c938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2200      	movs	r2, #0
 800c940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6a3a      	ldr	r2, [r7, #32]
 800c946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c94c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c952:	b29a      	uxth	r2, r3
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	4a4d      	ldr	r2, [pc, #308]	; (800ca90 <HAL_I2C_Mem_Write+0x1f0>)
 800c95c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c95e:	88f8      	ldrh	r0, [r7, #6]
 800c960:	893a      	ldrh	r2, [r7, #8]
 800c962:	8979      	ldrh	r1, [r7, #10]
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	9301      	str	r3, [sp, #4]
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	4603      	mov	r3, r0
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f000 fab6 	bl	800cee0 <I2C_RequestMemoryWrite>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d052      	beq.n	800ca20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e081      	b.n	800ca82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 fd00 	bl	800d388 <I2C_WaitOnTXEFlagUntilTimeout>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00d      	beq.n	800c9aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c992:	2b04      	cmp	r3, #4
 800c994:	d107      	bne.n	800c9a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e06b      	b.n	800ca82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ae:	781a      	ldrb	r2, [r3, #0]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	695b      	ldr	r3, [r3, #20]
 800c9e0:	f003 0304 	and.w	r3, r3, #4
 800c9e4:	2b04      	cmp	r3, #4
 800c9e6:	d11b      	bne.n	800ca20 <HAL_I2C_Mem_Write+0x180>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d017      	beq.n	800ca20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f4:	781a      	ldrb	r2, [r3, #0]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1aa      	bne.n	800c97e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 fcec 	bl	800d40a <I2C_WaitOnBTFFlagUntilTimeout>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00d      	beq.n	800ca54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca3c:	2b04      	cmp	r3, #4
 800ca3e:	d107      	bne.n	800ca50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e016      	b.n	800ca82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2220      	movs	r2, #32
 800ca68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	e000      	b.n	800ca82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ca80:	2302      	movs	r3, #2
  }
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3718      	adds	r7, #24
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	00100002 	.word	0x00100002
 800ca90:	ffff0000 	.word	0xffff0000

0800ca94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b08c      	sub	sp, #48	; 0x30
 800ca98:	af02      	add	r7, sp, #8
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	4608      	mov	r0, r1
 800ca9e:	4611      	mov	r1, r2
 800caa0:	461a      	mov	r2, r3
 800caa2:	4603      	mov	r3, r0
 800caa4:	817b      	strh	r3, [r7, #10]
 800caa6:	460b      	mov	r3, r1
 800caa8:	813b      	strh	r3, [r7, #8]
 800caaa:	4613      	mov	r3, r2
 800caac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800caae:	f7fc faaf 	bl	8009010 <HAL_GetTick>
 800cab2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b20      	cmp	r3, #32
 800cabe:	f040 8208 	bne.w	800ced2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	2319      	movs	r3, #25
 800cac8:	2201      	movs	r2, #1
 800caca:	497b      	ldr	r1, [pc, #492]	; (800ccb8 <HAL_I2C_Mem_Read+0x224>)
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	f000 fb85 	bl	800d1dc <I2C_WaitOnFlagUntilTimeout>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d001      	beq.n	800cadc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cad8:	2302      	movs	r3, #2
 800cada:	e1fb      	b.n	800ced4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d101      	bne.n	800caea <HAL_I2C_Mem_Read+0x56>
 800cae6:	2302      	movs	r3, #2
 800cae8:	e1f4      	b.n	800ced4 <HAL_I2C_Mem_Read+0x440>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2201      	movs	r2, #1
 800caee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d007      	beq.n	800cb10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f042 0201 	orr.w	r2, r2, #1
 800cb0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2222      	movs	r2, #34	; 0x22
 800cb24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2240      	movs	r2, #64	; 0x40
 800cb2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cb40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	4a5b      	ldr	r2, [pc, #364]	; (800ccbc <HAL_I2C_Mem_Read+0x228>)
 800cb50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cb52:	88f8      	ldrh	r0, [r7, #6]
 800cb54:	893a      	ldrh	r2, [r7, #8]
 800cb56:	8979      	ldrh	r1, [r7, #10]
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	9301      	str	r3, [sp, #4]
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	4603      	mov	r3, r0
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f000 fa52 	bl	800d00c <I2C_RequestMemoryRead>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e1b0      	b.n	800ced4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d113      	bne.n	800cba2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	623b      	str	r3, [r7, #32]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	695b      	ldr	r3, [r3, #20]
 800cb84:	623b      	str	r3, [r7, #32]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	623b      	str	r3, [r7, #32]
 800cb8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	e184      	b.n	800ceac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d11b      	bne.n	800cbe2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbba:	2300      	movs	r3, #0
 800cbbc:	61fb      	str	r3, [r7, #28]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	61fb      	str	r3, [r7, #28]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	699b      	ldr	r3, [r3, #24]
 800cbcc:	61fb      	str	r3, [r7, #28]
 800cbce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	e164      	b.n	800ceac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d11b      	bne.n	800cc22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	61bb      	str	r3, [r7, #24]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	695b      	ldr	r3, [r3, #20]
 800cc14:	61bb      	str	r3, [r7, #24]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	61bb      	str	r3, [r7, #24]
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	e144      	b.n	800ceac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	617b      	str	r3, [r7, #20]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	699b      	ldr	r3, [r3, #24]
 800cc34:	617b      	str	r3, [r7, #20]
 800cc36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cc38:	e138      	b.n	800ceac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc3e:	2b03      	cmp	r3, #3
 800cc40:	f200 80f1 	bhi.w	800ce26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d123      	bne.n	800cc94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	f000 fc1b 	bl	800d48c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d001      	beq.n	800cc60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e139      	b.n	800ced4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	691a      	ldr	r2, [r3, #16]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6a:	b2d2      	uxtb	r2, r2
 800cc6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc72:	1c5a      	adds	r2, r3, #1
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc92:	e10b      	b.n	800ceac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d14e      	bne.n	800cd3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	2200      	movs	r2, #0
 800cca4:	4906      	ldr	r1, [pc, #24]	; (800ccc0 <HAL_I2C_Mem_Read+0x22c>)
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	f000 fa98 	bl	800d1dc <I2C_WaitOnFlagUntilTimeout>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d008      	beq.n	800ccc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e10e      	b.n	800ced4 <HAL_I2C_Mem_Read+0x440>
 800ccb6:	bf00      	nop
 800ccb8:	00100002 	.word	0x00100002
 800ccbc:	ffff0000 	.word	0xffff0000
 800ccc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	691a      	ldr	r2, [r3, #16]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccde:	b2d2      	uxtb	r2, r2
 800cce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	691a      	ldr	r2, [r3, #16]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd10:	b2d2      	uxtb	r2, r2
 800cd12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd22:	3b01      	subs	r3, #1
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	3b01      	subs	r3, #1
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd38:	e0b8      	b.n	800ceac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	2200      	movs	r2, #0
 800cd42:	4966      	ldr	r1, [pc, #408]	; (800cedc <HAL_I2C_Mem_Read+0x448>)
 800cd44:	68f8      	ldr	r0, [r7, #12]
 800cd46:	f000 fa49 	bl	800d1dc <I2C_WaitOnFlagUntilTimeout>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800cd50:	2301      	movs	r3, #1
 800cd52:	e0bf      	b.n	800ced4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	691a      	ldr	r2, [r3, #16]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6e:	b2d2      	uxtb	r2, r2
 800cd70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd76:	1c5a      	adds	r2, r3, #1
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd80:	3b01      	subs	r3, #1
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	494f      	ldr	r1, [pc, #316]	; (800cedc <HAL_I2C_Mem_Read+0x448>)
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f000 fa1b 	bl	800d1dc <I2C_WaitOnFlagUntilTimeout>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	e091      	b.n	800ced4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	691a      	ldr	r2, [r3, #16]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdca:	b2d2      	uxtb	r2, r2
 800cdcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd2:	1c5a      	adds	r2, r3, #1
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cddc:	3b01      	subs	r3, #1
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	3b01      	subs	r3, #1
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	691a      	ldr	r2, [r3, #16]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfc:	b2d2      	uxtb	r2, r2
 800cdfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce04:	1c5a      	adds	r2, r3, #1
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	b29a      	uxth	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce24:	e042      	b.n	800ceac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f000 fb2e 	bl	800d48c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ce36:	2301      	movs	r3, #1
 800ce38:	e04c      	b.n	800ced4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	691a      	ldr	r2, [r3, #16]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce44:	b2d2      	uxtb	r2, r2
 800ce46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	1c5a      	adds	r2, r3, #1
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce56:	3b01      	subs	r3, #1
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	3b01      	subs	r3, #1
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	f003 0304 	and.w	r3, r3, #4
 800ce76:	2b04      	cmp	r3, #4
 800ce78:	d118      	bne.n	800ceac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	691a      	ldr	r2, [r3, #16]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce84:	b2d2      	uxtb	r2, r2
 800ce86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8c:	1c5a      	adds	r2, r3, #1
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce96:	3b01      	subs	r3, #1
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	3b01      	subs	r3, #1
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f47f aec2 	bne.w	800cc3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2220      	movs	r2, #32
 800ceba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	e000      	b.n	800ced4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ced2:	2302      	movs	r3, #2
  }
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3728      	adds	r7, #40	; 0x28
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	00010004 	.word	0x00010004

0800cee0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b088      	sub	sp, #32
 800cee4:	af02      	add	r7, sp, #8
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	4608      	mov	r0, r1
 800ceea:	4611      	mov	r1, r2
 800ceec:	461a      	mov	r2, r3
 800ceee:	4603      	mov	r3, r0
 800cef0:	817b      	strh	r3, [r7, #10]
 800cef2:	460b      	mov	r3, r1
 800cef4:	813b      	strh	r3, [r7, #8]
 800cef6:	4613      	mov	r3, r2
 800cef8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f000 f960 	bl	800d1dc <I2C_WaitOnFlagUntilTimeout>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00d      	beq.n	800cf3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf30:	d103      	bne.n	800cf3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e05f      	b.n	800cffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cf3e:	897b      	ldrh	r3, [r7, #10]
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	461a      	mov	r2, r3
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cf4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf50:	6a3a      	ldr	r2, [r7, #32]
 800cf52:	492d      	ldr	r1, [pc, #180]	; (800d008 <I2C_RequestMemoryWrite+0x128>)
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f000 f998 	bl	800d28a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d001      	beq.n	800cf64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e04c      	b.n	800cffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf64:	2300      	movs	r3, #0
 800cf66:	617b      	str	r3, [r7, #20]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	699b      	ldr	r3, [r3, #24]
 800cf76:	617b      	str	r3, [r7, #20]
 800cf78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf7c:	6a39      	ldr	r1, [r7, #32]
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f000 fa02 	bl	800d388 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00d      	beq.n	800cfa6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8e:	2b04      	cmp	r3, #4
 800cf90:	d107      	bne.n	800cfa2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e02b      	b.n	800cffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cfa6:	88fb      	ldrh	r3, [r7, #6]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d105      	bne.n	800cfb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cfac:	893b      	ldrh	r3, [r7, #8]
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	611a      	str	r2, [r3, #16]
 800cfb6:	e021      	b.n	800cffc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cfb8:	893b      	ldrh	r3, [r7, #8]
 800cfba:	0a1b      	lsrs	r3, r3, #8
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cfc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfc8:	6a39      	ldr	r1, [r7, #32]
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f000 f9dc 	bl	800d388 <I2C_WaitOnTXEFlagUntilTimeout>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00d      	beq.n	800cff2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	2b04      	cmp	r3, #4
 800cfdc:	d107      	bne.n	800cfee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e005      	b.n	800cffe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cff2:	893b      	ldrh	r3, [r7, #8]
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3718      	adds	r7, #24
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	00010002 	.word	0x00010002

0800d00c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af02      	add	r7, sp, #8
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	4608      	mov	r0, r1
 800d016:	4611      	mov	r1, r2
 800d018:	461a      	mov	r2, r3
 800d01a:	4603      	mov	r3, r0
 800d01c:	817b      	strh	r3, [r7, #10]
 800d01e:	460b      	mov	r3, r1
 800d020:	813b      	strh	r3, [r7, #8]
 800d022:	4613      	mov	r3, r2
 800d024:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d034:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d044:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	6a3b      	ldr	r3, [r7, #32]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f000 f8c2 	bl	800d1dc <I2C_WaitOnFlagUntilTimeout>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00d      	beq.n	800d07a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d06c:	d103      	bne.n	800d076 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d074:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d076:	2303      	movs	r3, #3
 800d078:	e0aa      	b.n	800d1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d07a:	897b      	ldrh	r3, [r7, #10]
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	461a      	mov	r2, r3
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d088:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	6a3a      	ldr	r2, [r7, #32]
 800d08e:	4952      	ldr	r1, [pc, #328]	; (800d1d8 <I2C_RequestMemoryRead+0x1cc>)
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 f8fa 	bl	800d28a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d09c:	2301      	movs	r3, #1
 800d09e:	e097      	b.n	800d1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	695b      	ldr	r3, [r3, #20]
 800d0aa:	617b      	str	r3, [r7, #20]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	699b      	ldr	r3, [r3, #24]
 800d0b2:	617b      	str	r3, [r7, #20]
 800d0b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0b8:	6a39      	ldr	r1, [r7, #32]
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f000 f964 	bl	800d388 <I2C_WaitOnTXEFlagUntilTimeout>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00d      	beq.n	800d0e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ca:	2b04      	cmp	r3, #4
 800d0cc:	d107      	bne.n	800d0de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e076      	b.n	800d1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d0e2:	88fb      	ldrh	r3, [r7, #6]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d105      	bne.n	800d0f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d0e8:	893b      	ldrh	r3, [r7, #8]
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	611a      	str	r2, [r3, #16]
 800d0f2:	e021      	b.n	800d138 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d0f4:	893b      	ldrh	r3, [r7, #8]
 800d0f6:	0a1b      	lsrs	r3, r3, #8
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d104:	6a39      	ldr	r1, [r7, #32]
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f000 f93e 	bl	800d388 <I2C_WaitOnTXEFlagUntilTimeout>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00d      	beq.n	800d12e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d116:	2b04      	cmp	r3, #4
 800d118:	d107      	bne.n	800d12a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d128:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e050      	b.n	800d1d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d12e:	893b      	ldrh	r3, [r7, #8]
 800d130:	b2da      	uxtb	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d13a:	6a39      	ldr	r1, [r7, #32]
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f000 f923 	bl	800d388 <I2C_WaitOnTXEFlagUntilTimeout>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00d      	beq.n	800d164 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14c:	2b04      	cmp	r3, #4
 800d14e:	d107      	bne.n	800d160 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d15e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	e035      	b.n	800d1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d172:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	6a3b      	ldr	r3, [r7, #32]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f000 f82b 	bl	800d1dc <I2C_WaitOnFlagUntilTimeout>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00d      	beq.n	800d1a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d19a:	d103      	bne.n	800d1a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	e013      	b.n	800d1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d1a8:	897b      	ldrh	r3, [r7, #10]
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	f043 0301 	orr.w	r3, r3, #1
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	6a3a      	ldr	r2, [r7, #32]
 800d1bc:	4906      	ldr	r1, [pc, #24]	; (800d1d8 <I2C_RequestMemoryRead+0x1cc>)
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f000 f863 	bl	800d28a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	00010002 	.word	0x00010002

0800d1dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	603b      	str	r3, [r7, #0]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d1ec:	e025      	b.n	800d23a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f4:	d021      	beq.n	800d23a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1f6:	f7fb ff0b 	bl	8009010 <HAL_GetTick>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	429a      	cmp	r2, r3
 800d204:	d302      	bcc.n	800d20c <I2C_WaitOnFlagUntilTimeout+0x30>
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d116      	bne.n	800d23a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2220      	movs	r2, #32
 800d216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d226:	f043 0220 	orr.w	r2, r3, #32
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2200      	movs	r2, #0
 800d232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d236:	2301      	movs	r3, #1
 800d238:	e023      	b.n	800d282 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	0c1b      	lsrs	r3, r3, #16
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	2b01      	cmp	r3, #1
 800d242:	d10d      	bne.n	800d260 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	43da      	mvns	r2, r3
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	4013      	ands	r3, r2
 800d250:	b29b      	uxth	r3, r3
 800d252:	2b00      	cmp	r3, #0
 800d254:	bf0c      	ite	eq
 800d256:	2301      	moveq	r3, #1
 800d258:	2300      	movne	r3, #0
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	461a      	mov	r2, r3
 800d25e:	e00c      	b.n	800d27a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	43da      	mvns	r2, r3
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	4013      	ands	r3, r2
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bf0c      	ite	eq
 800d272:	2301      	moveq	r3, #1
 800d274:	2300      	movne	r3, #0
 800d276:	b2db      	uxtb	r3, r3
 800d278:	461a      	mov	r2, r3
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d0b6      	beq.n	800d1ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b084      	sub	sp, #16
 800d28e:	af00      	add	r7, sp, #0
 800d290:	60f8      	str	r0, [r7, #12]
 800d292:	60b9      	str	r1, [r7, #8]
 800d294:	607a      	str	r2, [r7, #4]
 800d296:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d298:	e051      	b.n	800d33e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	695b      	ldr	r3, [r3, #20]
 800d2a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2a8:	d123      	bne.n	800d2f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d2c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2220      	movs	r2, #32
 800d2ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2de:	f043 0204 	orr.w	r2, r3, #4
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e046      	b.n	800d380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f8:	d021      	beq.n	800d33e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2fa:	f7fb fe89 	bl	8009010 <HAL_GetTick>
 800d2fe:	4602      	mov	r2, r0
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	429a      	cmp	r2, r3
 800d308:	d302      	bcc.n	800d310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d116      	bne.n	800d33e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2220      	movs	r2, #32
 800d31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32a:	f043 0220 	orr.w	r2, r3, #32
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e020      	b.n	800d380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	0c1b      	lsrs	r3, r3, #16
 800d342:	b2db      	uxtb	r3, r3
 800d344:	2b01      	cmp	r3, #1
 800d346:	d10c      	bne.n	800d362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	695b      	ldr	r3, [r3, #20]
 800d34e:	43da      	mvns	r2, r3
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	4013      	ands	r3, r2
 800d354:	b29b      	uxth	r3, r3
 800d356:	2b00      	cmp	r3, #0
 800d358:	bf14      	ite	ne
 800d35a:	2301      	movne	r3, #1
 800d35c:	2300      	moveq	r3, #0
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	e00b      	b.n	800d37a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	699b      	ldr	r3, [r3, #24]
 800d368:	43da      	mvns	r2, r3
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	4013      	ands	r3, r2
 800d36e:	b29b      	uxth	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	bf14      	ite	ne
 800d374:	2301      	movne	r3, #1
 800d376:	2300      	moveq	r3, #0
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d18d      	bne.n	800d29a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d37e:	2300      	movs	r3, #0
}
 800d380:	4618      	mov	r0, r3
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d394:	e02d      	b.n	800d3f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f000 f8ce 	bl	800d538 <I2C_IsAcknowledgeFailed>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e02d      	b.n	800d402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ac:	d021      	beq.n	800d3f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3ae:	f7fb fe2f 	bl	8009010 <HAL_GetTick>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	1ad3      	subs	r3, r2, r3
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d302      	bcc.n	800d3c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d116      	bne.n	800d3f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3de:	f043 0220 	orr.w	r2, r3, #32
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e007      	b.n	800d402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	695b      	ldr	r3, [r3, #20]
 800d3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3fc:	2b80      	cmp	r3, #128	; 0x80
 800d3fe:	d1ca      	bne.n	800d396 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3710      	adds	r7, #16
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b084      	sub	sp, #16
 800d40e:	af00      	add	r7, sp, #0
 800d410:	60f8      	str	r0, [r7, #12]
 800d412:	60b9      	str	r1, [r7, #8]
 800d414:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d416:	e02d      	b.n	800d474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f000 f88d 	bl	800d538 <I2C_IsAcknowledgeFailed>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d001      	beq.n	800d428 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d424:	2301      	movs	r3, #1
 800d426:	e02d      	b.n	800d484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42e:	d021      	beq.n	800d474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d430:	f7fb fdee 	bl	8009010 <HAL_GetTick>
 800d434:	4602      	mov	r2, r0
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	1ad3      	subs	r3, r2, r3
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d302      	bcc.n	800d446 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d116      	bne.n	800d474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2200      	movs	r2, #0
 800d44a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2220      	movs	r2, #32
 800d450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d460:	f043 0220 	orr.w	r2, r3, #32
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	e007      	b.n	800d484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	f003 0304 	and.w	r3, r3, #4
 800d47e:	2b04      	cmp	r3, #4
 800d480:	d1ca      	bne.n	800d418 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3710      	adds	r7, #16
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d498:	e042      	b.n	800d520 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	f003 0310 	and.w	r3, r3, #16
 800d4a4:	2b10      	cmp	r3, #16
 800d4a6:	d119      	bne.n	800d4dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f06f 0210 	mvn.w	r2, #16
 800d4b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2220      	movs	r2, #32
 800d4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e029      	b.n	800d530 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4dc:	f7fb fd98 	bl	8009010 <HAL_GetTick>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	68ba      	ldr	r2, [r7, #8]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d302      	bcc.n	800d4f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d116      	bne.n	800d520 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2220      	movs	r2, #32
 800d4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50c:	f043 0220 	orr.w	r2, r3, #32
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2200      	movs	r2, #0
 800d518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	e007      	b.n	800d530 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d52a:	2b40      	cmp	r3, #64	; 0x40
 800d52c:	d1b5      	bne.n	800d49a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	695b      	ldr	r3, [r3, #20]
 800d546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d54a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d54e:	d11b      	bne.n	800d588 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d558:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2220      	movs	r2, #32
 800d564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d574:	f043 0204 	orr.w	r2, r3, #4
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d584:	2301      	movs	r3, #1
 800d586:	e000      	b.n	800d58a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d596:	b480      	push	{r7}
 800d598:	b083      	sub	sp, #12
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	2b20      	cmp	r3, #32
 800d5aa:	d129      	bne.n	800d600 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2224      	movs	r2, #36	; 0x24
 800d5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f022 0201 	bic.w	r2, r2, #1
 800d5c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f022 0210 	bic.w	r2, r2, #16
 800d5d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	430a      	orrs	r2, r1
 800d5e2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f042 0201 	orr.w	r2, r2, #1
 800d5f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2220      	movs	r2, #32
 800d5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	e000      	b.n	800d602 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800d600:	2302      	movs	r3, #2
  }
}
 800d602:	4618      	mov	r0, r3
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d60e:	b480      	push	{r7}
 800d610:	b085      	sub	sp, #20
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
 800d616:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800d618:	2300      	movs	r3, #0
 800d61a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b20      	cmp	r3, #32
 800d626:	d12a      	bne.n	800d67e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2224      	movs	r2, #36	; 0x24
 800d62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f022 0201 	bic.w	r2, r2, #1
 800d63e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d646:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800d648:	89fb      	ldrh	r3, [r7, #14]
 800d64a:	f023 030f 	bic.w	r3, r3, #15
 800d64e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	b29a      	uxth	r2, r3
 800d654:	89fb      	ldrh	r3, [r7, #14]
 800d656:	4313      	orrs	r3, r2
 800d658:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	89fa      	ldrh	r2, [r7, #14]
 800d660:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f042 0201 	orr.w	r2, r2, #1
 800d670:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2220      	movs	r2, #32
 800d676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	e000      	b.n	800d680 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800d67e:	2302      	movs	r3, #2
  }
}
 800d680:	4618      	mov	r0, r3
 800d682:	3714      	adds	r7, #20
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d101      	bne.n	800d69e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e0bf      	b.n	800d81e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d106      	bne.n	800d6b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7f9 f966 	bl	8006984 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2202      	movs	r2, #2
 800d6bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	699a      	ldr	r2, [r3, #24]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d6ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6999      	ldr	r1, [r3, #24]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d6e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	430a      	orrs	r2, r1
 800d6f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6899      	ldr	r1, [r3, #8]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	4b4a      	ldr	r3, [pc, #296]	; (800d828 <HAL_LTDC_Init+0x19c>)
 800d700:	400b      	ands	r3, r1
 800d702:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	041b      	lsls	r3, r3, #16
 800d70a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	6899      	ldr	r1, [r3, #8]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	699a      	ldr	r2, [r3, #24]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	431a      	orrs	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	430a      	orrs	r2, r1
 800d720:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68d9      	ldr	r1, [r3, #12]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	4b3e      	ldr	r3, [pc, #248]	; (800d828 <HAL_LTDC_Init+0x19c>)
 800d72e:	400b      	ands	r3, r1
 800d730:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	69db      	ldr	r3, [r3, #28]
 800d736:	041b      	lsls	r3, r3, #16
 800d738:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68d9      	ldr	r1, [r3, #12]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6a1a      	ldr	r2, [r3, #32]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	431a      	orrs	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	430a      	orrs	r2, r1
 800d74e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	6919      	ldr	r1, [r3, #16]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	4b33      	ldr	r3, [pc, #204]	; (800d828 <HAL_LTDC_Init+0x19c>)
 800d75c:	400b      	ands	r3, r1
 800d75e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d764:	041b      	lsls	r3, r3, #16
 800d766:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6919      	ldr	r1, [r3, #16]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	431a      	orrs	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	430a      	orrs	r2, r1
 800d77c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	6959      	ldr	r1, [r3, #20]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	4b27      	ldr	r3, [pc, #156]	; (800d828 <HAL_LTDC_Init+0x19c>)
 800d78a:	400b      	ands	r3, r1
 800d78c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d792:	041b      	lsls	r3, r3, #16
 800d794:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6959      	ldr	r1, [r3, #20]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	431a      	orrs	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d7b2:	021b      	lsls	r3, r3, #8
 800d7b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d7bc:	041b      	lsls	r3, r3, #16
 800d7be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d7ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	430a      	orrs	r2, r1
 800d7ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f042 0206 	orr.w	r2, r2, #6
 800d7fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	699a      	ldr	r2, [r3, #24]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f042 0201 	orr.w	r2, r2, #1
 800d80a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	f000f800 	.word	0xf000f800

0800d82c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d842:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f003 0304 	and.w	r3, r3, #4
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d023      	beq.n	800d896 <HAL_LTDC_IRQHandler+0x6a>
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	f003 0304 	and.w	r3, r3, #4
 800d854:	2b00      	cmp	r3, #0
 800d856:	d01e      	beq.n	800d896 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f022 0204 	bic.w	r2, r2, #4
 800d866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2204      	movs	r2, #4
 800d86e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d876:	f043 0201 	orr.w	r2, r3, #1
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2204      	movs	r2, #4
 800d884:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f86f 	bl	800d974 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f003 0302 	and.w	r3, r3, #2
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d023      	beq.n	800d8e8 <HAL_LTDC_IRQHandler+0xbc>
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	f003 0302 	and.w	r3, r3, #2
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d01e      	beq.n	800d8e8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f022 0202 	bic.w	r2, r2, #2
 800d8b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2202      	movs	r2, #2
 800d8c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d8c8:	f043 0202 	orr.w	r2, r3, #2
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2204      	movs	r2, #4
 800d8d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 f846 	bl	800d974 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d01b      	beq.n	800d92a <HAL_LTDC_IRQHandler+0xfe>
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	f003 0301 	and.w	r3, r3, #1
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d016      	beq.n	800d92a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f022 0201 	bic.w	r2, r2, #1
 800d90a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2201      	movs	r2, #1
 800d912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 f82f 	bl	800d988 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f003 0308 	and.w	r3, r3, #8
 800d930:	2b00      	cmp	r3, #0
 800d932:	d01b      	beq.n	800d96c <HAL_LTDC_IRQHandler+0x140>
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	f003 0308 	and.w	r3, r3, #8
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d016      	beq.n	800d96c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f022 0208 	bic.w	r2, r2, #8
 800d94c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2208      	movs	r2, #8
 800d954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2201      	movs	r2, #1
 800d95a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f818 	bl	800d99c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800d96c:	bf00      	nop
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800d9a4:	bf00      	nop
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d9b0:	b5b0      	push	{r4, r5, r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d101      	bne.n	800d9ca <HAL_LTDC_ConfigLayer+0x1a>
 800d9c6:	2302      	movs	r3, #2
 800d9c8:	e02c      	b.n	800da24 <HAL_LTDC_ConfigLayer+0x74>
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2134      	movs	r1, #52	; 0x34
 800d9e0:	fb01 f303 	mul.w	r3, r1, r3
 800d9e4:	4413      	add	r3, r2
 800d9e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	4614      	mov	r4, r2
 800d9ee:	461d      	mov	r5, r3
 800d9f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d9fc:	682b      	ldr	r3, [r5, #0]
 800d9fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	68b9      	ldr	r1, [r7, #8]
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f000 f871 	bl	800daec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2201      	movs	r2, #1
 800da10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bdb0      	pop	{r4, r5, r7, pc}

0800da2c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d101      	bne.n	800da42 <HAL_LTDC_EnableDither+0x16>
 800da3e:	2302      	movs	r3, #2
 800da40:	e016      	b.n	800da70 <HAL_LTDC_EnableDither+0x44>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2202      	movs	r2, #2
 800da4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800da52:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <HAL_LTDC_EnableDither+0x50>)
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	4a09      	ldr	r2, [pc, #36]	; (800da7c <HAL_LTDC_EnableDither+0x50>)
 800da58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da5c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2201      	movs	r2, #1
 800da62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800da6e:	2300      	movs	r3, #0
}
 800da70:	4618      	mov	r0, r3
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr
 800da7c:	40016800 	.word	0x40016800

0800da80 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800da92:	2b01      	cmp	r3, #1
 800da94:	d101      	bne.n	800da9a <HAL_LTDC_SetAlpha+0x1a>
 800da96:	2302      	movs	r3, #2
 800da98:	e024      	b.n	800dae4 <HAL_LTDC_SetAlpha+0x64>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2202      	movs	r2, #2
 800daa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2234      	movs	r2, #52	; 0x34
 800daae:	fb02 f303 	mul.w	r3, r2, r3
 800dab2:	3338      	adds	r3, #56	; 0x38
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	4413      	add	r3, r2
 800dab8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	6979      	ldr	r1, [r7, #20]
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f000 f811 	bl	800daec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2201      	movs	r2, #1
 800dad0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2201      	movs	r2, #1
 800dad6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3718      	adds	r7, #24
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800daec:	b480      	push	{r7}
 800daee:	b089      	sub	sp, #36	; 0x24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	0c1b      	lsrs	r3, r3, #16
 800db04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db08:	4413      	add	r3, r2
 800db0a:	041b      	lsls	r3, r3, #16
 800db0c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	01db      	lsls	r3, r3, #7
 800db18:	4413      	add	r3, r2
 800db1a:	3384      	adds	r3, #132	; 0x84
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	6812      	ldr	r2, [r2, #0]
 800db22:	4611      	mov	r1, r2
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	01d2      	lsls	r2, r2, #7
 800db28:	440a      	add	r2, r1
 800db2a:	3284      	adds	r2, #132	; 0x84
 800db2c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800db30:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	0c1b      	lsrs	r3, r3, #16
 800db3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db42:	4413      	add	r3, r2
 800db44:	1c5a      	adds	r2, r3, #1
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4619      	mov	r1, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	01db      	lsls	r3, r3, #7
 800db50:	440b      	add	r3, r1
 800db52:	3384      	adds	r3, #132	; 0x84
 800db54:	4619      	mov	r1, r3
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	4313      	orrs	r3, r2
 800db5a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	68da      	ldr	r2, [r3, #12]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db6a:	4413      	add	r3, r2
 800db6c:	041b      	lsls	r3, r3, #16
 800db6e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	461a      	mov	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	01db      	lsls	r3, r3, #7
 800db7a:	4413      	add	r3, r2
 800db7c:	3384      	adds	r3, #132	; 0x84
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	6812      	ldr	r2, [r2, #0]
 800db84:	4611      	mov	r1, r2
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	01d2      	lsls	r2, r2, #7
 800db8a:	440a      	add	r2, r1
 800db8c:	3284      	adds	r2, #132	; 0x84
 800db8e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800db92:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	689a      	ldr	r2, [r3, #8]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dba2:	4413      	add	r3, r2
 800dba4:	1c5a      	adds	r2, r3, #1
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	01db      	lsls	r3, r3, #7
 800dbb0:	440b      	add	r3, r1
 800dbb2:	3384      	adds	r3, #132	; 0x84
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	01db      	lsls	r3, r3, #7
 800dbc6:	4413      	add	r3, r2
 800dbc8:	3384      	adds	r3, #132	; 0x84
 800dbca:	691b      	ldr	r3, [r3, #16]
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	6812      	ldr	r2, [r2, #0]
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	01d2      	lsls	r2, r2, #7
 800dbd6:	440a      	add	r2, r1
 800dbd8:	3284      	adds	r2, #132	; 0x84
 800dbda:	f023 0307 	bic.w	r3, r3, #7
 800dbde:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	01db      	lsls	r3, r3, #7
 800dbea:	4413      	add	r3, r2
 800dbec:	3384      	adds	r3, #132	; 0x84
 800dbee:	461a      	mov	r2, r3
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	691b      	ldr	r3, [r3, #16]
 800dbf4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dbfc:	021b      	lsls	r3, r3, #8
 800dbfe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dc06:	041b      	lsls	r3, r3, #16
 800dc08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	061b      	lsls	r3, r3, #24
 800dc10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	461a      	mov	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	01db      	lsls	r3, r3, #7
 800dc1c:	4413      	add	r3, r2
 800dc1e:	3384      	adds	r3, #132	; 0x84
 800dc20:	699b      	ldr	r3, [r3, #24]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	461a      	mov	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	01db      	lsls	r3, r3, #7
 800dc2c:	4413      	add	r3, r2
 800dc2e:	3384      	adds	r3, #132	; 0x84
 800dc30:	461a      	mov	r2, r3
 800dc32:	2300      	movs	r3, #0
 800dc34:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	431a      	orrs	r2, r3
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	431a      	orrs	r2, r3
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	01db      	lsls	r3, r3, #7
 800dc50:	440b      	add	r3, r1
 800dc52:	3384      	adds	r3, #132	; 0x84
 800dc54:	4619      	mov	r1, r3
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	461a      	mov	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	01db      	lsls	r3, r3, #7
 800dc66:	4413      	add	r3, r2
 800dc68:	3384      	adds	r3, #132	; 0x84
 800dc6a:	695b      	ldr	r3, [r3, #20]
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	6812      	ldr	r2, [r2, #0]
 800dc70:	4611      	mov	r1, r2
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	01d2      	lsls	r2, r2, #7
 800dc76:	440a      	add	r2, r1
 800dc78:	3284      	adds	r2, #132	; 0x84
 800dc7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	461a      	mov	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	01db      	lsls	r3, r3, #7
 800dc8a:	4413      	add	r3, r2
 800dc8c:	3384      	adds	r3, #132	; 0x84
 800dc8e:	461a      	mov	r2, r3
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	695b      	ldr	r3, [r3, #20]
 800dc94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	01db      	lsls	r3, r3, #7
 800dca0:	4413      	add	r3, r2
 800dca2:	3384      	adds	r3, #132	; 0x84
 800dca4:	69db      	ldr	r3, [r3, #28]
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	6812      	ldr	r2, [r2, #0]
 800dcaa:	4611      	mov	r1, r2
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	01d2      	lsls	r2, r2, #7
 800dcb0:	440a      	add	r2, r1
 800dcb2:	3284      	adds	r2, #132	; 0x84
 800dcb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800dcb8:	f023 0307 	bic.w	r3, r3, #7
 800dcbc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	69da      	ldr	r2, [r3, #28]
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	6a1b      	ldr	r3, [r3, #32]
 800dcc6:	68f9      	ldr	r1, [r7, #12]
 800dcc8:	6809      	ldr	r1, [r1, #0]
 800dcca:	4608      	mov	r0, r1
 800dccc:	6879      	ldr	r1, [r7, #4]
 800dcce:	01c9      	lsls	r1, r1, #7
 800dcd0:	4401      	add	r1, r0
 800dcd2:	3184      	adds	r1, #132	; 0x84
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	01db      	lsls	r3, r3, #7
 800dce2:	4413      	add	r3, r2
 800dce4:	3384      	adds	r3, #132	; 0x84
 800dce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	461a      	mov	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	01db      	lsls	r3, r3, #7
 800dcf2:	4413      	add	r3, r2
 800dcf4:	3384      	adds	r3, #132	; 0x84
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	461a      	mov	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	01db      	lsls	r3, r3, #7
 800dd06:	4413      	add	r3, r2
 800dd08:	3384      	adds	r3, #132	; 0x84
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd10:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d102      	bne.n	800dd20 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800dd1a:	2304      	movs	r3, #4
 800dd1c:	61fb      	str	r3, [r7, #28]
 800dd1e:	e01b      	b.n	800dd58 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d102      	bne.n	800dd2e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	61fb      	str	r3, [r7, #28]
 800dd2c:	e014      	b.n	800dd58 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	691b      	ldr	r3, [r3, #16]
 800dd32:	2b04      	cmp	r3, #4
 800dd34:	d00b      	beq.n	800dd4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d007      	beq.n	800dd4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800dd42:	2b03      	cmp	r3, #3
 800dd44:	d003      	beq.n	800dd4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800dd4a:	2b07      	cmp	r3, #7
 800dd4c:	d102      	bne.n	800dd54 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800dd4e:	2302      	movs	r3, #2
 800dd50:	61fb      	str	r3, [r7, #28]
 800dd52:	e001      	b.n	800dd58 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800dd54:	2301      	movs	r3, #1
 800dd56:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	01db      	lsls	r3, r3, #7
 800dd62:	4413      	add	r3, r2
 800dd64:	3384      	adds	r3, #132	; 0x84
 800dd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	6812      	ldr	r2, [r2, #0]
 800dd6c:	4611      	mov	r1, r2
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	01d2      	lsls	r2, r2, #7
 800dd72:	440a      	add	r2, r1
 800dd74:	3284      	adds	r2, #132	; 0x84
 800dd76:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800dd7a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd80:	69fa      	ldr	r2, [r7, #28]
 800dd82:	fb02 f303 	mul.w	r3, r2, r3
 800dd86:	041a      	lsls	r2, r3, #16
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	6859      	ldr	r1, [r3, #4]
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	1acb      	subs	r3, r1, r3
 800dd92:	69f9      	ldr	r1, [r7, #28]
 800dd94:	fb01 f303 	mul.w	r3, r1, r3
 800dd98:	3303      	adds	r3, #3
 800dd9a:	68f9      	ldr	r1, [r7, #12]
 800dd9c:	6809      	ldr	r1, [r1, #0]
 800dd9e:	4608      	mov	r0, r1
 800dda0:	6879      	ldr	r1, [r7, #4]
 800dda2:	01c9      	lsls	r1, r1, #7
 800dda4:	4401      	add	r1, r0
 800dda6:	3184      	adds	r1, #132	; 0x84
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	01db      	lsls	r3, r3, #7
 800ddb6:	4413      	add	r3, r2
 800ddb8:	3384      	adds	r3, #132	; 0x84
 800ddba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	6812      	ldr	r2, [r2, #0]
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	01d2      	lsls	r2, r2, #7
 800ddc6:	440a      	add	r2, r1
 800ddc8:	3284      	adds	r2, #132	; 0x84
 800ddca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ddce:	f023 0307 	bic.w	r3, r3, #7
 800ddd2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	461a      	mov	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	01db      	lsls	r3, r3, #7
 800ddde:	4413      	add	r3, r2
 800dde0:	3384      	adds	r3, #132	; 0x84
 800dde2:	461a      	mov	r2, r3
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	01db      	lsls	r3, r3, #7
 800ddf4:	4413      	add	r3, r2
 800ddf6:	3384      	adds	r3, #132	; 0x84
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	6812      	ldr	r2, [r2, #0]
 800ddfe:	4611      	mov	r1, r2
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	01d2      	lsls	r2, r2, #7
 800de04:	440a      	add	r2, r1
 800de06:	3284      	adds	r2, #132	; 0x84
 800de08:	f043 0301 	orr.w	r3, r3, #1
 800de0c:	6013      	str	r3, [r2, #0]
}
 800de0e:	bf00      	nop
 800de10:	3724      	adds	r7, #36	; 0x24
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
	...

0800de1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800de22:	2300      	movs	r3, #0
 800de24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800de26:	2300      	movs	r3, #0
 800de28:	603b      	str	r3, [r7, #0]
 800de2a:	4b20      	ldr	r3, [pc, #128]	; (800deac <HAL_PWREx_EnableOverDrive+0x90>)
 800de2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2e:	4a1f      	ldr	r2, [pc, #124]	; (800deac <HAL_PWREx_EnableOverDrive+0x90>)
 800de30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de34:	6413      	str	r3, [r2, #64]	; 0x40
 800de36:	4b1d      	ldr	r3, [pc, #116]	; (800deac <HAL_PWREx_EnableOverDrive+0x90>)
 800de38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de3e:	603b      	str	r3, [r7, #0]
 800de40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800de42:	4b1b      	ldr	r3, [pc, #108]	; (800deb0 <HAL_PWREx_EnableOverDrive+0x94>)
 800de44:	2201      	movs	r2, #1
 800de46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800de48:	f7fb f8e2 	bl	8009010 <HAL_GetTick>
 800de4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800de4e:	e009      	b.n	800de64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800de50:	f7fb f8de 	bl	8009010 <HAL_GetTick>
 800de54:	4602      	mov	r2, r0
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de5e:	d901      	bls.n	800de64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800de60:	2303      	movs	r3, #3
 800de62:	e01f      	b.n	800dea4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800de64:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <HAL_PWREx_EnableOverDrive+0x98>)
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de70:	d1ee      	bne.n	800de50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800de72:	4b11      	ldr	r3, [pc, #68]	; (800deb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800de74:	2201      	movs	r2, #1
 800de76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800de78:	f7fb f8ca 	bl	8009010 <HAL_GetTick>
 800de7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800de7e:	e009      	b.n	800de94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800de80:	f7fb f8c6 	bl	8009010 <HAL_GetTick>
 800de84:	4602      	mov	r2, r0
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	1ad3      	subs	r3, r2, r3
 800de8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de8e:	d901      	bls.n	800de94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800de90:	2303      	movs	r3, #3
 800de92:	e007      	b.n	800dea4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800de94:	4b07      	ldr	r3, [pc, #28]	; (800deb4 <HAL_PWREx_EnableOverDrive+0x98>)
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dea0:	d1ee      	bne.n	800de80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800dea2:	2300      	movs	r3, #0
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3708      	adds	r7, #8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	40023800 	.word	0x40023800
 800deb0:	420e0040 	.word	0x420e0040
 800deb4:	40007000 	.word	0x40007000
 800deb8:	420e0044 	.word	0x420e0044

0800debc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b086      	sub	sp, #24
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d101      	bne.n	800dece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800deca:	2301      	movs	r3, #1
 800decc:	e264      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f003 0301 	and.w	r3, r3, #1
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d075      	beq.n	800dfc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800deda:	4ba3      	ldr	r3, [pc, #652]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	f003 030c 	and.w	r3, r3, #12
 800dee2:	2b04      	cmp	r3, #4
 800dee4:	d00c      	beq.n	800df00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dee6:	4ba0      	ldr	r3, [pc, #640]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800deee:	2b08      	cmp	r3, #8
 800def0:	d112      	bne.n	800df18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800def2:	4b9d      	ldr	r3, [pc, #628]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800defa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800defe:	d10b      	bne.n	800df18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df00:	4b99      	ldr	r3, [pc, #612]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d05b      	beq.n	800dfc4 <HAL_RCC_OscConfig+0x108>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d157      	bne.n	800dfc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800df14:	2301      	movs	r3, #1
 800df16:	e23f      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df20:	d106      	bne.n	800df30 <HAL_RCC_OscConfig+0x74>
 800df22:	4b91      	ldr	r3, [pc, #580]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a90      	ldr	r2, [pc, #576]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df2c:	6013      	str	r3, [r2, #0]
 800df2e:	e01d      	b.n	800df6c <HAL_RCC_OscConfig+0xb0>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800df38:	d10c      	bne.n	800df54 <HAL_RCC_OscConfig+0x98>
 800df3a:	4b8b      	ldr	r3, [pc, #556]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a8a      	ldr	r2, [pc, #552]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df44:	6013      	str	r3, [r2, #0]
 800df46:	4b88      	ldr	r3, [pc, #544]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a87      	ldr	r2, [pc, #540]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df50:	6013      	str	r3, [r2, #0]
 800df52:	e00b      	b.n	800df6c <HAL_RCC_OscConfig+0xb0>
 800df54:	4b84      	ldr	r3, [pc, #528]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a83      	ldr	r2, [pc, #524]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df5e:	6013      	str	r3, [r2, #0]
 800df60:	4b81      	ldr	r3, [pc, #516]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a80      	ldr	r2, [pc, #512]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d013      	beq.n	800df9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df74:	f7fb f84c 	bl	8009010 <HAL_GetTick>
 800df78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800df7a:	e008      	b.n	800df8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800df7c:	f7fb f848 	bl	8009010 <HAL_GetTick>
 800df80:	4602      	mov	r2, r0
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	2b64      	cmp	r3, #100	; 0x64
 800df88:	d901      	bls.n	800df8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800df8a:	2303      	movs	r3, #3
 800df8c:	e204      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800df8e:	4b76      	ldr	r3, [pc, #472]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df96:	2b00      	cmp	r3, #0
 800df98:	d0f0      	beq.n	800df7c <HAL_RCC_OscConfig+0xc0>
 800df9a:	e014      	b.n	800dfc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df9c:	f7fb f838 	bl	8009010 <HAL_GetTick>
 800dfa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dfa2:	e008      	b.n	800dfb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dfa4:	f7fb f834 	bl	8009010 <HAL_GetTick>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	2b64      	cmp	r3, #100	; 0x64
 800dfb0:	d901      	bls.n	800dfb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	e1f0      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dfb6:	4b6c      	ldr	r3, [pc, #432]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1f0      	bne.n	800dfa4 <HAL_RCC_OscConfig+0xe8>
 800dfc2:	e000      	b.n	800dfc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dfc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f003 0302 	and.w	r3, r3, #2
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d063      	beq.n	800e09a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dfd2:	4b65      	ldr	r3, [pc, #404]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	f003 030c 	and.w	r3, r3, #12
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00b      	beq.n	800dff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dfde:	4b62      	ldr	r3, [pc, #392]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dfe6:	2b08      	cmp	r3, #8
 800dfe8:	d11c      	bne.n	800e024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dfea:	4b5f      	ldr	r3, [pc, #380]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d116      	bne.n	800e024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dff6:	4b5c      	ldr	r3, [pc, #368]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f003 0302 	and.w	r3, r3, #2
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d005      	beq.n	800e00e <HAL_RCC_OscConfig+0x152>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	2b01      	cmp	r3, #1
 800e008:	d001      	beq.n	800e00e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	e1c4      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e00e:	4b56      	ldr	r3, [pc, #344]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	00db      	lsls	r3, r3, #3
 800e01c:	4952      	ldr	r1, [pc, #328]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e01e:	4313      	orrs	r3, r2
 800e020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e022:	e03a      	b.n	800e09a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d020      	beq.n	800e06e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e02c:	4b4f      	ldr	r3, [pc, #316]	; (800e16c <HAL_RCC_OscConfig+0x2b0>)
 800e02e:	2201      	movs	r2, #1
 800e030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e032:	f7fa ffed 	bl	8009010 <HAL_GetTick>
 800e036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e038:	e008      	b.n	800e04c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e03a:	f7fa ffe9 	bl	8009010 <HAL_GetTick>
 800e03e:	4602      	mov	r2, r0
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	1ad3      	subs	r3, r2, r3
 800e044:	2b02      	cmp	r3, #2
 800e046:	d901      	bls.n	800e04c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e048:	2303      	movs	r3, #3
 800e04a:	e1a5      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e04c:	4b46      	ldr	r3, [pc, #280]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f003 0302 	and.w	r3, r3, #2
 800e054:	2b00      	cmp	r3, #0
 800e056:	d0f0      	beq.n	800e03a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e058:	4b43      	ldr	r3, [pc, #268]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	691b      	ldr	r3, [r3, #16]
 800e064:	00db      	lsls	r3, r3, #3
 800e066:	4940      	ldr	r1, [pc, #256]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e068:	4313      	orrs	r3, r2
 800e06a:	600b      	str	r3, [r1, #0]
 800e06c:	e015      	b.n	800e09a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e06e:	4b3f      	ldr	r3, [pc, #252]	; (800e16c <HAL_RCC_OscConfig+0x2b0>)
 800e070:	2200      	movs	r2, #0
 800e072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e074:	f7fa ffcc 	bl	8009010 <HAL_GetTick>
 800e078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e07a:	e008      	b.n	800e08e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e07c:	f7fa ffc8 	bl	8009010 <HAL_GetTick>
 800e080:	4602      	mov	r2, r0
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	2b02      	cmp	r3, #2
 800e088:	d901      	bls.n	800e08e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e08a:	2303      	movs	r3, #3
 800e08c:	e184      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e08e:	4b36      	ldr	r3, [pc, #216]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f003 0302 	and.w	r3, r3, #2
 800e096:	2b00      	cmp	r3, #0
 800e098:	d1f0      	bne.n	800e07c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f003 0308 	and.w	r3, r3, #8
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d030      	beq.n	800e108 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d016      	beq.n	800e0dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e0ae:	4b30      	ldr	r3, [pc, #192]	; (800e170 <HAL_RCC_OscConfig+0x2b4>)
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0b4:	f7fa ffac 	bl	8009010 <HAL_GetTick>
 800e0b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e0ba:	e008      	b.n	800e0ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e0bc:	f7fa ffa8 	bl	8009010 <HAL_GetTick>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	1ad3      	subs	r3, r2, r3
 800e0c6:	2b02      	cmp	r3, #2
 800e0c8:	d901      	bls.n	800e0ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e0ca:	2303      	movs	r3, #3
 800e0cc:	e164      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e0ce:	4b26      	ldr	r3, [pc, #152]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0d2:	f003 0302 	and.w	r3, r3, #2
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d0f0      	beq.n	800e0bc <HAL_RCC_OscConfig+0x200>
 800e0da:	e015      	b.n	800e108 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e0dc:	4b24      	ldr	r3, [pc, #144]	; (800e170 <HAL_RCC_OscConfig+0x2b4>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e0e2:	f7fa ff95 	bl	8009010 <HAL_GetTick>
 800e0e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e0e8:	e008      	b.n	800e0fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e0ea:	f7fa ff91 	bl	8009010 <HAL_GetTick>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d901      	bls.n	800e0fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	e14d      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e0fc:	4b1a      	ldr	r3, [pc, #104]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e0fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e100:	f003 0302 	and.w	r3, r3, #2
 800e104:	2b00      	cmp	r3, #0
 800e106:	d1f0      	bne.n	800e0ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f003 0304 	and.w	r3, r3, #4
 800e110:	2b00      	cmp	r3, #0
 800e112:	f000 80a0 	beq.w	800e256 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e116:	2300      	movs	r3, #0
 800e118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e11a:	4b13      	ldr	r3, [pc, #76]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e11e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10f      	bne.n	800e146 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e126:	2300      	movs	r3, #0
 800e128:	60bb      	str	r3, [r7, #8]
 800e12a:	4b0f      	ldr	r3, [pc, #60]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e12e:	4a0e      	ldr	r2, [pc, #56]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e134:	6413      	str	r3, [r2, #64]	; 0x40
 800e136:	4b0c      	ldr	r3, [pc, #48]	; (800e168 <HAL_RCC_OscConfig+0x2ac>)
 800e138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e13a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e13e:	60bb      	str	r3, [r7, #8]
 800e140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e142:	2301      	movs	r3, #1
 800e144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e146:	4b0b      	ldr	r3, [pc, #44]	; (800e174 <HAL_RCC_OscConfig+0x2b8>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d121      	bne.n	800e196 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e152:	4b08      	ldr	r3, [pc, #32]	; (800e174 <HAL_RCC_OscConfig+0x2b8>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a07      	ldr	r2, [pc, #28]	; (800e174 <HAL_RCC_OscConfig+0x2b8>)
 800e158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e15c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e15e:	f7fa ff57 	bl	8009010 <HAL_GetTick>
 800e162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e164:	e011      	b.n	800e18a <HAL_RCC_OscConfig+0x2ce>
 800e166:	bf00      	nop
 800e168:	40023800 	.word	0x40023800
 800e16c:	42470000 	.word	0x42470000
 800e170:	42470e80 	.word	0x42470e80
 800e174:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e178:	f7fa ff4a 	bl	8009010 <HAL_GetTick>
 800e17c:	4602      	mov	r2, r0
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	2b02      	cmp	r3, #2
 800e184:	d901      	bls.n	800e18a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e186:	2303      	movs	r3, #3
 800e188:	e106      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e18a:	4b85      	ldr	r3, [pc, #532]	; (800e3a0 <HAL_RCC_OscConfig+0x4e4>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0f0      	beq.n	800e178 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d106      	bne.n	800e1ac <HAL_RCC_OscConfig+0x2f0>
 800e19e:	4b81      	ldr	r3, [pc, #516]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1a2:	4a80      	ldr	r2, [pc, #512]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1a4:	f043 0301 	orr.w	r3, r3, #1
 800e1a8:	6713      	str	r3, [r2, #112]	; 0x70
 800e1aa:	e01c      	b.n	800e1e6 <HAL_RCC_OscConfig+0x32a>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	2b05      	cmp	r3, #5
 800e1b2:	d10c      	bne.n	800e1ce <HAL_RCC_OscConfig+0x312>
 800e1b4:	4b7b      	ldr	r3, [pc, #492]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1b8:	4a7a      	ldr	r2, [pc, #488]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1ba:	f043 0304 	orr.w	r3, r3, #4
 800e1be:	6713      	str	r3, [r2, #112]	; 0x70
 800e1c0:	4b78      	ldr	r3, [pc, #480]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c4:	4a77      	ldr	r2, [pc, #476]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1c6:	f043 0301 	orr.w	r3, r3, #1
 800e1ca:	6713      	str	r3, [r2, #112]	; 0x70
 800e1cc:	e00b      	b.n	800e1e6 <HAL_RCC_OscConfig+0x32a>
 800e1ce:	4b75      	ldr	r3, [pc, #468]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d2:	4a74      	ldr	r2, [pc, #464]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1d4:	f023 0301 	bic.w	r3, r3, #1
 800e1d8:	6713      	str	r3, [r2, #112]	; 0x70
 800e1da:	4b72      	ldr	r3, [pc, #456]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1de:	4a71      	ldr	r2, [pc, #452]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e1e0:	f023 0304 	bic.w	r3, r3, #4
 800e1e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d015      	beq.n	800e21a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1ee:	f7fa ff0f 	bl	8009010 <HAL_GetTick>
 800e1f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e1f4:	e00a      	b.n	800e20c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e1f6:	f7fa ff0b 	bl	8009010 <HAL_GetTick>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	f241 3288 	movw	r2, #5000	; 0x1388
 800e204:	4293      	cmp	r3, r2
 800e206:	d901      	bls.n	800e20c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e208:	2303      	movs	r3, #3
 800e20a:	e0c5      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e20c:	4b65      	ldr	r3, [pc, #404]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e210:	f003 0302 	and.w	r3, r3, #2
 800e214:	2b00      	cmp	r3, #0
 800e216:	d0ee      	beq.n	800e1f6 <HAL_RCC_OscConfig+0x33a>
 800e218:	e014      	b.n	800e244 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e21a:	f7fa fef9 	bl	8009010 <HAL_GetTick>
 800e21e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e220:	e00a      	b.n	800e238 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e222:	f7fa fef5 	bl	8009010 <HAL_GetTick>
 800e226:	4602      	mov	r2, r0
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	1ad3      	subs	r3, r2, r3
 800e22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e230:	4293      	cmp	r3, r2
 800e232:	d901      	bls.n	800e238 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e234:	2303      	movs	r3, #3
 800e236:	e0af      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e238:	4b5a      	ldr	r3, [pc, #360]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e23c:	f003 0302 	and.w	r3, r3, #2
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1ee      	bne.n	800e222 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e244:	7dfb      	ldrb	r3, [r7, #23]
 800e246:	2b01      	cmp	r3, #1
 800e248:	d105      	bne.n	800e256 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e24a:	4b56      	ldr	r3, [pc, #344]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e24e:	4a55      	ldr	r2, [pc, #340]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e254:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	699b      	ldr	r3, [r3, #24]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f000 809b 	beq.w	800e396 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e260:	4b50      	ldr	r3, [pc, #320]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	f003 030c 	and.w	r3, r3, #12
 800e268:	2b08      	cmp	r3, #8
 800e26a:	d05c      	beq.n	800e326 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	2b02      	cmp	r3, #2
 800e272:	d141      	bne.n	800e2f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e274:	4b4c      	ldr	r3, [pc, #304]	; (800e3a8 <HAL_RCC_OscConfig+0x4ec>)
 800e276:	2200      	movs	r2, #0
 800e278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e27a:	f7fa fec9 	bl	8009010 <HAL_GetTick>
 800e27e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e280:	e008      	b.n	800e294 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e282:	f7fa fec5 	bl	8009010 <HAL_GetTick>
 800e286:	4602      	mov	r2, r0
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	1ad3      	subs	r3, r2, r3
 800e28c:	2b02      	cmp	r3, #2
 800e28e:	d901      	bls.n	800e294 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e290:	2303      	movs	r3, #3
 800e292:	e081      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e294:	4b43      	ldr	r3, [pc, #268]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1f0      	bne.n	800e282 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	69da      	ldr	r2, [r3, #28]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6a1b      	ldr	r3, [r3, #32]
 800e2a8:	431a      	orrs	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ae:	019b      	lsls	r3, r3, #6
 800e2b0:	431a      	orrs	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b6:	085b      	lsrs	r3, r3, #1
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	041b      	lsls	r3, r3, #16
 800e2bc:	431a      	orrs	r2, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c2:	061b      	lsls	r3, r3, #24
 800e2c4:	4937      	ldr	r1, [pc, #220]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e2ca:	4b37      	ldr	r3, [pc, #220]	; (800e3a8 <HAL_RCC_OscConfig+0x4ec>)
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2d0:	f7fa fe9e 	bl	8009010 <HAL_GetTick>
 800e2d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e2d6:	e008      	b.n	800e2ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e2d8:	f7fa fe9a 	bl	8009010 <HAL_GetTick>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	2b02      	cmp	r3, #2
 800e2e4:	d901      	bls.n	800e2ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800e2e6:	2303      	movs	r3, #3
 800e2e8:	e056      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e2ea:	4b2e      	ldr	r3, [pc, #184]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d0f0      	beq.n	800e2d8 <HAL_RCC_OscConfig+0x41c>
 800e2f6:	e04e      	b.n	800e396 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e2f8:	4b2b      	ldr	r3, [pc, #172]	; (800e3a8 <HAL_RCC_OscConfig+0x4ec>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2fe:	f7fa fe87 	bl	8009010 <HAL_GetTick>
 800e302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e304:	e008      	b.n	800e318 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e306:	f7fa fe83 	bl	8009010 <HAL_GetTick>
 800e30a:	4602      	mov	r2, r0
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	2b02      	cmp	r3, #2
 800e312:	d901      	bls.n	800e318 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800e314:	2303      	movs	r3, #3
 800e316:	e03f      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e318:	4b22      	ldr	r3, [pc, #136]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1f0      	bne.n	800e306 <HAL_RCC_OscConfig+0x44a>
 800e324:	e037      	b.n	800e396 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	699b      	ldr	r3, [r3, #24]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d101      	bne.n	800e332 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	e032      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e332:	4b1c      	ldr	r3, [pc, #112]	; (800e3a4 <HAL_RCC_OscConfig+0x4e8>)
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d028      	beq.n	800e392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d121      	bne.n	800e392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e358:	429a      	cmp	r2, r3
 800e35a:	d11a      	bne.n	800e392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e362:	4013      	ands	r3, r2
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e368:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d111      	bne.n	800e392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e378:	085b      	lsrs	r3, r3, #1
 800e37a:	3b01      	subs	r3, #1
 800e37c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e37e:	429a      	cmp	r2, r3
 800e380:	d107      	bne.n	800e392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e38c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e38e:	429a      	cmp	r2, r3
 800e390:	d001      	beq.n	800e396 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	e000      	b.n	800e398 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800e396:	2300      	movs	r3, #0
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	40007000 	.word	0x40007000
 800e3a4:	40023800 	.word	0x40023800
 800e3a8:	42470060 	.word	0x42470060

0800e3ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d101      	bne.n	800e3c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e0cc      	b.n	800e55a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e3c0:	4b68      	ldr	r3, [pc, #416]	; (800e564 <HAL_RCC_ClockConfig+0x1b8>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f003 030f 	and.w	r3, r3, #15
 800e3c8:	683a      	ldr	r2, [r7, #0]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d90c      	bls.n	800e3e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e3ce:	4b65      	ldr	r3, [pc, #404]	; (800e564 <HAL_RCC_ClockConfig+0x1b8>)
 800e3d0:	683a      	ldr	r2, [r7, #0]
 800e3d2:	b2d2      	uxtb	r2, r2
 800e3d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e3d6:	4b63      	ldr	r3, [pc, #396]	; (800e564 <HAL_RCC_ClockConfig+0x1b8>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f003 030f 	and.w	r3, r3, #15
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d001      	beq.n	800e3e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e0b8      	b.n	800e55a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f003 0302 	and.w	r3, r3, #2
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d020      	beq.n	800e436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f003 0304 	and.w	r3, r3, #4
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d005      	beq.n	800e40c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e400:	4b59      	ldr	r3, [pc, #356]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	4a58      	ldr	r2, [pc, #352]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e40a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f003 0308 	and.w	r3, r3, #8
 800e414:	2b00      	cmp	r3, #0
 800e416:	d005      	beq.n	800e424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e418:	4b53      	ldr	r3, [pc, #332]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	4a52      	ldr	r2, [pc, #328]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e41e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e424:	4b50      	ldr	r3, [pc, #320]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	494d      	ldr	r1, [pc, #308]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e432:	4313      	orrs	r3, r2
 800e434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f003 0301 	and.w	r3, r3, #1
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d044      	beq.n	800e4cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	2b01      	cmp	r3, #1
 800e448:	d107      	bne.n	800e45a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e44a:	4b47      	ldr	r3, [pc, #284]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e452:	2b00      	cmp	r3, #0
 800e454:	d119      	bne.n	800e48a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e07f      	b.n	800e55a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d003      	beq.n	800e46a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e466:	2b03      	cmp	r3, #3
 800e468:	d107      	bne.n	800e47a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e46a:	4b3f      	ldr	r3, [pc, #252]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e472:	2b00      	cmp	r3, #0
 800e474:	d109      	bne.n	800e48a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e476:	2301      	movs	r3, #1
 800e478:	e06f      	b.n	800e55a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e47a:	4b3b      	ldr	r3, [pc, #236]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f003 0302 	and.w	r3, r3, #2
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e067      	b.n	800e55a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e48a:	4b37      	ldr	r3, [pc, #220]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	f023 0203 	bic.w	r2, r3, #3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	4934      	ldr	r1, [pc, #208]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e498:	4313      	orrs	r3, r2
 800e49a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e49c:	f7fa fdb8 	bl	8009010 <HAL_GetTick>
 800e4a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e4a2:	e00a      	b.n	800e4ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e4a4:	f7fa fdb4 	bl	8009010 <HAL_GetTick>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d901      	bls.n	800e4ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e4b6:	2303      	movs	r3, #3
 800e4b8:	e04f      	b.n	800e55a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e4ba:	4b2b      	ldr	r3, [pc, #172]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	f003 020c 	and.w	r2, r3, #12
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	009b      	lsls	r3, r3, #2
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d1eb      	bne.n	800e4a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e4cc:	4b25      	ldr	r3, [pc, #148]	; (800e564 <HAL_RCC_ClockConfig+0x1b8>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f003 030f 	and.w	r3, r3, #15
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d20c      	bcs.n	800e4f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e4da:	4b22      	ldr	r3, [pc, #136]	; (800e564 <HAL_RCC_ClockConfig+0x1b8>)
 800e4dc:	683a      	ldr	r2, [r7, #0]
 800e4de:	b2d2      	uxtb	r2, r2
 800e4e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e4e2:	4b20      	ldr	r3, [pc, #128]	; (800e564 <HAL_RCC_ClockConfig+0x1b8>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f003 030f 	and.w	r3, r3, #15
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d001      	beq.n	800e4f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e032      	b.n	800e55a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f003 0304 	and.w	r3, r3, #4
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d008      	beq.n	800e512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e500:	4b19      	ldr	r3, [pc, #100]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	4916      	ldr	r1, [pc, #88]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e50e:	4313      	orrs	r3, r2
 800e510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f003 0308 	and.w	r3, r3, #8
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d009      	beq.n	800e532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e51e:	4b12      	ldr	r3, [pc, #72]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	00db      	lsls	r3, r3, #3
 800e52c:	490e      	ldr	r1, [pc, #56]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e52e:	4313      	orrs	r3, r2
 800e530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e532:	f000 f82d 	bl	800e590 <HAL_RCC_GetSysClockFreq>
 800e536:	4602      	mov	r2, r0
 800e538:	4b0b      	ldr	r3, [pc, #44]	; (800e568 <HAL_RCC_ClockConfig+0x1bc>)
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	091b      	lsrs	r3, r3, #4
 800e53e:	f003 030f 	and.w	r3, r3, #15
 800e542:	490a      	ldr	r1, [pc, #40]	; (800e56c <HAL_RCC_ClockConfig+0x1c0>)
 800e544:	5ccb      	ldrb	r3, [r1, r3]
 800e546:	fa22 f303 	lsr.w	r3, r2, r3
 800e54a:	4a09      	ldr	r2, [pc, #36]	; (800e570 <HAL_RCC_ClockConfig+0x1c4>)
 800e54c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e54e:	4b09      	ldr	r3, [pc, #36]	; (800e574 <HAL_RCC_ClockConfig+0x1c8>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4618      	mov	r0, r3
 800e554:	f7fa fd18 	bl	8008f88 <HAL_InitTick>

  return HAL_OK;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	40023c00 	.word	0x40023c00
 800e568:	40023800 	.word	0x40023800
 800e56c:	08012d60 	.word	0x08012d60
 800e570:	20000044 	.word	0x20000044
 800e574:	20000048 	.word	0x20000048

0800e578 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800e578:	b480      	push	{r7}
 800e57a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800e57c:	4b03      	ldr	r3, [pc, #12]	; (800e58c <HAL_RCC_EnableCSS+0x14>)
 800e57e:	2201      	movs	r2, #1
 800e580:	601a      	str	r2, [r3, #0]
}
 800e582:	bf00      	nop
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr
 800e58c:	4247004c 	.word	0x4247004c

0800e590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e594:	b084      	sub	sp, #16
 800e596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e598:	2300      	movs	r3, #0
 800e59a:	607b      	str	r3, [r7, #4]
 800e59c:	2300      	movs	r3, #0
 800e59e:	60fb      	str	r3, [r7, #12]
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e5a8:	4b67      	ldr	r3, [pc, #412]	; (800e748 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	f003 030c 	and.w	r3, r3, #12
 800e5b0:	2b08      	cmp	r3, #8
 800e5b2:	d00d      	beq.n	800e5d0 <HAL_RCC_GetSysClockFreq+0x40>
 800e5b4:	2b08      	cmp	r3, #8
 800e5b6:	f200 80bd 	bhi.w	800e734 <HAL_RCC_GetSysClockFreq+0x1a4>
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <HAL_RCC_GetSysClockFreq+0x34>
 800e5be:	2b04      	cmp	r3, #4
 800e5c0:	d003      	beq.n	800e5ca <HAL_RCC_GetSysClockFreq+0x3a>
 800e5c2:	e0b7      	b.n	800e734 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e5c4:	4b61      	ldr	r3, [pc, #388]	; (800e74c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e5c6:	60bb      	str	r3, [r7, #8]
       break;
 800e5c8:	e0b7      	b.n	800e73a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e5ca:	4b61      	ldr	r3, [pc, #388]	; (800e750 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800e5cc:	60bb      	str	r3, [r7, #8]
      break;
 800e5ce:	e0b4      	b.n	800e73a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e5d0:	4b5d      	ldr	r3, [pc, #372]	; (800e748 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e5da:	4b5b      	ldr	r3, [pc, #364]	; (800e748 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d04d      	beq.n	800e682 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e5e6:	4b58      	ldr	r3, [pc, #352]	; (800e748 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	099b      	lsrs	r3, r3, #6
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	f04f 0300 	mov.w	r3, #0
 800e5f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e5f6:	f04f 0100 	mov.w	r1, #0
 800e5fa:	ea02 0800 	and.w	r8, r2, r0
 800e5fe:	ea03 0901 	and.w	r9, r3, r1
 800e602:	4640      	mov	r0, r8
 800e604:	4649      	mov	r1, r9
 800e606:	f04f 0200 	mov.w	r2, #0
 800e60a:	f04f 0300 	mov.w	r3, #0
 800e60e:	014b      	lsls	r3, r1, #5
 800e610:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e614:	0142      	lsls	r2, r0, #5
 800e616:	4610      	mov	r0, r2
 800e618:	4619      	mov	r1, r3
 800e61a:	ebb0 0008 	subs.w	r0, r0, r8
 800e61e:	eb61 0109 	sbc.w	r1, r1, r9
 800e622:	f04f 0200 	mov.w	r2, #0
 800e626:	f04f 0300 	mov.w	r3, #0
 800e62a:	018b      	lsls	r3, r1, #6
 800e62c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e630:	0182      	lsls	r2, r0, #6
 800e632:	1a12      	subs	r2, r2, r0
 800e634:	eb63 0301 	sbc.w	r3, r3, r1
 800e638:	f04f 0000 	mov.w	r0, #0
 800e63c:	f04f 0100 	mov.w	r1, #0
 800e640:	00d9      	lsls	r1, r3, #3
 800e642:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e646:	00d0      	lsls	r0, r2, #3
 800e648:	4602      	mov	r2, r0
 800e64a:	460b      	mov	r3, r1
 800e64c:	eb12 0208 	adds.w	r2, r2, r8
 800e650:	eb43 0309 	adc.w	r3, r3, r9
 800e654:	f04f 0000 	mov.w	r0, #0
 800e658:	f04f 0100 	mov.w	r1, #0
 800e65c:	0259      	lsls	r1, r3, #9
 800e65e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800e662:	0250      	lsls	r0, r2, #9
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	4610      	mov	r0, r2
 800e66a:	4619      	mov	r1, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	461a      	mov	r2, r3
 800e670:	f04f 0300 	mov.w	r3, #0
 800e674:	f7f2 fa72 	bl	8000b5c <__aeabi_uldivmod>
 800e678:	4602      	mov	r2, r0
 800e67a:	460b      	mov	r3, r1
 800e67c:	4613      	mov	r3, r2
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	e04a      	b.n	800e718 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e682:	4b31      	ldr	r3, [pc, #196]	; (800e748 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	099b      	lsrs	r3, r3, #6
 800e688:	461a      	mov	r2, r3
 800e68a:	f04f 0300 	mov.w	r3, #0
 800e68e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e692:	f04f 0100 	mov.w	r1, #0
 800e696:	ea02 0400 	and.w	r4, r2, r0
 800e69a:	ea03 0501 	and.w	r5, r3, r1
 800e69e:	4620      	mov	r0, r4
 800e6a0:	4629      	mov	r1, r5
 800e6a2:	f04f 0200 	mov.w	r2, #0
 800e6a6:	f04f 0300 	mov.w	r3, #0
 800e6aa:	014b      	lsls	r3, r1, #5
 800e6ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e6b0:	0142      	lsls	r2, r0, #5
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	1b00      	subs	r0, r0, r4
 800e6b8:	eb61 0105 	sbc.w	r1, r1, r5
 800e6bc:	f04f 0200 	mov.w	r2, #0
 800e6c0:	f04f 0300 	mov.w	r3, #0
 800e6c4:	018b      	lsls	r3, r1, #6
 800e6c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e6ca:	0182      	lsls	r2, r0, #6
 800e6cc:	1a12      	subs	r2, r2, r0
 800e6ce:	eb63 0301 	sbc.w	r3, r3, r1
 800e6d2:	f04f 0000 	mov.w	r0, #0
 800e6d6:	f04f 0100 	mov.w	r1, #0
 800e6da:	00d9      	lsls	r1, r3, #3
 800e6dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e6e0:	00d0      	lsls	r0, r2, #3
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	1912      	adds	r2, r2, r4
 800e6e8:	eb45 0303 	adc.w	r3, r5, r3
 800e6ec:	f04f 0000 	mov.w	r0, #0
 800e6f0:	f04f 0100 	mov.w	r1, #0
 800e6f4:	0299      	lsls	r1, r3, #10
 800e6f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e6fa:	0290      	lsls	r0, r2, #10
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	4610      	mov	r0, r2
 800e702:	4619      	mov	r1, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	461a      	mov	r2, r3
 800e708:	f04f 0300 	mov.w	r3, #0
 800e70c:	f7f2 fa26 	bl	8000b5c <__aeabi_uldivmod>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4613      	mov	r3, r2
 800e716:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e718:	4b0b      	ldr	r3, [pc, #44]	; (800e748 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	0c1b      	lsrs	r3, r3, #16
 800e71e:	f003 0303 	and.w	r3, r3, #3
 800e722:	3301      	adds	r3, #1
 800e724:	005b      	lsls	r3, r3, #1
 800e726:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e728:	68fa      	ldr	r2, [r7, #12]
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e730:	60bb      	str	r3, [r7, #8]
      break;
 800e732:	e002      	b.n	800e73a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e734:	4b05      	ldr	r3, [pc, #20]	; (800e74c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800e736:	60bb      	str	r3, [r7, #8]
      break;
 800e738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e73a:	68bb      	ldr	r3, [r7, #8]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3710      	adds	r7, #16
 800e740:	46bd      	mov	sp, r7
 800e742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e746:	bf00      	nop
 800e748:	40023800 	.word	0x40023800
 800e74c:	00f42400 	.word	0x00f42400
 800e750:	007a1200 	.word	0x007a1200

0800e754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e754:	b480      	push	{r7}
 800e756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e758:	4b03      	ldr	r3, [pc, #12]	; (800e768 <HAL_RCC_GetHCLKFreq+0x14>)
 800e75a:	681b      	ldr	r3, [r3, #0]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	20000044 	.word	0x20000044

0800e76c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e770:	f7ff fff0 	bl	800e754 <HAL_RCC_GetHCLKFreq>
 800e774:	4602      	mov	r2, r0
 800e776:	4b05      	ldr	r3, [pc, #20]	; (800e78c <HAL_RCC_GetPCLK1Freq+0x20>)
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	0a9b      	lsrs	r3, r3, #10
 800e77c:	f003 0307 	and.w	r3, r3, #7
 800e780:	4903      	ldr	r1, [pc, #12]	; (800e790 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e782:	5ccb      	ldrb	r3, [r1, r3]
 800e784:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e788:	4618      	mov	r0, r3
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	40023800 	.word	0x40023800
 800e790:	08012d70 	.word	0x08012d70

0800e794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e798:	f7ff ffdc 	bl	800e754 <HAL_RCC_GetHCLKFreq>
 800e79c:	4602      	mov	r2, r0
 800e79e:	4b05      	ldr	r3, [pc, #20]	; (800e7b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	0b5b      	lsrs	r3, r3, #13
 800e7a4:	f003 0307 	and.w	r3, r3, #7
 800e7a8:	4903      	ldr	r1, [pc, #12]	; (800e7b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e7aa:	5ccb      	ldrb	r3, [r1, r3]
 800e7ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	40023800 	.word	0x40023800
 800e7b8:	08012d70 	.word	0x08012d70

0800e7bc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800e7c0:	4b06      	ldr	r3, [pc, #24]	; (800e7dc <HAL_RCC_NMI_IRQHandler+0x20>)
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7c8:	2b80      	cmp	r3, #128	; 0x80
 800e7ca:	d104      	bne.n	800e7d6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800e7cc:	f000 f80a 	bl	800e7e4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800e7d0:	4b03      	ldr	r3, [pc, #12]	; (800e7e0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800e7d2:	2280      	movs	r2, #128	; 0x80
 800e7d4:	701a      	strb	r2, [r3, #0]
  }
}
 800e7d6:	bf00      	nop
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	40023800 	.word	0x40023800
 800e7e0:	4002380e 	.word	0x4002380e

0800e7e4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800e7e8:	bf00      	nop
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr
	...

0800e7f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800e800:	2300      	movs	r3, #0
 800e802:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f003 0301 	and.w	r3, r3, #1
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d10b      	bne.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d105      	bne.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e824:	2b00      	cmp	r3, #0
 800e826:	d075      	beq.n	800e914 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e828:	4bad      	ldr	r3, [pc, #692]	; (800eae0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e82e:	f7fa fbef 	bl	8009010 <HAL_GetTick>
 800e832:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e834:	e008      	b.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e836:	f7fa fbeb 	bl	8009010 <HAL_GetTick>
 800e83a:	4602      	mov	r2, r0
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	2b02      	cmp	r3, #2
 800e842:	d901      	bls.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e844:	2303      	movs	r3, #3
 800e846:	e18b      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e848:	4ba6      	ldr	r3, [pc, #664]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1f0      	bne.n	800e836 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d009      	beq.n	800e874 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	019a      	lsls	r2, r3, #6
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	071b      	lsls	r3, r3, #28
 800e86c:	499d      	ldr	r1, [pc, #628]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e86e:	4313      	orrs	r3, r2
 800e870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f003 0302 	and.w	r3, r3, #2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d01f      	beq.n	800e8c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e880:	4b98      	ldr	r3, [pc, #608]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e886:	0f1b      	lsrs	r3, r3, #28
 800e888:	f003 0307 	and.w	r3, r3, #7
 800e88c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	019a      	lsls	r2, r3, #6
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	061b      	lsls	r3, r3, #24
 800e89a:	431a      	orrs	r2, r3
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	071b      	lsls	r3, r3, #28
 800e8a0:	4990      	ldr	r1, [pc, #576]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e8a8:	4b8e      	ldr	r3, [pc, #568]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8ae:	f023 021f 	bic.w	r2, r3, #31
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	69db      	ldr	r3, [r3, #28]
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	498a      	ldr	r1, [pc, #552]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00d      	beq.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	019a      	lsls	r2, r3, #6
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	061b      	lsls	r3, r3, #24
 800e8d8:	431a      	orrs	r2, r3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	071b      	lsls	r3, r3, #28
 800e8e0:	4980      	ldr	r1, [pc, #512]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e8e8:	4b7d      	ldr	r3, [pc, #500]	; (800eae0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e8ee:	f7fa fb8f 	bl	8009010 <HAL_GetTick>
 800e8f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e8f4:	e008      	b.n	800e908 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e8f6:	f7fa fb8b 	bl	8009010 <HAL_GetTick>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	2b02      	cmp	r3, #2
 800e902:	d901      	bls.n	800e908 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e904:	2303      	movs	r3, #3
 800e906:	e12b      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e908:	4b76      	ldr	r3, [pc, #472]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e910:	2b00      	cmp	r3, #0
 800e912:	d0f0      	beq.n	800e8f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f003 0304 	and.w	r3, r3, #4
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d105      	bne.n	800e92c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d079      	beq.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e92c:	4b6e      	ldr	r3, [pc, #440]	; (800eae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e92e:	2200      	movs	r2, #0
 800e930:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e932:	f7fa fb6d 	bl	8009010 <HAL_GetTick>
 800e936:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e938:	e008      	b.n	800e94c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e93a:	f7fa fb69 	bl	8009010 <HAL_GetTick>
 800e93e:	4602      	mov	r2, r0
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	2b02      	cmp	r3, #2
 800e946:	d901      	bls.n	800e94c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e948:	2303      	movs	r3, #3
 800e94a:	e109      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e94c:	4b65      	ldr	r3, [pc, #404]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e958:	d0ef      	beq.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f003 0304 	and.w	r3, r3, #4
 800e962:	2b00      	cmp	r3, #0
 800e964:	d020      	beq.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e966:	4b5f      	ldr	r3, [pc, #380]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e96c:	0f1b      	lsrs	r3, r3, #28
 800e96e:	f003 0307 	and.w	r3, r3, #7
 800e972:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	691b      	ldr	r3, [r3, #16]
 800e978:	019a      	lsls	r2, r3, #6
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	695b      	ldr	r3, [r3, #20]
 800e97e:	061b      	lsls	r3, r3, #24
 800e980:	431a      	orrs	r2, r3
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	071b      	lsls	r3, r3, #28
 800e986:	4957      	ldr	r1, [pc, #348]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e988:	4313      	orrs	r3, r2
 800e98a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e98e:	4b55      	ldr	r3, [pc, #340]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e994:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6a1b      	ldr	r3, [r3, #32]
 800e99c:	3b01      	subs	r3, #1
 800e99e:	021b      	lsls	r3, r3, #8
 800e9a0:	4950      	ldr	r1, [pc, #320]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f003 0308 	and.w	r3, r3, #8
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d01e      	beq.n	800e9f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e9b4:	4b4b      	ldr	r3, [pc, #300]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9ba:	0e1b      	lsrs	r3, r3, #24
 800e9bc:	f003 030f 	and.w	r3, r3, #15
 800e9c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	691b      	ldr	r3, [r3, #16]
 800e9c6:	019a      	lsls	r2, r3, #6
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	061b      	lsls	r3, r3, #24
 800e9cc:	431a      	orrs	r2, r3
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	071b      	lsls	r3, r3, #28
 800e9d4:	4943      	ldr	r1, [pc, #268]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e9dc:	4b41      	ldr	r3, [pc, #260]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e9de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ea:	493e      	ldr	r1, [pc, #248]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e9f2:	4b3d      	ldr	r3, [pc, #244]	; (800eae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e9f8:	f7fa fb0a 	bl	8009010 <HAL_GetTick>
 800e9fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e9fe:	e008      	b.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ea00:	f7fa fb06 	bl	8009010 <HAL_GetTick>
 800ea04:	4602      	mov	r2, r0
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	2b02      	cmp	r3, #2
 800ea0c:	d901      	bls.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ea0e:	2303      	movs	r3, #3
 800ea10:	e0a6      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ea12:	4b34      	ldr	r3, [pc, #208]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea1e:	d1ef      	bne.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f003 0320 	and.w	r3, r3, #32
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f000 808d 	beq.w	800eb48 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ea2e:	2300      	movs	r3, #0
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	4b2c      	ldr	r3, [pc, #176]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ea34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea36:	4a2b      	ldr	r2, [pc, #172]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ea38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea3c:	6413      	str	r3, [r2, #64]	; 0x40
 800ea3e:	4b29      	ldr	r3, [pc, #164]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ea40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea46:	60fb      	str	r3, [r7, #12]
 800ea48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ea4a:	4b28      	ldr	r3, [pc, #160]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4a27      	ldr	r2, [pc, #156]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ea50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ea56:	f7fa fadb 	bl	8009010 <HAL_GetTick>
 800ea5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ea5c:	e008      	b.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ea5e:	f7fa fad7 	bl	8009010 <HAL_GetTick>
 800ea62:	4602      	mov	r2, r0
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	2b02      	cmp	r3, #2
 800ea6a:	d901      	bls.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800ea6c:	2303      	movs	r3, #3
 800ea6e:	e077      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ea70:	4b1e      	ldr	r3, [pc, #120]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d0f0      	beq.n	800ea5e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ea7c:	4b19      	ldr	r3, [pc, #100]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ea7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d039      	beq.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d032      	beq.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ea9a:	4b12      	ldr	r3, [pc, #72]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800ea9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eaa2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800eaa4:	4b12      	ldr	r3, [pc, #72]	; (800eaf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800eaaa:	4b11      	ldr	r3, [pc, #68]	; (800eaf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800eaac:	2200      	movs	r2, #0
 800eaae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800eab0:	4a0c      	ldr	r2, [pc, #48]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800eab6:	4b0b      	ldr	r3, [pc, #44]	; (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800eab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaba:	f003 0301 	and.w	r3, r3, #1
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d11e      	bne.n	800eb00 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800eac2:	f7fa faa5 	bl	8009010 <HAL_GetTick>
 800eac6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eac8:	e014      	b.n	800eaf4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eaca:	f7fa faa1 	bl	8009010 <HAL_GetTick>
 800eace:	4602      	mov	r2, r0
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ead8:	4293      	cmp	r3, r2
 800eada:	d90b      	bls.n	800eaf4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800eadc:	2303      	movs	r3, #3
 800eade:	e03f      	b.n	800eb60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800eae0:	42470068 	.word	0x42470068
 800eae4:	40023800 	.word	0x40023800
 800eae8:	42470070 	.word	0x42470070
 800eaec:	40007000 	.word	0x40007000
 800eaf0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eaf4:	4b1c      	ldr	r3, [pc, #112]	; (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800eaf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaf8:	f003 0302 	and.w	r3, r3, #2
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d0e4      	beq.n	800eaca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb0c:	d10d      	bne.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800eb0e:	4b16      	ldr	r3, [pc, #88]	; (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eb1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb22:	4911      	ldr	r1, [pc, #68]	; (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800eb24:	4313      	orrs	r3, r2
 800eb26:	608b      	str	r3, [r1, #8]
 800eb28:	e005      	b.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800eb2a:	4b0f      	ldr	r3, [pc, #60]	; (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	4a0e      	ldr	r2, [pc, #56]	; (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800eb30:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800eb34:	6093      	str	r3, [r2, #8]
 800eb36:	4b0c      	ldr	r3, [pc, #48]	; (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800eb38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb42:	4909      	ldr	r1, [pc, #36]	; (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800eb44:	4313      	orrs	r3, r2
 800eb46:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f003 0310 	and.w	r3, r3, #16
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d004      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800eb5a:	4b04      	ldr	r3, [pc, #16]	; (800eb6c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800eb5c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800eb5e:	2300      	movs	r3, #0
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	40023800 	.word	0x40023800
 800eb6c:	424711e0 	.word	0x424711e0

0800eb70 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d101      	bne.n	800eb84 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800eb80:	2301      	movs	r3, #1
 800eb82:	e025      	b.n	800ebd0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d106      	bne.n	800eb9e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7f8 f967 	bl	8006e6c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2202      	movs	r2, #2
 800eba2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	3304      	adds	r3, #4
 800ebae:	4619      	mov	r1, r3
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	f001 fb7d 	bl	80102b0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6818      	ldr	r0, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	f001 fbe8 	bl	8010396 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2201      	movs	r2, #1
 800ebca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <HAL_SDRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b087      	sub	sp, #28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
 800ebe4:	603b      	str	r3, [r7, #0]
  __IO uint16_t *pSdramAddress = (uint16_t *)pAddress;
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d101      	bne.n	800ebf8 <HAL_SDRAM_Read_16b+0x20>
 800ebf4:	2302      	movs	r3, #2
 800ebf6:	e029      	b.n	800ec4c <HAL_SDRAM_Read_16b+0x74>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d101      	bne.n	800ec10 <HAL_SDRAM_Read_16b+0x38>
  {
    return HAL_BUSY;
 800ec0c:	2302      	movs	r3, #2
 800ec0e:	e01d      	b.n	800ec4c <HAL_SDRAM_Read_16b+0x74>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b05      	cmp	r3, #5
 800ec1a:	d10f      	bne.n	800ec3c <HAL_SDRAM_Read_16b+0x64>
  {
    return  HAL_ERROR; 
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e015      	b.n	800ec4c <HAL_SDRAM_Read_16b+0x74>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0U; BufferSize--)
  {
    *pDstBuffer = *(__IO uint16_t *)pSdramAddress;  
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	881b      	ldrh	r3, [r3, #0]
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	3302      	adds	r3, #2
 800ec2e:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	3302      	adds	r3, #2
 800ec34:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	3b01      	subs	r3, #1
 800ec3a:	603b      	str	r3, [r7, #0]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1ee      	bne.n	800ec20 <HAL_SDRAM_Read_16b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 800ec4a:	2300      	movs	r3, #0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	371c      	adds	r7, #28
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <HAL_SDRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b087      	sub	sp, #28
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	607a      	str	r2, [r7, #4]
 800ec64:	603b      	str	r3, [r7, #0]
  __IO uint16_t *pSdramAddress = (uint16_t *)pAddress;
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0U;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d101      	bne.n	800ec7c <HAL_SDRAM_Write_16b+0x24>
 800ec78:	2302      	movs	r3, #2
 800ec7a:	e02a      	b.n	800ecd2 <HAL_SDRAM_Write_16b+0x7a>
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	2b02      	cmp	r3, #2
 800ec92:	d101      	bne.n	800ec98 <HAL_SDRAM_Write_16b+0x40>
  {
    return HAL_BUSY;
 800ec94:	2302      	movs	r3, #2
 800ec96:	e01c      	b.n	800ecd2 <HAL_SDRAM_Write_16b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	2b05      	cmp	r3, #5
 800ec9c:	d002      	beq.n	800eca4 <HAL_SDRAM_Write_16b+0x4c>
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	d10e      	bne.n	800ecc2 <HAL_SDRAM_Write_16b+0x6a>
  {
    return  HAL_ERROR; 
 800eca4:	2301      	movs	r3, #1
 800eca6:	e014      	b.n	800ecd2 <HAL_SDRAM_Write_16b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
  {
    *(__IO uint16_t *)pSdramAddress = *pSrcBuffer;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	881a      	ldrh	r2, [r3, #0]
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3302      	adds	r3, #2
 800ecb4:	607b      	str	r3, [r7, #4]
    pSdramAddress++;            
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	3302      	adds	r3, #2
 800ecba:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	603b      	str	r3, [r7, #0]
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1ef      	bne.n	800eca8 <HAL_SDRAM_Write_16b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;   
 800ecd0:	2300      	movs	r3, #0
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	371c      	adds	r7, #28
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr

0800ecde <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b084      	sub	sp, #16
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	60f8      	str	r0, [r7, #12]
 800ece6:	60b9      	str	r1, [r7, #8]
 800ece8:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	2b02      	cmp	r3, #2
 800ecf4:	d101      	bne.n	800ecfa <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800ecf6:	2302      	movs	r3, #2
 800ecf8:	e018      	b.n	800ed2c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2202      	movs	r2, #2
 800ecfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	68b9      	ldr	r1, [r7, #8]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f001 fbc2 	bl	8010494 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b02      	cmp	r3, #2
 800ed16:	d104      	bne.n	800ed22 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2205      	movs	r2, #5
 800ed1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800ed20:	e003      	b.n	800ed2a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2201      	movs	r2, #1
 800ed26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800ed2a:	2300      	movs	r3, #0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3710      	adds	r7, #16
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	d101      	bne.n	800ed4e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ed4a:	2302      	movs	r3, #2
 800ed4c:	e00e      	b.n	800ed6c <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2202      	movs	r2, #2
 800ed52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	6839      	ldr	r1, [r7, #0]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f001 fbd5 	bl	801050c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2201      	movs	r2, #1
 800ed66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3708      	adds	r7, #8
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <HAL_SDRAM_GetState>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL state
  */
HAL_SDRAM_StateTypeDef HAL_SDRAM_GetState(SDRAM_HandleTypeDef *hsdram)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  return hsdram->State;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ed82:	b2db      	uxtb	r3, r3
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d101      	bne.n	800eda2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e07b      	b.n	800ee9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d108      	bne.n	800edbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800edb2:	d009      	beq.n	800edc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	61da      	str	r2, [r3, #28]
 800edba:	e005      	b.n	800edc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d106      	bne.n	800ede8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7f7 fee4 	bl	8006bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2202      	movs	r2, #2
 800edec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800edfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ee10:	431a      	orrs	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee1a:	431a      	orrs	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	f003 0302 	and.w	r3, r3, #2
 800ee24:	431a      	orrs	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	695b      	ldr	r3, [r3, #20]
 800ee2a:	f003 0301 	and.w	r3, r3, #1
 800ee2e:	431a      	orrs	r2, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	699b      	ldr	r3, [r3, #24]
 800ee34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee38:	431a      	orrs	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	69db      	ldr	r3, [r3, #28]
 800ee3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee42:	431a      	orrs	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a1b      	ldr	r3, [r3, #32]
 800ee48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee4c:	ea42 0103 	orr.w	r1, r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	430a      	orrs	r2, r1
 800ee5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	699b      	ldr	r3, [r3, #24]
 800ee64:	0c1b      	lsrs	r3, r3, #16
 800ee66:	f003 0104 	and.w	r1, r3, #4
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6e:	f003 0210 	and.w	r2, r3, #16
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	430a      	orrs	r2, r1
 800ee78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	69da      	ldr	r2, [r3, #28]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ee98:	2300      	movs	r3, #0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3708      	adds	r7, #8
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}

0800eea2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eea2:	b580      	push	{r7, lr}
 800eea4:	b088      	sub	sp, #32
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	60f8      	str	r0, [r7, #12]
 800eeaa:	60b9      	str	r1, [r7, #8]
 800eeac:	603b      	str	r3, [r7, #0]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d101      	bne.n	800eec4 <HAL_SPI_Transmit+0x22>
 800eec0:	2302      	movs	r3, #2
 800eec2:	e126      	b.n	800f112 <HAL_SPI_Transmit+0x270>
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2201      	movs	r2, #1
 800eec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eecc:	f7fa f8a0 	bl	8009010 <HAL_GetTick>
 800eed0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800eed2:	88fb      	ldrh	r3, [r7, #6]
 800eed4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d002      	beq.n	800eee8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800eee2:	2302      	movs	r3, #2
 800eee4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eee6:	e10b      	b.n	800f100 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d002      	beq.n	800eef4 <HAL_SPI_Transmit+0x52>
 800eeee:	88fb      	ldrh	r3, [r7, #6]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d102      	bne.n	800eefa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800eef4:	2301      	movs	r3, #1
 800eef6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eef8:	e102      	b.n	800f100 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2203      	movs	r2, #3
 800eefe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2200      	movs	r2, #0
 800ef06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	88fa      	ldrh	r2, [r7, #6]
 800ef12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	88fa      	ldrh	r2, [r7, #6]
 800ef18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2200      	movs	r2, #0
 800ef24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2200      	movs	r2, #0
 800ef36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef40:	d10f      	bne.n	800ef62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef6c:	2b40      	cmp	r3, #64	; 0x40
 800ef6e:	d007      	beq.n	800ef80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	68db      	ldr	r3, [r3, #12]
 800ef84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef88:	d14b      	bne.n	800f022 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d002      	beq.n	800ef98 <HAL_SPI_Transmit+0xf6>
 800ef92:	8afb      	ldrh	r3, [r7, #22]
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d13e      	bne.n	800f016 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef9c:	881a      	ldrh	r2, [r3, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa8:	1c9a      	adds	r2, r3, #2
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	3b01      	subs	r3, #1
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800efbc:	e02b      	b.n	800f016 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	f003 0302 	and.w	r3, r3, #2
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d112      	bne.n	800eff2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efd0:	881a      	ldrh	r2, [r3, #0]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efdc:	1c9a      	adds	r2, r3, #2
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	3b01      	subs	r3, #1
 800efea:	b29a      	uxth	r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	86da      	strh	r2, [r3, #54]	; 0x36
 800eff0:	e011      	b.n	800f016 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eff2:	f7fa f80d 	bl	8009010 <HAL_GetTick>
 800eff6:	4602      	mov	r2, r0
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	1ad3      	subs	r3, r2, r3
 800effc:	683a      	ldr	r2, [r7, #0]
 800effe:	429a      	cmp	r2, r3
 800f000:	d803      	bhi.n	800f00a <HAL_SPI_Transmit+0x168>
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f008:	d102      	bne.n	800f010 <HAL_SPI_Transmit+0x16e>
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d102      	bne.n	800f016 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800f010:	2303      	movs	r3, #3
 800f012:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f014:	e074      	b.n	800f100 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1ce      	bne.n	800efbe <HAL_SPI_Transmit+0x11c>
 800f020:	e04c      	b.n	800f0bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d002      	beq.n	800f030 <HAL_SPI_Transmit+0x18e>
 800f02a:	8afb      	ldrh	r3, [r7, #22]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d140      	bne.n	800f0b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	330c      	adds	r3, #12
 800f03a:	7812      	ldrb	r2, [r2, #0]
 800f03c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	3b01      	subs	r3, #1
 800f050:	b29a      	uxth	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f056:	e02c      	b.n	800f0b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	f003 0302 	and.w	r3, r3, #2
 800f062:	2b02      	cmp	r3, #2
 800f064:	d113      	bne.n	800f08e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	330c      	adds	r3, #12
 800f070:	7812      	ldrb	r2, [r2, #0]
 800f072:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f078:	1c5a      	adds	r2, r3, #1
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f082:	b29b      	uxth	r3, r3
 800f084:	3b01      	subs	r3, #1
 800f086:	b29a      	uxth	r2, r3
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	86da      	strh	r2, [r3, #54]	; 0x36
 800f08c:	e011      	b.n	800f0b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f08e:	f7f9 ffbf 	bl	8009010 <HAL_GetTick>
 800f092:	4602      	mov	r2, r0
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	683a      	ldr	r2, [r7, #0]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d803      	bhi.n	800f0a6 <HAL_SPI_Transmit+0x204>
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a4:	d102      	bne.n	800f0ac <HAL_SPI_Transmit+0x20a>
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d102      	bne.n	800f0b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800f0ac:	2303      	movs	r3, #3
 800f0ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f0b0:	e026      	b.n	800f100 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d1cd      	bne.n	800f058 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f0bc:	69ba      	ldr	r2, [r7, #24]
 800f0be:	6839      	ldr	r1, [r7, #0]
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f000 f8b3 	bl	800f22c <SPI_EndRxTxTransaction>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d002      	beq.n	800f0d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2220      	movs	r2, #32
 800f0d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10a      	bne.n	800f0f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f0da:	2300      	movs	r3, #0
 800f0dc:	613b      	str	r3, [r7, #16]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	613b      	str	r3, [r7, #16]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	613b      	str	r3, [r7, #16]
 800f0ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d002      	beq.n	800f0fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	77fb      	strb	r3, [r7, #31]
 800f0fc:	e000      	b.n	800f100 <HAL_SPI_Transmit+0x25e>
  }

error:
 800f0fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2201      	movs	r2, #1
 800f104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2200      	movs	r2, #0
 800f10c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f110:	7ffb      	ldrb	r3, [r7, #31]
}
 800f112:	4618      	mov	r0, r3
 800f114:	3720      	adds	r7, #32
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
	...

0800f11c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b088      	sub	sp, #32
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	603b      	str	r3, [r7, #0]
 800f128:	4613      	mov	r3, r2
 800f12a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f12c:	f7f9 ff70 	bl	8009010 <HAL_GetTick>
 800f130:	4602      	mov	r2, r0
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	1a9b      	subs	r3, r3, r2
 800f136:	683a      	ldr	r2, [r7, #0]
 800f138:	4413      	add	r3, r2
 800f13a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f13c:	f7f9 ff68 	bl	8009010 <HAL_GetTick>
 800f140:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f142:	4b39      	ldr	r3, [pc, #228]	; (800f228 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	015b      	lsls	r3, r3, #5
 800f148:	0d1b      	lsrs	r3, r3, #20
 800f14a:	69fa      	ldr	r2, [r7, #28]
 800f14c:	fb02 f303 	mul.w	r3, r2, r3
 800f150:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f152:	e054      	b.n	800f1fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f15a:	d050      	beq.n	800f1fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f15c:	f7f9 ff58 	bl	8009010 <HAL_GetTick>
 800f160:	4602      	mov	r2, r0
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	69fa      	ldr	r2, [r7, #28]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d902      	bls.n	800f172 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d13d      	bne.n	800f1ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	685a      	ldr	r2, [r3, #4]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f180:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f18a:	d111      	bne.n	800f1b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f194:	d004      	beq.n	800f1a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f19e:	d107      	bne.n	800f1b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f1ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1b8:	d10f      	bne.n	800f1da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f1d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2201      	movs	r2, #1
 800f1de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f1ea:	2303      	movs	r3, #3
 800f1ec:	e017      	b.n	800f21e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d101      	bne.n	800f1f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	689a      	ldr	r2, [r3, #8]
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	4013      	ands	r3, r2
 800f208:	68ba      	ldr	r2, [r7, #8]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	bf0c      	ite	eq
 800f20e:	2301      	moveq	r3, #1
 800f210:	2300      	movne	r3, #0
 800f212:	b2db      	uxtb	r3, r3
 800f214:	461a      	mov	r2, r3
 800f216:	79fb      	ldrb	r3, [r7, #7]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d19b      	bne.n	800f154 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3720      	adds	r7, #32
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	20000044 	.word	0x20000044

0800f22c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b088      	sub	sp, #32
 800f230:	af02      	add	r7, sp, #8
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f238:	4b1b      	ldr	r3, [pc, #108]	; (800f2a8 <SPI_EndRxTxTransaction+0x7c>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4a1b      	ldr	r2, [pc, #108]	; (800f2ac <SPI_EndRxTxTransaction+0x80>)
 800f23e:	fba2 2303 	umull	r2, r3, r2, r3
 800f242:	0d5b      	lsrs	r3, r3, #21
 800f244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f248:	fb02 f303 	mul.w	r3, r2, r3
 800f24c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f256:	d112      	bne.n	800f27e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	2200      	movs	r2, #0
 800f260:	2180      	movs	r1, #128	; 0x80
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f7ff ff5a 	bl	800f11c <SPI_WaitFlagStateUntilTimeout>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d016      	beq.n	800f29c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f272:	f043 0220 	orr.w	r2, r3, #32
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f27a:	2303      	movs	r3, #3
 800f27c:	e00f      	b.n	800f29e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d00a      	beq.n	800f29a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	3b01      	subs	r3, #1
 800f288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f294:	2b80      	cmp	r3, #128	; 0x80
 800f296:	d0f2      	beq.n	800f27e <SPI_EndRxTxTransaction+0x52>
 800f298:	e000      	b.n	800f29c <SPI_EndRxTxTransaction+0x70>
        break;
 800f29a:	bf00      	nop
  }

  return HAL_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3718      	adds	r7, #24
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	20000044 	.word	0x20000044
 800f2ac:	165e9f81 	.word	0x165e9f81

0800f2b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d101      	bne.n	800f2c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e041      	b.n	800f346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d106      	bne.n	800f2dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7f7 fcb2 	bl	8006c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2202      	movs	r2, #2
 800f2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	3304      	adds	r3, #4
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	4610      	mov	r0, r2
 800f2f0:	f000 fb04 	bl	800f8fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2201      	movs	r2, #1
 800f300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2201      	movs	r2, #1
 800f310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2201      	movs	r2, #1
 800f320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f344:	2300      	movs	r3, #0
}
 800f346:	4618      	mov	r0, r3
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
	...

0800f350 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f350:	b480      	push	{r7}
 800f352:	b085      	sub	sp, #20
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	2b01      	cmp	r3, #1
 800f362:	d001      	beq.n	800f368 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f364:	2301      	movs	r3, #1
 800f366:	e046      	b.n	800f3f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2202      	movs	r2, #2
 800f36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a23      	ldr	r2, [pc, #140]	; (800f404 <HAL_TIM_Base_Start+0xb4>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d022      	beq.n	800f3c0 <HAL_TIM_Base_Start+0x70>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f382:	d01d      	beq.n	800f3c0 <HAL_TIM_Base_Start+0x70>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a1f      	ldr	r2, [pc, #124]	; (800f408 <HAL_TIM_Base_Start+0xb8>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d018      	beq.n	800f3c0 <HAL_TIM_Base_Start+0x70>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a1e      	ldr	r2, [pc, #120]	; (800f40c <HAL_TIM_Base_Start+0xbc>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d013      	beq.n	800f3c0 <HAL_TIM_Base_Start+0x70>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a1c      	ldr	r2, [pc, #112]	; (800f410 <HAL_TIM_Base_Start+0xc0>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d00e      	beq.n	800f3c0 <HAL_TIM_Base_Start+0x70>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a1b      	ldr	r2, [pc, #108]	; (800f414 <HAL_TIM_Base_Start+0xc4>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d009      	beq.n	800f3c0 <HAL_TIM_Base_Start+0x70>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a19      	ldr	r2, [pc, #100]	; (800f418 <HAL_TIM_Base_Start+0xc8>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d004      	beq.n	800f3c0 <HAL_TIM_Base_Start+0x70>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a18      	ldr	r2, [pc, #96]	; (800f41c <HAL_TIM_Base_Start+0xcc>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d111      	bne.n	800f3e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	f003 0307 	and.w	r3, r3, #7
 800f3ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2b06      	cmp	r3, #6
 800f3d0:	d010      	beq.n	800f3f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f042 0201 	orr.w	r2, r2, #1
 800f3e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3e2:	e007      	b.n	800f3f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f042 0201 	orr.w	r2, r2, #1
 800f3f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3714      	adds	r7, #20
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	40010000 	.word	0x40010000
 800f408:	40000400 	.word	0x40000400
 800f40c:	40000800 	.word	0x40000800
 800f410:	40000c00 	.word	0x40000c00
 800f414:	40010400 	.word	0x40010400
 800f418:	40014000 	.word	0x40014000
 800f41c:	40001800 	.word	0x40001800

0800f420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f420:	b480      	push	{r7}
 800f422:	b085      	sub	sp, #20
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	2b01      	cmp	r3, #1
 800f432:	d001      	beq.n	800f438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f434:	2301      	movs	r3, #1
 800f436:	e04e      	b.n	800f4d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2202      	movs	r2, #2
 800f43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	68da      	ldr	r2, [r3, #12]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f042 0201 	orr.w	r2, r2, #1
 800f44e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4a23      	ldr	r2, [pc, #140]	; (800f4e4 <HAL_TIM_Base_Start_IT+0xc4>)
 800f456:	4293      	cmp	r3, r2
 800f458:	d022      	beq.n	800f4a0 <HAL_TIM_Base_Start_IT+0x80>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f462:	d01d      	beq.n	800f4a0 <HAL_TIM_Base_Start_IT+0x80>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	4a1f      	ldr	r2, [pc, #124]	; (800f4e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d018      	beq.n	800f4a0 <HAL_TIM_Base_Start_IT+0x80>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a1e      	ldr	r2, [pc, #120]	; (800f4ec <HAL_TIM_Base_Start_IT+0xcc>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d013      	beq.n	800f4a0 <HAL_TIM_Base_Start_IT+0x80>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a1c      	ldr	r2, [pc, #112]	; (800f4f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d00e      	beq.n	800f4a0 <HAL_TIM_Base_Start_IT+0x80>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a1b      	ldr	r2, [pc, #108]	; (800f4f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d009      	beq.n	800f4a0 <HAL_TIM_Base_Start_IT+0x80>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	4a19      	ldr	r2, [pc, #100]	; (800f4f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d004      	beq.n	800f4a0 <HAL_TIM_Base_Start_IT+0x80>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a18      	ldr	r2, [pc, #96]	; (800f4fc <HAL_TIM_Base_Start_IT+0xdc>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d111      	bne.n	800f4c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	f003 0307 	and.w	r3, r3, #7
 800f4aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2b06      	cmp	r3, #6
 800f4b0:	d010      	beq.n	800f4d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f042 0201 	orr.w	r2, r2, #1
 800f4c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4c2:	e007      	b.n	800f4d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f042 0201 	orr.w	r2, r2, #1
 800f4d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3714      	adds	r7, #20
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop
 800f4e4:	40010000 	.word	0x40010000
 800f4e8:	40000400 	.word	0x40000400
 800f4ec:	40000800 	.word	0x40000800
 800f4f0:	40000c00 	.word	0x40000c00
 800f4f4:	40010400 	.word	0x40010400
 800f4f8:	40014000 	.word	0x40014000
 800f4fc:	40001800 	.word	0x40001800

0800f500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	691b      	ldr	r3, [r3, #16]
 800f50e:	f003 0302 	and.w	r3, r3, #2
 800f512:	2b02      	cmp	r3, #2
 800f514:	d122      	bne.n	800f55c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	f003 0302 	and.w	r3, r3, #2
 800f520:	2b02      	cmp	r3, #2
 800f522:	d11b      	bne.n	800f55c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f06f 0202 	mvn.w	r2, #2
 800f52c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2201      	movs	r2, #1
 800f532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	f003 0303 	and.w	r3, r3, #3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d003      	beq.n	800f54a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 f9bc 	bl	800f8c0 <HAL_TIM_IC_CaptureCallback>
 800f548:	e005      	b.n	800f556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 f9ae 	bl	800f8ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 f9bf 	bl	800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	f003 0304 	and.w	r3, r3, #4
 800f566:	2b04      	cmp	r3, #4
 800f568:	d122      	bne.n	800f5b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	f003 0304 	and.w	r3, r3, #4
 800f574:	2b04      	cmp	r3, #4
 800f576:	d11b      	bne.n	800f5b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f06f 0204 	mvn.w	r2, #4
 800f580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2202      	movs	r2, #2
 800f586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	699b      	ldr	r3, [r3, #24]
 800f58e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f592:	2b00      	cmp	r3, #0
 800f594:	d003      	beq.n	800f59e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 f992 	bl	800f8c0 <HAL_TIM_IC_CaptureCallback>
 800f59c:	e005      	b.n	800f5aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 f984 	bl	800f8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f000 f995 	bl	800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	691b      	ldr	r3, [r3, #16]
 800f5b6:	f003 0308 	and.w	r3, r3, #8
 800f5ba:	2b08      	cmp	r3, #8
 800f5bc:	d122      	bne.n	800f604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	f003 0308 	and.w	r3, r3, #8
 800f5c8:	2b08      	cmp	r3, #8
 800f5ca:	d11b      	bne.n	800f604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f06f 0208 	mvn.w	r2, #8
 800f5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2204      	movs	r2, #4
 800f5da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	69db      	ldr	r3, [r3, #28]
 800f5e2:	f003 0303 	and.w	r3, r3, #3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d003      	beq.n	800f5f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 f968 	bl	800f8c0 <HAL_TIM_IC_CaptureCallback>
 800f5f0:	e005      	b.n	800f5fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 f95a 	bl	800f8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f000 f96b 	bl	800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	691b      	ldr	r3, [r3, #16]
 800f60a:	f003 0310 	and.w	r3, r3, #16
 800f60e:	2b10      	cmp	r3, #16
 800f610:	d122      	bne.n	800f658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	f003 0310 	and.w	r3, r3, #16
 800f61c:	2b10      	cmp	r3, #16
 800f61e:	d11b      	bne.n	800f658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f06f 0210 	mvn.w	r2, #16
 800f628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2208      	movs	r2, #8
 800f62e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	69db      	ldr	r3, [r3, #28]
 800f636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d003      	beq.n	800f646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 f93e 	bl	800f8c0 <HAL_TIM_IC_CaptureCallback>
 800f644:	e005      	b.n	800f652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 f930 	bl	800f8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 f941 	bl	800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2200      	movs	r2, #0
 800f656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	691b      	ldr	r3, [r3, #16]
 800f65e:	f003 0301 	and.w	r3, r3, #1
 800f662:	2b01      	cmp	r3, #1
 800f664:	d10e      	bne.n	800f684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	f003 0301 	and.w	r3, r3, #1
 800f670:	2b01      	cmp	r3, #1
 800f672:	d107      	bne.n	800f684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f06f 0201 	mvn.w	r2, #1
 800f67c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 f90a 	bl	800f898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f68e:	2b80      	cmp	r3, #128	; 0x80
 800f690:	d10e      	bne.n	800f6b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f69c:	2b80      	cmp	r3, #128	; 0x80
 800f69e:	d107      	bne.n	800f6b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 fae6 	bl	800fc7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6ba:	2b40      	cmp	r3, #64	; 0x40
 800f6bc:	d10e      	bne.n	800f6dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6c8:	2b40      	cmp	r3, #64	; 0x40
 800f6ca:	d107      	bne.n	800f6dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f6d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 f906 	bl	800f8e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	f003 0320 	and.w	r3, r3, #32
 800f6e6:	2b20      	cmp	r3, #32
 800f6e8:	d10e      	bne.n	800f708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	f003 0320 	and.w	r3, r3, #32
 800f6f4:	2b20      	cmp	r3, #32
 800f6f6:	d107      	bne.n	800f708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f06f 0220 	mvn.w	r2, #32
 800f700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fab0 	bl	800fc68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f708:	bf00      	nop
 800f70a:	3708      	adds	r7, #8
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f720:	2b01      	cmp	r3, #1
 800f722:	d101      	bne.n	800f728 <HAL_TIM_ConfigClockSource+0x18>
 800f724:	2302      	movs	r3, #2
 800f726:	e0b3      	b.n	800f890 <HAL_TIM_ConfigClockSource+0x180>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2201      	movs	r2, #1
 800f72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2202      	movs	r2, #2
 800f734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f74e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f760:	d03e      	beq.n	800f7e0 <HAL_TIM_ConfigClockSource+0xd0>
 800f762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f766:	f200 8087 	bhi.w	800f878 <HAL_TIM_ConfigClockSource+0x168>
 800f76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f76e:	f000 8085 	beq.w	800f87c <HAL_TIM_ConfigClockSource+0x16c>
 800f772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f776:	d87f      	bhi.n	800f878 <HAL_TIM_ConfigClockSource+0x168>
 800f778:	2b70      	cmp	r3, #112	; 0x70
 800f77a:	d01a      	beq.n	800f7b2 <HAL_TIM_ConfigClockSource+0xa2>
 800f77c:	2b70      	cmp	r3, #112	; 0x70
 800f77e:	d87b      	bhi.n	800f878 <HAL_TIM_ConfigClockSource+0x168>
 800f780:	2b60      	cmp	r3, #96	; 0x60
 800f782:	d050      	beq.n	800f826 <HAL_TIM_ConfigClockSource+0x116>
 800f784:	2b60      	cmp	r3, #96	; 0x60
 800f786:	d877      	bhi.n	800f878 <HAL_TIM_ConfigClockSource+0x168>
 800f788:	2b50      	cmp	r3, #80	; 0x50
 800f78a:	d03c      	beq.n	800f806 <HAL_TIM_ConfigClockSource+0xf6>
 800f78c:	2b50      	cmp	r3, #80	; 0x50
 800f78e:	d873      	bhi.n	800f878 <HAL_TIM_ConfigClockSource+0x168>
 800f790:	2b40      	cmp	r3, #64	; 0x40
 800f792:	d058      	beq.n	800f846 <HAL_TIM_ConfigClockSource+0x136>
 800f794:	2b40      	cmp	r3, #64	; 0x40
 800f796:	d86f      	bhi.n	800f878 <HAL_TIM_ConfigClockSource+0x168>
 800f798:	2b30      	cmp	r3, #48	; 0x30
 800f79a:	d064      	beq.n	800f866 <HAL_TIM_ConfigClockSource+0x156>
 800f79c:	2b30      	cmp	r3, #48	; 0x30
 800f79e:	d86b      	bhi.n	800f878 <HAL_TIM_ConfigClockSource+0x168>
 800f7a0:	2b20      	cmp	r3, #32
 800f7a2:	d060      	beq.n	800f866 <HAL_TIM_ConfigClockSource+0x156>
 800f7a4:	2b20      	cmp	r3, #32
 800f7a6:	d867      	bhi.n	800f878 <HAL_TIM_ConfigClockSource+0x168>
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d05c      	beq.n	800f866 <HAL_TIM_ConfigClockSource+0x156>
 800f7ac:	2b10      	cmp	r3, #16
 800f7ae:	d05a      	beq.n	800f866 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f7b0:	e062      	b.n	800f878 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6818      	ldr	r0, [r3, #0]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	6899      	ldr	r1, [r3, #8]
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	685a      	ldr	r2, [r3, #4]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	f000 f9b5 	bl	800fb30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	689b      	ldr	r3, [r3, #8]
 800f7cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f7d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	609a      	str	r2, [r3, #8]
      break;
 800f7de:	e04e      	b.n	800f87e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6818      	ldr	r0, [r3, #0]
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	6899      	ldr	r1, [r3, #8]
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	685a      	ldr	r2, [r3, #4]
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	f000 f99e 	bl	800fb30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	689a      	ldr	r2, [r3, #8]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f802:	609a      	str	r2, [r3, #8]
      break;
 800f804:	e03b      	b.n	800f87e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6818      	ldr	r0, [r3, #0]
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	6859      	ldr	r1, [r3, #4]
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	68db      	ldr	r3, [r3, #12]
 800f812:	461a      	mov	r2, r3
 800f814:	f000 f912 	bl	800fa3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2150      	movs	r1, #80	; 0x50
 800f81e:	4618      	mov	r0, r3
 800f820:	f000 f96b 	bl	800fafa <TIM_ITRx_SetConfig>
      break;
 800f824:	e02b      	b.n	800f87e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6818      	ldr	r0, [r3, #0]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	6859      	ldr	r1, [r3, #4]
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	461a      	mov	r2, r3
 800f834:	f000 f931 	bl	800fa9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2160      	movs	r1, #96	; 0x60
 800f83e:	4618      	mov	r0, r3
 800f840:	f000 f95b 	bl	800fafa <TIM_ITRx_SetConfig>
      break;
 800f844:	e01b      	b.n	800f87e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6818      	ldr	r0, [r3, #0]
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	6859      	ldr	r1, [r3, #4]
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	461a      	mov	r2, r3
 800f854:	f000 f8f2 	bl	800fa3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2140      	movs	r1, #64	; 0x40
 800f85e:	4618      	mov	r0, r3
 800f860:	f000 f94b 	bl	800fafa <TIM_ITRx_SetConfig>
      break;
 800f864:	e00b      	b.n	800f87e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4619      	mov	r1, r3
 800f870:	4610      	mov	r0, r2
 800f872:	f000 f942 	bl	800fafa <TIM_ITRx_SetConfig>
        break;
 800f876:	e002      	b.n	800f87e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f878:	bf00      	nop
 800f87a:	e000      	b.n	800f87e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800f87c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2201      	movs	r2, #1
 800f882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2200      	movs	r2, #0
 800f88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f88e:	2300      	movs	r3, #0
}
 800f890:	4618      	mov	r0, r3
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f8a0:	bf00      	nop
 800f8a2:	370c      	adds	r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f8b4:	bf00      	nop
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f8c8:	bf00      	nop
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f8dc:	bf00      	nop
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b085      	sub	sp, #20
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4a40      	ldr	r2, [pc, #256]	; (800fa10 <TIM_Base_SetConfig+0x114>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d013      	beq.n	800f93c <TIM_Base_SetConfig+0x40>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f91a:	d00f      	beq.n	800f93c <TIM_Base_SetConfig+0x40>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a3d      	ldr	r2, [pc, #244]	; (800fa14 <TIM_Base_SetConfig+0x118>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d00b      	beq.n	800f93c <TIM_Base_SetConfig+0x40>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a3c      	ldr	r2, [pc, #240]	; (800fa18 <TIM_Base_SetConfig+0x11c>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d007      	beq.n	800f93c <TIM_Base_SetConfig+0x40>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a3b      	ldr	r2, [pc, #236]	; (800fa1c <TIM_Base_SetConfig+0x120>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d003      	beq.n	800f93c <TIM_Base_SetConfig+0x40>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a3a      	ldr	r2, [pc, #232]	; (800fa20 <TIM_Base_SetConfig+0x124>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d108      	bne.n	800f94e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	4313      	orrs	r3, r2
 800f94c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4a2f      	ldr	r2, [pc, #188]	; (800fa10 <TIM_Base_SetConfig+0x114>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d02b      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f95c:	d027      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4a2c      	ldr	r2, [pc, #176]	; (800fa14 <TIM_Base_SetConfig+0x118>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d023      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4a2b      	ldr	r2, [pc, #172]	; (800fa18 <TIM_Base_SetConfig+0x11c>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d01f      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4a2a      	ldr	r2, [pc, #168]	; (800fa1c <TIM_Base_SetConfig+0x120>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d01b      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a29      	ldr	r2, [pc, #164]	; (800fa20 <TIM_Base_SetConfig+0x124>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d017      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4a28      	ldr	r2, [pc, #160]	; (800fa24 <TIM_Base_SetConfig+0x128>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d013      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4a27      	ldr	r2, [pc, #156]	; (800fa28 <TIM_Base_SetConfig+0x12c>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d00f      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a26      	ldr	r2, [pc, #152]	; (800fa2c <TIM_Base_SetConfig+0x130>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d00b      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4a25      	ldr	r2, [pc, #148]	; (800fa30 <TIM_Base_SetConfig+0x134>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d007      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4a24      	ldr	r2, [pc, #144]	; (800fa34 <TIM_Base_SetConfig+0x138>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d003      	beq.n	800f9ae <TIM_Base_SetConfig+0xb2>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4a23      	ldr	r2, [pc, #140]	; (800fa38 <TIM_Base_SetConfig+0x13c>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d108      	bne.n	800f9c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	68fa      	ldr	r2, [r7, #12]
 800f9bc:	4313      	orrs	r3, r2
 800f9be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	695b      	ldr	r3, [r3, #20]
 800f9ca:	4313      	orrs	r3, r2
 800f9cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	689a      	ldr	r2, [r3, #8]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	681a      	ldr	r2, [r3, #0]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4a0a      	ldr	r2, [pc, #40]	; (800fa10 <TIM_Base_SetConfig+0x114>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d003      	beq.n	800f9f4 <TIM_Base_SetConfig+0xf8>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	4a0c      	ldr	r2, [pc, #48]	; (800fa20 <TIM_Base_SetConfig+0x124>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d103      	bne.n	800f9fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	691a      	ldr	r2, [r3, #16]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	615a      	str	r2, [r3, #20]
}
 800fa02:	bf00      	nop
 800fa04:	3714      	adds	r7, #20
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr
 800fa0e:	bf00      	nop
 800fa10:	40010000 	.word	0x40010000
 800fa14:	40000400 	.word	0x40000400
 800fa18:	40000800 	.word	0x40000800
 800fa1c:	40000c00 	.word	0x40000c00
 800fa20:	40010400 	.word	0x40010400
 800fa24:	40014000 	.word	0x40014000
 800fa28:	40014400 	.word	0x40014400
 800fa2c:	40014800 	.word	0x40014800
 800fa30:	40001800 	.word	0x40001800
 800fa34:	40001c00 	.word	0x40001c00
 800fa38:	40002000 	.word	0x40002000

0800fa3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b087      	sub	sp, #28
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6a1b      	ldr	r3, [r3, #32]
 800fa4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6a1b      	ldr	r3, [r3, #32]
 800fa52:	f023 0201 	bic.w	r2, r3, #1
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	699b      	ldr	r3, [r3, #24]
 800fa5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	011b      	lsls	r3, r3, #4
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	f023 030a 	bic.w	r3, r3, #10
 800fa78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa7a:	697a      	ldr	r2, [r7, #20]
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	4313      	orrs	r3, r2
 800fa80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	693a      	ldr	r2, [r7, #16]
 800fa86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	697a      	ldr	r2, [r7, #20]
 800fa8c:	621a      	str	r2, [r3, #32]
}
 800fa8e:	bf00      	nop
 800fa90:	371c      	adds	r7, #28
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa9a:	b480      	push	{r7}
 800fa9c:	b087      	sub	sp, #28
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	60f8      	str	r0, [r7, #12]
 800faa2:	60b9      	str	r1, [r7, #8]
 800faa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6a1b      	ldr	r3, [r3, #32]
 800faaa:	f023 0210 	bic.w	r2, r3, #16
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	699b      	ldr	r3, [r3, #24]
 800fab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6a1b      	ldr	r3, [r3, #32]
 800fabc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	031b      	lsls	r3, r3, #12
 800faca:	697a      	ldr	r2, [r7, #20]
 800facc:	4313      	orrs	r3, r2
 800face:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fad6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	011b      	lsls	r3, r3, #4
 800fadc:	693a      	ldr	r2, [r7, #16]
 800fade:	4313      	orrs	r3, r2
 800fae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	697a      	ldr	r2, [r7, #20]
 800fae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	693a      	ldr	r2, [r7, #16]
 800faec:	621a      	str	r2, [r3, #32]
}
 800faee:	bf00      	nop
 800faf0:	371c      	adds	r7, #28
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr

0800fafa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fafa:	b480      	push	{r7}
 800fafc:	b085      	sub	sp, #20
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
 800fb02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	689b      	ldr	r3, [r3, #8]
 800fb08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb12:	683a      	ldr	r2, [r7, #0]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	4313      	orrs	r3, r2
 800fb18:	f043 0307 	orr.w	r3, r3, #7
 800fb1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	68fa      	ldr	r2, [r7, #12]
 800fb22:	609a      	str	r2, [r3, #8]
}
 800fb24:	bf00      	nop
 800fb26:	3714      	adds	r7, #20
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b087      	sub	sp, #28
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
 800fb3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	689b      	ldr	r3, [r3, #8]
 800fb42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fb4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	021a      	lsls	r2, r3, #8
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	431a      	orrs	r2, r3
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	697a      	ldr	r2, [r7, #20]
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	697a      	ldr	r2, [r7, #20]
 800fb62:	609a      	str	r2, [r3, #8]
}
 800fb64:	bf00      	nop
 800fb66:	371c      	adds	r7, #28
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr

0800fb70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d101      	bne.n	800fb88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb84:	2302      	movs	r3, #2
 800fb86:	e05a      	b.n	800fc3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2202      	movs	r2, #2
 800fb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	689b      	ldr	r3, [r3, #8]
 800fba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4a21      	ldr	r2, [pc, #132]	; (800fc4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d022      	beq.n	800fc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbd4:	d01d      	beq.n	800fc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4a1d      	ldr	r2, [pc, #116]	; (800fc50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d018      	beq.n	800fc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4a1b      	ldr	r2, [pc, #108]	; (800fc54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d013      	beq.n	800fc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4a1a      	ldr	r2, [pc, #104]	; (800fc58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d00e      	beq.n	800fc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4a18      	ldr	r2, [pc, #96]	; (800fc5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d009      	beq.n	800fc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	4a17      	ldr	r2, [pc, #92]	; (800fc60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d004      	beq.n	800fc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a15      	ldr	r2, [pc, #84]	; (800fc64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d10c      	bne.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	68ba      	ldr	r2, [r7, #8]
 800fc20:	4313      	orrs	r3, r2
 800fc22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	68ba      	ldr	r2, [r7, #8]
 800fc2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2201      	movs	r2, #1
 800fc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc3c:	2300      	movs	r3, #0
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3714      	adds	r7, #20
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	40010000 	.word	0x40010000
 800fc50:	40000400 	.word	0x40000400
 800fc54:	40000800 	.word	0x40000800
 800fc58:	40000c00 	.word	0x40000c00
 800fc5c:	40010400 	.word	0x40010400
 800fc60:	40014000 	.word	0x40014000
 800fc64:	40001800 	.word	0x40001800

0800fc68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d101      	bne.n	800fca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	e03f      	b.n	800fd22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d106      	bne.n	800fcbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7f6 fffe 	bl	8006cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2224      	movs	r2, #36	; 0x24
 800fcc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	68da      	ldr	r2, [r3, #12]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fcd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 f923 	bl	800ff20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	691a      	ldr	r2, [r3, #16]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	695a      	ldr	r2, [r3, #20]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fcf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	68da      	ldr	r2, [r3, #12]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fd08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2220      	movs	r2, #32
 800fd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2220      	movs	r2, #32
 800fd1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800fd20:	2300      	movs	r3, #0
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3708      	adds	r7, #8
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b08a      	sub	sp, #40	; 0x28
 800fd2e:	af02      	add	r7, sp, #8
 800fd30:	60f8      	str	r0, [r7, #12]
 800fd32:	60b9      	str	r1, [r7, #8]
 800fd34:	603b      	str	r3, [r7, #0]
 800fd36:	4613      	mov	r3, r2
 800fd38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b20      	cmp	r3, #32
 800fd48:	d17c      	bne.n	800fe44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <HAL_UART_Transmit+0x2c>
 800fd50:	88fb      	ldrh	r3, [r7, #6]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d101      	bne.n	800fd5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800fd56:	2301      	movs	r3, #1
 800fd58:	e075      	b.n	800fe46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d101      	bne.n	800fd68 <HAL_UART_Transmit+0x3e>
 800fd64:	2302      	movs	r3, #2
 800fd66:	e06e      	b.n	800fe46 <HAL_UART_Transmit+0x11c>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2200      	movs	r2, #0
 800fd74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	2221      	movs	r2, #33	; 0x21
 800fd7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fd7e:	f7f9 f947 	bl	8009010 <HAL_GetTick>
 800fd82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	88fa      	ldrh	r2, [r7, #6]
 800fd88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	88fa      	ldrh	r2, [r7, #6]
 800fd8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	689b      	ldr	r3, [r3, #8]
 800fd94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd98:	d108      	bne.n	800fdac <HAL_UART_Transmit+0x82>
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	691b      	ldr	r3, [r3, #16]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d104      	bne.n	800fdac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800fda2:	2300      	movs	r3, #0
 800fda4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	61bb      	str	r3, [r7, #24]
 800fdaa:	e003      	b.n	800fdb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800fdbc:	e02a      	b.n	800fe14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	2180      	movs	r1, #128	; 0x80
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f000 f85e 	bl	800fe8a <UART_WaitOnFlagUntilTimeout>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800fdd4:	2303      	movs	r3, #3
 800fdd6:	e036      	b.n	800fe46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10b      	bne.n	800fdf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	881b      	ldrh	r3, [r3, #0]
 800fde2:	461a      	mov	r2, r3
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fdec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800fdee:	69bb      	ldr	r3, [r7, #24]
 800fdf0:	3302      	adds	r3, #2
 800fdf2:	61bb      	str	r3, [r7, #24]
 800fdf4:	e007      	b.n	800fe06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	781a      	ldrb	r2, [r3, #0]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	3301      	adds	r3, #1
 800fe04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	b29a      	uxth	r2, r3
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d1cf      	bne.n	800fdbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	9300      	str	r3, [sp, #0]
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	2200      	movs	r2, #0
 800fe26:	2140      	movs	r1, #64	; 0x40
 800fe28:	68f8      	ldr	r0, [r7, #12]
 800fe2a:	f000 f82e 	bl	800fe8a <UART_WaitOnFlagUntilTimeout>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d001      	beq.n	800fe38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800fe34:	2303      	movs	r3, #3
 800fe36:	e006      	b.n	800fe46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2220      	movs	r2, #32
 800fe3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	e000      	b.n	800fe46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800fe44:	2302      	movs	r3, #2
  }
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3720      	adds	r7, #32
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800fe4e:	b480      	push	{r7}
 800fe50:	b085      	sub	sp, #20
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800fe56:	2300      	movs	r3, #0
 800fe58:	60fb      	str	r3, [r7, #12]
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe6e:	b2db      	uxtb	r3, r3
 800fe70:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	b2da      	uxtb	r2, r3
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	b2db      	uxtb	r3, r3
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3714      	adds	r7, #20
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr

0800fe8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b084      	sub	sp, #16
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	60f8      	str	r0, [r7, #12]
 800fe92:	60b9      	str	r1, [r7, #8]
 800fe94:	603b      	str	r3, [r7, #0]
 800fe96:	4613      	mov	r3, r2
 800fe98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe9a:	e02c      	b.n	800fef6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea2:	d028      	beq.n	800fef6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d007      	beq.n	800feba <UART_WaitOnFlagUntilTimeout+0x30>
 800feaa:	f7f9 f8b1 	bl	8009010 <HAL_GetTick>
 800feae:	4602      	mov	r2, r0
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	1ad3      	subs	r3, r2, r3
 800feb4:	69ba      	ldr	r2, [r7, #24]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d21d      	bcs.n	800fef6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68da      	ldr	r2, [r3, #12]
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fec8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	695a      	ldr	r2, [r3, #20]
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f022 0201 	bic.w	r2, r2, #1
 800fed8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2220      	movs	r2, #32
 800fede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2220      	movs	r2, #32
 800fee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2200      	movs	r2, #0
 800feee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800fef2:	2303      	movs	r3, #3
 800fef4:	e00f      	b.n	800ff16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	4013      	ands	r3, r2
 800ff00:	68ba      	ldr	r2, [r7, #8]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	bf0c      	ite	eq
 800ff06:	2301      	moveq	r3, #1
 800ff08:	2300      	movne	r3, #0
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d0c3      	beq.n	800fe9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ff14:	2300      	movs	r3, #0
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3710      	adds	r7, #16
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
	...

0800ff20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff24:	b09f      	sub	sp, #124	; 0x7c
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	691b      	ldr	r3, [r3, #16]
 800ff30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ff34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff36:	68d9      	ldr	r1, [r3, #12]
 800ff38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	ea40 0301 	orr.w	r3, r0, r1
 800ff40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ff42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff44:	689a      	ldr	r2, [r3, #8]
 800ff46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff48:	691b      	ldr	r3, [r3, #16]
 800ff4a:	431a      	orrs	r2, r3
 800ff4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff4e:	695b      	ldr	r3, [r3, #20]
 800ff50:	431a      	orrs	r2, r3
 800ff52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff54:	69db      	ldr	r3, [r3, #28]
 800ff56:	4313      	orrs	r3, r2
 800ff58:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ff5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ff64:	f021 010c 	bic.w	r1, r1, #12
 800ff68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ff6e:	430b      	orrs	r3, r1
 800ff70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ff72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	695b      	ldr	r3, [r3, #20]
 800ff78:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ff7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff7e:	6999      	ldr	r1, [r3, #24]
 800ff80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff82:	681a      	ldr	r2, [r3, #0]
 800ff84:	ea40 0301 	orr.w	r3, r0, r1
 800ff88:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ff8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	4bc5      	ldr	r3, [pc, #788]	; (80102a4 <UART_SetConfig+0x384>)
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d004      	beq.n	800ff9e <UART_SetConfig+0x7e>
 800ff94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	4bc3      	ldr	r3, [pc, #780]	; (80102a8 <UART_SetConfig+0x388>)
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d103      	bne.n	800ffa6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ff9e:	f7fe fbf9 	bl	800e794 <HAL_RCC_GetPCLK2Freq>
 800ffa2:	6778      	str	r0, [r7, #116]	; 0x74
 800ffa4:	e002      	b.n	800ffac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ffa6:	f7fe fbe1 	bl	800e76c <HAL_RCC_GetPCLK1Freq>
 800ffaa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ffac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffae:	69db      	ldr	r3, [r3, #28]
 800ffb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffb4:	f040 80b6 	bne.w	8010124 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ffb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ffba:	461c      	mov	r4, r3
 800ffbc:	f04f 0500 	mov.w	r5, #0
 800ffc0:	4622      	mov	r2, r4
 800ffc2:	462b      	mov	r3, r5
 800ffc4:	1891      	adds	r1, r2, r2
 800ffc6:	6439      	str	r1, [r7, #64]	; 0x40
 800ffc8:	415b      	adcs	r3, r3
 800ffca:	647b      	str	r3, [r7, #68]	; 0x44
 800ffcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ffd0:	1912      	adds	r2, r2, r4
 800ffd2:	eb45 0303 	adc.w	r3, r5, r3
 800ffd6:	f04f 0000 	mov.w	r0, #0
 800ffda:	f04f 0100 	mov.w	r1, #0
 800ffde:	00d9      	lsls	r1, r3, #3
 800ffe0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ffe4:	00d0      	lsls	r0, r2, #3
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	460b      	mov	r3, r1
 800ffea:	1911      	adds	r1, r2, r4
 800ffec:	6639      	str	r1, [r7, #96]	; 0x60
 800ffee:	416b      	adcs	r3, r5
 800fff0:	667b      	str	r3, [r7, #100]	; 0x64
 800fff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	461a      	mov	r2, r3
 800fff8:	f04f 0300 	mov.w	r3, #0
 800fffc:	1891      	adds	r1, r2, r2
 800fffe:	63b9      	str	r1, [r7, #56]	; 0x38
 8010000:	415b      	adcs	r3, r3
 8010002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010004:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010008:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801000c:	f7f0 fda6 	bl	8000b5c <__aeabi_uldivmod>
 8010010:	4602      	mov	r2, r0
 8010012:	460b      	mov	r3, r1
 8010014:	4ba5      	ldr	r3, [pc, #660]	; (80102ac <UART_SetConfig+0x38c>)
 8010016:	fba3 2302 	umull	r2, r3, r3, r2
 801001a:	095b      	lsrs	r3, r3, #5
 801001c:	011e      	lsls	r6, r3, #4
 801001e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010020:	461c      	mov	r4, r3
 8010022:	f04f 0500 	mov.w	r5, #0
 8010026:	4622      	mov	r2, r4
 8010028:	462b      	mov	r3, r5
 801002a:	1891      	adds	r1, r2, r2
 801002c:	6339      	str	r1, [r7, #48]	; 0x30
 801002e:	415b      	adcs	r3, r3
 8010030:	637b      	str	r3, [r7, #52]	; 0x34
 8010032:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010036:	1912      	adds	r2, r2, r4
 8010038:	eb45 0303 	adc.w	r3, r5, r3
 801003c:	f04f 0000 	mov.w	r0, #0
 8010040:	f04f 0100 	mov.w	r1, #0
 8010044:	00d9      	lsls	r1, r3, #3
 8010046:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801004a:	00d0      	lsls	r0, r2, #3
 801004c:	4602      	mov	r2, r0
 801004e:	460b      	mov	r3, r1
 8010050:	1911      	adds	r1, r2, r4
 8010052:	65b9      	str	r1, [r7, #88]	; 0x58
 8010054:	416b      	adcs	r3, r5
 8010056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	461a      	mov	r2, r3
 801005e:	f04f 0300 	mov.w	r3, #0
 8010062:	1891      	adds	r1, r2, r2
 8010064:	62b9      	str	r1, [r7, #40]	; 0x28
 8010066:	415b      	adcs	r3, r3
 8010068:	62fb      	str	r3, [r7, #44]	; 0x2c
 801006a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801006e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8010072:	f7f0 fd73 	bl	8000b5c <__aeabi_uldivmod>
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	4b8c      	ldr	r3, [pc, #560]	; (80102ac <UART_SetConfig+0x38c>)
 801007c:	fba3 1302 	umull	r1, r3, r3, r2
 8010080:	095b      	lsrs	r3, r3, #5
 8010082:	2164      	movs	r1, #100	; 0x64
 8010084:	fb01 f303 	mul.w	r3, r1, r3
 8010088:	1ad3      	subs	r3, r2, r3
 801008a:	00db      	lsls	r3, r3, #3
 801008c:	3332      	adds	r3, #50	; 0x32
 801008e:	4a87      	ldr	r2, [pc, #540]	; (80102ac <UART_SetConfig+0x38c>)
 8010090:	fba2 2303 	umull	r2, r3, r2, r3
 8010094:	095b      	lsrs	r3, r3, #5
 8010096:	005b      	lsls	r3, r3, #1
 8010098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801009c:	441e      	add	r6, r3
 801009e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100a0:	4618      	mov	r0, r3
 80100a2:	f04f 0100 	mov.w	r1, #0
 80100a6:	4602      	mov	r2, r0
 80100a8:	460b      	mov	r3, r1
 80100aa:	1894      	adds	r4, r2, r2
 80100ac:	623c      	str	r4, [r7, #32]
 80100ae:	415b      	adcs	r3, r3
 80100b0:	627b      	str	r3, [r7, #36]	; 0x24
 80100b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80100b6:	1812      	adds	r2, r2, r0
 80100b8:	eb41 0303 	adc.w	r3, r1, r3
 80100bc:	f04f 0400 	mov.w	r4, #0
 80100c0:	f04f 0500 	mov.w	r5, #0
 80100c4:	00dd      	lsls	r5, r3, #3
 80100c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80100ca:	00d4      	lsls	r4, r2, #3
 80100cc:	4622      	mov	r2, r4
 80100ce:	462b      	mov	r3, r5
 80100d0:	1814      	adds	r4, r2, r0
 80100d2:	653c      	str	r4, [r7, #80]	; 0x50
 80100d4:	414b      	adcs	r3, r1
 80100d6:	657b      	str	r3, [r7, #84]	; 0x54
 80100d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	461a      	mov	r2, r3
 80100de:	f04f 0300 	mov.w	r3, #0
 80100e2:	1891      	adds	r1, r2, r2
 80100e4:	61b9      	str	r1, [r7, #24]
 80100e6:	415b      	adcs	r3, r3
 80100e8:	61fb      	str	r3, [r7, #28]
 80100ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80100ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80100f2:	f7f0 fd33 	bl	8000b5c <__aeabi_uldivmod>
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	4b6c      	ldr	r3, [pc, #432]	; (80102ac <UART_SetConfig+0x38c>)
 80100fc:	fba3 1302 	umull	r1, r3, r3, r2
 8010100:	095b      	lsrs	r3, r3, #5
 8010102:	2164      	movs	r1, #100	; 0x64
 8010104:	fb01 f303 	mul.w	r3, r1, r3
 8010108:	1ad3      	subs	r3, r2, r3
 801010a:	00db      	lsls	r3, r3, #3
 801010c:	3332      	adds	r3, #50	; 0x32
 801010e:	4a67      	ldr	r2, [pc, #412]	; (80102ac <UART_SetConfig+0x38c>)
 8010110:	fba2 2303 	umull	r2, r3, r2, r3
 8010114:	095b      	lsrs	r3, r3, #5
 8010116:	f003 0207 	and.w	r2, r3, #7
 801011a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4432      	add	r2, r6
 8010120:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010122:	e0b9      	b.n	8010298 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010126:	461c      	mov	r4, r3
 8010128:	f04f 0500 	mov.w	r5, #0
 801012c:	4622      	mov	r2, r4
 801012e:	462b      	mov	r3, r5
 8010130:	1891      	adds	r1, r2, r2
 8010132:	6139      	str	r1, [r7, #16]
 8010134:	415b      	adcs	r3, r3
 8010136:	617b      	str	r3, [r7, #20]
 8010138:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801013c:	1912      	adds	r2, r2, r4
 801013e:	eb45 0303 	adc.w	r3, r5, r3
 8010142:	f04f 0000 	mov.w	r0, #0
 8010146:	f04f 0100 	mov.w	r1, #0
 801014a:	00d9      	lsls	r1, r3, #3
 801014c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010150:	00d0      	lsls	r0, r2, #3
 8010152:	4602      	mov	r2, r0
 8010154:	460b      	mov	r3, r1
 8010156:	eb12 0804 	adds.w	r8, r2, r4
 801015a:	eb43 0905 	adc.w	r9, r3, r5
 801015e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	4618      	mov	r0, r3
 8010164:	f04f 0100 	mov.w	r1, #0
 8010168:	f04f 0200 	mov.w	r2, #0
 801016c:	f04f 0300 	mov.w	r3, #0
 8010170:	008b      	lsls	r3, r1, #2
 8010172:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010176:	0082      	lsls	r2, r0, #2
 8010178:	4640      	mov	r0, r8
 801017a:	4649      	mov	r1, r9
 801017c:	f7f0 fcee 	bl	8000b5c <__aeabi_uldivmod>
 8010180:	4602      	mov	r2, r0
 8010182:	460b      	mov	r3, r1
 8010184:	4b49      	ldr	r3, [pc, #292]	; (80102ac <UART_SetConfig+0x38c>)
 8010186:	fba3 2302 	umull	r2, r3, r3, r2
 801018a:	095b      	lsrs	r3, r3, #5
 801018c:	011e      	lsls	r6, r3, #4
 801018e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010190:	4618      	mov	r0, r3
 8010192:	f04f 0100 	mov.w	r1, #0
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	1894      	adds	r4, r2, r2
 801019c:	60bc      	str	r4, [r7, #8]
 801019e:	415b      	adcs	r3, r3
 80101a0:	60fb      	str	r3, [r7, #12]
 80101a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80101a6:	1812      	adds	r2, r2, r0
 80101a8:	eb41 0303 	adc.w	r3, r1, r3
 80101ac:	f04f 0400 	mov.w	r4, #0
 80101b0:	f04f 0500 	mov.w	r5, #0
 80101b4:	00dd      	lsls	r5, r3, #3
 80101b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80101ba:	00d4      	lsls	r4, r2, #3
 80101bc:	4622      	mov	r2, r4
 80101be:	462b      	mov	r3, r5
 80101c0:	1814      	adds	r4, r2, r0
 80101c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80101c4:	414b      	adcs	r3, r1
 80101c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80101c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	4618      	mov	r0, r3
 80101ce:	f04f 0100 	mov.w	r1, #0
 80101d2:	f04f 0200 	mov.w	r2, #0
 80101d6:	f04f 0300 	mov.w	r3, #0
 80101da:	008b      	lsls	r3, r1, #2
 80101dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80101e0:	0082      	lsls	r2, r0, #2
 80101e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80101e6:	f7f0 fcb9 	bl	8000b5c <__aeabi_uldivmod>
 80101ea:	4602      	mov	r2, r0
 80101ec:	460b      	mov	r3, r1
 80101ee:	4b2f      	ldr	r3, [pc, #188]	; (80102ac <UART_SetConfig+0x38c>)
 80101f0:	fba3 1302 	umull	r1, r3, r3, r2
 80101f4:	095b      	lsrs	r3, r3, #5
 80101f6:	2164      	movs	r1, #100	; 0x64
 80101f8:	fb01 f303 	mul.w	r3, r1, r3
 80101fc:	1ad3      	subs	r3, r2, r3
 80101fe:	011b      	lsls	r3, r3, #4
 8010200:	3332      	adds	r3, #50	; 0x32
 8010202:	4a2a      	ldr	r2, [pc, #168]	; (80102ac <UART_SetConfig+0x38c>)
 8010204:	fba2 2303 	umull	r2, r3, r2, r3
 8010208:	095b      	lsrs	r3, r3, #5
 801020a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801020e:	441e      	add	r6, r3
 8010210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010212:	4618      	mov	r0, r3
 8010214:	f04f 0100 	mov.w	r1, #0
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	1894      	adds	r4, r2, r2
 801021e:	603c      	str	r4, [r7, #0]
 8010220:	415b      	adcs	r3, r3
 8010222:	607b      	str	r3, [r7, #4]
 8010224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010228:	1812      	adds	r2, r2, r0
 801022a:	eb41 0303 	adc.w	r3, r1, r3
 801022e:	f04f 0400 	mov.w	r4, #0
 8010232:	f04f 0500 	mov.w	r5, #0
 8010236:	00dd      	lsls	r5, r3, #3
 8010238:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801023c:	00d4      	lsls	r4, r2, #3
 801023e:	4622      	mov	r2, r4
 8010240:	462b      	mov	r3, r5
 8010242:	eb12 0a00 	adds.w	sl, r2, r0
 8010246:	eb43 0b01 	adc.w	fp, r3, r1
 801024a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	4618      	mov	r0, r3
 8010250:	f04f 0100 	mov.w	r1, #0
 8010254:	f04f 0200 	mov.w	r2, #0
 8010258:	f04f 0300 	mov.w	r3, #0
 801025c:	008b      	lsls	r3, r1, #2
 801025e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010262:	0082      	lsls	r2, r0, #2
 8010264:	4650      	mov	r0, sl
 8010266:	4659      	mov	r1, fp
 8010268:	f7f0 fc78 	bl	8000b5c <__aeabi_uldivmod>
 801026c:	4602      	mov	r2, r0
 801026e:	460b      	mov	r3, r1
 8010270:	4b0e      	ldr	r3, [pc, #56]	; (80102ac <UART_SetConfig+0x38c>)
 8010272:	fba3 1302 	umull	r1, r3, r3, r2
 8010276:	095b      	lsrs	r3, r3, #5
 8010278:	2164      	movs	r1, #100	; 0x64
 801027a:	fb01 f303 	mul.w	r3, r1, r3
 801027e:	1ad3      	subs	r3, r2, r3
 8010280:	011b      	lsls	r3, r3, #4
 8010282:	3332      	adds	r3, #50	; 0x32
 8010284:	4a09      	ldr	r2, [pc, #36]	; (80102ac <UART_SetConfig+0x38c>)
 8010286:	fba2 2303 	umull	r2, r3, r2, r3
 801028a:	095b      	lsrs	r3, r3, #5
 801028c:	f003 020f 	and.w	r2, r3, #15
 8010290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4432      	add	r2, r6
 8010296:	609a      	str	r2, [r3, #8]
}
 8010298:	bf00      	nop
 801029a:	377c      	adds	r7, #124	; 0x7c
 801029c:	46bd      	mov	sp, r7
 801029e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a2:	bf00      	nop
 80102a4:	40011000 	.word	0x40011000
 80102a8:	40011400 	.word	0x40011400
 80102ac:	51eb851f 	.word	0x51eb851f

080102b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b085      	sub	sp, #20
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80102ba:	2300      	movs	r3, #0
 80102bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80102be:	2300      	movs	r3, #0
 80102c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d029      	beq.n	801031e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80102d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80102da:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80102e4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80102ea:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80102f0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80102f6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80102fc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8010302:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8010308:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 801030e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010310:	68fa      	ldr	r2, [r7, #12]
 8010312:	4313      	orrs	r3, r2
 8010314:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	601a      	str	r2, [r3, #0]
 801031c:	e034      	b.n	8010388 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801032a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010334:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801033a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	4313      	orrs	r3, r2
 8010340:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801034e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010352:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801035c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8010362:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8010368:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 801036e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8010374:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	4313      	orrs	r3, r2
 801037a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	68fa      	ldr	r2, [r7, #12]
 8010380:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3714      	adds	r7, #20
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr

08010396 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010396:	b480      	push	{r7}
 8010398:	b087      	sub	sp, #28
 801039a:	af00      	add	r7, sp, #0
 801039c:	60f8      	str	r0, [r7, #12]
 801039e:	60b9      	str	r1, [r7, #8]
 80103a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80103a2:	2300      	movs	r3, #0
 80103a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80103a6:	2300      	movs	r3, #0
 80103a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d02e      	beq.n	801040e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	689b      	ldr	r3, [r3, #8]
 80103b4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80103bc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	685b      	ldr	r3, [r3, #4]
 80103c8:	3b01      	subs	r3, #1
 80103ca:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80103cc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	3b01      	subs	r3, #1
 80103d4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80103d6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	3b01      	subs	r3, #1
 80103de:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80103e0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	691b      	ldr	r3, [r3, #16]
 80103e6:	3b01      	subs	r3, #1
 80103e8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80103ea:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	695b      	ldr	r3, [r3, #20]
 80103f0:	3b01      	subs	r3, #1
 80103f2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80103f4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	699b      	ldr	r3, [r3, #24]
 80103fa:	3b01      	subs	r3, #1
 80103fc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80103fe:	4313      	orrs	r3, r2
 8010400:	697a      	ldr	r2, [r7, #20]
 8010402:	4313      	orrs	r3, r2
 8010404:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	697a      	ldr	r2, [r7, #20]
 801040a:	609a      	str	r2, [r3, #8]
 801040c:	e03b      	b.n	8010486 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801041a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801041e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	3b01      	subs	r3, #1
 8010426:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	695b      	ldr	r3, [r3, #20]
 801042c:	3b01      	subs	r3, #1
 801042e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8010430:	4313      	orrs	r3, r2
 8010432:	697a      	ldr	r2, [r7, #20]
 8010434:	4313      	orrs	r3, r2
 8010436:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010444:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	3b01      	subs	r3, #1
 8010452:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8010454:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	3b01      	subs	r3, #1
 801045c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 801045e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	691b      	ldr	r3, [r3, #16]
 8010464:	3b01      	subs	r3, #1
 8010466:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8010468:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	699b      	ldr	r3, [r3, #24]
 801046e:	3b01      	subs	r3, #1
 8010470:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8010472:	4313      	orrs	r3, r2
 8010474:	693a      	ldr	r2, [r7, #16]
 8010476:	4313      	orrs	r3, r2
 8010478:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	697a      	ldr	r2, [r7, #20]
 801047e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	693a      	ldr	r2, [r7, #16]
 8010484:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8010486:	2300      	movs	r3, #0
}
 8010488:	4618      	mov	r0, r3
 801048a:	371c      	adds	r7, #28
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b086      	sub	sp, #24
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80104a0:	2300      	movs	r3, #0
 80104a2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80104a4:	2300      	movs	r3, #0
 80104a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80104b0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	689b      	ldr	r3, [r3, #8]
 80104b6:	3b01      	subs	r3, #1
 80104b8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80104ba:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80104c2:	4313      	orrs	r3, r2
 80104c4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80104c6:	693a      	ldr	r2, [r7, #16]
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80104cc:	f7f8 fda0 	bl	8009010 <HAL_GetTick>
 80104d0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80104d2:	e010      	b.n	80104f6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104da:	d00c      	beq.n	80104f6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d007      	beq.n	80104f2 <FMC_SDRAM_SendCommand+0x5e>
 80104e2:	f7f8 fd95 	bl	8009010 <HAL_GetTick>
 80104e6:	4602      	mov	r2, r0
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	1ad3      	subs	r3, r2, r3
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d201      	bcs.n	80104f6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80104f2:	2303      	movs	r3, #3
 80104f4:	e006      	b.n	8010504 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	699b      	ldr	r3, [r3, #24]
 80104fa:	f003 0320 	and.w	r3, r3, #32
 80104fe:	2b20      	cmp	r3, #32
 8010500:	d0e8      	beq.n	80104d4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8010502:	2300      	movs	r3, #0
}
 8010504:	4618      	mov	r0, r3
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	695a      	ldr	r2, [r3, #20]
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	005b      	lsls	r3, r3, #1
 801051e:	431a      	orrs	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	370c      	adds	r7, #12
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr

08010532 <UB_Led_Init>:

//--------------------------------------------------------------
// Init aller LEDs
//--------------------------------------------------------------
void UB_Led_Init(void)
{
 8010532:	b480      	push	{r7}
 8010534:	af00      	add	r7, sp, #0
}
 8010536:	bf00      	nop
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <UB_Led_Toggle>:

//--------------------------------------------------------------
// LED toggeln
//--------------------------------------------------------------
void UB_Led_Toggle(LED_NAME_t led_name)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	4603      	mov	r3, r0
 8010548:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(LED[led_name].LED_PORT,LED[led_name].LED_PIN);
 801054a:	79fa      	ldrb	r2, [r7, #7]
 801054c:	490b      	ldr	r1, [pc, #44]	; (801057c <UB_Led_Toggle+0x3c>)
 801054e:	4613      	mov	r3, r2
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	4413      	add	r3, r2
 8010554:	009b      	lsls	r3, r3, #2
 8010556:	440b      	add	r3, r1
 8010558:	3304      	adds	r3, #4
 801055a:	6818      	ldr	r0, [r3, #0]
 801055c:	79fa      	ldrb	r2, [r7, #7]
 801055e:	4907      	ldr	r1, [pc, #28]	; (801057c <UB_Led_Toggle+0x3c>)
 8010560:	4613      	mov	r3, r2
 8010562:	005b      	lsls	r3, r3, #1
 8010564:	4413      	add	r3, r2
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	440b      	add	r3, r1
 801056a:	3308      	adds	r3, #8
 801056c:	881b      	ldrh	r3, [r3, #0]
 801056e:	4619      	mov	r1, r3
 8010570:	f7fc f837 	bl	800c5e2 <HAL_GPIO_TogglePin>
}
 8010574:	bf00      	nop
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	20000068 	.word	0x20000068

08010580 <UB_Button_Init>:


//--------------------------------------------------------------
// Init aller Buttons
//--------------------------------------------------------------
void UB_Button_Init(void){
 8010580:	b580      	push	{r7, lr}
 8010582:	af00      	add	r7, sp, #0
  
#if BUTTON_USE_TIMER==1
  // Init Timer
  P_Button_InitTIM();
 8010584:	f000 f836 	bl	80105f4 <P_Button_InitTIM>
  // Init NVIC
  P_Button_InitNVIC();
 8010588:	f000 f842 	bl	8010610 <P_Button_InitNVIC>
#endif
}
 801058c:	bf00      	nop
 801058e:	bd80      	pop	{r7, pc}

08010590 <UB_Button_OnClick>:
//--------------------------------------------------------------
// Button OnClick Ausdataung (entprellt)
// return_val, ist nur einmal true wenn der Button bet�tigt wurde
//--------------------------------------------------------------
bool UB_Button_OnClick(BUTTON_NAME_t btn_name)
{
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	4603      	mov	r3, r0
 8010598:	71fb      	strb	r3, [r7, #7]
  uint8_t old;
  static uint8_t old_state[BUTTON_ANZ];

  old = old_state[btn_name];
 801059a:	79fb      	ldrb	r3, [r7, #7]
 801059c:	4a13      	ldr	r2, [pc, #76]	; (80105ec <UB_Button_OnClick+0x5c>)
 801059e:	5cd3      	ldrb	r3, [r2, r3]
 80105a0:	73fb      	strb	r3, [r7, #15]
  old_state[btn_name] = BUTTON[btn_name].BUTTON_AKT;
 80105a2:	79fa      	ldrb	r2, [r7, #7]
 80105a4:	79f9      	ldrb	r1, [r7, #7]
 80105a6:	4812      	ldr	r0, [pc, #72]	; (80105f0 <UB_Button_OnClick+0x60>)
 80105a8:	4613      	mov	r3, r2
 80105aa:	005b      	lsls	r3, r3, #1
 80105ac:	4413      	add	r3, r2
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	4403      	add	r3, r0
 80105b2:	330a      	adds	r3, #10
 80105b4:	781a      	ldrb	r2, [r3, #0]
 80105b6:	4b0d      	ldr	r3, [pc, #52]	; (80105ec <UB_Button_OnClick+0x5c>)
 80105b8:	545a      	strb	r2, [r3, r1]

  if(BUTTON[btn_name].BUTTON_AKT==RESET) {
 80105ba:	79fa      	ldrb	r2, [r7, #7]
 80105bc:	490c      	ldr	r1, [pc, #48]	; (80105f0 <UB_Button_OnClick+0x60>)
 80105be:	4613      	mov	r3, r2
 80105c0:	005b      	lsls	r3, r3, #1
 80105c2:	4413      	add	r3, r2
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	440b      	add	r3, r1
 80105c8:	330a      	adds	r3, #10
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d101      	bne.n	80105d4 <UB_Button_OnClick+0x44>
    return(false);
 80105d0:	2300      	movs	r3, #0
 80105d2:	e005      	b.n	80105e0 <UB_Button_OnClick+0x50>
  }
  else if(old!=RESET) {
 80105d4:	7bfb      	ldrb	r3, [r7, #15]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d001      	beq.n	80105de <UB_Button_OnClick+0x4e>
    return(false);
 80105da:	2300      	movs	r3, #0
 80105dc:	e000      	b.n	80105e0 <UB_Button_OnClick+0x50>
  }
  else {
    return(true);
 80105de:	2301      	movs	r3, #1
  }
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3714      	adds	r7, #20
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr
 80105ec:	20001928 	.word	0x20001928
 80105f0:	20000080 	.word	0x20000080

080105f4 <P_Button_InitTIM>:
#if BUTTON_USE_TIMER==1
//--------------------------------------------------------------
// interne Funktion
// init vom Timer
//--------------------------------------------------------------
void P_Button_InitTIM(void){
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&UB_BUTTON_TIM);
 80105f8:	4804      	ldr	r0, [pc, #16]	; (801060c <P_Button_InitTIM+0x18>)
 80105fa:	f7fe ff11 	bl	800f420 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_CLEAR_FLAG(&UB_BUTTON_TIM,TIM_FLAG_UPDATE);	// Clear flag
 80105fe:	4b03      	ldr	r3, [pc, #12]	; (801060c <P_Button_InitTIM+0x18>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f06f 0201 	mvn.w	r2, #1
 8010606:	611a      	str	r2, [r3, #16]
}
 8010608:	bf00      	nop
 801060a:	bd80      	pop	{r7, pc}
 801060c:	200032f4 	.word	0x200032f4

08010610 <P_Button_InitNVIC>:
//--------------------------------------------------------------
// interne Funktion
// init vom NVIC
//--------------------------------------------------------------
void P_Button_InitNVIC(void)
{
 8010610:	b480      	push	{r7}
 8010612:	af00      	add	r7, sp, #0

}
 8010614:	bf00      	nop
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr
	...

08010620 <UB_Font_DrawChar>:
// Zeichnet ein Ascii-Zeichen eines Fonts an x,y Position
// mit Vorder- und Hintergrundfarbe (Font = max 16 Pixel breite)
// -> Font muss mit &-Operator uebergeben werden
//--------------------------------------------------------------
void UB_Font_DrawChar(uint16_t x, uint16_t y, uint8_t ascii, UB_Font *font, uint32_t vg, uint32_t bg)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b088      	sub	sp, #32
 8010624:	af00      	add	r7, sp, #0
 8010626:	607b      	str	r3, [r7, #4]
 8010628:	4603      	mov	r3, r0
 801062a:	81fb      	strh	r3, [r7, #14]
 801062c:	460b      	mov	r3, r1
 801062e:	81bb      	strh	r3, [r7, #12]
 8010630:	4613      	mov	r3, r2
 8010632:	72fb      	strb	r3, [r7, #11]
  uint16_t xn,yn,start_maske,maske;
  const uint16_t *data;
  

  ascii -= 32;
 8010634:	7afb      	ldrb	r3, [r7, #11]
 8010636:	3b20      	subs	r3, #32
 8010638:	72fb      	strb	r3, [r7, #11]
  data=&font->table[ascii * font->height];
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	7afb      	ldrb	r3, [r7, #11]
 8010640:	6879      	ldr	r1, [r7, #4]
 8010642:	88c9      	ldrh	r1, [r1, #6]
 8010644:	fb01 f303 	mul.w	r3, r1, r3
 8010648:	005b      	lsls	r3, r3, #1
 801064a:	4413      	add	r3, r2
 801064c:	617b      	str	r3, [r7, #20]

  if(LCD_DISPLAY_MODE==PORTRAIT) {
 801064e:	4b44      	ldr	r3, [pc, #272]	; (8010760 <UB_Font_DrawChar+0x140>)
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d13e      	bne.n	80106d4 <UB_Font_DrawChar+0xb4>
    start_maske=0x80;
 8010656:	2380      	movs	r3, #128	; 0x80
 8010658:	837b      	strh	r3, [r7, #26]
    if(font->width>8) start_maske=0x8000;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	889b      	ldrh	r3, [r3, #4]
 801065e:	2b08      	cmp	r3, #8
 8010660:	d902      	bls.n	8010668 <UB_Font_DrawChar+0x48>
 8010662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010666:	837b      	strh	r3, [r7, #26]
    
    for(yn = 0; yn < font->height; yn++) {
 8010668:	2300      	movs	r3, #0
 801066a:	83bb      	strh	r3, [r7, #28]
 801066c:	e02c      	b.n	80106c8 <UB_Font_DrawChar+0xa8>
      maske=start_maske;
 801066e:	8b7b      	ldrh	r3, [r7, #26]
 8010670:	833b      	strh	r3, [r7, #24]
      // Cursor setzen
      UB_LCD_SetCursor2Draw(x,yn+y);
 8010672:	8bba      	ldrh	r2, [r7, #28]
 8010674:	89bb      	ldrh	r3, [r7, #12]
 8010676:	4413      	add	r3, r2
 8010678:	b29a      	uxth	r2, r3
 801067a:	89fb      	ldrh	r3, [r7, #14]
 801067c:	4611      	mov	r1, r2
 801067e:	4618      	mov	r0, r3
 8010680:	f000 fd44 	bl	801110c <UB_LCD_SetCursor2Draw>
      for(xn = 0; xn < font->width; xn++) {
 8010684:	2300      	movs	r3, #0
 8010686:	83fb      	strh	r3, [r7, #30]
 8010688:	e016      	b.n	80106b8 <UB_Font_DrawChar+0x98>
        if((data[yn] & maske) == 0x00) {
 801068a:	8bbb      	ldrh	r3, [r7, #28]
 801068c:	005b      	lsls	r3, r3, #1
 801068e:	697a      	ldr	r2, [r7, #20]
 8010690:	4413      	add	r3, r2
 8010692:	881a      	ldrh	r2, [r3, #0]
 8010694:	8b3b      	ldrh	r3, [r7, #24]
 8010696:	4013      	ands	r3, r2
 8010698:	b29b      	uxth	r3, r3
 801069a:	2b00      	cmp	r3, #0
 801069c:	d103      	bne.n	80106a6 <UB_Font_DrawChar+0x86>
          // Pixel in Hintergrundfarbe zeichnen
          UB_LCD_DrawPixel(bg);
 801069e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106a0:	f000 fd62 	bl	8011168 <UB_LCD_DrawPixel>
 80106a4:	e002      	b.n	80106ac <UB_Font_DrawChar+0x8c>
        }
        else {
          // Pixel in Vordergrundfarbe zeichnen
          UB_LCD_DrawPixel(vg);
 80106a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106a8:	f000 fd5e 	bl	8011168 <UB_LCD_DrawPixel>
        }
        maske=(maske>>1);
 80106ac:	8b3b      	ldrh	r3, [r7, #24]
 80106ae:	085b      	lsrs	r3, r3, #1
 80106b0:	833b      	strh	r3, [r7, #24]
      for(xn = 0; xn < font->width; xn++) {
 80106b2:	8bfb      	ldrh	r3, [r7, #30]
 80106b4:	3301      	adds	r3, #1
 80106b6:	83fb      	strh	r3, [r7, #30]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	889b      	ldrh	r3, [r3, #4]
 80106bc:	8bfa      	ldrh	r2, [r7, #30]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d3e3      	bcc.n	801068a <UB_Font_DrawChar+0x6a>
    for(yn = 0; yn < font->height; yn++) {
 80106c2:	8bbb      	ldrh	r3, [r7, #28]
 80106c4:	3301      	adds	r3, #1
 80106c6:	83bb      	strh	r3, [r7, #28]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	88db      	ldrh	r3, [r3, #6]
 80106cc:	8bba      	ldrh	r2, [r7, #28]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d3cd      	bcc.n	801066e <UB_Font_DrawChar+0x4e>
        }
        maske=(maske>>1);
      }
    }
  }
}
 80106d2:	e041      	b.n	8010758 <UB_Font_DrawChar+0x138>
    start_maske=0x80;
 80106d4:	2380      	movs	r3, #128	; 0x80
 80106d6:	837b      	strh	r3, [r7, #26]
    if(font->width>8) start_maske=0x8000;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	889b      	ldrh	r3, [r3, #4]
 80106dc:	2b08      	cmp	r3, #8
 80106de:	d902      	bls.n	80106e6 <UB_Font_DrawChar+0xc6>
 80106e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106e4:	837b      	strh	r3, [r7, #26]
    for(yn = 0; yn < font->height; yn++) {
 80106e6:	2300      	movs	r3, #0
 80106e8:	83bb      	strh	r3, [r7, #28]
 80106ea:	e030      	b.n	801074e <UB_Font_DrawChar+0x12e>
      maske=start_maske;
 80106ec:	8b7b      	ldrh	r3, [r7, #26]
 80106ee:	833b      	strh	r3, [r7, #24]
      UB_LCD_SetCursor2Draw(x+font->height-yn,y);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	88da      	ldrh	r2, [r3, #6]
 80106f4:	89fb      	ldrh	r3, [r7, #14]
 80106f6:	4413      	add	r3, r2
 80106f8:	b29a      	uxth	r2, r3
 80106fa:	8bbb      	ldrh	r3, [r7, #28]
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	b29b      	uxth	r3, r3
 8010700:	89ba      	ldrh	r2, [r7, #12]
 8010702:	4611      	mov	r1, r2
 8010704:	4618      	mov	r0, r3
 8010706:	f000 fd01 	bl	801110c <UB_LCD_SetCursor2Draw>
      for(xn = 0; xn < font->width; xn++) {
 801070a:	2300      	movs	r3, #0
 801070c:	83fb      	strh	r3, [r7, #30]
 801070e:	e016      	b.n	801073e <UB_Font_DrawChar+0x11e>
        if((data[yn] & maske) == 0x00) {
 8010710:	8bbb      	ldrh	r3, [r7, #28]
 8010712:	005b      	lsls	r3, r3, #1
 8010714:	697a      	ldr	r2, [r7, #20]
 8010716:	4413      	add	r3, r2
 8010718:	881a      	ldrh	r2, [r3, #0]
 801071a:	8b3b      	ldrh	r3, [r7, #24]
 801071c:	4013      	ands	r3, r2
 801071e:	b29b      	uxth	r3, r3
 8010720:	2b00      	cmp	r3, #0
 8010722:	d103      	bne.n	801072c <UB_Font_DrawChar+0x10c>
          UB_LCD_DrawPixel(bg);
 8010724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010726:	f000 fd1f 	bl	8011168 <UB_LCD_DrawPixel>
 801072a:	e002      	b.n	8010732 <UB_Font_DrawChar+0x112>
          UB_LCD_DrawPixel(vg);
 801072c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801072e:	f000 fd1b 	bl	8011168 <UB_LCD_DrawPixel>
        maske=(maske>>1);
 8010732:	8b3b      	ldrh	r3, [r7, #24]
 8010734:	085b      	lsrs	r3, r3, #1
 8010736:	833b      	strh	r3, [r7, #24]
      for(xn = 0; xn < font->width; xn++) {
 8010738:	8bfb      	ldrh	r3, [r7, #30]
 801073a:	3301      	adds	r3, #1
 801073c:	83fb      	strh	r3, [r7, #30]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	889b      	ldrh	r3, [r3, #4]
 8010742:	8bfa      	ldrh	r2, [r7, #30]
 8010744:	429a      	cmp	r2, r3
 8010746:	d3e3      	bcc.n	8010710 <UB_Font_DrawChar+0xf0>
    for(yn = 0; yn < font->height; yn++) {
 8010748:	8bbb      	ldrh	r3, [r7, #28]
 801074a:	3301      	adds	r3, #1
 801074c:	83bb      	strh	r3, [r7, #28]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	88db      	ldrh	r3, [r3, #6]
 8010752:	8bba      	ldrh	r2, [r7, #28]
 8010754:	429a      	cmp	r2, r3
 8010756:	d3c9      	bcc.n	80106ec <UB_Font_DrawChar+0xcc>
}
 8010758:	bf00      	nop
 801075a:	3720      	adds	r7, #32
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	20001df8 	.word	0x20001df8

08010764 <UB_Font_DrawString>:
// Zeichnet einen String eines Fonts an x,y Position
// mit Vorder- und Hintergrundfarbe (Font = max 16 Pixel breite)
// -> Font muss mit &-Operator uebergeben werden
//--------------------------------------------------------------
void UB_Font_DrawString(uint16_t x, uint16_t y,char *ptr, UB_Font *font, uint32_t vg, uint32_t bg)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b088      	sub	sp, #32
 8010768:	af02      	add	r7, sp, #8
 801076a:	60ba      	str	r2, [r7, #8]
 801076c:	607b      	str	r3, [r7, #4]
 801076e:	4603      	mov	r3, r0
 8010770:	81fb      	strh	r3, [r7, #14]
 8010772:	460b      	mov	r3, r1
 8010774:	81bb      	strh	r3, [r7, #12]
  uint16_t pos;

  if(LCD_DISPLAY_MODE==PORTRAIT) {
 8010776:	4b1e      	ldr	r3, [pc, #120]	; (80107f0 <UB_Font_DrawString+0x8c>)
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d11a      	bne.n	80107b4 <UB_Font_DrawString+0x50>
    pos=x;
 801077e:	89fb      	ldrh	r3, [r7, #14]
 8010780:	82fb      	strh	r3, [r7, #22]
    while (*ptr != 0) {
 8010782:	e012      	b.n	80107aa <UB_Font_DrawString+0x46>
      UB_Font_DrawChar(pos,y,*ptr,font,vg,bg);
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	781a      	ldrb	r2, [r3, #0]
 8010788:	89b9      	ldrh	r1, [r7, #12]
 801078a:	8af8      	ldrh	r0, [r7, #22]
 801078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078e:	9301      	str	r3, [sp, #4]
 8010790:	6a3b      	ldr	r3, [r7, #32]
 8010792:	9300      	str	r3, [sp, #0]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f7ff ff43 	bl	8010620 <UB_Font_DrawChar>
      pos+=font->width;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	889a      	ldrh	r2, [r3, #4]
 801079e:	8afb      	ldrh	r3, [r7, #22]
 80107a0:	4413      	add	r3, r2
 80107a2:	82fb      	strh	r3, [r7, #22]
      ptr++;
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	3301      	adds	r3, #1
 80107a8:	60bb      	str	r3, [r7, #8]
    while (*ptr != 0) {
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1e8      	bne.n	8010784 <UB_Font_DrawString+0x20>
      UB_Font_DrawChar(x,pos,*ptr,font,vg,bg);
      pos+=font->width;
      ptr++;
    }
  }
}
 80107b2:	e019      	b.n	80107e8 <UB_Font_DrawString+0x84>
    pos=y;
 80107b4:	89bb      	ldrh	r3, [r7, #12]
 80107b6:	82fb      	strh	r3, [r7, #22]
    while (*ptr != 0) {
 80107b8:	e012      	b.n	80107e0 <UB_Font_DrawString+0x7c>
      UB_Font_DrawChar(x,pos,*ptr,font,vg,bg);
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	781a      	ldrb	r2, [r3, #0]
 80107be:	8af9      	ldrh	r1, [r7, #22]
 80107c0:	89f8      	ldrh	r0, [r7, #14]
 80107c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c4:	9301      	str	r3, [sp, #4]
 80107c6:	6a3b      	ldr	r3, [r7, #32]
 80107c8:	9300      	str	r3, [sp, #0]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f7ff ff28 	bl	8010620 <UB_Font_DrawChar>
      pos+=font->width;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	889a      	ldrh	r2, [r3, #4]
 80107d4:	8afb      	ldrh	r3, [r7, #22]
 80107d6:	4413      	add	r3, r2
 80107d8:	82fb      	strh	r3, [r7, #22]
      ptr++;
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	3301      	adds	r3, #1
 80107de:	60bb      	str	r3, [r7, #8]
    while (*ptr != 0) {
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1e8      	bne.n	80107ba <UB_Font_DrawString+0x56>
}
 80107e8:	bf00      	nop
 80107ea:	3718      	adds	r7, #24
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	20001df8 	.word	0x20001df8

080107f4 <UB_Graphic2D_DrawPixelNormal>:
//--------------------------------------------------------------
// Zeichnet ein Pixel mit einer Farbe an x,y Position
// [x=0...LCD_MAXX, y=0...LCD_MAXY]
//--------------------------------------------------------------
void UB_Graphic2D_DrawPixelNormal(uint16_t xp, uint16_t yp, uint32_t color)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	4603      	mov	r3, r0
 80107fc:	603a      	str	r2, [r7, #0]
 80107fe:	80fb      	strh	r3, [r7, #6]
 8010800:	460b      	mov	r3, r1
 8010802:	80bb      	strh	r3, [r7, #4]
  // check auf Limit
  if(xp>=LCD_MAXX) return;
 8010804:	88fb      	ldrh	r3, [r7, #6]
 8010806:	2bef      	cmp	r3, #239	; 0xef
 8010808:	d80d      	bhi.n	8010826 <UB_Graphic2D_DrawPixelNormal+0x32>
  if(yp>=LCD_MAXY) return;
 801080a:	88bb      	ldrh	r3, [r7, #4]
 801080c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010810:	d20b      	bcs.n	801082a <UB_Graphic2D_DrawPixelNormal+0x36>

  // Cursor setzen
  UB_LCD_SetCursor2Draw(xp,yp);
 8010812:	88ba      	ldrh	r2, [r7, #4]
 8010814:	88fb      	ldrh	r3, [r7, #6]
 8010816:	4611      	mov	r1, r2
 8010818:	4618      	mov	r0, r3
 801081a:	f000 fc77 	bl	801110c <UB_LCD_SetCursor2Draw>
  // Pixel zeichnen
  UB_LCD_DrawPixel(color);
 801081e:	6838      	ldr	r0, [r7, #0]
 8010820:	f000 fca2 	bl	8011168 <UB_LCD_DrawPixel>
 8010824:	e002      	b.n	801082c <UB_Graphic2D_DrawPixelNormal+0x38>
  if(xp>=LCD_MAXX) return;
 8010826:	bf00      	nop
 8010828:	e000      	b.n	801082c <UB_Graphic2D_DrawPixelNormal+0x38>
  if(yp>=LCD_MAXY) return;
 801082a:	bf00      	nop
}
 801082c:	3708      	adds	r7, #8
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}

08010832 <UB_Graphic2D_DrawLineNormal>:
// Zeichnet eine Linie mit einer Farbe
// von x1,y1 nach x2,y2  [x=0...LCD_MAXX, y=0...LCD_MAXY]
// (benutzt wird der Bresenham-Algorithmus)
//--------------------------------------------------------------
void UB_Graphic2D_DrawLineNormal(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint32_t color)
{
 8010832:	b590      	push	{r4, r7, lr}
 8010834:	b08b      	sub	sp, #44	; 0x2c
 8010836:	af00      	add	r7, sp, #0
 8010838:	4604      	mov	r4, r0
 801083a:	4608      	mov	r0, r1
 801083c:	4611      	mov	r1, r2
 801083e:	461a      	mov	r2, r3
 8010840:	4623      	mov	r3, r4
 8010842:	80fb      	strh	r3, [r7, #6]
 8010844:	4603      	mov	r3, r0
 8010846:	80bb      	strh	r3, [r7, #4]
 8010848:	460b      	mov	r3, r1
 801084a:	807b      	strh	r3, [r7, #2]
 801084c:	4613      	mov	r3, r2
 801084e:	803b      	strh	r3, [r7, #0]
  int16_t x, y, t, dx, dy, incx, incy, pdx, pdy, ddx, ddy, es, el, err;

  // check auf Limit
  if(x1>=LCD_MAXX) x1=LCD_MAXX-1;
 8010850:	88fb      	ldrh	r3, [r7, #6]
 8010852:	2bef      	cmp	r3, #239	; 0xef
 8010854:	d901      	bls.n	801085a <UB_Graphic2D_DrawLineNormal+0x28>
 8010856:	23ef      	movs	r3, #239	; 0xef
 8010858:	80fb      	strh	r3, [r7, #6]
  if(y1>=LCD_MAXY) y1=LCD_MAXY-1;
 801085a:	88bb      	ldrh	r3, [r7, #4]
 801085c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010860:	d302      	bcc.n	8010868 <UB_Graphic2D_DrawLineNormal+0x36>
 8010862:	f240 133f 	movw	r3, #319	; 0x13f
 8010866:	80bb      	strh	r3, [r7, #4]

  // check auf Limit
  if(x2>=LCD_MAXX) x2=LCD_MAXX-1;
 8010868:	887b      	ldrh	r3, [r7, #2]
 801086a:	2bef      	cmp	r3, #239	; 0xef
 801086c:	d901      	bls.n	8010872 <UB_Graphic2D_DrawLineNormal+0x40>
 801086e:	23ef      	movs	r3, #239	; 0xef
 8010870:	807b      	strh	r3, [r7, #2]
  if(y2>=LCD_MAXY) y2=LCD_MAXY-1;
 8010872:	883b      	ldrh	r3, [r7, #0]
 8010874:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010878:	d302      	bcc.n	8010880 <UB_Graphic2D_DrawLineNormal+0x4e>
 801087a:	f240 133f 	movw	r3, #319	; 0x13f
 801087e:	803b      	strh	r3, [r7, #0]

  // Entfernung in beiden Dimensionen berechnen
  dx = x2 - x1;
 8010880:	887a      	ldrh	r2, [r7, #2]
 8010882:	88fb      	ldrh	r3, [r7, #6]
 8010884:	1ad3      	subs	r3, r2, r3
 8010886:	b29b      	uxth	r3, r3
 8010888:	843b      	strh	r3, [r7, #32]
  dy = y2 - y1;
 801088a:	883a      	ldrh	r2, [r7, #0]
 801088c:	88bb      	ldrh	r3, [r7, #4]
 801088e:	1ad3      	subs	r3, r2, r3
 8010890:	b29b      	uxth	r3, r3
 8010892:	83fb      	strh	r3, [r7, #30]

  // Vorzeichen des Inkrements bestimmen
  incx = P_Graphic2D_sgn(dx);
 8010894:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010898:	4618      	mov	r0, r3
 801089a:	f000 fb41 	bl	8010f20 <P_Graphic2D_sgn>
 801089e:	4603      	mov	r3, r0
 80108a0:	81fb      	strh	r3, [r7, #14]
  incy = P_Graphic2D_sgn(dy);
 80108a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f000 fb3a 	bl	8010f20 <P_Graphic2D_sgn>
 80108ac:	4603      	mov	r3, r0
 80108ae:	81bb      	strh	r3, [r7, #12]
  if(dx<0) dx = -dx;
 80108b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	da03      	bge.n	80108c0 <UB_Graphic2D_DrawLineNormal+0x8e>
 80108b8:	8c3b      	ldrh	r3, [r7, #32]
 80108ba:	425b      	negs	r3, r3
 80108bc:	b29b      	uxth	r3, r3
 80108be:	843b      	strh	r3, [r7, #32]
  if(dy<0) dy = -dy;
 80108c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	da03      	bge.n	80108d0 <UB_Graphic2D_DrawLineNormal+0x9e>
 80108c8:	8bfb      	ldrh	r3, [r7, #30]
 80108ca:	425b      	negs	r3, r3
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	83fb      	strh	r3, [r7, #30]

  // feststellen, welche Entfernung gr��er ist
  if (dx>dy) {
 80108d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80108d8:	429a      	cmp	r2, r3
 80108da:	dd0c      	ble.n	80108f6 <UB_Graphic2D_DrawLineNormal+0xc4>
    // x ist schnelle Richtung
    pdx=incx; pdy=0;    // pd. ist Parallelschritt
 80108dc:	89fb      	ldrh	r3, [r7, #14]
 80108de:	83bb      	strh	r3, [r7, #28]
 80108e0:	2300      	movs	r3, #0
 80108e2:	837b      	strh	r3, [r7, #26]
    ddx=incx; ddy=incy; // dd. ist Diagonalschritt
 80108e4:	89fb      	ldrh	r3, [r7, #14]
 80108e6:	833b      	strh	r3, [r7, #24]
 80108e8:	89bb      	ldrh	r3, [r7, #12]
 80108ea:	82fb      	strh	r3, [r7, #22]
    es =dy;   el =dx;   // Fehlerschritte schnell, langsam
 80108ec:	8bfb      	ldrh	r3, [r7, #30]
 80108ee:	82bb      	strh	r3, [r7, #20]
 80108f0:	8c3b      	ldrh	r3, [r7, #32]
 80108f2:	827b      	strh	r3, [r7, #18]
 80108f4:	e00b      	b.n	801090e <UB_Graphic2D_DrawLineNormal+0xdc>
  }
  else {
    // y ist schnelle Richtung
    pdx=0;    pdy=incy; // pd. ist Parallelschritt
 80108f6:	2300      	movs	r3, #0
 80108f8:	83bb      	strh	r3, [r7, #28]
 80108fa:	89bb      	ldrh	r3, [r7, #12]
 80108fc:	837b      	strh	r3, [r7, #26]
    ddx=incx; ddy=incy; // dd. ist Diagonalschritt
 80108fe:	89fb      	ldrh	r3, [r7, #14]
 8010900:	833b      	strh	r3, [r7, #24]
 8010902:	89bb      	ldrh	r3, [r7, #12]
 8010904:	82fb      	strh	r3, [r7, #22]
    es =dx;   el =dy;   // Fehlerschritte schnell, langsam
 8010906:	8c3b      	ldrh	r3, [r7, #32]
 8010908:	82bb      	strh	r3, [r7, #20]
 801090a:	8bfb      	ldrh	r3, [r7, #30]
 801090c:	827b      	strh	r3, [r7, #18]
  }

  // Initialisierungen vor Schleifenbeginn
  x = x1;
 801090e:	88fb      	ldrh	r3, [r7, #6]
 8010910:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;
 8010912:	88bb      	ldrh	r3, [r7, #4]
 8010914:	84bb      	strh	r3, [r7, #36]	; 0x24
  err = (el>>1);
 8010916:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801091a:	105b      	asrs	r3, r3, #1
 801091c:	823b      	strh	r3, [r7, #16]
  UB_Graphic2D_DrawPixelNormal(x,y,color);
 801091e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010920:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8010922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010924:	4618      	mov	r0, r3
 8010926:	f7ff ff65 	bl	80107f4 <UB_Graphic2D_DrawPixelNormal>

  // Pixel berechnen
  for(t=0; t<el; ++t) // t zaehlt die Pixel, el ist auch Anzahl
 801092a:	2300      	movs	r3, #0
 801092c:	847b      	strh	r3, [r7, #34]	; 0x22
 801092e:	e02c      	b.n	801098a <UB_Graphic2D_DrawLineNormal+0x158>
  {
    // Aktualisierung Fehlerterm
    err -= es;
 8010930:	8a3a      	ldrh	r2, [r7, #16]
 8010932:	8abb      	ldrh	r3, [r7, #20]
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	b29b      	uxth	r3, r3
 8010938:	823b      	strh	r3, [r7, #16]
    if(err<0) {
 801093a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801093e:	2b00      	cmp	r3, #0
 8010940:	da0f      	bge.n	8010962 <UB_Graphic2D_DrawLineNormal+0x130>
      // Fehlerterm wieder positiv (>=0) machen
      err += el;
 8010942:	8a3a      	ldrh	r2, [r7, #16]
 8010944:	8a7b      	ldrh	r3, [r7, #18]
 8010946:	4413      	add	r3, r2
 8010948:	b29b      	uxth	r3, r3
 801094a:	823b      	strh	r3, [r7, #16]
      // Schritt in langsame Richtung, Diagonalschritt
      x += ddx;
 801094c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801094e:	8b3b      	ldrh	r3, [r7, #24]
 8010950:	4413      	add	r3, r2
 8010952:	b29b      	uxth	r3, r3
 8010954:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += ddy;
 8010956:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010958:	8afb      	ldrh	r3, [r7, #22]
 801095a:	4413      	add	r3, r2
 801095c:	b29b      	uxth	r3, r3
 801095e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010960:	e009      	b.n	8010976 <UB_Graphic2D_DrawLineNormal+0x144>
    }
    else {
      // Schritt in schnelle Richtung, Parallelschritt
      x += pdx;
 8010962:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010964:	8bbb      	ldrh	r3, [r7, #28]
 8010966:	4413      	add	r3, r2
 8010968:	b29b      	uxth	r3, r3
 801096a:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += pdy;
 801096c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801096e:	8b7b      	ldrh	r3, [r7, #26]
 8010970:	4413      	add	r3, r2
 8010972:	b29b      	uxth	r3, r3
 8010974:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    UB_Graphic2D_DrawPixelNormal(x,y,color);
 8010976:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010978:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 801097a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801097c:	4618      	mov	r0, r3
 801097e:	f7ff ff39 	bl	80107f4 <UB_Graphic2D_DrawPixelNormal>
  for(t=0; t<el; ++t) // t zaehlt die Pixel, el ist auch Anzahl
 8010982:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010984:	3301      	adds	r3, #1
 8010986:	b29b      	uxth	r3, r3
 8010988:	847b      	strh	r3, [r7, #34]	; 0x22
 801098a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801098e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010992:	429a      	cmp	r2, r3
 8010994:	dbcc      	blt.n	8010930 <UB_Graphic2D_DrawLineNormal+0xfe>
  }
}
 8010996:	bf00      	nop
 8010998:	bf00      	nop
 801099a:	372c      	adds	r7, #44	; 0x2c
 801099c:	46bd      	mov	sp, r7
 801099e:	bd90      	pop	{r4, r7, pc}

080109a0 <DMA2D_FillRect>:

void DMA2D_FillRect(uint32_t color, uint32_t x, uint32_t y, uint32_t width, uint32_t height){
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af02      	add	r7, sp, #8
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
 80109ac:	603b      	str	r3, [r7, #0]

    HAL_DMA2D_DeInit(&hdma2d);
 80109ae:	4825      	ldr	r0, [pc, #148]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109b0:	f7f9 fe5e 	bl	800a670 <HAL_DMA2D_DeInit>
	hdma2d.Instance = DMA2D;
 80109b4:	4b23      	ldr	r3, [pc, #140]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109b6:	4a24      	ldr	r2, [pc, #144]	; (8010a48 <DMA2D_FillRect+0xa8>)
 80109b8:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_R2M;
 80109ba:	4b22      	ldr	r3, [pc, #136]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80109c0:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 80109c2:	4b20      	ldr	r3, [pc, #128]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109c4:	2202      	movs	r2, #2
 80109c6:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = LCD_MAXX - width;
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80109ce:	4a1d      	ldr	r2, [pc, #116]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109d0:	60d3      	str	r3, [r2, #12]

	  // Foreground
	  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80109d2:	4b1c      	ldr	r3, [pc, #112]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109d4:	2200      	movs	r2, #0
 80109d6:	631a      	str	r2, [r3, #48]	; 0x30
	  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputColorMode = DMA2D_INPUT_RGB565;
 80109d8:	4b1a      	ldr	r3, [pc, #104]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109da:	2202      	movs	r2, #2
 80109dc:	62da      	str	r2, [r3, #44]	; 0x2c
	  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputOffset = 0;
 80109de:	4b19      	ldr	r3, [pc, #100]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109e0:	2200      	movs	r2, #0
 80109e2:	629a      	str	r2, [r3, #40]	; 0x28

	  // Background
	  hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80109e4:	4b17      	ldr	r3, [pc, #92]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109e6:	2200      	movs	r2, #0
 80109e8:	621a      	str	r2, [r3, #32]
	  hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].InputColorMode = DMA2D_INPUT_RGB565;
 80109ea:	4b16      	ldr	r3, [pc, #88]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109ec:	2202      	movs	r2, #2
 80109ee:	61da      	str	r2, [r3, #28]
	  hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].InputOffset = 0;
 80109f0:	4b14      	ldr	r3, [pc, #80]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109f2:	2200      	movs	r2, #0
 80109f4:	619a      	str	r2, [r3, #24]

	  HAL_DMA2D_Init(&hdma2d);
 80109f6:	4813      	ldr	r0, [pc, #76]	; (8010a44 <DMA2D_FillRect+0xa4>)
 80109f8:	f7f9 fdf0 	bl	800a5dc <HAL_DMA2D_Init>
	  HAL_DMA2D_ConfigLayer(&hdma2d, DMA2D_FOREGROUND_LAYER);
 80109fc:	2101      	movs	r1, #1
 80109fe:	4811      	ldr	r0, [pc, #68]	; (8010a44 <DMA2D_FillRect+0xa4>)
 8010a00:	f7fa f98e 	bl	800ad20 <HAL_DMA2D_ConfigLayer>
	  HAL_DMA2D_ConfigLayer(&hdma2d, DMA2D_BACKGROUND_LAYER);
 8010a04:	2100      	movs	r1, #0
 8010a06:	480f      	ldr	r0, [pc, #60]	; (8010a44 <DMA2D_FillRect+0xa4>)
 8010a08:	f7fa f98a 	bl	800ad20 <HAL_DMA2D_ConfigLayer>

	HAL_DMA2D_Start(&hdma2d, color, LCD_CurrentFrameBuffer + 2*(x + y*LCD_MAXX),    width,    height);
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	4613      	mov	r3, r2
 8010a10:	011b      	lsls	r3, r3, #4
 8010a12:	1a9b      	subs	r3, r3, r2
 8010a14:	011b      	lsls	r3, r3, #4
 8010a16:	461a      	mov	r2, r3
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	005a      	lsls	r2, r3, #1
 8010a1e:	4b0b      	ldr	r3, [pc, #44]	; (8010a4c <DMA2D_FillRect+0xac>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	441a      	add	r2, r3
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	68f9      	ldr	r1, [r7, #12]
 8010a2c:	4805      	ldr	r0, [pc, #20]	; (8010a44 <DMA2D_FillRect+0xa4>)
 8010a2e:	f7f9 fe8f 	bl	800a750 <HAL_DMA2D_Start>
	HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8010a32:	2164      	movs	r1, #100	; 0x64
 8010a34:	4803      	ldr	r0, [pc, #12]	; (8010a44 <DMA2D_FillRect+0xa4>)
 8010a36:	f7f9 ff7a 	bl	800a92e <HAL_DMA2D_PollForTransfer>
}
 8010a3a:	bf00      	nop
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	200034d0 	.word	0x200034d0
 8010a48:	4002b000 	.word	0x4002b000
 8010a4c:	20003600 	.word	0x20003600

08010a50 <UB_Graphic2D_DrawStraightDMA>:
// Draws a straight line with one color (via DMA2D)
// Start = xp, yp [x = 0 ... LCD_MAXX, y = 0 ... LCD_MAXY]
// Length = l (is limited to the display limit)
// Direction = d [LCD_DIR_HORIZONTAL, LCD_DIR_VERTICAL]
//--------------------------------------------------------------
void UB_Graphic2D_DrawStraightDMA(uint16_t xp, uint16_t yp, uint16_t l, LCD_DIR_t d, uint32_t color){
 8010a50:	b590      	push	{r4, r7, lr}
 8010a52:	b085      	sub	sp, #20
 8010a54:	af02      	add	r7, sp, #8
 8010a56:	4604      	mov	r4, r0
 8010a58:	4608      	mov	r0, r1
 8010a5a:	4611      	mov	r1, r2
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	4623      	mov	r3, r4
 8010a60:	80fb      	strh	r3, [r7, #6]
 8010a62:	4603      	mov	r3, r0
 8010a64:	80bb      	strh	r3, [r7, #4]
 8010a66:	460b      	mov	r3, r1
 8010a68:	807b      	strh	r3, [r7, #2]
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	707b      	strb	r3, [r7, #1]
	color = (((0xF800 & color) >> 11)<<16) |(((0x07E0 & color) >> 5)<<8) | ((0x001F & color)<<3);
 8010a6e:	69bb      	ldr	r3, [r7, #24]
 8010a70:	0adb      	lsrs	r3, r3, #11
 8010a72:	041b      	lsls	r3, r3, #16
 8010a74:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	095b      	lsrs	r3, r3, #5
 8010a7c:	021b      	lsls	r3, r3, #8
 8010a7e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8010a82:	431a      	orrs	r2, r3
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	00db      	lsls	r3, r3, #3
 8010a88:	b2db      	uxtb	r3, r3
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	61bb      	str	r3, [r7, #24]
	HAL_DMA2D_DeInit(&hdma2d);
 8010a8e:	483f      	ldr	r0, [pc, #252]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010a90:	f7f9 fdee 	bl	800a670 <HAL_DMA2D_DeInit>
	hdma2d.Instance = DMA2D;
 8010a94:	4b3d      	ldr	r3, [pc, #244]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010a96:	4a3e      	ldr	r2, [pc, #248]	; (8010b90 <UB_Graphic2D_DrawStraightDMA+0x140>)
 8010a98:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_R2M;
 8010a9a:	4b3c      	ldr	r3, [pc, #240]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010a9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010aa0:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_RGB565;
 8010aa2:	4b3a      	ldr	r3, [pc, #232]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010aa4:	2202      	movs	r2, #2
 8010aa6:	609a      	str	r2, [r3, #8]
	// check auf Limit
	if(xp>=LCD_MAXX) xp=LCD_MAXX-1;
 8010aa8:	88fb      	ldrh	r3, [r7, #6]
 8010aaa:	2bef      	cmp	r3, #239	; 0xef
 8010aac:	d901      	bls.n	8010ab2 <UB_Graphic2D_DrawStraightDMA+0x62>
 8010aae:	23ef      	movs	r3, #239	; 0xef
 8010ab0:	80fb      	strh	r3, [r7, #6]
	if(yp>=LCD_MAXY) yp=LCD_MAXY-1;
 8010ab2:	88bb      	ldrh	r3, [r7, #4]
 8010ab4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010ab8:	d302      	bcc.n	8010ac0 <UB_Graphic2D_DrawStraightDMA+0x70>
 8010aba:	f240 133f 	movw	r3, #319	; 0x13f
 8010abe:	80bb      	strh	r3, [r7, #4]
	if(l==0) return;
 8010ac0:	887b      	ldrh	r3, [r7, #2]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d05e      	beq.n	8010b84 <UB_Graphic2D_DrawStraightDMA+0x134>
	if(LCD_DISPLAY_MODE==LANDSCAPE) {
 8010ac6:	4b33      	ldr	r3, [pc, #204]	; (8010b94 <UB_Graphic2D_DrawStraightDMA+0x144>)
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d107      	bne.n	8010ade <UB_Graphic2D_DrawStraightDMA+0x8e>
		// richtung drehen
		if(d==LCD_DIR_HORIZONTAL) {
 8010ace:	787b      	ldrb	r3, [r7, #1]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d102      	bne.n	8010ada <UB_Graphic2D_DrawStraightDMA+0x8a>
			d=LCD_DIR_VERTICAL;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	707b      	strb	r3, [r7, #1]
 8010ad8:	e001      	b.n	8010ade <UB_Graphic2D_DrawStraightDMA+0x8e>
		}
		else {
	 	d=LCD_DIR_HORIZONTAL;
 8010ada:	2300      	movs	r3, #0
 8010adc:	707b      	strb	r3, [r7, #1]
		}
	}

	if(d == LCD_DIR_HORIZONTAL) {
 8010ade:	787b      	ldrb	r3, [r7, #1]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d10c      	bne.n	8010afe <UB_Graphic2D_DrawStraightDMA+0xae>
	// check auf Limit
	if((xp+l)>LCD_MAXX) l=LCD_MAXX-xp;
 8010ae4:	88fa      	ldrh	r2, [r7, #6]
 8010ae6:	887b      	ldrh	r3, [r7, #2]
 8010ae8:	4413      	add	r3, r2
 8010aea:	2bf0      	cmp	r3, #240	; 0xf0
 8010aec:	dd03      	ble.n	8010af6 <UB_Graphic2D_DrawStraightDMA+0xa6>
 8010aee:	88fb      	ldrh	r3, [r7, #6]
 8010af0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8010af4:	807b      	strh	r3, [r7, #2]
	hdma2d.Init.OutputOffset = 0;
 8010af6:	4b25      	ldr	r3, [pc, #148]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010af8:	2200      	movs	r2, #0
 8010afa:	60da      	str	r2, [r3, #12]
 8010afc:	e00c      	b.n	8010b18 <UB_Graphic2D_DrawStraightDMA+0xc8>
	}
	else {
	// check auf Limit
	if((yp+l)>LCD_MAXY) l=LCD_MAXY-yp;
 8010afe:	88ba      	ldrh	r2, [r7, #4]
 8010b00:	887b      	ldrh	r3, [r7, #2]
 8010b02:	4413      	add	r3, r2
 8010b04:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010b08:	dd03      	ble.n	8010b12 <UB_Graphic2D_DrawStraightDMA+0xc2>
 8010b0a:	88bb      	ldrh	r3, [r7, #4]
 8010b0c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8010b10:	807b      	strh	r3, [r7, #2]
	hdma2d.Init.OutputOffset = LCD_MAXX - 1;
 8010b12:	4b1e      	ldr	r3, [pc, #120]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b14:	22ef      	movs	r2, #239	; 0xef
 8010b16:	60da      	str	r2, [r3, #12]
	}

	  // Foreground
	  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8010b18:	4b1c      	ldr	r3, [pc, #112]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	631a      	str	r2, [r3, #48]	; 0x30
	  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputColorMode = DMA2D_INPUT_RGB565;
 8010b1e:	4b1b      	ldr	r3, [pc, #108]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b20:	2202      	movs	r2, #2
 8010b22:	62da      	str	r2, [r3, #44]	; 0x2c
	  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputOffset = 0;
 8010b24:	4b19      	ldr	r3, [pc, #100]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b26:	2200      	movs	r2, #0
 8010b28:	629a      	str	r2, [r3, #40]	; 0x28

	  // Background
	  hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8010b2a:	4b18      	ldr	r3, [pc, #96]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	621a      	str	r2, [r3, #32]
	  hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].InputColorMode = DMA2D_INPUT_RGB565;
 8010b30:	4b16      	ldr	r3, [pc, #88]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b32:	2202      	movs	r2, #2
 8010b34:	61da      	str	r2, [r3, #28]
	  hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].InputOffset = 0;
 8010b36:	4b15      	ldr	r3, [pc, #84]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b38:	2200      	movs	r2, #0
 8010b3a:	619a      	str	r2, [r3, #24]

	  HAL_DMA2D_Init(&hdma2d);
 8010b3c:	4813      	ldr	r0, [pc, #76]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b3e:	f7f9 fd4d 	bl	800a5dc <HAL_DMA2D_Init>
	  HAL_DMA2D_ConfigLayer(&hdma2d, DMA2D_FOREGROUND_LAYER);
 8010b42:	2101      	movs	r1, #1
 8010b44:	4811      	ldr	r0, [pc, #68]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b46:	f7fa f8eb 	bl	800ad20 <HAL_DMA2D_ConfigLayer>
	  HAL_DMA2D_ConfigLayer(&hdma2d, DMA2D_BACKGROUND_LAYER);
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	480f      	ldr	r0, [pc, #60]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b4e:	f7fa f8e7 	bl	800ad20 <HAL_DMA2D_ConfigLayer>

	HAL_DMA2D_Start(&hdma2d, color, LCD_CurrentFrameBuffer + 2*(LCD_MAXX*yp + xp), 1, l);
 8010b52:	88ba      	ldrh	r2, [r7, #4]
 8010b54:	4613      	mov	r3, r2
 8010b56:	011b      	lsls	r3, r3, #4
 8010b58:	1a9b      	subs	r3, r3, r2
 8010b5a:	011b      	lsls	r3, r3, #4
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	88fb      	ldrh	r3, [r7, #6]
 8010b60:	4413      	add	r3, r2
 8010b62:	005b      	lsls	r3, r3, #1
 8010b64:	461a      	mov	r2, r3
 8010b66:	4b0c      	ldr	r3, [pc, #48]	; (8010b98 <UB_Graphic2D_DrawStraightDMA+0x148>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	441a      	add	r2, r3
 8010b6c:	887b      	ldrh	r3, [r7, #2]
 8010b6e:	9300      	str	r3, [sp, #0]
 8010b70:	2301      	movs	r3, #1
 8010b72:	69b9      	ldr	r1, [r7, #24]
 8010b74:	4805      	ldr	r0, [pc, #20]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b76:	f7f9 fdeb 	bl	800a750 <HAL_DMA2D_Start>
	HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8010b7a:	210a      	movs	r1, #10
 8010b7c:	4803      	ldr	r0, [pc, #12]	; (8010b8c <UB_Graphic2D_DrawStraightDMA+0x13c>)
 8010b7e:	f7f9 fed6 	bl	800a92e <HAL_DMA2D_PollForTransfer>
 8010b82:	e000      	b.n	8010b86 <UB_Graphic2D_DrawStraightDMA+0x136>
	if(l==0) return;
 8010b84:	bf00      	nop
}
 8010b86:	370c      	adds	r7, #12
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd90      	pop	{r4, r7, pc}
 8010b8c:	200034d0 	.word	0x200034d0
 8010b90:	4002b000 	.word	0x4002b000
 8010b94:	20001df8 	.word	0x20001df8
 8010b98:	20003600 	.word	0x20003600

08010b9c <UB_Graphic2D_DrawFullRectDMA>:
// Start corner = xp, yp [x = 0 ... LCD_MAXX, y = 0 ... LCD_MAXY]
// width = w
// height = h
//--------------------------------------------------------------
void UB_Graphic2D_DrawFullRectDMA(uint16_t xp, uint16_t yp, uint16_t w, uint16_t h, uint32_t color)
{
 8010b9c:	b590      	push	{r4, r7, lr}
 8010b9e:	b087      	sub	sp, #28
 8010ba0:	af02      	add	r7, sp, #8
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	4608      	mov	r0, r1
 8010ba6:	4611      	mov	r1, r2
 8010ba8:	461a      	mov	r2, r3
 8010baa:	4623      	mov	r3, r4
 8010bac:	80fb      	strh	r3, [r7, #6]
 8010bae:	4603      	mov	r3, r0
 8010bb0:	80bb      	strh	r3, [r7, #4]
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	807b      	strh	r3, [r7, #2]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress;
  int16_t d;
  color = (((0xF800 & color) >> 11)<<16) |(((0x07E0 & color) >> 5)<<8) | ((0x001F & color)<<3);
 8010bba:	6a3b      	ldr	r3, [r7, #32]
 8010bbc:	0adb      	lsrs	r3, r3, #11
 8010bbe:	041b      	lsls	r3, r3, #16
 8010bc0:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 8010bc4:	6a3b      	ldr	r3, [r7, #32]
 8010bc6:	095b      	lsrs	r3, r3, #5
 8010bc8:	021b      	lsls	r3, r3, #8
 8010bca:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8010bce:	431a      	orrs	r2, r3
 8010bd0:	6a3b      	ldr	r3, [r7, #32]
 8010bd2:	00db      	lsls	r3, r3, #3
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	623b      	str	r3, [r7, #32]
 // color = 0xff;
  // check auf Limit
  if(xp>=LCD_MAXX) xp=LCD_MAXX-1;
 8010bda:	88fb      	ldrh	r3, [r7, #6]
 8010bdc:	2bef      	cmp	r3, #239	; 0xef
 8010bde:	d901      	bls.n	8010be4 <UB_Graphic2D_DrawFullRectDMA+0x48>
 8010be0:	23ef      	movs	r3, #239	; 0xef
 8010be2:	80fb      	strh	r3, [r7, #6]
  if(yp>=LCD_MAXY) yp=LCD_MAXY-1;
 8010be4:	88bb      	ldrh	r3, [r7, #4]
 8010be6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010bea:	d302      	bcc.n	8010bf2 <UB_Graphic2D_DrawFullRectDMA+0x56>
 8010bec:	f240 133f 	movw	r3, #319	; 0x13f
 8010bf0:	80bb      	strh	r3, [r7, #4]
  if(w==0) return;
 8010bf2:	887b      	ldrh	r3, [r7, #2]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d055      	beq.n	8010ca4 <UB_Graphic2D_DrawFullRectDMA+0x108>
  if(h==0) return;
 8010bf8:	883b      	ldrh	r3, [r7, #0]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d054      	beq.n	8010ca8 <UB_Graphic2D_DrawFullRectDMA+0x10c>

  if(LCD_DISPLAY_MODE==LANDSCAPE) {
 8010bfe:	4b2c      	ldr	r3, [pc, #176]	; (8010cb0 <UB_Graphic2D_DrawFullRectDMA+0x114>)
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	d105      	bne.n	8010c12 <UB_Graphic2D_DrawFullRectDMA+0x76>
    // richtung drehen
    d=w;
 8010c06:	887b      	ldrh	r3, [r7, #2]
 8010c08:	81fb      	strh	r3, [r7, #14]
    w=h;
 8010c0a:	883b      	ldrh	r3, [r7, #0]
 8010c0c:	807b      	strh	r3, [r7, #2]
    h=d;
 8010c0e:	89fb      	ldrh	r3, [r7, #14]
 8010c10:	803b      	strh	r3, [r7, #0]
  }

  // check auf Limit
  if((xp+w)>LCD_MAXX) w=LCD_MAXX-xp;
 8010c12:	88fa      	ldrh	r2, [r7, #6]
 8010c14:	887b      	ldrh	r3, [r7, #2]
 8010c16:	4413      	add	r3, r2
 8010c18:	2bf0      	cmp	r3, #240	; 0xf0
 8010c1a:	dd03      	ble.n	8010c24 <UB_Graphic2D_DrawFullRectDMA+0x88>
 8010c1c:	88fb      	ldrh	r3, [r7, #6]
 8010c1e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8010c22:	807b      	strh	r3, [r7, #2]
  if((yp+h)>LCD_MAXY) h=LCD_MAXY-yp;
 8010c24:	88ba      	ldrh	r2, [r7, #4]
 8010c26:	883b      	ldrh	r3, [r7, #0]
 8010c28:	4413      	add	r3, r2
 8010c2a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010c2e:	dd03      	ble.n	8010c38 <UB_Graphic2D_DrawFullRectDMA+0x9c>
 8010c30:	88bb      	ldrh	r3, [r7, #4]
 8010c32:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8010c36:	803b      	strh	r3, [r7, #0]

  Xaddress = LCD_CurrentFrameBuffer + 2*(LCD_MAXX*yp + xp);
 8010c38:	88ba      	ldrh	r2, [r7, #4]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	011b      	lsls	r3, r3, #4
 8010c3e:	1a9b      	subs	r3, r3, r2
 8010c40:	011b      	lsls	r3, r3, #4
 8010c42:	461a      	mov	r2, r3
 8010c44:	88fb      	ldrh	r3, [r7, #6]
 8010c46:	4413      	add	r3, r2
 8010c48:	005b      	lsls	r3, r3, #1
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	4b19      	ldr	r3, [pc, #100]	; (8010cb4 <UB_Graphic2D_DrawFullRectDMA+0x118>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4413      	add	r3, r2
 8010c52:	60bb      	str	r3, [r7, #8]

  HAL_DMA2D_DeInit(&hdma2d);
 8010c54:	4818      	ldr	r0, [pc, #96]	; (8010cb8 <UB_Graphic2D_DrawFullRectDMA+0x11c>)
 8010c56:	f7f9 fd0b 	bl	800a670 <HAL_DMA2D_DeInit>

  hdma2d.Instance = DMA2D;
 8010c5a:	4b17      	ldr	r3, [pc, #92]	; (8010cb8 <UB_Graphic2D_DrawFullRectDMA+0x11c>)
 8010c5c:	4a17      	ldr	r2, [pc, #92]	; (8010cbc <UB_Graphic2D_DrawFullRectDMA+0x120>)
 8010c5e:	601a      	str	r2, [r3, #0]
  hdma2d.Init.ColorMode = DMA2D_RGB565;
 8010c60:	4b15      	ldr	r3, [pc, #84]	; (8010cb8 <UB_Graphic2D_DrawFullRectDMA+0x11c>)
 8010c62:	2202      	movs	r2, #2
 8010c64:	609a      	str	r2, [r3, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8010c66:	4b14      	ldr	r3, [pc, #80]	; (8010cb8 <UB_Graphic2D_DrawFullRectDMA+0x11c>)
 8010c68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010c6c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.OutputOffset = (LCD_MAXX - w);
 8010c6e:	887b      	ldrh	r3, [r7, #2]
 8010c70:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8010c74:	461a      	mov	r2, r3
 8010c76:	4b10      	ldr	r3, [pc, #64]	; (8010cb8 <UB_Graphic2D_DrawFullRectDMA+0x11c>)
 8010c78:	60da      	str	r2, [r3, #12]
  HAL_DMA2D_Init(&hdma2d);
 8010c7a:	480f      	ldr	r0, [pc, #60]	; (8010cb8 <UB_Graphic2D_DrawFullRectDMA+0x11c>)
 8010c7c:	f7f9 fcae 	bl	800a5dc <HAL_DMA2D_Init>
  HAL_DMA2D_Start(&hdma2d,color,Xaddress, w, h );
 8010c80:	887a      	ldrh	r2, [r7, #2]
 8010c82:	883b      	ldrh	r3, [r7, #0]
 8010c84:	9300      	str	r3, [sp, #0]
 8010c86:	4613      	mov	r3, r2
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	6a39      	ldr	r1, [r7, #32]
 8010c8c:	480a      	ldr	r0, [pc, #40]	; (8010cb8 <UB_Graphic2D_DrawFullRectDMA+0x11c>)
 8010c8e:	f7f9 fd5f 	bl	800a750 <HAL_DMA2D_Start>

  while(__HAL_DMA2D_GET_FLAG(&hdma2d,DMA2D_FLAG_TC) == RESET);
 8010c92:	bf00      	nop
 8010c94:	4b08      	ldr	r3, [pc, #32]	; (8010cb8 <UB_Graphic2D_DrawFullRectDMA+0x11c>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	f003 0302 	and.w	r3, r3, #2
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d0f8      	beq.n	8010c94 <UB_Graphic2D_DrawFullRectDMA+0xf8>
 8010ca2:	e002      	b.n	8010caa <UB_Graphic2D_DrawFullRectDMA+0x10e>
  if(w==0) return;
 8010ca4:	bf00      	nop
 8010ca6:	e000      	b.n	8010caa <UB_Graphic2D_DrawFullRectDMA+0x10e>
  if(h==0) return;
 8010ca8:	bf00      	nop
}
 8010caa:	3714      	adds	r7, #20
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd90      	pop	{r4, r7, pc}
 8010cb0:	20001df8 	.word	0x20001df8
 8010cb4:	20003600 	.word	0x20003600
 8010cb8:	200034d0 	.word	0x200034d0
 8010cbc:	4002b000 	.word	0x4002b000

08010cc0 <UB_Graphic2D_CopyImgDMA>:
// into the graphics RAM (via DMA2D)
// -> Image must be passed with & operator
// If there are errors with the coordinates, nothing is drawn
//--------------------------------------------------------------
void UB_Graphic2D_CopyImgDMA(UB_Image *img, DMA2D_Koord koord)
{
 8010cc0:	b084      	sub	sp, #16
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b08a      	sub	sp, #40	; 0x28
 8010cc6:	af02      	add	r7, sp, #8
 8010cc8:	6078      	str	r0, [r7, #4]
 8010cca:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t  dest_address = 0;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	61fb      	str	r3, [r7, #28]
  uint32_t  source_address = 0;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	61bb      	str	r3, [r7, #24]
  uint32_t offset;
  uint32_t  picture_width;
  uint32_t  picture_height;
  HAL_DMA2D_DeInit(&hdma2d);
 8010cda:	4846      	ldr	r0, [pc, #280]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010cdc:	f7f9 fcc8 	bl	800a670 <HAL_DMA2D_DeInit>
  // Destination address in the display RAM
  dest_address = LCD_CurrentFrameBuffer + 2*(LCD_MAXX*koord.dest_yp + koord.dest_xp);
 8010ce0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	011b      	lsls	r3, r3, #4
 8010ce6:	1a9b      	subs	r3, r3, r2
 8010ce8:	011b      	lsls	r3, r3, #4
 8010cea:	461a      	mov	r2, r3
 8010cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cee:	4413      	add	r3, r2
 8010cf0:	005a      	lsls	r2, r3, #1
 8010cf2:	4b41      	ldr	r3, [pc, #260]	; (8010df8 <UB_Graphic2D_CopyImgDMA+0x138>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	61fb      	str	r3, [r7, #28]

  picture_width=img->width;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	889b      	ldrh	r3, [r3, #4]
 8010cfe:	617b      	str	r3, [r7, #20]
  picture_height=img->height;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	88db      	ldrh	r3, [r3, #6]
 8010d04:	613b      	str	r3, [r7, #16]

  // Check limits
  if(koord.source_w==0) return;
 8010d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d061      	beq.n	8010dd0 <UB_Graphic2D_CopyImgDMA+0x110>
  if(koord.source_h==0) return;
 8010d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d060      	beq.n	8010dd4 <UB_Graphic2D_CopyImgDMA+0x114>
  if(koord.source_xp+koord.source_w>picture_width) return;
 8010d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d16:	4413      	add	r3, r2
 8010d18:	697a      	ldr	r2, [r7, #20]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d35c      	bcc.n	8010dd8 <UB_Graphic2D_CopyImgDMA+0x118>
  if(koord.source_yp+koord.source_h>picture_height) return;
 8010d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d22:	4413      	add	r3, r2
 8010d24:	693a      	ldr	r2, [r7, #16]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d358      	bcc.n	8010ddc <UB_Graphic2D_CopyImgDMA+0x11c>
  if(koord.dest_xp+koord.source_w>LCD_MAXX) return;
 8010d2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d2e:	4413      	add	r3, r2
 8010d30:	2bf0      	cmp	r3, #240	; 0xf0
 8010d32:	d855      	bhi.n	8010de0 <UB_Graphic2D_CopyImgDMA+0x120>
  if(koord.dest_yp+koord.source_h>LCD_MAXY) return;
 8010d34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d38:	4413      	add	r3, r2
 8010d3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010d3e:	d851      	bhi.n	8010de4 <UB_Graphic2D_CopyImgDMA+0x124>

  // Source address from the image
  offset=(picture_width*koord.source_yp + koord.source_xp);
 8010d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d42:	697a      	ldr	r2, [r7, #20]
 8010d44:	fb02 f203 	mul.w	r2, r2, r3
 8010d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4a:	4413      	add	r3, r2
 8010d4c:	60fb      	str	r3, [r7, #12]
  source_address  = (uint32_t)&img->table[offset];
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681a      	ldr	r2, [r3, #0]
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	005b      	lsls	r3, r3, #1
 8010d56:	4413      	add	r3, r2
 8010d58:	61bb      	str	r3, [r7, #24]


  hdma2d.Instance = DMA2D;
 8010d5a:	4b26      	ldr	r3, [pc, #152]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d5c:	4a27      	ldr	r2, [pc, #156]	; (8010dfc <UB_Graphic2D_CopyImgDMA+0x13c>)
 8010d5e:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8010d60:	4b24      	ldr	r3, [pc, #144]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d62:	2200      	movs	r2, #0
 8010d64:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8010d66:	4b23      	ldr	r3, [pc, #140]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d68:	2202      	movs	r2, #2
 8010d6a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = LCD_MAXX-koord.source_w;
 8010d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d6e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8010d72:	4a20      	ldr	r2, [pc, #128]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d74:	60d3      	str	r3, [r2, #12]
  // Foreground
  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8010d76:	4b1f      	ldr	r3, [pc, #124]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d78:	2200      	movs	r2, #0
 8010d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputColorMode = DMA2D_INPUT_RGB565;
 8010d7c:	4b1d      	ldr	r3, [pc, #116]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d7e:	2202      	movs	r2, #2
 8010d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputOffset = picture_width-koord.source_w;
 8010d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d84:	697a      	ldr	r2, [r7, #20]
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	4a1a      	ldr	r2, [pc, #104]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d8a:	6293      	str	r3, [r2, #40]	; 0x28
  // Background
  hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8010d8c:	4b19      	ldr	r3, [pc, #100]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].InputColorMode = DMA2D_INPUT_RGB565;
 8010d92:	4b18      	ldr	r3, [pc, #96]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d94:	2202      	movs	r2, #2
 8010d96:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].InputOffset = 0;
 8010d98:	4b16      	ldr	r3, [pc, #88]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	619a      	str	r2, [r3, #24]
  HAL_DMA2D_Init(&hdma2d);
 8010d9e:	4815      	ldr	r0, [pc, #84]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010da0:	f7f9 fc1c 	bl	800a5dc <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&hdma2d, DMA2D_FOREGROUND_LAYER);
 8010da4:	2101      	movs	r1, #1
 8010da6:	4813      	ldr	r0, [pc, #76]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010da8:	f7f9 ffba 	bl	800ad20 <HAL_DMA2D_ConfigLayer>
  HAL_DMA2D_ConfigLayer(&hdma2d, DMA2D_BACKGROUND_LAYER);
 8010dac:	2100      	movs	r1, #0
 8010dae:	4811      	ldr	r0, [pc, #68]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010db0:	f7f9 ffb6 	bl	800ad20 <HAL_DMA2D_ConfigLayer>
  HAL_DMA2D_Start(&hdma2d, source_address, dest_address, koord.source_w, koord.source_h);
 8010db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db8:	9300      	str	r3, [sp, #0]
 8010dba:	4613      	mov	r3, r2
 8010dbc:	69fa      	ldr	r2, [r7, #28]
 8010dbe:	69b9      	ldr	r1, [r7, #24]
 8010dc0:	480c      	ldr	r0, [pc, #48]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010dc2:	f7f9 fcc5 	bl	800a750 <HAL_DMA2D_Start>
  HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8010dc6:	210a      	movs	r1, #10
 8010dc8:	480a      	ldr	r0, [pc, #40]	; (8010df4 <UB_Graphic2D_CopyImgDMA+0x134>)
 8010dca:	f7f9 fdb0 	bl	800a92e <HAL_DMA2D_PollForTransfer>
 8010dce:	e00a      	b.n	8010de6 <UB_Graphic2D_CopyImgDMA+0x126>
  if(koord.source_w==0) return;
 8010dd0:	bf00      	nop
 8010dd2:	e008      	b.n	8010de6 <UB_Graphic2D_CopyImgDMA+0x126>
  if(koord.source_h==0) return;
 8010dd4:	bf00      	nop
 8010dd6:	e006      	b.n	8010de6 <UB_Graphic2D_CopyImgDMA+0x126>
  if(koord.source_xp+koord.source_w>picture_width) return;
 8010dd8:	bf00      	nop
 8010dda:	e004      	b.n	8010de6 <UB_Graphic2D_CopyImgDMA+0x126>
  if(koord.source_yp+koord.source_h>picture_height) return;
 8010ddc:	bf00      	nop
 8010dde:	e002      	b.n	8010de6 <UB_Graphic2D_CopyImgDMA+0x126>
  if(koord.dest_xp+koord.source_w>LCD_MAXX) return;
 8010de0:	bf00      	nop
 8010de2:	e000      	b.n	8010de6 <UB_Graphic2D_CopyImgDMA+0x126>
  if(koord.dest_yp+koord.source_h>LCD_MAXY) return;
 8010de4:	bf00      	nop
}
 8010de6:	3720      	adds	r7, #32
 8010de8:	46bd      	mov	sp, r7
 8010dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010dee:	b004      	add	sp, #16
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	200034d0 	.word	0x200034d0
 8010df8:	20003600 	.word	0x20003600
 8010dfc:	4002b000 	.word	0x4002b000

08010e00 <UB_Graphic2D_Copy1DMA>:
// from one address from the SD-RAM to another (via DMA2D)
//
// Source address = LCD_MenuFrameBuffer
// Target address = LCD_CurrentFrameBuffer
//--------------------------------------------------------------
void UB_Graphic2D_Copy1DMA(void){
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af02      	add	r7, sp, #8

	  HAL_DMA2D_DeInit(&hdma2d);
 8010e06:	4818      	ldr	r0, [pc, #96]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e08:	f7f9 fc32 	bl	800a670 <HAL_DMA2D_DeInit>
	  hdma2d.Instance = DMA2D;
 8010e0c:	4b16      	ldr	r3, [pc, #88]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e0e:	4a17      	ldr	r2, [pc, #92]	; (8010e6c <UB_Graphic2D_Copy1DMA+0x6c>)
 8010e10:	601a      	str	r2, [r3, #0]
	  hdma2d.Init.Mode = DMA2D_M2M;
 8010e12:	4b15      	ldr	r3, [pc, #84]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e14:	2200      	movs	r2, #0
 8010e16:	605a      	str	r2, [r3, #4]
	  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8010e18:	4b13      	ldr	r3, [pc, #76]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e1a:	2202      	movs	r2, #2
 8010e1c:	609a      	str	r2, [r3, #8]
	  hdma2d.Init.OutputOffset = 0;
 8010e1e:	4b12      	ldr	r3, [pc, #72]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e20:	2200      	movs	r2, #0
 8010e22:	60da      	str	r2, [r3, #12]

	  // Foreground
	  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8010e24:	4b10      	ldr	r3, [pc, #64]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e26:	2200      	movs	r2, #0
 8010e28:	631a      	str	r2, [r3, #48]	; 0x30
	  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputColorMode = DMA2D_INPUT_RGB565;
 8010e2a:	4b0f      	ldr	r3, [pc, #60]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e2c:	2202      	movs	r2, #2
 8010e2e:	62da      	str	r2, [r3, #44]	; 0x2c
	  hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputOffset = 0;
 8010e30:	4b0d      	ldr	r3, [pc, #52]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e32:	2200      	movs	r2, #0
 8010e34:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_DMA2D_Init(&hdma2d);
 8010e36:	480c      	ldr	r0, [pc, #48]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e38:	f7f9 fbd0 	bl	800a5dc <HAL_DMA2D_Init>
	  HAL_DMA2D_ConfigLayer(&hdma2d, DMA2D_FOREGROUND_LAYER);
 8010e3c:	2101      	movs	r1, #1
 8010e3e:	480a      	ldr	r0, [pc, #40]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e40:	f7f9 ff6e 	bl	800ad20 <HAL_DMA2D_ConfigLayer>
	  HAL_DMA2D_Start(&hdma2d, LCD_MenuFrameBuffer, LCD_CurrentFrameBuffer, LCD_MAXX, LCD_MAXY);
 8010e44:	4b0a      	ldr	r3, [pc, #40]	; (8010e70 <UB_Graphic2D_Copy1DMA+0x70>)
 8010e46:	6819      	ldr	r1, [r3, #0]
 8010e48:	4b0a      	ldr	r3, [pc, #40]	; (8010e74 <UB_Graphic2D_Copy1DMA+0x74>)
 8010e4a:	681a      	ldr	r2, [r3, #0]
 8010e4c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	23f0      	movs	r3, #240	; 0xf0
 8010e54:	4804      	ldr	r0, [pc, #16]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e56:	f7f9 fc7b 	bl	800a750 <HAL_DMA2D_Start>
	  HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8010e5a:	210a      	movs	r1, #10
 8010e5c:	4802      	ldr	r0, [pc, #8]	; (8010e68 <UB_Graphic2D_Copy1DMA+0x68>)
 8010e5e:	f7f9 fd66 	bl	800a92e <HAL_DMA2D_PollForTransfer>
}
 8010e62:	bf00      	nop
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	200034d0 	.word	0x200034d0
 8010e6c:	4002b000 	.word	0x4002b000
 8010e70:	200035fc 	.word	0x200035fc
 8010e74:	20003600 	.word	0x20003600

08010e78 <UB_Graphic2D_Copy2DMA>:
// Source address-2 = LCD_ADCFrameBuffer
// Target address = LCD_CurrentFrameBuffer
//
// transparency [0 ... 255] specifies the transparency
//--------------------------------------------------------------
void UB_Graphic2D_Copy2DMA(uint32_t tranzparenz){
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b084      	sub	sp, #16
 8010e7c:	af02      	add	r7, sp, #8
 8010e7e:	6078      	str	r0, [r7, #4]

	HAL_DMA2D_DeInit(&hdma2d);
 8010e80:	4822      	ldr	r0, [pc, #136]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010e82:	f7f9 fbf5 	bl	800a670 <HAL_DMA2D_DeInit>
	hdma2d.Instance = DMA2D;
 8010e86:	4b21      	ldr	r3, [pc, #132]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010e88:	4a21      	ldr	r2, [pc, #132]	; (8010f10 <UB_Graphic2D_Copy2DMA+0x98>)
 8010e8a:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8010e8c:	4b1f      	ldr	r3, [pc, #124]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010e92:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8010e94:	4b1d      	ldr	r3, [pc, #116]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010e96:	2202      	movs	r2, #2
 8010e98:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8010e9a:	4b1c      	ldr	r3, [pc, #112]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	60da      	str	r2, [r3, #12]

	// Foreground
	hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].AlphaMode = DMA2D_COMBINE_ALPHA;
 8010ea0:	4b1a      	ldr	r3, [pc, #104]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010ea2:	2202      	movs	r2, #2
 8010ea4:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputColorMode = DMA2D_INPUT_RGB565;
 8010ea6:	4b19      	ldr	r3, [pc, #100]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010ea8:	2202      	movs	r2, #2
 8010eaa:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].InputOffset = 0;
 8010eac:	4b17      	ldr	r3, [pc, #92]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010eae:	2200      	movs	r2, #0
 8010eb0:	619a      	str	r2, [r3, #24]
	hdma2d.LayerCfg[DMA2D_FOREGROUND_LAYER].InputAlpha = 255;
 8010eb2:	4b16      	ldr	r3, [pc, #88]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010eb4:	22ff      	movs	r2, #255	; 0xff
 8010eb6:	635a      	str	r2, [r3, #52]	; 0x34

	// Background
	hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8010eb8:	4b14      	ldr	r3, [pc, #80]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010eba:	2200      	movs	r2, #0
 8010ebc:	621a      	str	r2, [r3, #32]
	hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].InputColorMode = DMA2D_INPUT_RGB565;
 8010ebe:	4b13      	ldr	r3, [pc, #76]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010ec0:	2202      	movs	r2, #2
 8010ec2:	61da      	str	r2, [r3, #28]
	hdma2d.LayerCfg[DMA2D_BACKGROUND_LAYER].InputOffset = 0;
 8010ec4:	4b11      	ldr	r3, [pc, #68]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	619a      	str	r2, [r3, #24]
	HAL_DMA2D_Init(&hdma2d);
 8010eca:	4810      	ldr	r0, [pc, #64]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010ecc:	f7f9 fb86 	bl	800a5dc <HAL_DMA2D_Init>
	HAL_DMA2D_ConfigLayer(&hdma2d, DMA2D_BACKGROUND_LAYER);
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	480e      	ldr	r0, [pc, #56]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010ed4:	f7f9 ff24 	bl	800ad20 <HAL_DMA2D_ConfigLayer>
	HAL_DMA2D_ConfigLayer(&hdma2d, DMA2D_FOREGROUND_LAYER);
 8010ed8:	2101      	movs	r1, #1
 8010eda:	480c      	ldr	r0, [pc, #48]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010edc:	f7f9 ff20 	bl	800ad20 <HAL_DMA2D_ConfigLayer>
	HAL_DMA2D_BlendingStart(&hdma2d, LCD_MenuFrameBuffer, LCD_ADCFrameBuffer, LCD_CurrentFrameBuffer, LCD_MAXX, LCD_MAXY);
 8010ee0:	4b0c      	ldr	r3, [pc, #48]	; (8010f14 <UB_Graphic2D_Copy2DMA+0x9c>)
 8010ee2:	6819      	ldr	r1, [r3, #0]
 8010ee4:	4b0c      	ldr	r3, [pc, #48]	; (8010f18 <UB_Graphic2D_Copy2DMA+0xa0>)
 8010ee6:	681a      	ldr	r2, [r3, #0]
 8010ee8:	4b0c      	ldr	r3, [pc, #48]	; (8010f1c <UB_Graphic2D_Copy2DMA+0xa4>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8010ef0:	9001      	str	r0, [sp, #4]
 8010ef2:	20f0      	movs	r0, #240	; 0xf0
 8010ef4:	9000      	str	r0, [sp, #0]
 8010ef6:	4805      	ldr	r0, [pc, #20]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010ef8:	f7f9 fc55 	bl	800a7a6 <HAL_DMA2D_BlendingStart>
	HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8010efc:	210a      	movs	r1, #10
 8010efe:	4803      	ldr	r0, [pc, #12]	; (8010f0c <UB_Graphic2D_Copy2DMA+0x94>)
 8010f00:	f7f9 fd15 	bl	800a92e <HAL_DMA2D_PollForTransfer>
}
 8010f04:	bf00      	nop
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	200034d0 	.word	0x200034d0
 8010f10:	4002b000 	.word	0x4002b000
 8010f14:	200035fc 	.word	0x200035fc
 8010f18:	200035f0 	.word	0x200035f0
 8010f1c:	20003600 	.word	0x20003600

08010f20 <P_Graphic2D_sgn>:
//    1 ,wenn x > 0
//    0 ,wenn x = 0
//   -1 ,wenn x < 0
//--------------------------------------------------------------
int16_t P_Graphic2D_sgn(int16_t x)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b083      	sub	sp, #12
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	4603      	mov	r3, r0
 8010f28:	80fb      	strh	r3, [r7, #6]
  return (x > 0) ? 1 : (x < 0) ? -1 : 0;
 8010f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	dc08      	bgt.n	8010f44 <P_Graphic2D_sgn+0x24>
 8010f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	da02      	bge.n	8010f40 <P_Graphic2D_sgn+0x20>
 8010f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f3e:	e002      	b.n	8010f46 <P_Graphic2D_sgn+0x26>
 8010f40:	2300      	movs	r3, #0
 8010f42:	e000      	b.n	8010f46 <P_Graphic2D_sgn+0x26>
 8010f44:	2301      	movs	r3, #1
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	370c      	adds	r7, #12
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr
	...

08010f54 <UB_LCD_Init>:
// Return_data :
//  -> ERROR   , wenn Display nicht gefunden wurde
//  -> SUCCESS , wenn Display OK
//--------------------------------------------------------------
ErrorStatus UB_LCD_Init(void)
{ 
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
  ErrorStatus return_val=ERROR;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	71fb      	strb	r3, [r7, #7]

  // init aller IO-Pins
  P_LCD9341_InitIO();
 8010f5e:	f000 f997 	bl	8011290 <P_LCD9341_InitIO>
  // init vom SPI-BUS
  P_LCD9341_InitChip();
 8010f62:	f000 f9c1 	bl	80112e8 <P_LCD9341_InitChip>
  // beim init auf Portrait-Mode
  LCD_DISPLAY_MODE=PORTRAIT;
 8010f66:	4b12      	ldr	r3, [pc, #72]	; (8010fb0 <UB_LCD_Init+0x5c>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	701a      	strb	r2, [r3, #0]


  // init vom SDRAM
  UB_SDRAM_Init();
 8010f6c:	f000 fb62 	bl	8011634 <UB_SDRAM_Init>
  // init vom LTDC

  return_val=SUCCESS;
 8010f70:	2300      	movs	r3, #0
 8010f72:	71fb      	strb	r3, [r7, #7]
  aktCursorX=0;
 8010f74:	4b0f      	ldr	r3, [pc, #60]	; (8010fb4 <UB_LCD_Init+0x60>)
 8010f76:	2200      	movs	r2, #0
 8010f78:	801a      	strh	r2, [r3, #0]
  aktCursorY=0;
 8010f7a:	4b0f      	ldr	r3, [pc, #60]	; (8010fb8 <UB_LCD_Init+0x64>)
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	801a      	strh	r2, [r3, #0]
  aktCursorPos=0;
 8010f80:	4b0e      	ldr	r3, [pc, #56]	; (8010fbc <UB_LCD_Init+0x68>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	601a      	str	r2, [r3, #0]

  LCD_CurrentFrameBuffer=LCD_FRAME_BUFFER;
 8010f86:	4b0e      	ldr	r3, [pc, #56]	; (8010fc0 <UB_LCD_Init+0x6c>)
 8010f88:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8010f8c:	601a      	str	r2, [r3, #0]
  LCD_MenuFrameBuffer=LCD_FRAME_BUFFER + (2*LCD_FRAME_OFFSET);
 8010f8e:	4b0d      	ldr	r3, [pc, #52]	; (8010fc4 <UB_LCD_Init+0x70>)
 8010f90:	4a0d      	ldr	r2, [pc, #52]	; (8010fc8 <UB_LCD_Init+0x74>)
 8010f92:	601a      	str	r2, [r3, #0]
  LCD_ADCFrameBuffer=LCD_FRAME_BUFFER + (3*LCD_FRAME_OFFSET);
 8010f94:	4b0d      	ldr	r3, [pc, #52]	; (8010fcc <UB_LCD_Init+0x78>)
 8010f96:	4a0e      	ldr	r2, [pc, #56]	; (8010fd0 <UB_LCD_Init+0x7c>)
 8010f98:	601a      	str	r2, [r3, #0]
  LCD_CurrentLayer = 0;
 8010f9a:	4b0e      	ldr	r3, [pc, #56]	; (8010fd4 <UB_LCD_Init+0x80>)
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	601a      	str	r2, [r3, #0]
  LCD_CurrentOrientation=0;
 8010fa0:	4b0d      	ldr	r3, [pc, #52]	; (8010fd8 <UB_LCD_Init+0x84>)
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	601a      	str	r2, [r3, #0]

  return(return_val);
 8010fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3708      	adds	r7, #8
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	20001df8 	.word	0x20001df8
 8010fb4:	2000192a 	.word	0x2000192a
 8010fb8:	2000192c 	.word	0x2000192c
 8010fbc:	20001930 	.word	0x20001930
 8010fc0:	20003600 	.word	0x20003600
 8010fc4:	200035fc 	.word	0x200035fc
 8010fc8:	d004b000 	.word	0xd004b000
 8010fcc:	200035f0 	.word	0x200035f0
 8010fd0:	d0070800 	.word	0xd0070800
 8010fd4:	200035f4 	.word	0x200035f4
 8010fd8:	200035f8 	.word	0x200035f8

08010fdc <UB_LCD_LayerInit_Fullscreen>:

//--------------------------------------------------------------
// stellt beide Layer auf "Fullscreen-Mode"
//--------------------------------------------------------------
void UB_LCD_LayerInit_Fullscreen(void)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	af00      	add	r7, sp, #0

}
 8010fe0:	bf00      	nop
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr
	...

08010fec <UB_LCD_SetLayer_1>:

//--------------------------------------------------------------
// Hintergrund-Layer aktivieren
//--------------------------------------------------------------
void UB_LCD_SetLayer_1(void)
{
 8010fec:	b480      	push	{r7}
 8010fee:	af00      	add	r7, sp, #0
  LCD_CurrentFrameBuffer = LCD_FRAME_BUFFER;
 8010ff0:	4b05      	ldr	r3, [pc, #20]	; (8011008 <UB_LCD_SetLayer_1+0x1c>)
 8010ff2:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8010ff6:	601a      	str	r2, [r3, #0]
  LCD_CurrentLayer = 0;
 8010ff8:	4b04      	ldr	r3, [pc, #16]	; (801100c <UB_LCD_SetLayer_1+0x20>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	601a      	str	r2, [r3, #0]
}
 8010ffe:	bf00      	nop
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr
 8011008:	20003600 	.word	0x20003600
 801100c:	200035f4 	.word	0x200035f4

08011010 <UB_LCD_SetLayer_2>:

//--------------------------------------------------------------
// Vordergrund-Layer aktivieren
//--------------------------------------------------------------
void UB_LCD_SetLayer_2(void)
{
 8011010:	b480      	push	{r7}
 8011012:	af00      	add	r7, sp, #0
  LCD_CurrentFrameBuffer = LCD_FRAME_BUFFER + LCD_FRAME_OFFSET;
 8011014:	4b05      	ldr	r3, [pc, #20]	; (801102c <UB_LCD_SetLayer_2+0x1c>)
 8011016:	4a06      	ldr	r2, [pc, #24]	; (8011030 <UB_LCD_SetLayer_2+0x20>)
 8011018:	601a      	str	r2, [r3, #0]
  LCD_CurrentLayer = 1;
 801101a:	4b06      	ldr	r3, [pc, #24]	; (8011034 <UB_LCD_SetLayer_2+0x24>)
 801101c:	2201      	movs	r2, #1
 801101e:	601a      	str	r2, [r3, #0]
}
 8011020:	bf00      	nop
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr
 801102a:	bf00      	nop
 801102c:	20003600 	.word	0x20003600
 8011030:	d0025800 	.word	0xd0025800
 8011034:	200035f4 	.word	0x200035f4

08011038 <UB_LCD_SetLayer_Menu>:

//--------------------------------------------------------------
// Menu-Layer aktivieren
//--------------------------------------------------------------
void UB_LCD_SetLayer_Menu(void)
{
 8011038:	b480      	push	{r7}
 801103a:	af00      	add	r7, sp, #0
  LCD_CurrentFrameBuffer = LCD_MenuFrameBuffer;
 801103c:	4b04      	ldr	r3, [pc, #16]	; (8011050 <UB_LCD_SetLayer_Menu+0x18>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	4a04      	ldr	r2, [pc, #16]	; (8011054 <UB_LCD_SetLayer_Menu+0x1c>)
 8011042:	6013      	str	r3, [r2, #0]
  // CurrentLayer nicht ver�ndern
}
 8011044:	bf00      	nop
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr
 801104e:	bf00      	nop
 8011050:	200035fc 	.word	0x200035fc
 8011054:	20003600 	.word	0x20003600

08011058 <UB_LCD_SetLayer_ADC>:

//--------------------------------------------------------------
// ADC-Layer aktivieren
//--------------------------------------------------------------
void UB_LCD_SetLayer_ADC(void)
{
 8011058:	b480      	push	{r7}
 801105a:	af00      	add	r7, sp, #0
  LCD_CurrentFrameBuffer = LCD_ADCFrameBuffer;
 801105c:	4b04      	ldr	r3, [pc, #16]	; (8011070 <UB_LCD_SetLayer_ADC+0x18>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4a04      	ldr	r2, [pc, #16]	; (8011074 <UB_LCD_SetLayer_ADC+0x1c>)
 8011062:	6013      	str	r3, [r2, #0]
  // CurrentLayer nicht ver�ndern
}
 8011064:	bf00      	nop
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	200035f0 	.word	0x200035f0
 8011074:	20003600 	.word	0x20003600

08011078 <UB_LCD_SetLayer_Back>:

//--------------------------------------------------------------
// alten Layer wieder aktivieren
//--------------------------------------------------------------
void UB_LCD_SetLayer_Back(void)
{
 8011078:	b480      	push	{r7}
 801107a:	af00      	add	r7, sp, #0
  if(LCD_CurrentLayer==0) {
 801107c:	4b08      	ldr	r3, [pc, #32]	; (80110a0 <UB_LCD_SetLayer_Back+0x28>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d104      	bne.n	801108e <UB_LCD_SetLayer_Back+0x16>
    LCD_CurrentFrameBuffer = LCD_FRAME_BUFFER;
 8011084:	4b07      	ldr	r3, [pc, #28]	; (80110a4 <UB_LCD_SetLayer_Back+0x2c>)
 8011086:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 801108a:	601a      	str	r2, [r3, #0]
  }
  else {
    LCD_CurrentFrameBuffer = LCD_FRAME_BUFFER + LCD_FRAME_OFFSET;
  }
}
 801108c:	e002      	b.n	8011094 <UB_LCD_SetLayer_Back+0x1c>
    LCD_CurrentFrameBuffer = LCD_FRAME_BUFFER + LCD_FRAME_OFFSET;
 801108e:	4b05      	ldr	r3, [pc, #20]	; (80110a4 <UB_LCD_SetLayer_Back+0x2c>)
 8011090:	4a05      	ldr	r2, [pc, #20]	; (80110a8 <UB_LCD_SetLayer_Back+0x30>)
 8011092:	601a      	str	r2, [r3, #0]
}
 8011094:	bf00      	nop
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	200035f4 	.word	0x200035f4
 80110a4:	20003600 	.word	0x20003600
 80110a8:	d0025800 	.word	0xd0025800

080110ac <UB_LCD_FillLayer>:

//--------------------------------------------------------------
// F�llt den aktuellen Layer komplett mit einer Farbe
//--------------------------------------------------------------
void UB_LCD_FillLayer(uint32_t color)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af02      	add	r7, sp, #8
 80110b2:	6078      	str	r0, [r7, #4]
	DMA2D_FillRect(color, 0, 0, LCD_MAXX, LCD_MAXY);
 80110b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80110b8:	9300      	str	r3, [sp, #0]
 80110ba:	23f0      	movs	r3, #240	; 0xf0
 80110bc:	2200      	movs	r2, #0
 80110be:	2100      	movs	r1, #0
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7ff fc6d 	bl	80109a0 <DMA2D_FillRect>
}
 80110c6:	bf00      	nop
 80110c8:	3708      	adds	r7, #8
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
	...

080110d0 <UB_LCD_SetTransparency>:
//--------------------------------------------------------------
// setzt Transparenz data vom aktuellen Layer
// data : [0...255] 0=durchsichtig ... 255=solid
//--------------------------------------------------------------
void UB_LCD_SetTransparency(uint8_t data)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	4603      	mov	r3, r0
 80110d8:	71fb      	strb	r3, [r7, #7]
  if (LCD_CurrentLayer == 0) {
 80110da:	4b0a      	ldr	r3, [pc, #40]	; (8011104 <UB_LCD_SetTransparency+0x34>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d106      	bne.n	80110f0 <UB_LCD_SetTransparency+0x20>
	  HAL_LTDC_SetAlpha(&hltdc,data,LTDC_LAYER_1);
 80110e2:	79fb      	ldrb	r3, [r7, #7]
 80110e4:	2200      	movs	r2, #0
 80110e6:	4619      	mov	r1, r3
 80110e8:	4807      	ldr	r0, [pc, #28]	; (8011108 <UB_LCD_SetTransparency+0x38>)
 80110ea:	f7fc fcc9 	bl	800da80 <HAL_LTDC_SetAlpha>
  }
  else{
	  HAL_LTDC_SetAlpha(&hltdc,data,LTDC_LAYER_2);
  }
}
 80110ee:	e005      	b.n	80110fc <UB_LCD_SetTransparency+0x2c>
	  HAL_LTDC_SetAlpha(&hltdc,data,LTDC_LAYER_2);
 80110f0:	79fb      	ldrb	r3, [r7, #7]
 80110f2:	2201      	movs	r2, #1
 80110f4:	4619      	mov	r1, r3
 80110f6:	4804      	ldr	r0, [pc, #16]	; (8011108 <UB_LCD_SetTransparency+0x38>)
 80110f8:	f7fc fcc2 	bl	800da80 <HAL_LTDC_SetAlpha>
}
 80110fc:	bf00      	nop
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	200035f4 	.word	0x200035f4
 8011108:	2000333c 	.word	0x2000333c

0801110c <UB_LCD_SetCursor2Draw>:

//--------------------------------------------------------------
// setzt den Cursor auf x,y Position
//--------------------------------------------------------------
void UB_LCD_SetCursor2Draw(uint16_t xpos, uint16_t ypos)
{
 801110c:	b480      	push	{r7}
 801110e:	b083      	sub	sp, #12
 8011110:	af00      	add	r7, sp, #0
 8011112:	4603      	mov	r3, r0
 8011114:	460a      	mov	r2, r1
 8011116:	80fb      	strh	r3, [r7, #6]
 8011118:	4613      	mov	r3, r2
 801111a:	80bb      	strh	r3, [r7, #4]
  aktCursorX=xpos;
 801111c:	4a0e      	ldr	r2, [pc, #56]	; (8011158 <UB_LCD_SetCursor2Draw+0x4c>)
 801111e:	88fb      	ldrh	r3, [r7, #6]
 8011120:	8013      	strh	r3, [r2, #0]
  aktCursorY=ypos;
 8011122:	4a0e      	ldr	r2, [pc, #56]	; (801115c <UB_LCD_SetCursor2Draw+0x50>)
 8011124:	88bb      	ldrh	r3, [r7, #4]
 8011126:	8013      	strh	r3, [r2, #0]

  aktCursorPos=LCD_CurrentFrameBuffer+(2*((aktCursorY*LCD_MAXX)+aktCursorX));
 8011128:	4b0c      	ldr	r3, [pc, #48]	; (801115c <UB_LCD_SetCursor2Draw+0x50>)
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	461a      	mov	r2, r3
 801112e:	4613      	mov	r3, r2
 8011130:	011b      	lsls	r3, r3, #4
 8011132:	1a9b      	subs	r3, r3, r2
 8011134:	011b      	lsls	r3, r3, #4
 8011136:	461a      	mov	r2, r3
 8011138:	4b07      	ldr	r3, [pc, #28]	; (8011158 <UB_LCD_SetCursor2Draw+0x4c>)
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	4413      	add	r3, r2
 801113e:	005b      	lsls	r3, r3, #1
 8011140:	461a      	mov	r2, r3
 8011142:	4b07      	ldr	r3, [pc, #28]	; (8011160 <UB_LCD_SetCursor2Draw+0x54>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	4413      	add	r3, r2
 8011148:	4a06      	ldr	r2, [pc, #24]	; (8011164 <UB_LCD_SetCursor2Draw+0x58>)
 801114a:	6013      	str	r3, [r2, #0]
}
 801114c:	bf00      	nop
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr
 8011158:	2000192a 	.word	0x2000192a
 801115c:	2000192c 	.word	0x2000192c
 8011160:	20003600 	.word	0x20003600
 8011164:	20001930 	.word	0x20001930

08011168 <UB_LCD_DrawPixel>:
//--------------------------------------------------------------
// zeichnet ein Pixel an aktueller XY-Position
// und incrementiert Cursor
//--------------------------------------------------------------
void UB_LCD_DrawPixel(uint32_t color)
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  *(volatile uint16_t*)(aktCursorPos)=color;
 8011170:	4b2b      	ldr	r3, [pc, #172]	; (8011220 <UB_LCD_DrawPixel+0xb8>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	687a      	ldr	r2, [r7, #4]
 8011176:	b292      	uxth	r2, r2
 8011178:	801a      	strh	r2, [r3, #0]
  if(LCD_DISPLAY_MODE==PORTRAIT) {
 801117a:	4b2a      	ldr	r3, [pc, #168]	; (8011224 <UB_LCD_DrawPixel+0xbc>)
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d11b      	bne.n	80111ba <UB_LCD_DrawPixel+0x52>
    aktCursorX++;
 8011182:	4b29      	ldr	r3, [pc, #164]	; (8011228 <UB_LCD_DrawPixel+0xc0>)
 8011184:	881b      	ldrh	r3, [r3, #0]
 8011186:	3301      	adds	r3, #1
 8011188:	b29a      	uxth	r2, r3
 801118a:	4b27      	ldr	r3, [pc, #156]	; (8011228 <UB_LCD_DrawPixel+0xc0>)
 801118c:	801a      	strh	r2, [r3, #0]
    if(aktCursorX>=LCD_MAXX) {
 801118e:	4b26      	ldr	r3, [pc, #152]	; (8011228 <UB_LCD_DrawPixel+0xc0>)
 8011190:	881b      	ldrh	r3, [r3, #0]
 8011192:	2bef      	cmp	r3, #239	; 0xef
 8011194:	d92c      	bls.n	80111f0 <UB_LCD_DrawPixel+0x88>
      aktCursorX=0;
 8011196:	4b24      	ldr	r3, [pc, #144]	; (8011228 <UB_LCD_DrawPixel+0xc0>)
 8011198:	2200      	movs	r2, #0
 801119a:	801a      	strh	r2, [r3, #0]
      aktCursorY++;
 801119c:	4b23      	ldr	r3, [pc, #140]	; (801122c <UB_LCD_DrawPixel+0xc4>)
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	3301      	adds	r3, #1
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	4b21      	ldr	r3, [pc, #132]	; (801122c <UB_LCD_DrawPixel+0xc4>)
 80111a6:	801a      	strh	r2, [r3, #0]
      if(aktCursorY>=LCD_MAXY) aktCursorY=0;
 80111a8:	4b20      	ldr	r3, [pc, #128]	; (801122c <UB_LCD_DrawPixel+0xc4>)
 80111aa:	881b      	ldrh	r3, [r3, #0]
 80111ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80111b0:	d31e      	bcc.n	80111f0 <UB_LCD_DrawPixel+0x88>
 80111b2:	4b1e      	ldr	r3, [pc, #120]	; (801122c <UB_LCD_DrawPixel+0xc4>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	801a      	strh	r2, [r3, #0]
 80111b8:	e01a      	b.n	80111f0 <UB_LCD_DrawPixel+0x88>
    }
  }
  else {
    aktCursorY++;
 80111ba:	4b1c      	ldr	r3, [pc, #112]	; (801122c <UB_LCD_DrawPixel+0xc4>)
 80111bc:	881b      	ldrh	r3, [r3, #0]
 80111be:	3301      	adds	r3, #1
 80111c0:	b29a      	uxth	r2, r3
 80111c2:	4b1a      	ldr	r3, [pc, #104]	; (801122c <UB_LCD_DrawPixel+0xc4>)
 80111c4:	801a      	strh	r2, [r3, #0]
    if(aktCursorY>=LCD_MAXY) {
 80111c6:	4b19      	ldr	r3, [pc, #100]	; (801122c <UB_LCD_DrawPixel+0xc4>)
 80111c8:	881b      	ldrh	r3, [r3, #0]
 80111ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80111ce:	d30f      	bcc.n	80111f0 <UB_LCD_DrawPixel+0x88>
      aktCursorY=0;
 80111d0:	4b16      	ldr	r3, [pc, #88]	; (801122c <UB_LCD_DrawPixel+0xc4>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	801a      	strh	r2, [r3, #0]
      aktCursorX++;
 80111d6:	4b14      	ldr	r3, [pc, #80]	; (8011228 <UB_LCD_DrawPixel+0xc0>)
 80111d8:	881b      	ldrh	r3, [r3, #0]
 80111da:	3301      	adds	r3, #1
 80111dc:	b29a      	uxth	r2, r3
 80111de:	4b12      	ldr	r3, [pc, #72]	; (8011228 <UB_LCD_DrawPixel+0xc0>)
 80111e0:	801a      	strh	r2, [r3, #0]
      if(aktCursorX>=LCD_MAXX) aktCursorX=0;
 80111e2:	4b11      	ldr	r3, [pc, #68]	; (8011228 <UB_LCD_DrawPixel+0xc0>)
 80111e4:	881b      	ldrh	r3, [r3, #0]
 80111e6:	2bef      	cmp	r3, #239	; 0xef
 80111e8:	d902      	bls.n	80111f0 <UB_LCD_DrawPixel+0x88>
 80111ea:	4b0f      	ldr	r3, [pc, #60]	; (8011228 <UB_LCD_DrawPixel+0xc0>)
 80111ec:	2200      	movs	r2, #0
 80111ee:	801a      	strh	r2, [r3, #0]
    }
  }
  aktCursorPos=LCD_CurrentFrameBuffer+(2*((aktCursorY*LCD_MAXX)+aktCursorX));
 80111f0:	4b0e      	ldr	r3, [pc, #56]	; (801122c <UB_LCD_DrawPixel+0xc4>)
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	461a      	mov	r2, r3
 80111f6:	4613      	mov	r3, r2
 80111f8:	011b      	lsls	r3, r3, #4
 80111fa:	1a9b      	subs	r3, r3, r2
 80111fc:	011b      	lsls	r3, r3, #4
 80111fe:	461a      	mov	r2, r3
 8011200:	4b09      	ldr	r3, [pc, #36]	; (8011228 <UB_LCD_DrawPixel+0xc0>)
 8011202:	881b      	ldrh	r3, [r3, #0]
 8011204:	4413      	add	r3, r2
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	461a      	mov	r2, r3
 801120a:	4b09      	ldr	r3, [pc, #36]	; (8011230 <UB_LCD_DrawPixel+0xc8>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	4413      	add	r3, r2
 8011210:	4a03      	ldr	r2, [pc, #12]	; (8011220 <UB_LCD_DrawPixel+0xb8>)
 8011212:	6013      	str	r3, [r2, #0]
}
 8011214:	bf00      	nop
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	20001930 	.word	0x20001930
 8011224:	20001df8 	.word	0x20001df8
 8011228:	2000192a 	.word	0x2000192a
 801122c:	2000192c 	.word	0x2000192c
 8011230:	20003600 	.word	0x20003600

08011234 <UB_LCD_SetMode>:
// muss direkt nach dem Init gemacht werden
//
// Mode : [PORTRAIT=default, LANDSCAPE]
//--------------------------------------------------------------
void UB_LCD_SetMode(LCD_MODE_t mode)
{
 8011234:	b480      	push	{r7}
 8011236:	b083      	sub	sp, #12
 8011238:	af00      	add	r7, sp, #0
 801123a:	4603      	mov	r3, r0
 801123c:	71fb      	strb	r3, [r7, #7]
  if(mode==PORTRAIT) {
 801123e:	79fb      	ldrb	r3, [r7, #7]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d103      	bne.n	801124c <UB_LCD_SetMode+0x18>
    LCD_DISPLAY_MODE=PORTRAIT;
 8011244:	4b06      	ldr	r3, [pc, #24]	; (8011260 <UB_LCD_SetMode+0x2c>)
 8011246:	2200      	movs	r2, #0
 8011248:	701a      	strb	r2, [r3, #0]
  }
  else {
    LCD_DISPLAY_MODE=LANDSCAPE;
  }
}
 801124a:	e002      	b.n	8011252 <UB_LCD_SetMode+0x1e>
    LCD_DISPLAY_MODE=LANDSCAPE;
 801124c:	4b04      	ldr	r3, [pc, #16]	; (8011260 <UB_LCD_SetMode+0x2c>)
 801124e:	2201      	movs	r2, #1
 8011250:	701a      	strb	r2, [r3, #0]
}
 8011252:	bf00      	nop
 8011254:	370c      	adds	r7, #12
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	20001df8 	.word	0x20001df8

08011264 <UB_LCD_Refresh>:
//--------------------------------------------------------------
// wechselt den aktiven Layer zum zeichnen
// und zeigt den jeweils anderen Layer an
//--------------------------------------------------------------
void UB_LCD_Refresh(void)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	af00      	add	r7, sp, #0
  if(LCD_CurrentLayer==0) {
 8011268:	4b08      	ldr	r3, [pc, #32]	; (801128c <UB_LCD_Refresh+0x28>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d105      	bne.n	801127c <UB_LCD_Refresh+0x18>
    UB_LCD_SetLayer_2();
 8011270:	f7ff fece 	bl	8011010 <UB_LCD_SetLayer_2>
    UB_LCD_SetTransparency(0);
 8011274:	2000      	movs	r0, #0
 8011276:	f7ff ff2b 	bl	80110d0 <UB_LCD_SetTransparency>
  }
  else {
    UB_LCD_SetTransparency(255);
    UB_LCD_SetLayer_1();
  }
}
 801127a:	e004      	b.n	8011286 <UB_LCD_Refresh+0x22>
    UB_LCD_SetTransparency(255);
 801127c:	20ff      	movs	r0, #255	; 0xff
 801127e:	f7ff ff27 	bl	80110d0 <UB_LCD_SetTransparency>
    UB_LCD_SetLayer_1();
 8011282:	f7ff feb3 	bl	8010fec <UB_LCD_SetLayer_1>
}
 8011286:	bf00      	nop
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop
 801128c:	200035f4 	.word	0x200035f4

08011290 <P_LCD9341_InitIO>:
//--------------------------------------------------------------
// interne Funktion
// Init aller IO-Pins fuer das Display
//--------------------------------------------------------------
void P_LCD9341_InitIO(void)
{	
 8011290:	b580      	push	{r7, lr}
 8011292:	af00      	add	r7, sp, #0
  P_LCD9341_CS(SET);
 8011294:	2001      	movs	r0, #1
 8011296:	f000 f803 	bl	80112a0 <P_LCD9341_CS>
}
 801129a:	bf00      	nop
 801129c:	bd80      	pop	{r7, pc}
	...

080112a0 <P_LCD9341_CS>:
//--------------------------------------------------------------
// interne Funktion
// ChipSelect-Pin schalten
// data [SET, RESET]
//--------------------------------------------------------------
void P_LCD9341_CS(uint8_t State){
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	4603      	mov	r3, r0
 80112a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSX_GPIO_Port,CSX_Pin,State);
 80112aa:	79fb      	ldrb	r3, [r7, #7]
 80112ac:	461a      	mov	r2, r3
 80112ae:	2104      	movs	r1, #4
 80112b0:	4803      	ldr	r0, [pc, #12]	; (80112c0 <P_LCD9341_CS+0x20>)
 80112b2:	f7fb f97d 	bl	800c5b0 <HAL_GPIO_WritePin>
}
 80112b6:	bf00      	nop
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	40020800 	.word	0x40020800

080112c4 <P_LCD9341_WRX>:
//--------------------------------------------------------------
// interne Funktion
// WRX-Pin schalten
// data [SET, RESET]
//--------------------------------------------------------------
void P_LCD9341_WRX(uint8_t State){
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	4603      	mov	r3, r0
 80112cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port,WRX_DCX_Pin,State);
 80112ce:	79fb      	ldrb	r3, [r7, #7]
 80112d0:	461a      	mov	r2, r3
 80112d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80112d6:	4803      	ldr	r0, [pc, #12]	; (80112e4 <P_LCD9341_WRX+0x20>)
 80112d8:	f7fb f96a 	bl	800c5b0 <HAL_GPIO_WritePin>
}
 80112dc:	bf00      	nop
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	40020c00 	.word	0x40020c00

080112e8 <P_LCD9341_InitChip>:
//--------------------------------------------------------------
// interne Funktion
// initialisiert den ILI9341-Controller im Display
//--------------------------------------------------------------
void P_LCD9341_InitChip(void)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	af00      	add	r7, sp, #0
  P_LCD9341_CMD(0xCA);
 80112ec:	20ca      	movs	r0, #202	; 0xca
 80112ee:	f000 f943 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0xC3);
 80112f2:	20c3      	movs	r0, #195	; 0xc3
 80112f4:	f000 f964 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x08);
 80112f8:	2008      	movs	r0, #8
 80112fa:	f000 f961 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x50);
 80112fe:	2050      	movs	r0, #80	; 0x50
 8011300:	f000 f95e 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_POWERB);
 8011304:	20cf      	movs	r0, #207	; 0xcf
 8011306:	f000 f937 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x00);
 801130a:	2000      	movs	r0, #0
 801130c:	f000 f958 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0xC1);
 8011310:	20c1      	movs	r0, #193	; 0xc1
 8011312:	f000 f955 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x30);
 8011316:	2030      	movs	r0, #48	; 0x30
 8011318:	f000 f952 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_POWER_SEQ);
 801131c:	20ed      	movs	r0, #237	; 0xed
 801131e:	f000 f92b 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x64);
 8011322:	2064      	movs	r0, #100	; 0x64
 8011324:	f000 f94c 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x03);
 8011328:	2003      	movs	r0, #3
 801132a:	f000 f949 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x12);
 801132e:	2012      	movs	r0, #18
 8011330:	f000 f946 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x81);
 8011334:	2081      	movs	r0, #129	; 0x81
 8011336:	f000 f943 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_DTCA);
 801133a:	20e8      	movs	r0, #232	; 0xe8
 801133c:	f000 f91c 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x85);
 8011340:	2085      	movs	r0, #133	; 0x85
 8011342:	f000 f93d 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x00);
 8011346:	2000      	movs	r0, #0
 8011348:	f000 f93a 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x78);
 801134c:	2078      	movs	r0, #120	; 0x78
 801134e:	f000 f937 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_POWERA);
 8011352:	20cb      	movs	r0, #203	; 0xcb
 8011354:	f000 f910 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x39);
 8011358:	2039      	movs	r0, #57	; 0x39
 801135a:	f000 f931 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x2C);
 801135e:	202c      	movs	r0, #44	; 0x2c
 8011360:	f000 f92e 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x00);
 8011364:	2000      	movs	r0, #0
 8011366:	f000 f92b 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x34);
 801136a:	2034      	movs	r0, #52	; 0x34
 801136c:	f000 f928 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x02);
 8011370:	2002      	movs	r0, #2
 8011372:	f000 f925 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_PRC);
 8011376:	20f7      	movs	r0, #247	; 0xf7
 8011378:	f000 f8fe 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x20);
 801137c:	2020      	movs	r0, #32
 801137e:	f000 f91f 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_DTCB);
 8011382:	20ea      	movs	r0, #234	; 0xea
 8011384:	f000 f8f8 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x00);
 8011388:	2000      	movs	r0, #0
 801138a:	f000 f919 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x00);
 801138e:	2000      	movs	r0, #0
 8011390:	f000 f916 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_FRC);
 8011394:	20b1      	movs	r0, #177	; 0xb1
 8011396:	f000 f8ef 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x00);
 801139a:	2000      	movs	r0, #0
 801139c:	f000 f910 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x1B);
 80113a0:	201b      	movs	r0, #27
 80113a2:	f000 f90d 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_DFC);
 80113a6:	20b6      	movs	r0, #182	; 0xb6
 80113a8:	f000 f8e6 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x0A);
 80113ac:	200a      	movs	r0, #10
 80113ae:	f000 f907 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0xA2);
 80113b2:	20a2      	movs	r0, #162	; 0xa2
 80113b4:	f000 f904 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_POWER1);
 80113b8:	20c0      	movs	r0, #192	; 0xc0
 80113ba:	f000 f8dd 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x10);
 80113be:	2010      	movs	r0, #16
 80113c0:	f000 f8fe 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_POWER2);
 80113c4:	20c1      	movs	r0, #193	; 0xc1
 80113c6:	f000 f8d7 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x10);
 80113ca:	2010      	movs	r0, #16
 80113cc:	f000 f8f8 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_VCOM1);
 80113d0:	20c5      	movs	r0, #197	; 0xc5
 80113d2:	f000 f8d1 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x45);
 80113d6:	2045      	movs	r0, #69	; 0x45
 80113d8:	f000 f8f2 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x15);
 80113dc:	2015      	movs	r0, #21
 80113de:	f000 f8ef 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_VCOM2);
 80113e2:	20c7      	movs	r0, #199	; 0xc7
 80113e4:	f000 f8c8 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x90);
 80113e8:	2090      	movs	r0, #144	; 0x90
 80113ea:	f000 f8e9 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_MAC);
 80113ee:	2036      	movs	r0, #54	; 0x36
 80113f0:	f000 f8c2 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0xC8);
 80113f4:	20c8      	movs	r0, #200	; 0xc8
 80113f6:	f000 f8e3 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_3GAMMA_EN);
 80113fa:	20f2      	movs	r0, #242	; 0xf2
 80113fc:	f000 f8bc 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x00);
 8011400:	2000      	movs	r0, #0
 8011402:	f000 f8dd 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_RGB_INTERFACE);
 8011406:	20b0      	movs	r0, #176	; 0xb0
 8011408:	f000 f8b6 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0xC2);
 801140c:	20c2      	movs	r0, #194	; 0xc2
 801140e:	f000 f8d7 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_DFC);
 8011412:	20b6      	movs	r0, #182	; 0xb6
 8011414:	f000 f8b0 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x0A);
 8011418:	200a      	movs	r0, #10
 801141a:	f000 f8d1 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0xA7);
 801141e:	20a7      	movs	r0, #167	; 0xa7
 8011420:	f000 f8ce 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x27);
 8011424:	2027      	movs	r0, #39	; 0x27
 8011426:	f000 f8cb 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x04);
 801142a:	2004      	movs	r0, #4
 801142c:	f000 f8c8 	bl	80115c0 <P_LCD9341_DATA>

  P_LCD9341_CMD(LCD_COLUMN_ADDR);
 8011430:	202a      	movs	r0, #42	; 0x2a
 8011432:	f000 f8a1 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x00);
 8011436:	2000      	movs	r0, #0
 8011438:	f000 f8c2 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x00);
 801143c:	2000      	movs	r0, #0
 801143e:	f000 f8bf 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x00);
 8011442:	2000      	movs	r0, #0
 8011444:	f000 f8bc 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0xEF);
 8011448:	20ef      	movs	r0, #239	; 0xef
 801144a:	f000 f8b9 	bl	80115c0 <P_LCD9341_DATA>
  
  P_LCD9341_CMD(LCD_PAGE_ADDR);
 801144e:	202b      	movs	r0, #43	; 0x2b
 8011450:	f000 f892 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x00);
 8011454:	2000      	movs	r0, #0
 8011456:	f000 f8b3 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x00);
 801145a:	2000      	movs	r0, #0
 801145c:	f000 f8b0 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x01);
 8011460:	2001      	movs	r0, #1
 8011462:	f000 f8ad 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x3F);
 8011466:	203f      	movs	r0, #63	; 0x3f
 8011468:	f000 f8aa 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_INTERFACE);
 801146c:	20f6      	movs	r0, #246	; 0xf6
 801146e:	f000 f883 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x01);
 8011472:	2001      	movs	r0, #1
 8011474:	f000 f8a4 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x00);
 8011478:	2000      	movs	r0, #0
 801147a:	f000 f8a1 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x06);
 801147e:	2006      	movs	r0, #6
 8011480:	f000 f89e 	bl	80115c0 <P_LCD9341_DATA>

  P_LCD9341_CMD(LCD_GRAM);
 8011484:	202c      	movs	r0, #44	; 0x2c
 8011486:	f000 f877 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_Delay(LCD_INIT_PAUSE);
 801148a:	20c8      	movs	r0, #200	; 0xc8
 801148c:	f000 f8bc 	bl	8011608 <P_LCD9341_Delay>

  P_LCD9341_CMD(LCD_GAMMA);
 8011490:	2026      	movs	r0, #38	; 0x26
 8011492:	f000 f871 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x01);
 8011496:	2001      	movs	r0, #1
 8011498:	f000 f892 	bl	80115c0 <P_LCD9341_DATA>

  P_LCD9341_CMD(LCD_PGAMMA);
 801149c:	20e0      	movs	r0, #224	; 0xe0
 801149e:	f000 f86b 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x0F);
 80114a2:	200f      	movs	r0, #15
 80114a4:	f000 f88c 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x29);
 80114a8:	2029      	movs	r0, #41	; 0x29
 80114aa:	f000 f889 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x24);
 80114ae:	2024      	movs	r0, #36	; 0x24
 80114b0:	f000 f886 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x0C);
 80114b4:	200c      	movs	r0, #12
 80114b6:	f000 f883 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x0E);
 80114ba:	200e      	movs	r0, #14
 80114bc:	f000 f880 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x09);
 80114c0:	2009      	movs	r0, #9
 80114c2:	f000 f87d 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x4E);
 80114c6:	204e      	movs	r0, #78	; 0x4e
 80114c8:	f000 f87a 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x78);
 80114cc:	2078      	movs	r0, #120	; 0x78
 80114ce:	f000 f877 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x3C);
 80114d2:	203c      	movs	r0, #60	; 0x3c
 80114d4:	f000 f874 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x09);
 80114d8:	2009      	movs	r0, #9
 80114da:	f000 f871 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x13);
 80114de:	2013      	movs	r0, #19
 80114e0:	f000 f86e 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x05);
 80114e4:	2005      	movs	r0, #5
 80114e6:	f000 f86b 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x17);
 80114ea:	2017      	movs	r0, #23
 80114ec:	f000 f868 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x11);
 80114f0:	2011      	movs	r0, #17
 80114f2:	f000 f865 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x00);
 80114f6:	2000      	movs	r0, #0
 80114f8:	f000 f862 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_CMD(LCD_NGAMMA);
 80114fc:	20e1      	movs	r0, #225	; 0xe1
 80114fe:	f000 f83b 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_DATA(0x00);
 8011502:	2000      	movs	r0, #0
 8011504:	f000 f85c 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x16);
 8011508:	2016      	movs	r0, #22
 801150a:	f000 f859 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x1B);
 801150e:	201b      	movs	r0, #27
 8011510:	f000 f856 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x04);
 8011514:	2004      	movs	r0, #4
 8011516:	f000 f853 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x11);
 801151a:	2011      	movs	r0, #17
 801151c:	f000 f850 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x07);
 8011520:	2007      	movs	r0, #7
 8011522:	f000 f84d 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x31);
 8011526:	2031      	movs	r0, #49	; 0x31
 8011528:	f000 f84a 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x33);
 801152c:	2033      	movs	r0, #51	; 0x33
 801152e:	f000 f847 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x42);
 8011532:	2042      	movs	r0, #66	; 0x42
 8011534:	f000 f844 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x05);
 8011538:	2005      	movs	r0, #5
 801153a:	f000 f841 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x0C);
 801153e:	200c      	movs	r0, #12
 8011540:	f000 f83e 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x0A);
 8011544:	200a      	movs	r0, #10
 8011546:	f000 f83b 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x28);
 801154a:	2028      	movs	r0, #40	; 0x28
 801154c:	f000 f838 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x2F);
 8011550:	202f      	movs	r0, #47	; 0x2f
 8011552:	f000 f835 	bl	80115c0 <P_LCD9341_DATA>
  P_LCD9341_DATA(0x0F);
 8011556:	200f      	movs	r0, #15
 8011558:	f000 f832 	bl	80115c0 <P_LCD9341_DATA>

  P_LCD9341_CMD(LCD_SLEEP_OUT);
 801155c:	2011      	movs	r0, #17
 801155e:	f000 f80b 	bl	8011578 <P_LCD9341_CMD>
  P_LCD9341_Delay(LCD_INIT_PAUSE);
 8011562:	20c8      	movs	r0, #200	; 0xc8
 8011564:	f000 f850 	bl	8011608 <P_LCD9341_Delay>
  P_LCD9341_CMD(LCD_DISPLAY_ON);
 8011568:	2029      	movs	r0, #41	; 0x29
 801156a:	f000 f805 	bl	8011578 <P_LCD9341_CMD>
  
  P_LCD9341_CMD(LCD_GRAM);
 801156e:	202c      	movs	r0, #44	; 0x2c
 8011570:	f000 f802 	bl	8011578 <P_LCD9341_CMD>
}
 8011574:	bf00      	nop
 8011576:	bd80      	pop	{r7, pc}

08011578 <P_LCD9341_CMD>:
//--------------------------------------------------------------
// interne Funktion
// Kommando per SPI an Display senden
//--------------------------------------------------------------
void P_LCD9341_CMD(uint8_t data)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
 801157e:	4603      	mov	r3, r0
 8011580:	71fb      	strb	r3, [r7, #7]
  // Kommando
  P_LCD9341_WRX(RESET);
 8011582:	2000      	movs	r0, #0
 8011584:	f7ff fe9e 	bl	80112c4 <P_LCD9341_WRX>

  // ChipSelect auf Lo
  P_LCD9341_CS(RESET);
 8011588:	2000      	movs	r0, #0
 801158a:	f7ff fe89 	bl	80112a0 <P_LCD9341_CS>

  // data senden
  if( HAL_SPI_Transmit(&hspi5, &data, 1, 3000) != HAL_OK){ Error_Handler(); }
 801158e:	1df9      	adds	r1, r7, #7
 8011590:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011594:	2201      	movs	r2, #1
 8011596:	4809      	ldr	r0, [pc, #36]	; (80115bc <P_LCD9341_CMD+0x44>)
 8011598:	f7fd fc83 	bl	800eea2 <HAL_SPI_Transmit>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d001      	beq.n	80115a6 <P_LCD9341_CMD+0x2e>
 80115a2:	f7f0 ff13 	bl	80023cc <Error_Handler>
  // kleine Pause
  P_LCD9341_Delay(LCD_SPI_PAUSE);
 80115a6:	200a      	movs	r0, #10
 80115a8:	f000 f82e 	bl	8011608 <P_LCD9341_Delay>
 
  // ChipSelect auf Hi
  P_LCD9341_CS(SET);
 80115ac:	2001      	movs	r0, #1
 80115ae:	f7ff fe77 	bl	80112a0 <P_LCD9341_CS>
}
 80115b2:	bf00      	nop
 80115b4:	3708      	adds	r7, #8
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	20003254 	.word	0x20003254

080115c0 <P_LCD9341_DATA>:
//--------------------------------------------------------------
// interne Funktion
// Daten per SPI an Display senden
//--------------------------------------------------------------
void P_LCD9341_DATA(uint8_t data)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	4603      	mov	r3, r0
 80115c8:	71fb      	strb	r3, [r7, #7]
  // Data
  P_LCD9341_WRX(SET);
 80115ca:	2001      	movs	r0, #1
 80115cc:	f7ff fe7a 	bl	80112c4 <P_LCD9341_WRX>

  // ChipSelect auf Lo
  P_LCD9341_CS(RESET);
 80115d0:	2000      	movs	r0, #0
 80115d2:	f7ff fe65 	bl	80112a0 <P_LCD9341_CS>

  // data senden
  if( HAL_SPI_Transmit(&hspi5, &data, 1, 3000) != HAL_OK){ Error_Handler(); }
 80115d6:	1df9      	adds	r1, r7, #7
 80115d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80115dc:	2201      	movs	r2, #1
 80115de:	4809      	ldr	r0, [pc, #36]	; (8011604 <P_LCD9341_DATA+0x44>)
 80115e0:	f7fd fc5f 	bl	800eea2 <HAL_SPI_Transmit>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d001      	beq.n	80115ee <P_LCD9341_DATA+0x2e>
 80115ea:	f7f0 feef 	bl	80023cc <Error_Handler>
 
  // kleine Pause
  P_LCD9341_Delay(LCD_SPI_PAUSE);
 80115ee:	200a      	movs	r0, #10
 80115f0:	f000 f80a 	bl	8011608 <P_LCD9341_Delay>

  // ChipSelect auf Hi
  P_LCD9341_CS(SET);
 80115f4:	2001      	movs	r0, #1
 80115f6:	f7ff fe53 	bl	80112a0 <P_LCD9341_CS>
}
 80115fa:	bf00      	nop
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	20003254 	.word	0x20003254

08011608 <P_LCD9341_Delay>:
//--------------------------------------------------------------
// interne Funktion
// kleine Pause
//-------------------------------------------------------------- 
void P_LCD9341_Delay(volatile uint32_t nCount)
{
 8011608:	b480      	push	{r7}
 801160a:	b085      	sub	sp, #20
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
  volatile uint32_t index = 0;
 8011610:	2300      	movs	r3, #0
 8011612:	60fb      	str	r3, [r7, #12]

  for(index = nCount; index != 0; index--);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	60fb      	str	r3, [r7, #12]
 8011618:	e002      	b.n	8011620 <P_LCD9341_Delay+0x18>
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	3b01      	subs	r3, #1
 801161e:	60fb      	str	r3, [r7, #12]
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1f9      	bne.n	801161a <P_LCD9341_Delay+0x12>
}
 8011626:	bf00      	nop
 8011628:	bf00      	nop
 801162a:	3714      	adds	r7, #20
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <UB_SDRAM_Init>:
// Init vom externen SDRAM
// Return_wert :
//  -> ERROR   , wenn SDRAM nicht gefunden wurde
//  -> SUCCESS , wenn SDRAM gefunden wurde
//--------------------------------------------------------------
ErrorStatus UB_SDRAM_Init(void){
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
  ErrorStatus ret_value=ERROR;
 801163a:	2301      	movs	r3, #1
 801163c:	71fb      	strb	r3, [r7, #7]
  uint16_t old_Val,new_Val,tmp;
  static uint8_t init_ok=0;

  // initialisierung darf nur einmal gemacht werden
  if(init_ok!=0) {
 801163e:	4b2a      	ldr	r3, [pc, #168]	; (80116e8 <UB_SDRAM_Init+0xb4>)
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d007      	beq.n	8011656 <UB_SDRAM_Init+0x22>
    if(init_ok==1) {
 8011646:	4b28      	ldr	r3, [pc, #160]	; (80116e8 <UB_SDRAM_Init+0xb4>)
 8011648:	781b      	ldrb	r3, [r3, #0]
 801164a:	2b01      	cmp	r3, #1
 801164c:	d101      	bne.n	8011652 <UB_SDRAM_Init+0x1e>
      return(SUCCESS);
 801164e:	2300      	movs	r3, #0
 8011650:	e046      	b.n	80116e0 <UB_SDRAM_Init+0xac>
    }
    else {
      return(ERROR);
 8011652:	2301      	movs	r3, #1
 8011654:	e044      	b.n	80116e0 <UB_SDRAM_Init+0xac>
  // check ob SDRAM vorhanden ist
  // schreib-/lese-Test auf Adr 0x00
  //-----------------------------------------


  if( HAL_SDRAM_Read_16b(&hsdram1, SDRAM_START_ADR, &old_Val, 1) != HAL_OK){ Error_Handler(); }	// Save old value
 8011656:	1d3a      	adds	r2, r7, #4
 8011658:	2301      	movs	r3, #1
 801165a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 801165e:	4823      	ldr	r0, [pc, #140]	; (80116ec <UB_SDRAM_Init+0xb8>)
 8011660:	f7fd faba 	bl	800ebd8 <HAL_SDRAM_Read_16b>
 8011664:	4603      	mov	r3, r0
 8011666:	2b00      	cmp	r3, #0
 8011668:	d001      	beq.n	801166e <UB_SDRAM_Init+0x3a>
 801166a:	f7f0 feaf 	bl	80023cc <Error_Handler>
  tmp=0x5A3C;
 801166e:	f645 233c 	movw	r3, #23100	; 0x5a3c
 8011672:	803b      	strh	r3, [r7, #0]
  if( HAL_SDRAM_Write_16b(&hsdram1, SDRAM_START_ADR, &tmp, 1) != HAL_OK){ Error_Handler(); }		// Write new value
 8011674:	463a      	mov	r2, r7
 8011676:	2301      	movs	r3, #1
 8011678:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 801167c:	481b      	ldr	r0, [pc, #108]	; (80116ec <UB_SDRAM_Init+0xb8>)
 801167e:	f7fd faeb 	bl	800ec58 <HAL_SDRAM_Write_16b>
 8011682:	4603      	mov	r3, r0
 8011684:	2b00      	cmp	r3, #0
 8011686:	d001      	beq.n	801168c <UB_SDRAM_Init+0x58>
 8011688:	f7f0 fea0 	bl	80023cc <Error_Handler>
  if( HAL_SDRAM_Read_16b(&hsdram1, SDRAM_START_ADR, &new_Val, 1) != HAL_OK){ Error_Handler(); }	// Read new value
 801168c:	1cba      	adds	r2, r7, #2
 801168e:	2301      	movs	r3, #1
 8011690:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8011694:	4815      	ldr	r0, [pc, #84]	; (80116ec <UB_SDRAM_Init+0xb8>)
 8011696:	f7fd fa9f 	bl	800ebd8 <HAL_SDRAM_Read_16b>
 801169a:	4603      	mov	r3, r0
 801169c:	2b00      	cmp	r3, #0
 801169e:	d001      	beq.n	80116a4 <UB_SDRAM_Init+0x70>
 80116a0:	f7f0 fe94 	bl	80023cc <Error_Handler>
  if( HAL_SDRAM_Write_16b(&hsdram1, SDRAM_START_ADR, &old_Val, 1) != HAL_OK){ Error_Handler(); } // Write original value
 80116a4:	1d3a      	adds	r2, r7, #4
 80116a6:	2301      	movs	r3, #1
 80116a8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80116ac:	480f      	ldr	r0, [pc, #60]	; (80116ec <UB_SDRAM_Init+0xb8>)
 80116ae:	f7fd fad3 	bl	800ec58 <HAL_SDRAM_Write_16b>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d001      	beq.n	80116bc <UB_SDRAM_Init+0x88>
 80116b8:	f7f0 fe88 	bl	80023cc <Error_Handler>
  if(new_Val==0x5A3C) ret_value=SUCCESS; // Check the new value read is the same as the written value
 80116bc:	887b      	ldrh	r3, [r7, #2]
 80116be:	f645 223c 	movw	r2, #23100	; 0x5a3c
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d101      	bne.n	80116ca <UB_SDRAM_Init+0x96>
 80116c6:	2300      	movs	r3, #0
 80116c8:	71fb      	strb	r3, [r7, #7]

  // Store init result
  if(ret_value==SUCCESS) {
 80116ca:	79fb      	ldrb	r3, [r7, #7]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d103      	bne.n	80116d8 <UB_SDRAM_Init+0xa4>
    init_ok=1;
 80116d0:	4b05      	ldr	r3, [pc, #20]	; (80116e8 <UB_SDRAM_Init+0xb4>)
 80116d2:	2201      	movs	r2, #1
 80116d4:	701a      	strb	r2, [r3, #0]
 80116d6:	e002      	b.n	80116de <UB_SDRAM_Init+0xaa>
  }
  else {
    init_ok=2;
 80116d8:	4b03      	ldr	r3, [pc, #12]	; (80116e8 <UB_SDRAM_Init+0xb4>)
 80116da:	2202      	movs	r2, #2
 80116dc:	701a      	strb	r2, [r3, #0]
  }

  return(ret_value);
 80116de:	79fb      	ldrb	r3, [r7, #7]
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	20001934 	.word	0x20001934
 80116ec:	2000358c 	.word	0x2000358c

080116f0 <SDRAM_InitSequence>:
#define SDRAM_MODEREG_CAS_LATENCY_3       ((uint16_t)0x0030)
#define SDRAM_MODEREG_OPERATING_MODE_STANDARD  ((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_PROGRAMMED ((uint16_t)0x0000)
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE   ((uint16_t)0x0200)

void SDRAM_InitSequence(void) {
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b086      	sub	sp, #24
 80116f4:	af00      	add	r7, sp, #0

	FMC_SDRAM_CommandTypeDef FMC_SDRAMCommandStructure;
	uint32_t tmpr = 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	617b      	str	r3, [r7, #20]

	/* Step 1 --------------------------------------------------------------------*/
	/* Configure a clock configuration enable command */
	FMC_SDRAMCommandStructure.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80116fa:	2301      	movs	r3, #1
 80116fc:	607b      	str	r3, [r7, #4]
	FMC_SDRAMCommandStructure.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80116fe:	2308      	movs	r3, #8
 8011700:	60bb      	str	r3, [r7, #8]
	FMC_SDRAMCommandStructure.AutoRefreshNumber = 1;
 8011702:	2301      	movs	r3, #1
 8011704:	60fb      	str	r3, [r7, #12]
	FMC_SDRAMCommandStructure.ModeRegisterDefinition = 0;
 8011706:	2300      	movs	r3, #0
 8011708:	613b      	str	r3, [r7, #16]
	while( (HAL_SDRAM_GetState(&hsdram1) & HAL_SDRAM_STATE_BUSY) );					// Check Busy Flag before sending command
 801170a:	bf00      	nop
 801170c:	483a      	ldr	r0, [pc, #232]	; (80117f8 <SDRAM_InitSequence+0x108>)
 801170e:	f7fd fb31 	bl	800ed74 <HAL_SDRAM_GetState>
 8011712:	4603      	mov	r3, r0
 8011714:	f003 0302 	and.w	r3, r3, #2
 8011718:	2b00      	cmp	r3, #0
 801171a:	d1f7      	bne.n	801170c <SDRAM_InitSequence+0x1c>
	HAL_SDRAM_SendCommand(&hsdram1, &FMC_SDRAMCommandStructure, SDRAM_TIMEOUT);
 801171c:	1d3b      	adds	r3, r7, #4
 801171e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011722:	4619      	mov	r1, r3
 8011724:	4834      	ldr	r0, [pc, #208]	; (80117f8 <SDRAM_InitSequence+0x108>)
 8011726:	f7fd fada 	bl	800ecde <HAL_SDRAM_SendCommand>

	/* Step 2 --------------------------------------------------------------------*/
	/* Configure a PALL (precharge all) command */
	FMC_SDRAMCommandStructure.CommandMode = FMC_SDRAM_CMD_PALL;
 801172a:	2302      	movs	r3, #2
 801172c:	607b      	str	r3, [r7, #4]
	FMC_SDRAMCommandStructure.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 801172e:	2308      	movs	r3, #8
 8011730:	60bb      	str	r3, [r7, #8]
	FMC_SDRAMCommandStructure.AutoRefreshNumber = 1;
 8011732:	2301      	movs	r3, #1
 8011734:	60fb      	str	r3, [r7, #12]
	FMC_SDRAMCommandStructure.ModeRegisterDefinition = 0;
 8011736:	2300      	movs	r3, #0
 8011738:	613b      	str	r3, [r7, #16]
	while( (HAL_SDRAM_GetState(&hsdram1) & HAL_SDRAM_STATE_BUSY) );					// Check Busy Flag before sending command
 801173a:	bf00      	nop
 801173c:	482e      	ldr	r0, [pc, #184]	; (80117f8 <SDRAM_InitSequence+0x108>)
 801173e:	f7fd fb19 	bl	800ed74 <HAL_SDRAM_GetState>
 8011742:	4603      	mov	r3, r0
 8011744:	f003 0302 	and.w	r3, r3, #2
 8011748:	2b00      	cmp	r3, #0
 801174a:	d1f7      	bne.n	801173c <SDRAM_InitSequence+0x4c>
	HAL_SDRAM_SendCommand(&hsdram1, &FMC_SDRAMCommandStructure, SDRAM_TIMEOUT);
 801174c:	1d3b      	adds	r3, r7, #4
 801174e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011752:	4619      	mov	r1, r3
 8011754:	4828      	ldr	r0, [pc, #160]	; (80117f8 <SDRAM_InitSequence+0x108>)
 8011756:	f7fd fac2 	bl	800ecde <HAL_SDRAM_SendCommand>

	/* Step 3 --------------------------------------------------------------------*/
	/* Configure a Auto-Refresh command */
	FMC_SDRAMCommandStructure.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801175a:	2303      	movs	r3, #3
 801175c:	607b      	str	r3, [r7, #4]
	FMC_SDRAMCommandStructure.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 801175e:	2308      	movs	r3, #8
 8011760:	60bb      	str	r3, [r7, #8]
	FMC_SDRAMCommandStructure.AutoRefreshNumber = 4;
 8011762:	2304      	movs	r3, #4
 8011764:	60fb      	str	r3, [r7, #12]
	FMC_SDRAMCommandStructure.ModeRegisterDefinition = 0;
 8011766:	2300      	movs	r3, #0
 8011768:	613b      	str	r3, [r7, #16]
	while( (HAL_SDRAM_GetState(&hsdram1) & HAL_SDRAM_STATE_BUSY) );					// Check Busy Flag before sending command
 801176a:	bf00      	nop
 801176c:	4822      	ldr	r0, [pc, #136]	; (80117f8 <SDRAM_InitSequence+0x108>)
 801176e:	f7fd fb01 	bl	800ed74 <HAL_SDRAM_GetState>
 8011772:	4603      	mov	r3, r0
 8011774:	f003 0302 	and.w	r3, r3, #2
 8011778:	2b00      	cmp	r3, #0
 801177a:	d1f7      	bne.n	801176c <SDRAM_InitSequence+0x7c>
	HAL_SDRAM_SendCommand(&hsdram1, &FMC_SDRAMCommandStructure, SDRAM_TIMEOUT);
 801177c:	1d3b      	adds	r3, r7, #4
 801177e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011782:	4619      	mov	r1, r3
 8011784:	481c      	ldr	r0, [pc, #112]	; (80117f8 <SDRAM_InitSequence+0x108>)
 8011786:	f7fd faaa 	bl	800ecde <HAL_SDRAM_SendCommand>

	/* Step 4 --------------------------------------------------------------------*/
	/* Program the external memory mode register */
	tmpr = (uint32_t)	SDRAM_MODEREG_BURST_LENGTH_1     |
 801178a:	f44f 730c 	mov.w	r3, #560	; 0x230
 801178e:	617b      	str	r3, [r7, #20]
						SDRAM_MODEREG_OPERATING_MODE_STANDARD |
						SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	/* Step 5 --------------------------------------------------------------------*/
	/* Configure a load Mode register command*/
	FMC_SDRAMCommandStructure.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8011790:	2304      	movs	r3, #4
 8011792:	607b      	str	r3, [r7, #4]
	FMC_SDRAMCommandStructure.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8011794:	2308      	movs	r3, #8
 8011796:	60bb      	str	r3, [r7, #8]
	FMC_SDRAMCommandStructure.AutoRefreshNumber = 1;
 8011798:	2301      	movs	r3, #1
 801179a:	60fb      	str	r3, [r7, #12]
	FMC_SDRAMCommandStructure.ModeRegisterDefinition = tmpr;
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	613b      	str	r3, [r7, #16]
	while( (HAL_SDRAM_GetState(&hsdram1) & HAL_SDRAM_STATE_BUSY) );					// Check Busy Flag before sending command
 80117a0:	bf00      	nop
 80117a2:	4815      	ldr	r0, [pc, #84]	; (80117f8 <SDRAM_InitSequence+0x108>)
 80117a4:	f7fd fae6 	bl	800ed74 <HAL_SDRAM_GetState>
 80117a8:	4603      	mov	r3, r0
 80117aa:	f003 0302 	and.w	r3, r3, #2
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d1f7      	bne.n	80117a2 <SDRAM_InitSequence+0xb2>
	HAL_SDRAM_SendCommand(&hsdram1, &FMC_SDRAMCommandStructure, SDRAM_TIMEOUT);
 80117b2:	1d3b      	adds	r3, r7, #4
 80117b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117b8:	4619      	mov	r1, r3
 80117ba:	480f      	ldr	r0, [pc, #60]	; (80117f8 <SDRAM_InitSequence+0x108>)
 80117bc:	f7fd fa8f 	bl	800ecde <HAL_SDRAM_SendCommand>

	/* Step 6 --------------------------------------------------------------------*/
	/* Set the refresh rate counter */
	/* (7.81 us x Freq) - 20 */
	/* Set the device refresh counter */
	while( (HAL_SDRAM_GetState(&hsdram1) & HAL_SDRAM_STATE_BUSY) );					// Check Busy Flag before sending command
 80117c0:	bf00      	nop
 80117c2:	480d      	ldr	r0, [pc, #52]	; (80117f8 <SDRAM_InitSequence+0x108>)
 80117c4:	f7fd fad6 	bl	800ed74 <HAL_SDRAM_GetState>
 80117c8:	4603      	mov	r3, r0
 80117ca:	f003 0302 	and.w	r3, r3, #2
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1f7      	bne.n	80117c2 <SDRAM_InitSequence+0xd2>
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); // local
 80117d2:	f240 21ab 	movw	r1, #683	; 0x2ab
 80117d6:	4808      	ldr	r0, [pc, #32]	; (80117f8 <SDRAM_InitSequence+0x108>)
 80117d8:	f7fd faac 	bl	800ed34 <HAL_SDRAM_ProgramRefreshRate>

	while( (HAL_SDRAM_GetState(&hsdram1) & HAL_SDRAM_STATE_BUSY) );					// Check Busy Flag before returning
 80117dc:	bf00      	nop
 80117de:	4806      	ldr	r0, [pc, #24]	; (80117f8 <SDRAM_InitSequence+0x108>)
 80117e0:	f7fd fac8 	bl	800ed74 <HAL_SDRAM_GetState>
 80117e4:	4603      	mov	r3, r0
 80117e6:	f003 0302 	and.w	r3, r3, #2
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d1f7      	bne.n	80117de <SDRAM_InitSequence+0xee>
}
 80117ee:	bf00      	nop
 80117f0:	bf00      	nop
 80117f2:	3718      	adds	r7, #24
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	2000358c 	.word	0x2000358c

080117fc <UB_Touch_Init>:
// Return_data :
//  -> ERROR   , wenn Touch nicht gefunden wurde
//  -> SUCCESS , wenn Touch OK
//--------------------------------------------------------------
ErrorStatus UB_Touch_Init(void)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
  uint16_t stmpe_id=0;
 8011802:	2300      	movs	r3, #0
 8011804:	80fb      	strh	r3, [r7, #6]

  // check for STMPE811
  stmpe_id = P_Touch_Read_16b(IOE_REG_CHIP_ID);		//Read Address 0
 8011806:	2000      	movs	r0, #0
 8011808:	f000 fad8 	bl	8011dbc <P_Touch_Read_16b>
 801180c:	4603      	mov	r3, r0
 801180e:	80fb      	strh	r3, [r7, #6]
  if(stmpe_id!=STMPE811_ID) {
 8011810:	88fb      	ldrh	r3, [r7, #6]
 8011812:	f640 0211 	movw	r2, #2065	; 0x811
 8011816:	4293      	cmp	r3, r2
 8011818:	d001      	beq.n	801181e <UB_Touch_Init+0x22>
    return(ERROR);
 801181a:	2301      	movs	r3, #1
 801181c:	e008      	b.n	8011830 <UB_Touch_Init+0x34>
  }

  // Generate SW-Reset
  P_Touch_Reset();
 801181e:	f000 f8b7 	bl	8011990 <P_Touch_Reset>

  // init
  P_Touch_FnctCmd(IOE_ADC_FCT, ENABLE);
 8011822:	2101      	movs	r1, #1
 8011824:	2001      	movs	r0, #1
 8011826:	f000 f8e7 	bl	80119f8 <P_Touch_FnctCmd>
  P_Touch_Config();
 801182a:	f000 f933 	bl	8011a94 <P_Touch_Config>

  return(SUCCESS);
 801182e:	2300      	movs	r3, #0
}
 8011830:	4618      	mov	r0, r3
 8011832:	3708      	adds	r7, #8
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}

08011838 <UB_Touch_Read>:
// Touch_Data.status : [TOUCH_PRESSED, TOUCH_RELEASED]
// Touch_Data.xp     : [0...239]
// Touch_Data.yp     : [0...319] 
//--------------------------------------------------------------
ErrorStatus UB_Touch_Read(void)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b08a      	sub	sp, #40	; 0x28
 801183c:	af04      	add	r7, sp, #16
  uint32_t xDiff, yDiff , x , y;
  static uint32_t _x = 0, _y = 0;
  uint8_t i2c_data;
  if(HAL_I2C_Mem_Read(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_TP_CTRL,1,&i2c_data,1,3000)!=HAL_OK){
 801183e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011842:	9302      	str	r3, [sp, #8]
 8011844:	2301      	movs	r3, #1
 8011846:	9301      	str	r3, [sp, #4]
 8011848:	1dfb      	adds	r3, r7, #7
 801184a:	9300      	str	r3, [sp, #0]
 801184c:	2301      	movs	r3, #1
 801184e:	2240      	movs	r2, #64	; 0x40
 8011850:	2182      	movs	r1, #130	; 0x82
 8011852:	484b      	ldr	r0, [pc, #300]	; (8011980 <UB_Touch_Read+0x148>)
 8011854:	f7fb f91e 	bl	800ca94 <HAL_I2C_Mem_Read>
 8011858:	4603      	mov	r3, r0
 801185a:	2b00      	cmp	r3, #0
 801185c:	d014      	beq.n	8011888 <UB_Touch_Read+0x50>
	  __HAL_I2C_DISABLE(&hi2c3);
 801185e:	4b48      	ldr	r3, [pc, #288]	; (8011980 <UB_Touch_Read+0x148>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	681a      	ldr	r2, [r3, #0]
 8011864:	4b46      	ldr	r3, [pc, #280]	; (8011980 <UB_Touch_Read+0x148>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f022 0201 	bic.w	r2, r2, #1
 801186c:	601a      	str	r2, [r3, #0]
	  HAL_Delay(5);
 801186e:	2005      	movs	r0, #5
 8011870:	f7f7 fbda 	bl	8009028 <HAL_Delay>
	  __HAL_I2C_ENABLE(&hi2c3);
 8011874:	4b42      	ldr	r3, [pc, #264]	; (8011980 <UB_Touch_Read+0x148>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	681a      	ldr	r2, [r3, #0]
 801187a:	4b41      	ldr	r3, [pc, #260]	; (8011980 <UB_Touch_Read+0x148>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f042 0201 	orr.w	r2, r2, #1
 8011882:	601a      	str	r2, [r3, #0]
	  return(ERROR);
 8011884:	2301      	movs	r3, #1
 8011886:	e077      	b.n	8011978 <UB_Touch_Read+0x140>
	  //Error_Handler();
  }
  if(i2c_data==0xFF) return(ERROR);
 8011888:	79fb      	ldrb	r3, [r7, #7]
 801188a:	2bff      	cmp	r3, #255	; 0xff
 801188c:	d101      	bne.n	8011892 <UB_Touch_Read+0x5a>
 801188e:	2301      	movs	r3, #1
 8011890:	e072      	b.n	8011978 <UB_Touch_Read+0x140>
  
  if((i2c_data&0x80)==0) {
 8011892:	79fb      	ldrb	r3, [r7, #7]
 8011894:	b25b      	sxtb	r3, r3
 8011896:	2b00      	cmp	r3, #0
 8011898:	db03      	blt.n	80118a2 <UB_Touch_Read+0x6a>
    Touch_Data.status = TOUCH_RELEASED;
 801189a:	4b3a      	ldr	r3, [pc, #232]	; (8011984 <UB_Touch_Read+0x14c>)
 801189c:	2201      	movs	r2, #1
 801189e:	701a      	strb	r2, [r3, #0]
 80118a0:	e002      	b.n	80118a8 <UB_Touch_Read+0x70>
  }
  else {
    Touch_Data.status = TOUCH_PRESSED;
 80118a2:	4b38      	ldr	r3, [pc, #224]	; (8011984 <UB_Touch_Read+0x14c>)
 80118a4:	2200      	movs	r2, #0
 80118a6:	701a      	strb	r2, [r3, #0]
  }

  if(Touch_Data.status==TOUCH_PRESSED) {
 80118a8:	4b36      	ldr	r3, [pc, #216]	; (8011984 <UB_Touch_Read+0x14c>)
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d130      	bne.n	8011912 <UB_Touch_Read+0xda>
    x = P_Touch_Read_X();
 80118b0:	f000 fa26 	bl	8011d00 <P_Touch_Read_X>
 80118b4:	4603      	mov	r3, r0
 80118b6:	617b      	str	r3, [r7, #20]
    y = P_Touch_Read_Y();
 80118b8:	f000 fa56 	bl	8011d68 <P_Touch_Read_Y>
 80118bc:	4603      	mov	r3, r0
 80118be:	613b      	str	r3, [r7, #16]
    xDiff = x > _x? (x - _x): (_x - x);
 80118c0:	4b31      	ldr	r3, [pc, #196]	; (8011988 <UB_Touch_Read+0x150>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d904      	bls.n	80118d4 <UB_Touch_Read+0x9c>
 80118ca:	4b2f      	ldr	r3, [pc, #188]	; (8011988 <UB_Touch_Read+0x150>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	697a      	ldr	r2, [r7, #20]
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	e003      	b.n	80118dc <UB_Touch_Read+0xa4>
 80118d4:	4b2c      	ldr	r3, [pc, #176]	; (8011988 <UB_Touch_Read+0x150>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	1ad3      	subs	r3, r2, r3
 80118dc:	60fb      	str	r3, [r7, #12]
    yDiff = y > _y? (y - _y): (_y - y);
 80118de:	4b2b      	ldr	r3, [pc, #172]	; (801198c <UB_Touch_Read+0x154>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	693a      	ldr	r2, [r7, #16]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d904      	bls.n	80118f2 <UB_Touch_Read+0xba>
 80118e8:	4b28      	ldr	r3, [pc, #160]	; (801198c <UB_Touch_Read+0x154>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	693a      	ldr	r2, [r7, #16]
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	e003      	b.n	80118fa <UB_Touch_Read+0xc2>
 80118f2:	4b26      	ldr	r3, [pc, #152]	; (801198c <UB_Touch_Read+0x154>)
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	60bb      	str	r3, [r7, #8]
    if (xDiff + yDiff > 5)
 80118fc:	68fa      	ldr	r2, [r7, #12]
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	4413      	add	r3, r2
 8011902:	2b05      	cmp	r3, #5
 8011904:	d905      	bls.n	8011912 <UB_Touch_Read+0xda>
    {
      _x = x;
 8011906:	4a20      	ldr	r2, [pc, #128]	; (8011988 <UB_Touch_Read+0x150>)
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	6013      	str	r3, [r2, #0]
      _y = y;
 801190c:	4a1f      	ldr	r2, [pc, #124]	; (801198c <UB_Touch_Read+0x154>)
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	6013      	str	r3, [r2, #0]
    }
  }
  
  Touch_Data.xp = _x;
 8011912:	4b1d      	ldr	r3, [pc, #116]	; (8011988 <UB_Touch_Read+0x150>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	b29a      	uxth	r2, r3
 8011918:	4b1a      	ldr	r3, [pc, #104]	; (8011984 <UB_Touch_Read+0x14c>)
 801191a:	805a      	strh	r2, [r3, #2]
  Touch_Data.yp = _y;
 801191c:	4b1b      	ldr	r3, [pc, #108]	; (801198c <UB_Touch_Read+0x154>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	b29a      	uxth	r2, r3
 8011922:	4b18      	ldr	r3, [pc, #96]	; (8011984 <UB_Touch_Read+0x14c>)
 8011924:	809a      	strh	r2, [r3, #4]
  
  i2c_data=0x01;
 8011926:	2301      	movs	r3, #1
 8011928:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_FIFO_STA,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 801192a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801192e:	9302      	str	r3, [sp, #8]
 8011930:	2301      	movs	r3, #1
 8011932:	9301      	str	r3, [sp, #4]
 8011934:	1dfb      	adds	r3, r7, #7
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	2301      	movs	r3, #1
 801193a:	224b      	movs	r2, #75	; 0x4b
 801193c:	2182      	movs	r1, #130	; 0x82
 801193e:	4810      	ldr	r0, [pc, #64]	; (8011980 <UB_Touch_Read+0x148>)
 8011940:	f7fa ffae 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011944:	4603      	mov	r3, r0
 8011946:	2b00      	cmp	r3, #0
 8011948:	d001      	beq.n	801194e <UB_Touch_Read+0x116>
 801194a:	f7f0 fd3f 	bl	80023cc <Error_Handler>
  i2c_data=0x00;
 801194e:	2300      	movs	r3, #0
 8011950:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_FIFO_STA,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011952:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011956:	9302      	str	r3, [sp, #8]
 8011958:	2301      	movs	r3, #1
 801195a:	9301      	str	r3, [sp, #4]
 801195c:	1dfb      	adds	r3, r7, #7
 801195e:	9300      	str	r3, [sp, #0]
 8011960:	2301      	movs	r3, #1
 8011962:	224b      	movs	r2, #75	; 0x4b
 8011964:	2182      	movs	r1, #130	; 0x82
 8011966:	4806      	ldr	r0, [pc, #24]	; (8011980 <UB_Touch_Read+0x148>)
 8011968:	f7fa ff9a 	bl	800c8a0 <HAL_I2C_Mem_Write>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d001      	beq.n	8011976 <UB_Touch_Read+0x13e>
 8011972:	f7f0 fd2b 	bl	80023cc <Error_Handler>


  return(SUCCESS);
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3718      	adds	r7, #24
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	20003200 	.word	0x20003200
 8011984:	200022c4 	.word	0x200022c4
 8011988:	20001938 	.word	0x20001938
 801198c:	2000193c 	.word	0x2000193c

08011990 <P_Touch_Reset>:


//--------------------------------------------------------------
// interne Funktion
//--------------------------------------------------------------
void P_Touch_Reset(void){
 8011990:	b580      	push	{r7, lr}
 8011992:	b086      	sub	sp, #24
 8011994:	af04      	add	r7, sp, #16
	uint8_t data;
	data=2;
 8011996:	2302      	movs	r3, #2
 8011998:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_SYS_CTRL1,1,&data,1,3000)!=HAL_OK){ Error_Handler(); }
 801199a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801199e:	9302      	str	r3, [sp, #8]
 80119a0:	2301      	movs	r3, #1
 80119a2:	9301      	str	r3, [sp, #4]
 80119a4:	1dfb      	adds	r3, r7, #7
 80119a6:	9300      	str	r3, [sp, #0]
 80119a8:	2301      	movs	r3, #1
 80119aa:	2203      	movs	r2, #3
 80119ac:	2182      	movs	r1, #130	; 0x82
 80119ae:	4811      	ldr	r0, [pc, #68]	; (80119f4 <P_Touch_Reset+0x64>)
 80119b0:	f7fa ff76 	bl	800c8a0 <HAL_I2C_Mem_Write>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d001      	beq.n	80119be <P_Touch_Reset+0x2e>
 80119ba:	f7f0 fd07 	bl	80023cc <Error_Handler>
	HAL_Delay(100);
 80119be:	2064      	movs	r0, #100	; 0x64
 80119c0:	f7f7 fb32 	bl	8009028 <HAL_Delay>
	data=0;
 80119c4:	2300      	movs	r3, #0
 80119c6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_SYS_CTRL1,1,&data,1,3000)!=HAL_OK){ Error_Handler(); }
 80119c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80119cc:	9302      	str	r3, [sp, #8]
 80119ce:	2301      	movs	r3, #1
 80119d0:	9301      	str	r3, [sp, #4]
 80119d2:	1dfb      	adds	r3, r7, #7
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	2301      	movs	r3, #1
 80119d8:	2203      	movs	r2, #3
 80119da:	2182      	movs	r1, #130	; 0x82
 80119dc:	4805      	ldr	r0, [pc, #20]	; (80119f4 <P_Touch_Reset+0x64>)
 80119de:	f7fa ff5f 	bl	800c8a0 <HAL_I2C_Mem_Write>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d001      	beq.n	80119ec <P_Touch_Reset+0x5c>
 80119e8:	f7f0 fcf0 	bl	80023cc <Error_Handler>
}
 80119ec:	bf00      	nop
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	20003200 	.word	0x20003200

080119f8 <P_Touch_FnctCmd>:
//--------------------------------------------------------------
// interne Funktion
// return : 0=ok, >0 = error
//--------------------------------------------------------------
uint8_t P_Touch_FnctCmd(uint8_t Fct, FunctionalState NewState)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b088      	sub	sp, #32
 80119fc:	af04      	add	r7, sp, #16
 80119fe:	4603      	mov	r3, r0
 8011a00:	460a      	mov	r2, r1
 8011a02:	71fb      	strb	r3, [r7, #7]
 8011a04:	4613      	mov	r3, r2
 8011a06:	71bb      	strb	r3, [r7, #6]
  uint8_t i2c_data;

  if(HAL_I2C_Mem_Read(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_SYS_CTRL2,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011a08:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011a0c:	9302      	str	r3, [sp, #8]
 8011a0e:	2301      	movs	r3, #1
 8011a10:	9301      	str	r3, [sp, #4]
 8011a12:	f107 030f 	add.w	r3, r7, #15
 8011a16:	9300      	str	r3, [sp, #0]
 8011a18:	2301      	movs	r3, #1
 8011a1a:	2204      	movs	r2, #4
 8011a1c:	2182      	movs	r1, #130	; 0x82
 8011a1e:	481c      	ldr	r0, [pc, #112]	; (8011a90 <P_Touch_FnctCmd+0x98>)
 8011a20:	f7fb f838 	bl	800ca94 <HAL_I2C_Mem_Read>
 8011a24:	4603      	mov	r3, r0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d001      	beq.n	8011a2e <P_Touch_FnctCmd+0x36>
 8011a2a:	f7f0 fccf 	bl	80023cc <Error_Handler>
  if(i2c_data==0xFF) return(1);
 8011a2e:	7bfb      	ldrb	r3, [r7, #15]
 8011a30:	2bff      	cmp	r3, #255	; 0xff
 8011a32:	d101      	bne.n	8011a38 <P_Touch_FnctCmd+0x40>
 8011a34:	2301      	movs	r3, #1
 8011a36:	e026      	b.n	8011a86 <P_Touch_FnctCmd+0x8e>

  if (NewState != DISABLE) {
 8011a38:	79bb      	ldrb	r3, [r7, #6]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d00a      	beq.n	8011a54 <P_Touch_FnctCmd+0x5c>
	  i2c_data &= ~(uint8_t)Fct;
 8011a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a42:	43db      	mvns	r3, r3
 8011a44:	b25a      	sxtb	r2, r3
 8011a46:	7bfb      	ldrb	r3, [r7, #15]
 8011a48:	b25b      	sxtb	r3, r3
 8011a4a:	4013      	ands	r3, r2
 8011a4c:	b25b      	sxtb	r3, r3
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	73fb      	strb	r3, [r7, #15]
 8011a52:	e004      	b.n	8011a5e <P_Touch_FnctCmd+0x66>
  }
  else {
	  i2c_data |= (uint8_t)Fct;
 8011a54:	7bfa      	ldrb	r2, [r7, #15]
 8011a56:	79fb      	ldrb	r3, [r7, #7]
 8011a58:	4313      	orrs	r3, r2
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	73fb      	strb	r3, [r7, #15]
  }
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_SYS_CTRL2,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011a5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011a62:	9302      	str	r3, [sp, #8]
 8011a64:	2301      	movs	r3, #1
 8011a66:	9301      	str	r3, [sp, #4]
 8011a68:	f107 030f 	add.w	r3, r7, #15
 8011a6c:	9300      	str	r3, [sp, #0]
 8011a6e:	2301      	movs	r3, #1
 8011a70:	2204      	movs	r2, #4
 8011a72:	2182      	movs	r1, #130	; 0x82
 8011a74:	4806      	ldr	r0, [pc, #24]	; (8011a90 <P_Touch_FnctCmd+0x98>)
 8011a76:	f7fa ff13 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d001      	beq.n	8011a84 <P_Touch_FnctCmd+0x8c>
 8011a80:	f7f0 fca4 	bl	80023cc <Error_Handler>
  
  return(0);
 8011a84:	2300      	movs	r3, #0
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	3710      	adds	r7, #16
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop
 8011a90:	20003200 	.word	0x20003200

08011a94 <P_Touch_Config>:


//--------------------------------------------------------------
// interne Funktion
//--------------------------------------------------------------
void P_Touch_Config(void){
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b086      	sub	sp, #24
 8011a98:	af04      	add	r7, sp, #16
  uint8_t i2c_data;
  P_Touch_FnctCmd(IOE_TP_FCT, ENABLE);
 8011a9a:	2101      	movs	r1, #1
 8011a9c:	2002      	movs	r0, #2
 8011a9e:	f7ff ffab 	bl	80119f8 <P_Touch_FnctCmd>
  i2c_data=0x49;
 8011aa2:	2349      	movs	r3, #73	; 0x49
 8011aa4:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_ADC_CTRL1,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011aa6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011aaa:	9302      	str	r3, [sp, #8]
 8011aac:	2301      	movs	r3, #1
 8011aae:	9301      	str	r3, [sp, #4]
 8011ab0:	1dfb      	adds	r3, r7, #7
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	2220      	movs	r2, #32
 8011ab8:	2182      	movs	r1, #130	; 0x82
 8011aba:	4868      	ldr	r0, [pc, #416]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011abc:	f7fa fef0 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d001      	beq.n	8011aca <P_Touch_Config+0x36>
 8011ac6:	f7f0 fc81 	bl	80023cc <Error_Handler>
  HAL_Delay(100);
 8011aca:	2064      	movs	r0, #100	; 0x64
 8011acc:	f7f7 faac 	bl	8009028 <HAL_Delay>
  i2c_data=0x01;
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_ADC_CTRL2,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011ad4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011ad8:	9302      	str	r3, [sp, #8]
 8011ada:	2301      	movs	r3, #1
 8011adc:	9301      	str	r3, [sp, #4]
 8011ade:	1dfb      	adds	r3, r7, #7
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	2221      	movs	r2, #33	; 0x21
 8011ae6:	2182      	movs	r1, #130	; 0x82
 8011ae8:	485c      	ldr	r0, [pc, #368]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011aea:	f7fa fed9 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d001      	beq.n	8011af8 <P_Touch_Config+0x64>
 8011af4:	f7f0 fc6a 	bl	80023cc <Error_Handler>
  P_Touch_IOAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8011af8:	2100      	movs	r1, #0
 8011afa:	201e      	movs	r0, #30
 8011afc:	f000 f8b2 	bl	8011c64 <P_Touch_IOAFConfig>
  i2c_data=0x9A;
 8011b00:	239a      	movs	r3, #154	; 0x9a
 8011b02:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_TP_CFG,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011b04:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011b08:	9302      	str	r3, [sp, #8]
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	9301      	str	r3, [sp, #4]
 8011b0e:	1dfb      	adds	r3, r7, #7
 8011b10:	9300      	str	r3, [sp, #0]
 8011b12:	2301      	movs	r3, #1
 8011b14:	2241      	movs	r2, #65	; 0x41
 8011b16:	2182      	movs	r1, #130	; 0x82
 8011b18:	4850      	ldr	r0, [pc, #320]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011b1a:	f7fa fec1 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d001      	beq.n	8011b28 <P_Touch_Config+0x94>
 8011b24:	f7f0 fc52 	bl	80023cc <Error_Handler>
  i2c_data=0x01;
 8011b28:	2301      	movs	r3, #1
 8011b2a:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_FIFO_TH,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011b2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011b30:	9302      	str	r3, [sp, #8]
 8011b32:	2301      	movs	r3, #1
 8011b34:	9301      	str	r3, [sp, #4]
 8011b36:	1dfb      	adds	r3, r7, #7
 8011b38:	9300      	str	r3, [sp, #0]
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	224a      	movs	r2, #74	; 0x4a
 8011b3e:	2182      	movs	r1, #130	; 0x82
 8011b40:	4846      	ldr	r0, [pc, #280]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011b42:	f7fa fead 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d001      	beq.n	8011b50 <P_Touch_Config+0xbc>
 8011b4c:	f7f0 fc3e 	bl	80023cc <Error_Handler>
  i2c_data=0x01;
 8011b50:	2301      	movs	r3, #1
 8011b52:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_FIFO_STA,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011b54:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011b58:	9302      	str	r3, [sp, #8]
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	9301      	str	r3, [sp, #4]
 8011b5e:	1dfb      	adds	r3, r7, #7
 8011b60:	9300      	str	r3, [sp, #0]
 8011b62:	2301      	movs	r3, #1
 8011b64:	224b      	movs	r2, #75	; 0x4b
 8011b66:	2182      	movs	r1, #130	; 0x82
 8011b68:	483c      	ldr	r0, [pc, #240]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011b6a:	f7fa fe99 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d001      	beq.n	8011b78 <P_Touch_Config+0xe4>
 8011b74:	f7f0 fc2a 	bl	80023cc <Error_Handler>
  i2c_data=0x00;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_FIFO_STA,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011b7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011b80:	9302      	str	r3, [sp, #8]
 8011b82:	2301      	movs	r3, #1
 8011b84:	9301      	str	r3, [sp, #4]
 8011b86:	1dfb      	adds	r3, r7, #7
 8011b88:	9300      	str	r3, [sp, #0]
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	224b      	movs	r2, #75	; 0x4b
 8011b8e:	2182      	movs	r1, #130	; 0x82
 8011b90:	4832      	ldr	r0, [pc, #200]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011b92:	f7fa fe85 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d001      	beq.n	8011ba0 <P_Touch_Config+0x10c>
 8011b9c:	f7f0 fc16 	bl	80023cc <Error_Handler>
  i2c_data=0x01;
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_TP_FRACT_XYZ,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011ba4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011ba8:	9302      	str	r3, [sp, #8]
 8011baa:	2301      	movs	r3, #1
 8011bac:	9301      	str	r3, [sp, #4]
 8011bae:	1dfb      	adds	r3, r7, #7
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	2256      	movs	r2, #86	; 0x56
 8011bb6:	2182      	movs	r1, #130	; 0x82
 8011bb8:	4828      	ldr	r0, [pc, #160]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011bba:	f7fa fe71 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d001      	beq.n	8011bc8 <P_Touch_Config+0x134>
 8011bc4:	f7f0 fc02 	bl	80023cc <Error_Handler>
  i2c_data=0x01;
 8011bc8:	2301      	movs	r3, #1
 8011bca:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_TP_I_DRIVE,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011bcc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011bd0:	9302      	str	r3, [sp, #8]
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	9301      	str	r3, [sp, #4]
 8011bd6:	1dfb      	adds	r3, r7, #7
 8011bd8:	9300      	str	r3, [sp, #0]
 8011bda:	2301      	movs	r3, #1
 8011bdc:	2258      	movs	r2, #88	; 0x58
 8011bde:	2182      	movs	r1, #130	; 0x82
 8011be0:	481e      	ldr	r0, [pc, #120]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011be2:	f7fa fe5d 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d001      	beq.n	8011bf0 <P_Touch_Config+0x15c>
 8011bec:	f7f0 fbee 	bl	80023cc <Error_Handler>
  i2c_data=0x03;
 8011bf0:	2303      	movs	r3, #3
 8011bf2:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_TP_CTRL,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011bf4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011bf8:	9302      	str	r3, [sp, #8]
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	9301      	str	r3, [sp, #4]
 8011bfe:	1dfb      	adds	r3, r7, #7
 8011c00:	9300      	str	r3, [sp, #0]
 8011c02:	2301      	movs	r3, #1
 8011c04:	2240      	movs	r2, #64	; 0x40
 8011c06:	2182      	movs	r1, #130	; 0x82
 8011c08:	4814      	ldr	r0, [pc, #80]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011c0a:	f7fa fe49 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d001      	beq.n	8011c18 <P_Touch_Config+0x184>
 8011c14:	f7f0 fbda 	bl	80023cc <Error_Handler>
  i2c_data=0xFF;
 8011c18:	23ff      	movs	r3, #255	; 0xff
 8011c1a:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_INT_STA,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011c1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011c20:	9302      	str	r3, [sp, #8]
 8011c22:	2301      	movs	r3, #1
 8011c24:	9301      	str	r3, [sp, #4]
 8011c26:	1dfb      	adds	r3, r7, #7
 8011c28:	9300      	str	r3, [sp, #0]
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	220b      	movs	r2, #11
 8011c2e:	2182      	movs	r1, #130	; 0x82
 8011c30:	480a      	ldr	r0, [pc, #40]	; (8011c5c <P_Touch_Config+0x1c8>)
 8011c32:	f7fa fe35 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011c36:	4603      	mov	r3, r0
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d001      	beq.n	8011c40 <P_Touch_Config+0x1ac>
 8011c3c:	f7f0 fbc6 	bl	80023cc <Error_Handler>

  Touch_Data.status = TOUCH_RELEASED;
 8011c40:	4b07      	ldr	r3, [pc, #28]	; (8011c60 <P_Touch_Config+0x1cc>)
 8011c42:	2201      	movs	r2, #1
 8011c44:	701a      	strb	r2, [r3, #0]
  Touch_Data.xp = 0;
 8011c46:	4b06      	ldr	r3, [pc, #24]	; (8011c60 <P_Touch_Config+0x1cc>)
 8011c48:	2200      	movs	r2, #0
 8011c4a:	805a      	strh	r2, [r3, #2]
  Touch_Data.yp = 0;
 8011c4c:	4b04      	ldr	r3, [pc, #16]	; (8011c60 <P_Touch_Config+0x1cc>)
 8011c4e:	2200      	movs	r2, #0
 8011c50:	809a      	strh	r2, [r3, #4]
}
 8011c52:	bf00      	nop
 8011c54:	3708      	adds	r7, #8
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	20003200 	.word	0x20003200
 8011c60:	200022c4 	.word	0x200022c4

08011c64 <P_Touch_IOAFConfig>:
//--------------------------------------------------------------
// interne Funktion
// return : 0=ok, >0 = error
//--------------------------------------------------------------
uint8_t P_Touch_IOAFConfig(uint8_t IO_Pin, FunctionalState NewState)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b088      	sub	sp, #32
 8011c68:	af04      	add	r7, sp, #16
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	460a      	mov	r2, r1
 8011c6e:	71fb      	strb	r3, [r7, #7]
 8011c70:	4613      	mov	r3, r2
 8011c72:	71bb      	strb	r3, [r7, #6]
  uint8_t i2c_data;

  if(HAL_I2C_Mem_Read(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_GPIO_AF,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011c74:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011c78:	9302      	str	r3, [sp, #8]
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	9301      	str	r3, [sp, #4]
 8011c7e:	f107 030f 	add.w	r3, r7, #15
 8011c82:	9300      	str	r3, [sp, #0]
 8011c84:	2301      	movs	r3, #1
 8011c86:	2217      	movs	r2, #23
 8011c88:	2182      	movs	r1, #130	; 0x82
 8011c8a:	481c      	ldr	r0, [pc, #112]	; (8011cfc <P_Touch_IOAFConfig+0x98>)
 8011c8c:	f7fa ff02 	bl	800ca94 <HAL_I2C_Mem_Read>
 8011c90:	4603      	mov	r3, r0
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d001      	beq.n	8011c9a <P_Touch_IOAFConfig+0x36>
 8011c96:	f7f0 fb99 	bl	80023cc <Error_Handler>
  if(i2c_data==0XFF) return(1);
 8011c9a:	7bfb      	ldrb	r3, [r7, #15]
 8011c9c:	2bff      	cmp	r3, #255	; 0xff
 8011c9e:	d101      	bne.n	8011ca4 <P_Touch_IOAFConfig+0x40>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	e026      	b.n	8011cf2 <P_Touch_IOAFConfig+0x8e>

  if (NewState != DISABLE) {
 8011ca4:	79bb      	ldrb	r3, [r7, #6]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d005      	beq.n	8011cb6 <P_Touch_IOAFConfig+0x52>
	  i2c_data |= (uint8_t)IO_Pin;
 8011caa:	7bfa      	ldrb	r2, [r7, #15]
 8011cac:	79fb      	ldrb	r3, [r7, #7]
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	b2db      	uxtb	r3, r3
 8011cb2:	73fb      	strb	r3, [r7, #15]
 8011cb4:	e009      	b.n	8011cca <P_Touch_IOAFConfig+0x66>
  }
  else {
	  i2c_data &= ~(uint8_t)IO_Pin;
 8011cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cba:	43db      	mvns	r3, r3
 8011cbc:	b25a      	sxtb	r2, r3
 8011cbe:	7bfb      	ldrb	r3, [r7, #15]
 8011cc0:	b25b      	sxtb	r3, r3
 8011cc2:	4013      	ands	r3, r2
 8011cc4:	b25b      	sxtb	r3, r3
 8011cc6:	b2db      	uxtb	r3, r3
 8011cc8:	73fb      	strb	r3, [r7, #15]
  }
  if(HAL_I2C_Mem_Write(&hi2c3,STMPE811_I2C_ADDR,IOE_REG_GPIO_AF,1,&i2c_data,1,3000)!=HAL_OK){ Error_Handler(); }
 8011cca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011cce:	9302      	str	r3, [sp, #8]
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	9301      	str	r3, [sp, #4]
 8011cd4:	f107 030f 	add.w	r3, r7, #15
 8011cd8:	9300      	str	r3, [sp, #0]
 8011cda:	2301      	movs	r3, #1
 8011cdc:	2217      	movs	r2, #23
 8011cde:	2182      	movs	r1, #130	; 0x82
 8011ce0:	4806      	ldr	r0, [pc, #24]	; (8011cfc <P_Touch_IOAFConfig+0x98>)
 8011ce2:	f7fa fddd 	bl	800c8a0 <HAL_I2C_Mem_Write>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d001      	beq.n	8011cf0 <P_Touch_IOAFConfig+0x8c>
 8011cec:	f7f0 fb6e 	bl	80023cc <Error_Handler>
  return(0);
 8011cf0:	2300      	movs	r3, #0
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3710      	adds	r7, #16
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	20003200 	.word	0x20003200

08011d00 <P_Touch_Read_X>:

//--------------------------------------------------------------
// interne Funktion
//--------------------------------------------------------------
static uint16_t P_Touch_Read_X(void)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
  int32_t x, xr;

  x = P_Touch_Read_16b(IOE_REG_TP_DATA_X);
 8011d06:	204d      	movs	r0, #77	; 0x4d
 8011d08:	f000 f858 	bl	8011dbc <P_Touch_Read_16b>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	607b      	str	r3, [r7, #4]

  if(x <= 3000) {
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8011d16:	4293      	cmp	r3, r2
 8011d18:	dc05      	bgt.n	8011d26 <P_Touch_Read_X+0x26>
    x = 3870 - x;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8011d20:	330e      	adds	r3, #14
 8011d22:	607b      	str	r3, [r7, #4]
 8011d24:	e004      	b.n	8011d30 <P_Touch_Read_X+0x30>
  }
  else {
    x = 3800 - x;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8011d2c:	3308      	adds	r3, #8
 8011d2e:	607b      	str	r3, [r7, #4]
  }

  xr = x / 15;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	4a0c      	ldr	r2, [pc, #48]	; (8011d64 <P_Touch_Read_X+0x64>)
 8011d34:	fb82 1203 	smull	r1, r2, r2, r3
 8011d38:	441a      	add	r2, r3
 8011d3a:	10d2      	asrs	r2, r2, #3
 8011d3c:	17db      	asrs	r3, r3, #31
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	603b      	str	r3, [r7, #0]

  if(xr <= 0) {
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	dc02      	bgt.n	8011d4e <P_Touch_Read_X+0x4e>
    xr = 0;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	603b      	str	r3, [r7, #0]
 8011d4c:	e004      	b.n	8011d58 <P_Touch_Read_X+0x58>
  }
  else if (xr >= 240) {
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	2bef      	cmp	r3, #239	; 0xef
 8011d52:	dd01      	ble.n	8011d58 <P_Touch_Read_X+0x58>
    xr = 239;
 8011d54:	23ef      	movs	r3, #239	; 0xef
 8011d56:	603b      	str	r3, [r7, #0]
  }

  return (uint16_t)(xr);
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	b29b      	uxth	r3, r3
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	88888889 	.word	0x88888889

08011d68 <P_Touch_Read_Y>:

//--------------------------------------------------------------
// interne Funktion
//--------------------------------------------------------------
static uint16_t P_Touch_Read_Y(void)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
  int32_t y, yr;

  y = P_Touch_Read_16b(IOE_REG_TP_DATA_Y);
 8011d6e:	204f      	movs	r0, #79	; 0x4f
 8011d70:	f000 f824 	bl	8011dbc <P_Touch_Read_16b>
 8011d74:	4603      	mov	r3, r0
 8011d76:	603b      	str	r3, [r7, #0]
  y -= 360;
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8011d7e:	603b      	str	r3, [r7, #0]
  yr = y / 11;
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	4a0d      	ldr	r2, [pc, #52]	; (8011db8 <P_Touch_Read_Y+0x50>)
 8011d84:	fb82 1203 	smull	r1, r2, r2, r3
 8011d88:	1052      	asrs	r2, r2, #1
 8011d8a:	17db      	asrs	r3, r3, #31
 8011d8c:	1ad3      	subs	r3, r2, r3
 8011d8e:	607b      	str	r3, [r7, #4]

  if(yr <= 0) {
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	dc02      	bgt.n	8011d9c <P_Touch_Read_Y+0x34>
    yr = 0;
 8011d96:	2300      	movs	r3, #0
 8011d98:	607b      	str	r3, [r7, #4]
 8011d9a:	e006      	b.n	8011daa <P_Touch_Read_Y+0x42>
  }
  else if (yr >= 320) {
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8011da2:	db02      	blt.n	8011daa <P_Touch_Read_Y+0x42>
    yr = 319;
 8011da4:	f240 133f 	movw	r3, #319	; 0x13f
 8011da8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)(yr);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	b29b      	uxth	r3, r3
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3708      	adds	r7, #8
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	2e8ba2e9 	.word	0x2e8ba2e9

08011dbc <P_Touch_Read_16b>:


//--------------------------------------------------------------
// interne Funktion
//--------------------------------------------------------------
uint16_t P_Touch_Read_16b(uint32_t RegisterAddr){
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b088      	sub	sp, #32
 8011dc0:	af04      	add	r7, sp, #16
 8011dc2:	6078      	str	r0, [r7, #4]
	uint8_t id_H, id_L;
	if(HAL_I2C_Mem_Read(&hi2c3,STMPE811_I2C_ADDR,RegisterAddr,1,&id_H,1,3000)!=HAL_OK){ Error_Handler(); }
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	b29a      	uxth	r2, r3
 8011dc8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011dcc:	9302      	str	r3, [sp, #8]
 8011dce:	2301      	movs	r3, #1
 8011dd0:	9301      	str	r3, [sp, #4]
 8011dd2:	f107 030f 	add.w	r3, r7, #15
 8011dd6:	9300      	str	r3, [sp, #0]
 8011dd8:	2301      	movs	r3, #1
 8011dda:	2182      	movs	r1, #130	; 0x82
 8011ddc:	4814      	ldr	r0, [pc, #80]	; (8011e30 <P_Touch_Read_16b+0x74>)
 8011dde:	f7fa fe59 	bl	800ca94 <HAL_I2C_Mem_Read>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d001      	beq.n	8011dec <P_Touch_Read_16b+0x30>
 8011de8:	f7f0 faf0 	bl	80023cc <Error_Handler>
	if(HAL_I2C_Mem_Read(&hi2c3,STMPE811_I2C_ADDR,RegisterAddr+1,1,&id_L,1,3000)!=HAL_OK){ Error_Handler(); }
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	3301      	adds	r3, #1
 8011df2:	b29a      	uxth	r2, r3
 8011df4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011df8:	9302      	str	r3, [sp, #8]
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	9301      	str	r3, [sp, #4]
 8011dfe:	f107 030e 	add.w	r3, r7, #14
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	2301      	movs	r3, #1
 8011e06:	2182      	movs	r1, #130	; 0x82
 8011e08:	4809      	ldr	r0, [pc, #36]	; (8011e30 <P_Touch_Read_16b+0x74>)
 8011e0a:	f7fa fe43 	bl	800ca94 <HAL_I2C_Mem_Read>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d001      	beq.n	8011e18 <P_Touch_Read_16b+0x5c>
 8011e14:	f7f0 fada 	bl	80023cc <Error_Handler>
	return ((uint16_t)id_H<<8 | id_L);
 8011e18:	7bfb      	ldrb	r3, [r7, #15]
 8011e1a:	021b      	lsls	r3, r3, #8
 8011e1c:	b21a      	sxth	r2, r3
 8011e1e:	7bbb      	ldrb	r3, [r7, #14]
 8011e20:	b21b      	sxth	r3, r3
 8011e22:	4313      	orrs	r3, r2
 8011e24:	b21b      	sxth	r3, r3
 8011e26:	b29b      	uxth	r3, r3
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3710      	adds	r7, #16
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	20003200 	.word	0x20003200

08011e34 <UB_Uart_SendByte>:

//--------------------------------------------------------------
// ein Byte per UART senden
//--------------------------------------------------------------
void UB_Uart_SendByte(uint8_t data)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	71fb      	strb	r3, [r7, #7]
  // warten bis altes Byte gesendet wurde
	while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8011e3e:	bf00      	nop
 8011e40:	480a      	ldr	r0, [pc, #40]	; (8011e6c <UB_Uart_SendByte+0x38>)
 8011e42:	f7fe f804 	bl	800fe4e <HAL_UART_GetState>
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b20      	cmp	r3, #32
 8011e4a:	d1f9      	bne.n	8011e40 <UB_Uart_SendByte+0xc>
	if( HAL_UART_Transmit(&huart1, &data, 1,3000) !=HAL_OK){ Error_Handler(); }
 8011e4c:	1df9      	adds	r1, r7, #7
 8011e4e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011e52:	2201      	movs	r2, #1
 8011e54:	4805      	ldr	r0, [pc, #20]	; (8011e6c <UB_Uart_SendByte+0x38>)
 8011e56:	f7fd ff68 	bl	800fd2a <HAL_UART_Transmit>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d001      	beq.n	8011e64 <UB_Uart_SendByte+0x30>
 8011e60:	f7f0 fab4 	bl	80023cc <Error_Handler>

}
 8011e64:	bf00      	nop
 8011e66:	3708      	adds	r7, #8
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	2000342c 	.word	0x2000342c

08011e70 <UB_Uart_SendString>:

//--------------------------------------------------------------
// einen String per UART senden
//--------------------------------------------------------------
void UB_Uart_SendString(uint8_t *ptr)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
	uint8_t count=0;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	73fb      	strb	r3, [r7, #15]
	while(ptr[count++]);	// Count string length
 8011e7c:	bf00      	nop
 8011e7e:	7bfb      	ldrb	r3, [r7, #15]
 8011e80:	1c5a      	adds	r2, r3, #1
 8011e82:	73fa      	strb	r2, [r7, #15]
 8011e84:	461a      	mov	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	4413      	add	r3, r2
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d1f6      	bne.n	8011e7e <UB_Uart_SendString+0xe>

	while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8011e90:	bf00      	nop
 8011e92:	480b      	ldr	r0, [pc, #44]	; (8011ec0 <UB_Uart_SendString+0x50>)
 8011e94:	f7fd ffdb 	bl	800fe4e <HAL_UART_GetState>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b20      	cmp	r3, #32
 8011e9c:	d1f9      	bne.n	8011e92 <UB_Uart_SendString+0x22>
	if( HAL_UART_Transmit(&huart1,ptr, count,3000) !=HAL_OK){ Error_Handler(); }
 8011e9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011ea6:	6879      	ldr	r1, [r7, #4]
 8011ea8:	4805      	ldr	r0, [pc, #20]	; (8011ec0 <UB_Uart_SendString+0x50>)
 8011eaa:	f7fd ff3e 	bl	800fd2a <HAL_UART_Transmit>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d001      	beq.n	8011eb8 <UB_Uart_SendString+0x48>
 8011eb4:	f7f0 fa8a 	bl	80023cc <Error_Handler>

}
 8011eb8:	bf00      	nop
 8011eba:	3710      	adds	r7, #16
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	2000342c 	.word	0x2000342c

08011ec4 <__errno>:
 8011ec4:	4b01      	ldr	r3, [pc, #4]	; (8011ecc <__errno+0x8>)
 8011ec6:	6818      	ldr	r0, [r3, #0]
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop
 8011ecc:	2000008c 	.word	0x2000008c

08011ed0 <__libc_init_array>:
 8011ed0:	b570      	push	{r4, r5, r6, lr}
 8011ed2:	4d0d      	ldr	r5, [pc, #52]	; (8011f08 <__libc_init_array+0x38>)
 8011ed4:	4c0d      	ldr	r4, [pc, #52]	; (8011f0c <__libc_init_array+0x3c>)
 8011ed6:	1b64      	subs	r4, r4, r5
 8011ed8:	10a4      	asrs	r4, r4, #2
 8011eda:	2600      	movs	r6, #0
 8011edc:	42a6      	cmp	r6, r4
 8011ede:	d109      	bne.n	8011ef4 <__libc_init_array+0x24>
 8011ee0:	4d0b      	ldr	r5, [pc, #44]	; (8011f10 <__libc_init_array+0x40>)
 8011ee2:	4c0c      	ldr	r4, [pc, #48]	; (8011f14 <__libc_init_array+0x44>)
 8011ee4:	f000 fc78 	bl	80127d8 <_init>
 8011ee8:	1b64      	subs	r4, r4, r5
 8011eea:	10a4      	asrs	r4, r4, #2
 8011eec:	2600      	movs	r6, #0
 8011eee:	42a6      	cmp	r6, r4
 8011ef0:	d105      	bne.n	8011efe <__libc_init_array+0x2e>
 8011ef2:	bd70      	pop	{r4, r5, r6, pc}
 8011ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ef8:	4798      	blx	r3
 8011efa:	3601      	adds	r6, #1
 8011efc:	e7ee      	b.n	8011edc <__libc_init_array+0xc>
 8011efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f02:	4798      	blx	r3
 8011f04:	3601      	adds	r6, #1
 8011f06:	e7f2      	b.n	8011eee <__libc_init_array+0x1e>
 8011f08:	0803f588 	.word	0x0803f588
 8011f0c:	0803f588 	.word	0x0803f588
 8011f10:	0803f588 	.word	0x0803f588
 8011f14:	0803f58c 	.word	0x0803f58c

08011f18 <memset>:
 8011f18:	4402      	add	r2, r0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	d100      	bne.n	8011f22 <memset+0xa>
 8011f20:	4770      	bx	lr
 8011f22:	f803 1b01 	strb.w	r1, [r3], #1
 8011f26:	e7f9      	b.n	8011f1c <memset+0x4>

08011f28 <siprintf>:
 8011f28:	b40e      	push	{r1, r2, r3}
 8011f2a:	b500      	push	{lr}
 8011f2c:	b09c      	sub	sp, #112	; 0x70
 8011f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8011f30:	9002      	str	r0, [sp, #8]
 8011f32:	9006      	str	r0, [sp, #24]
 8011f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011f38:	4809      	ldr	r0, [pc, #36]	; (8011f60 <siprintf+0x38>)
 8011f3a:	9107      	str	r1, [sp, #28]
 8011f3c:	9104      	str	r1, [sp, #16]
 8011f3e:	4909      	ldr	r1, [pc, #36]	; (8011f64 <siprintf+0x3c>)
 8011f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f44:	9105      	str	r1, [sp, #20]
 8011f46:	6800      	ldr	r0, [r0, #0]
 8011f48:	9301      	str	r3, [sp, #4]
 8011f4a:	a902      	add	r1, sp, #8
 8011f4c:	f000 f868 	bl	8012020 <_svfiprintf_r>
 8011f50:	9b02      	ldr	r3, [sp, #8]
 8011f52:	2200      	movs	r2, #0
 8011f54:	701a      	strb	r2, [r3, #0]
 8011f56:	b01c      	add	sp, #112	; 0x70
 8011f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f5c:	b003      	add	sp, #12
 8011f5e:	4770      	bx	lr
 8011f60:	2000008c 	.word	0x2000008c
 8011f64:	ffff0208 	.word	0xffff0208

08011f68 <__ssputs_r>:
 8011f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f6c:	688e      	ldr	r6, [r1, #8]
 8011f6e:	429e      	cmp	r6, r3
 8011f70:	4682      	mov	sl, r0
 8011f72:	460c      	mov	r4, r1
 8011f74:	4690      	mov	r8, r2
 8011f76:	461f      	mov	r7, r3
 8011f78:	d838      	bhi.n	8011fec <__ssputs_r+0x84>
 8011f7a:	898a      	ldrh	r2, [r1, #12]
 8011f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f80:	d032      	beq.n	8011fe8 <__ssputs_r+0x80>
 8011f82:	6825      	ldr	r5, [r4, #0]
 8011f84:	6909      	ldr	r1, [r1, #16]
 8011f86:	eba5 0901 	sub.w	r9, r5, r1
 8011f8a:	6965      	ldr	r5, [r4, #20]
 8011f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f94:	3301      	adds	r3, #1
 8011f96:	444b      	add	r3, r9
 8011f98:	106d      	asrs	r5, r5, #1
 8011f9a:	429d      	cmp	r5, r3
 8011f9c:	bf38      	it	cc
 8011f9e:	461d      	movcc	r5, r3
 8011fa0:	0553      	lsls	r3, r2, #21
 8011fa2:	d531      	bpl.n	8012008 <__ssputs_r+0xa0>
 8011fa4:	4629      	mov	r1, r5
 8011fa6:	f000 fb47 	bl	8012638 <_malloc_r>
 8011faa:	4606      	mov	r6, r0
 8011fac:	b950      	cbnz	r0, 8011fc4 <__ssputs_r+0x5c>
 8011fae:	230c      	movs	r3, #12
 8011fb0:	f8ca 3000 	str.w	r3, [sl]
 8011fb4:	89a3      	ldrh	r3, [r4, #12]
 8011fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fba:	81a3      	strh	r3, [r4, #12]
 8011fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fc4:	6921      	ldr	r1, [r4, #16]
 8011fc6:	464a      	mov	r2, r9
 8011fc8:	f000 fabe 	bl	8012548 <memcpy>
 8011fcc:	89a3      	ldrh	r3, [r4, #12]
 8011fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fd6:	81a3      	strh	r3, [r4, #12]
 8011fd8:	6126      	str	r6, [r4, #16]
 8011fda:	6165      	str	r5, [r4, #20]
 8011fdc:	444e      	add	r6, r9
 8011fde:	eba5 0509 	sub.w	r5, r5, r9
 8011fe2:	6026      	str	r6, [r4, #0]
 8011fe4:	60a5      	str	r5, [r4, #8]
 8011fe6:	463e      	mov	r6, r7
 8011fe8:	42be      	cmp	r6, r7
 8011fea:	d900      	bls.n	8011fee <__ssputs_r+0x86>
 8011fec:	463e      	mov	r6, r7
 8011fee:	4632      	mov	r2, r6
 8011ff0:	6820      	ldr	r0, [r4, #0]
 8011ff2:	4641      	mov	r1, r8
 8011ff4:	f000 fab6 	bl	8012564 <memmove>
 8011ff8:	68a3      	ldr	r3, [r4, #8]
 8011ffa:	6822      	ldr	r2, [r4, #0]
 8011ffc:	1b9b      	subs	r3, r3, r6
 8011ffe:	4432      	add	r2, r6
 8012000:	60a3      	str	r3, [r4, #8]
 8012002:	6022      	str	r2, [r4, #0]
 8012004:	2000      	movs	r0, #0
 8012006:	e7db      	b.n	8011fc0 <__ssputs_r+0x58>
 8012008:	462a      	mov	r2, r5
 801200a:	f000 fb6f 	bl	80126ec <_realloc_r>
 801200e:	4606      	mov	r6, r0
 8012010:	2800      	cmp	r0, #0
 8012012:	d1e1      	bne.n	8011fd8 <__ssputs_r+0x70>
 8012014:	6921      	ldr	r1, [r4, #16]
 8012016:	4650      	mov	r0, sl
 8012018:	f000 fabe 	bl	8012598 <_free_r>
 801201c:	e7c7      	b.n	8011fae <__ssputs_r+0x46>
	...

08012020 <_svfiprintf_r>:
 8012020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012024:	4698      	mov	r8, r3
 8012026:	898b      	ldrh	r3, [r1, #12]
 8012028:	061b      	lsls	r3, r3, #24
 801202a:	b09d      	sub	sp, #116	; 0x74
 801202c:	4607      	mov	r7, r0
 801202e:	460d      	mov	r5, r1
 8012030:	4614      	mov	r4, r2
 8012032:	d50e      	bpl.n	8012052 <_svfiprintf_r+0x32>
 8012034:	690b      	ldr	r3, [r1, #16]
 8012036:	b963      	cbnz	r3, 8012052 <_svfiprintf_r+0x32>
 8012038:	2140      	movs	r1, #64	; 0x40
 801203a:	f000 fafd 	bl	8012638 <_malloc_r>
 801203e:	6028      	str	r0, [r5, #0]
 8012040:	6128      	str	r0, [r5, #16]
 8012042:	b920      	cbnz	r0, 801204e <_svfiprintf_r+0x2e>
 8012044:	230c      	movs	r3, #12
 8012046:	603b      	str	r3, [r7, #0]
 8012048:	f04f 30ff 	mov.w	r0, #4294967295
 801204c:	e0d1      	b.n	80121f2 <_svfiprintf_r+0x1d2>
 801204e:	2340      	movs	r3, #64	; 0x40
 8012050:	616b      	str	r3, [r5, #20]
 8012052:	2300      	movs	r3, #0
 8012054:	9309      	str	r3, [sp, #36]	; 0x24
 8012056:	2320      	movs	r3, #32
 8012058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801205c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012060:	2330      	movs	r3, #48	; 0x30
 8012062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801220c <_svfiprintf_r+0x1ec>
 8012066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801206a:	f04f 0901 	mov.w	r9, #1
 801206e:	4623      	mov	r3, r4
 8012070:	469a      	mov	sl, r3
 8012072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012076:	b10a      	cbz	r2, 801207c <_svfiprintf_r+0x5c>
 8012078:	2a25      	cmp	r2, #37	; 0x25
 801207a:	d1f9      	bne.n	8012070 <_svfiprintf_r+0x50>
 801207c:	ebba 0b04 	subs.w	fp, sl, r4
 8012080:	d00b      	beq.n	801209a <_svfiprintf_r+0x7a>
 8012082:	465b      	mov	r3, fp
 8012084:	4622      	mov	r2, r4
 8012086:	4629      	mov	r1, r5
 8012088:	4638      	mov	r0, r7
 801208a:	f7ff ff6d 	bl	8011f68 <__ssputs_r>
 801208e:	3001      	adds	r0, #1
 8012090:	f000 80aa 	beq.w	80121e8 <_svfiprintf_r+0x1c8>
 8012094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012096:	445a      	add	r2, fp
 8012098:	9209      	str	r2, [sp, #36]	; 0x24
 801209a:	f89a 3000 	ldrb.w	r3, [sl]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	f000 80a2 	beq.w	80121e8 <_svfiprintf_r+0x1c8>
 80120a4:	2300      	movs	r3, #0
 80120a6:	f04f 32ff 	mov.w	r2, #4294967295
 80120aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120ae:	f10a 0a01 	add.w	sl, sl, #1
 80120b2:	9304      	str	r3, [sp, #16]
 80120b4:	9307      	str	r3, [sp, #28]
 80120b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120ba:	931a      	str	r3, [sp, #104]	; 0x68
 80120bc:	4654      	mov	r4, sl
 80120be:	2205      	movs	r2, #5
 80120c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120c4:	4851      	ldr	r0, [pc, #324]	; (801220c <_svfiprintf_r+0x1ec>)
 80120c6:	f7ee f893 	bl	80001f0 <memchr>
 80120ca:	9a04      	ldr	r2, [sp, #16]
 80120cc:	b9d8      	cbnz	r0, 8012106 <_svfiprintf_r+0xe6>
 80120ce:	06d0      	lsls	r0, r2, #27
 80120d0:	bf44      	itt	mi
 80120d2:	2320      	movmi	r3, #32
 80120d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120d8:	0711      	lsls	r1, r2, #28
 80120da:	bf44      	itt	mi
 80120dc:	232b      	movmi	r3, #43	; 0x2b
 80120de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120e2:	f89a 3000 	ldrb.w	r3, [sl]
 80120e6:	2b2a      	cmp	r3, #42	; 0x2a
 80120e8:	d015      	beq.n	8012116 <_svfiprintf_r+0xf6>
 80120ea:	9a07      	ldr	r2, [sp, #28]
 80120ec:	4654      	mov	r4, sl
 80120ee:	2000      	movs	r0, #0
 80120f0:	f04f 0c0a 	mov.w	ip, #10
 80120f4:	4621      	mov	r1, r4
 80120f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120fa:	3b30      	subs	r3, #48	; 0x30
 80120fc:	2b09      	cmp	r3, #9
 80120fe:	d94e      	bls.n	801219e <_svfiprintf_r+0x17e>
 8012100:	b1b0      	cbz	r0, 8012130 <_svfiprintf_r+0x110>
 8012102:	9207      	str	r2, [sp, #28]
 8012104:	e014      	b.n	8012130 <_svfiprintf_r+0x110>
 8012106:	eba0 0308 	sub.w	r3, r0, r8
 801210a:	fa09 f303 	lsl.w	r3, r9, r3
 801210e:	4313      	orrs	r3, r2
 8012110:	9304      	str	r3, [sp, #16]
 8012112:	46a2      	mov	sl, r4
 8012114:	e7d2      	b.n	80120bc <_svfiprintf_r+0x9c>
 8012116:	9b03      	ldr	r3, [sp, #12]
 8012118:	1d19      	adds	r1, r3, #4
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	9103      	str	r1, [sp, #12]
 801211e:	2b00      	cmp	r3, #0
 8012120:	bfbb      	ittet	lt
 8012122:	425b      	neglt	r3, r3
 8012124:	f042 0202 	orrlt.w	r2, r2, #2
 8012128:	9307      	strge	r3, [sp, #28]
 801212a:	9307      	strlt	r3, [sp, #28]
 801212c:	bfb8      	it	lt
 801212e:	9204      	strlt	r2, [sp, #16]
 8012130:	7823      	ldrb	r3, [r4, #0]
 8012132:	2b2e      	cmp	r3, #46	; 0x2e
 8012134:	d10c      	bne.n	8012150 <_svfiprintf_r+0x130>
 8012136:	7863      	ldrb	r3, [r4, #1]
 8012138:	2b2a      	cmp	r3, #42	; 0x2a
 801213a:	d135      	bne.n	80121a8 <_svfiprintf_r+0x188>
 801213c:	9b03      	ldr	r3, [sp, #12]
 801213e:	1d1a      	adds	r2, r3, #4
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	9203      	str	r2, [sp, #12]
 8012144:	2b00      	cmp	r3, #0
 8012146:	bfb8      	it	lt
 8012148:	f04f 33ff 	movlt.w	r3, #4294967295
 801214c:	3402      	adds	r4, #2
 801214e:	9305      	str	r3, [sp, #20]
 8012150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801221c <_svfiprintf_r+0x1fc>
 8012154:	7821      	ldrb	r1, [r4, #0]
 8012156:	2203      	movs	r2, #3
 8012158:	4650      	mov	r0, sl
 801215a:	f7ee f849 	bl	80001f0 <memchr>
 801215e:	b140      	cbz	r0, 8012172 <_svfiprintf_r+0x152>
 8012160:	2340      	movs	r3, #64	; 0x40
 8012162:	eba0 000a 	sub.w	r0, r0, sl
 8012166:	fa03 f000 	lsl.w	r0, r3, r0
 801216a:	9b04      	ldr	r3, [sp, #16]
 801216c:	4303      	orrs	r3, r0
 801216e:	3401      	adds	r4, #1
 8012170:	9304      	str	r3, [sp, #16]
 8012172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012176:	4826      	ldr	r0, [pc, #152]	; (8012210 <_svfiprintf_r+0x1f0>)
 8012178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801217c:	2206      	movs	r2, #6
 801217e:	f7ee f837 	bl	80001f0 <memchr>
 8012182:	2800      	cmp	r0, #0
 8012184:	d038      	beq.n	80121f8 <_svfiprintf_r+0x1d8>
 8012186:	4b23      	ldr	r3, [pc, #140]	; (8012214 <_svfiprintf_r+0x1f4>)
 8012188:	bb1b      	cbnz	r3, 80121d2 <_svfiprintf_r+0x1b2>
 801218a:	9b03      	ldr	r3, [sp, #12]
 801218c:	3307      	adds	r3, #7
 801218e:	f023 0307 	bic.w	r3, r3, #7
 8012192:	3308      	adds	r3, #8
 8012194:	9303      	str	r3, [sp, #12]
 8012196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012198:	4433      	add	r3, r6
 801219a:	9309      	str	r3, [sp, #36]	; 0x24
 801219c:	e767      	b.n	801206e <_svfiprintf_r+0x4e>
 801219e:	fb0c 3202 	mla	r2, ip, r2, r3
 80121a2:	460c      	mov	r4, r1
 80121a4:	2001      	movs	r0, #1
 80121a6:	e7a5      	b.n	80120f4 <_svfiprintf_r+0xd4>
 80121a8:	2300      	movs	r3, #0
 80121aa:	3401      	adds	r4, #1
 80121ac:	9305      	str	r3, [sp, #20]
 80121ae:	4619      	mov	r1, r3
 80121b0:	f04f 0c0a 	mov.w	ip, #10
 80121b4:	4620      	mov	r0, r4
 80121b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121ba:	3a30      	subs	r2, #48	; 0x30
 80121bc:	2a09      	cmp	r2, #9
 80121be:	d903      	bls.n	80121c8 <_svfiprintf_r+0x1a8>
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d0c5      	beq.n	8012150 <_svfiprintf_r+0x130>
 80121c4:	9105      	str	r1, [sp, #20]
 80121c6:	e7c3      	b.n	8012150 <_svfiprintf_r+0x130>
 80121c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80121cc:	4604      	mov	r4, r0
 80121ce:	2301      	movs	r3, #1
 80121d0:	e7f0      	b.n	80121b4 <_svfiprintf_r+0x194>
 80121d2:	ab03      	add	r3, sp, #12
 80121d4:	9300      	str	r3, [sp, #0]
 80121d6:	462a      	mov	r2, r5
 80121d8:	4b0f      	ldr	r3, [pc, #60]	; (8012218 <_svfiprintf_r+0x1f8>)
 80121da:	a904      	add	r1, sp, #16
 80121dc:	4638      	mov	r0, r7
 80121de:	f3af 8000 	nop.w
 80121e2:	1c42      	adds	r2, r0, #1
 80121e4:	4606      	mov	r6, r0
 80121e6:	d1d6      	bne.n	8012196 <_svfiprintf_r+0x176>
 80121e8:	89ab      	ldrh	r3, [r5, #12]
 80121ea:	065b      	lsls	r3, r3, #25
 80121ec:	f53f af2c 	bmi.w	8012048 <_svfiprintf_r+0x28>
 80121f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121f2:	b01d      	add	sp, #116	; 0x74
 80121f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f8:	ab03      	add	r3, sp, #12
 80121fa:	9300      	str	r3, [sp, #0]
 80121fc:	462a      	mov	r2, r5
 80121fe:	4b06      	ldr	r3, [pc, #24]	; (8012218 <_svfiprintf_r+0x1f8>)
 8012200:	a904      	add	r1, sp, #16
 8012202:	4638      	mov	r0, r7
 8012204:	f000 f87a 	bl	80122fc <_printf_i>
 8012208:	e7eb      	b.n	80121e2 <_svfiprintf_r+0x1c2>
 801220a:	bf00      	nop
 801220c:	0803f54c 	.word	0x0803f54c
 8012210:	0803f556 	.word	0x0803f556
 8012214:	00000000 	.word	0x00000000
 8012218:	08011f69 	.word	0x08011f69
 801221c:	0803f552 	.word	0x0803f552

08012220 <_printf_common>:
 8012220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012224:	4616      	mov	r6, r2
 8012226:	4699      	mov	r9, r3
 8012228:	688a      	ldr	r2, [r1, #8]
 801222a:	690b      	ldr	r3, [r1, #16]
 801222c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012230:	4293      	cmp	r3, r2
 8012232:	bfb8      	it	lt
 8012234:	4613      	movlt	r3, r2
 8012236:	6033      	str	r3, [r6, #0]
 8012238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801223c:	4607      	mov	r7, r0
 801223e:	460c      	mov	r4, r1
 8012240:	b10a      	cbz	r2, 8012246 <_printf_common+0x26>
 8012242:	3301      	adds	r3, #1
 8012244:	6033      	str	r3, [r6, #0]
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	0699      	lsls	r1, r3, #26
 801224a:	bf42      	ittt	mi
 801224c:	6833      	ldrmi	r3, [r6, #0]
 801224e:	3302      	addmi	r3, #2
 8012250:	6033      	strmi	r3, [r6, #0]
 8012252:	6825      	ldr	r5, [r4, #0]
 8012254:	f015 0506 	ands.w	r5, r5, #6
 8012258:	d106      	bne.n	8012268 <_printf_common+0x48>
 801225a:	f104 0a19 	add.w	sl, r4, #25
 801225e:	68e3      	ldr	r3, [r4, #12]
 8012260:	6832      	ldr	r2, [r6, #0]
 8012262:	1a9b      	subs	r3, r3, r2
 8012264:	42ab      	cmp	r3, r5
 8012266:	dc26      	bgt.n	80122b6 <_printf_common+0x96>
 8012268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801226c:	1e13      	subs	r3, r2, #0
 801226e:	6822      	ldr	r2, [r4, #0]
 8012270:	bf18      	it	ne
 8012272:	2301      	movne	r3, #1
 8012274:	0692      	lsls	r2, r2, #26
 8012276:	d42b      	bmi.n	80122d0 <_printf_common+0xb0>
 8012278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801227c:	4649      	mov	r1, r9
 801227e:	4638      	mov	r0, r7
 8012280:	47c0      	blx	r8
 8012282:	3001      	adds	r0, #1
 8012284:	d01e      	beq.n	80122c4 <_printf_common+0xa4>
 8012286:	6823      	ldr	r3, [r4, #0]
 8012288:	68e5      	ldr	r5, [r4, #12]
 801228a:	6832      	ldr	r2, [r6, #0]
 801228c:	f003 0306 	and.w	r3, r3, #6
 8012290:	2b04      	cmp	r3, #4
 8012292:	bf08      	it	eq
 8012294:	1aad      	subeq	r5, r5, r2
 8012296:	68a3      	ldr	r3, [r4, #8]
 8012298:	6922      	ldr	r2, [r4, #16]
 801229a:	bf0c      	ite	eq
 801229c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122a0:	2500      	movne	r5, #0
 80122a2:	4293      	cmp	r3, r2
 80122a4:	bfc4      	itt	gt
 80122a6:	1a9b      	subgt	r3, r3, r2
 80122a8:	18ed      	addgt	r5, r5, r3
 80122aa:	2600      	movs	r6, #0
 80122ac:	341a      	adds	r4, #26
 80122ae:	42b5      	cmp	r5, r6
 80122b0:	d11a      	bne.n	80122e8 <_printf_common+0xc8>
 80122b2:	2000      	movs	r0, #0
 80122b4:	e008      	b.n	80122c8 <_printf_common+0xa8>
 80122b6:	2301      	movs	r3, #1
 80122b8:	4652      	mov	r2, sl
 80122ba:	4649      	mov	r1, r9
 80122bc:	4638      	mov	r0, r7
 80122be:	47c0      	blx	r8
 80122c0:	3001      	adds	r0, #1
 80122c2:	d103      	bne.n	80122cc <_printf_common+0xac>
 80122c4:	f04f 30ff 	mov.w	r0, #4294967295
 80122c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122cc:	3501      	adds	r5, #1
 80122ce:	e7c6      	b.n	801225e <_printf_common+0x3e>
 80122d0:	18e1      	adds	r1, r4, r3
 80122d2:	1c5a      	adds	r2, r3, #1
 80122d4:	2030      	movs	r0, #48	; 0x30
 80122d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80122da:	4422      	add	r2, r4
 80122dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80122e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80122e4:	3302      	adds	r3, #2
 80122e6:	e7c7      	b.n	8012278 <_printf_common+0x58>
 80122e8:	2301      	movs	r3, #1
 80122ea:	4622      	mov	r2, r4
 80122ec:	4649      	mov	r1, r9
 80122ee:	4638      	mov	r0, r7
 80122f0:	47c0      	blx	r8
 80122f2:	3001      	adds	r0, #1
 80122f4:	d0e6      	beq.n	80122c4 <_printf_common+0xa4>
 80122f6:	3601      	adds	r6, #1
 80122f8:	e7d9      	b.n	80122ae <_printf_common+0x8e>
	...

080122fc <_printf_i>:
 80122fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012300:	460c      	mov	r4, r1
 8012302:	4691      	mov	r9, r2
 8012304:	7e27      	ldrb	r7, [r4, #24]
 8012306:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012308:	2f78      	cmp	r7, #120	; 0x78
 801230a:	4680      	mov	r8, r0
 801230c:	469a      	mov	sl, r3
 801230e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012312:	d807      	bhi.n	8012324 <_printf_i+0x28>
 8012314:	2f62      	cmp	r7, #98	; 0x62
 8012316:	d80a      	bhi.n	801232e <_printf_i+0x32>
 8012318:	2f00      	cmp	r7, #0
 801231a:	f000 80d8 	beq.w	80124ce <_printf_i+0x1d2>
 801231e:	2f58      	cmp	r7, #88	; 0x58
 8012320:	f000 80a3 	beq.w	801246a <_printf_i+0x16e>
 8012324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801232c:	e03a      	b.n	80123a4 <_printf_i+0xa8>
 801232e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012332:	2b15      	cmp	r3, #21
 8012334:	d8f6      	bhi.n	8012324 <_printf_i+0x28>
 8012336:	a001      	add	r0, pc, #4	; (adr r0, 801233c <_printf_i+0x40>)
 8012338:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801233c:	08012395 	.word	0x08012395
 8012340:	080123a9 	.word	0x080123a9
 8012344:	08012325 	.word	0x08012325
 8012348:	08012325 	.word	0x08012325
 801234c:	08012325 	.word	0x08012325
 8012350:	08012325 	.word	0x08012325
 8012354:	080123a9 	.word	0x080123a9
 8012358:	08012325 	.word	0x08012325
 801235c:	08012325 	.word	0x08012325
 8012360:	08012325 	.word	0x08012325
 8012364:	08012325 	.word	0x08012325
 8012368:	080124b5 	.word	0x080124b5
 801236c:	080123d9 	.word	0x080123d9
 8012370:	08012497 	.word	0x08012497
 8012374:	08012325 	.word	0x08012325
 8012378:	08012325 	.word	0x08012325
 801237c:	080124d7 	.word	0x080124d7
 8012380:	08012325 	.word	0x08012325
 8012384:	080123d9 	.word	0x080123d9
 8012388:	08012325 	.word	0x08012325
 801238c:	08012325 	.word	0x08012325
 8012390:	0801249f 	.word	0x0801249f
 8012394:	680b      	ldr	r3, [r1, #0]
 8012396:	1d1a      	adds	r2, r3, #4
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	600a      	str	r2, [r1, #0]
 801239c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80123a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80123a4:	2301      	movs	r3, #1
 80123a6:	e0a3      	b.n	80124f0 <_printf_i+0x1f4>
 80123a8:	6825      	ldr	r5, [r4, #0]
 80123aa:	6808      	ldr	r0, [r1, #0]
 80123ac:	062e      	lsls	r6, r5, #24
 80123ae:	f100 0304 	add.w	r3, r0, #4
 80123b2:	d50a      	bpl.n	80123ca <_printf_i+0xce>
 80123b4:	6805      	ldr	r5, [r0, #0]
 80123b6:	600b      	str	r3, [r1, #0]
 80123b8:	2d00      	cmp	r5, #0
 80123ba:	da03      	bge.n	80123c4 <_printf_i+0xc8>
 80123bc:	232d      	movs	r3, #45	; 0x2d
 80123be:	426d      	negs	r5, r5
 80123c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123c4:	485e      	ldr	r0, [pc, #376]	; (8012540 <_printf_i+0x244>)
 80123c6:	230a      	movs	r3, #10
 80123c8:	e019      	b.n	80123fe <_printf_i+0x102>
 80123ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80123ce:	6805      	ldr	r5, [r0, #0]
 80123d0:	600b      	str	r3, [r1, #0]
 80123d2:	bf18      	it	ne
 80123d4:	b22d      	sxthne	r5, r5
 80123d6:	e7ef      	b.n	80123b8 <_printf_i+0xbc>
 80123d8:	680b      	ldr	r3, [r1, #0]
 80123da:	6825      	ldr	r5, [r4, #0]
 80123dc:	1d18      	adds	r0, r3, #4
 80123de:	6008      	str	r0, [r1, #0]
 80123e0:	0628      	lsls	r0, r5, #24
 80123e2:	d501      	bpl.n	80123e8 <_printf_i+0xec>
 80123e4:	681d      	ldr	r5, [r3, #0]
 80123e6:	e002      	b.n	80123ee <_printf_i+0xf2>
 80123e8:	0669      	lsls	r1, r5, #25
 80123ea:	d5fb      	bpl.n	80123e4 <_printf_i+0xe8>
 80123ec:	881d      	ldrh	r5, [r3, #0]
 80123ee:	4854      	ldr	r0, [pc, #336]	; (8012540 <_printf_i+0x244>)
 80123f0:	2f6f      	cmp	r7, #111	; 0x6f
 80123f2:	bf0c      	ite	eq
 80123f4:	2308      	moveq	r3, #8
 80123f6:	230a      	movne	r3, #10
 80123f8:	2100      	movs	r1, #0
 80123fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80123fe:	6866      	ldr	r6, [r4, #4]
 8012400:	60a6      	str	r6, [r4, #8]
 8012402:	2e00      	cmp	r6, #0
 8012404:	bfa2      	ittt	ge
 8012406:	6821      	ldrge	r1, [r4, #0]
 8012408:	f021 0104 	bicge.w	r1, r1, #4
 801240c:	6021      	strge	r1, [r4, #0]
 801240e:	b90d      	cbnz	r5, 8012414 <_printf_i+0x118>
 8012410:	2e00      	cmp	r6, #0
 8012412:	d04d      	beq.n	80124b0 <_printf_i+0x1b4>
 8012414:	4616      	mov	r6, r2
 8012416:	fbb5 f1f3 	udiv	r1, r5, r3
 801241a:	fb03 5711 	mls	r7, r3, r1, r5
 801241e:	5dc7      	ldrb	r7, [r0, r7]
 8012420:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012424:	462f      	mov	r7, r5
 8012426:	42bb      	cmp	r3, r7
 8012428:	460d      	mov	r5, r1
 801242a:	d9f4      	bls.n	8012416 <_printf_i+0x11a>
 801242c:	2b08      	cmp	r3, #8
 801242e:	d10b      	bne.n	8012448 <_printf_i+0x14c>
 8012430:	6823      	ldr	r3, [r4, #0]
 8012432:	07df      	lsls	r7, r3, #31
 8012434:	d508      	bpl.n	8012448 <_printf_i+0x14c>
 8012436:	6923      	ldr	r3, [r4, #16]
 8012438:	6861      	ldr	r1, [r4, #4]
 801243a:	4299      	cmp	r1, r3
 801243c:	bfde      	ittt	le
 801243e:	2330      	movle	r3, #48	; 0x30
 8012440:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012444:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012448:	1b92      	subs	r2, r2, r6
 801244a:	6122      	str	r2, [r4, #16]
 801244c:	f8cd a000 	str.w	sl, [sp]
 8012450:	464b      	mov	r3, r9
 8012452:	aa03      	add	r2, sp, #12
 8012454:	4621      	mov	r1, r4
 8012456:	4640      	mov	r0, r8
 8012458:	f7ff fee2 	bl	8012220 <_printf_common>
 801245c:	3001      	adds	r0, #1
 801245e:	d14c      	bne.n	80124fa <_printf_i+0x1fe>
 8012460:	f04f 30ff 	mov.w	r0, #4294967295
 8012464:	b004      	add	sp, #16
 8012466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801246a:	4835      	ldr	r0, [pc, #212]	; (8012540 <_printf_i+0x244>)
 801246c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012470:	6823      	ldr	r3, [r4, #0]
 8012472:	680e      	ldr	r6, [r1, #0]
 8012474:	061f      	lsls	r7, r3, #24
 8012476:	f856 5b04 	ldr.w	r5, [r6], #4
 801247a:	600e      	str	r6, [r1, #0]
 801247c:	d514      	bpl.n	80124a8 <_printf_i+0x1ac>
 801247e:	07d9      	lsls	r1, r3, #31
 8012480:	bf44      	itt	mi
 8012482:	f043 0320 	orrmi.w	r3, r3, #32
 8012486:	6023      	strmi	r3, [r4, #0]
 8012488:	b91d      	cbnz	r5, 8012492 <_printf_i+0x196>
 801248a:	6823      	ldr	r3, [r4, #0]
 801248c:	f023 0320 	bic.w	r3, r3, #32
 8012490:	6023      	str	r3, [r4, #0]
 8012492:	2310      	movs	r3, #16
 8012494:	e7b0      	b.n	80123f8 <_printf_i+0xfc>
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	f043 0320 	orr.w	r3, r3, #32
 801249c:	6023      	str	r3, [r4, #0]
 801249e:	2378      	movs	r3, #120	; 0x78
 80124a0:	4828      	ldr	r0, [pc, #160]	; (8012544 <_printf_i+0x248>)
 80124a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80124a6:	e7e3      	b.n	8012470 <_printf_i+0x174>
 80124a8:	065e      	lsls	r6, r3, #25
 80124aa:	bf48      	it	mi
 80124ac:	b2ad      	uxthmi	r5, r5
 80124ae:	e7e6      	b.n	801247e <_printf_i+0x182>
 80124b0:	4616      	mov	r6, r2
 80124b2:	e7bb      	b.n	801242c <_printf_i+0x130>
 80124b4:	680b      	ldr	r3, [r1, #0]
 80124b6:	6826      	ldr	r6, [r4, #0]
 80124b8:	6960      	ldr	r0, [r4, #20]
 80124ba:	1d1d      	adds	r5, r3, #4
 80124bc:	600d      	str	r5, [r1, #0]
 80124be:	0635      	lsls	r5, r6, #24
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	d501      	bpl.n	80124c8 <_printf_i+0x1cc>
 80124c4:	6018      	str	r0, [r3, #0]
 80124c6:	e002      	b.n	80124ce <_printf_i+0x1d2>
 80124c8:	0671      	lsls	r1, r6, #25
 80124ca:	d5fb      	bpl.n	80124c4 <_printf_i+0x1c8>
 80124cc:	8018      	strh	r0, [r3, #0]
 80124ce:	2300      	movs	r3, #0
 80124d0:	6123      	str	r3, [r4, #16]
 80124d2:	4616      	mov	r6, r2
 80124d4:	e7ba      	b.n	801244c <_printf_i+0x150>
 80124d6:	680b      	ldr	r3, [r1, #0]
 80124d8:	1d1a      	adds	r2, r3, #4
 80124da:	600a      	str	r2, [r1, #0]
 80124dc:	681e      	ldr	r6, [r3, #0]
 80124de:	6862      	ldr	r2, [r4, #4]
 80124e0:	2100      	movs	r1, #0
 80124e2:	4630      	mov	r0, r6
 80124e4:	f7ed fe84 	bl	80001f0 <memchr>
 80124e8:	b108      	cbz	r0, 80124ee <_printf_i+0x1f2>
 80124ea:	1b80      	subs	r0, r0, r6
 80124ec:	6060      	str	r0, [r4, #4]
 80124ee:	6863      	ldr	r3, [r4, #4]
 80124f0:	6123      	str	r3, [r4, #16]
 80124f2:	2300      	movs	r3, #0
 80124f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124f8:	e7a8      	b.n	801244c <_printf_i+0x150>
 80124fa:	6923      	ldr	r3, [r4, #16]
 80124fc:	4632      	mov	r2, r6
 80124fe:	4649      	mov	r1, r9
 8012500:	4640      	mov	r0, r8
 8012502:	47d0      	blx	sl
 8012504:	3001      	adds	r0, #1
 8012506:	d0ab      	beq.n	8012460 <_printf_i+0x164>
 8012508:	6823      	ldr	r3, [r4, #0]
 801250a:	079b      	lsls	r3, r3, #30
 801250c:	d413      	bmi.n	8012536 <_printf_i+0x23a>
 801250e:	68e0      	ldr	r0, [r4, #12]
 8012510:	9b03      	ldr	r3, [sp, #12]
 8012512:	4298      	cmp	r0, r3
 8012514:	bfb8      	it	lt
 8012516:	4618      	movlt	r0, r3
 8012518:	e7a4      	b.n	8012464 <_printf_i+0x168>
 801251a:	2301      	movs	r3, #1
 801251c:	4632      	mov	r2, r6
 801251e:	4649      	mov	r1, r9
 8012520:	4640      	mov	r0, r8
 8012522:	47d0      	blx	sl
 8012524:	3001      	adds	r0, #1
 8012526:	d09b      	beq.n	8012460 <_printf_i+0x164>
 8012528:	3501      	adds	r5, #1
 801252a:	68e3      	ldr	r3, [r4, #12]
 801252c:	9903      	ldr	r1, [sp, #12]
 801252e:	1a5b      	subs	r3, r3, r1
 8012530:	42ab      	cmp	r3, r5
 8012532:	dcf2      	bgt.n	801251a <_printf_i+0x21e>
 8012534:	e7eb      	b.n	801250e <_printf_i+0x212>
 8012536:	2500      	movs	r5, #0
 8012538:	f104 0619 	add.w	r6, r4, #25
 801253c:	e7f5      	b.n	801252a <_printf_i+0x22e>
 801253e:	bf00      	nop
 8012540:	0803f55d 	.word	0x0803f55d
 8012544:	0803f56e 	.word	0x0803f56e

08012548 <memcpy>:
 8012548:	440a      	add	r2, r1
 801254a:	4291      	cmp	r1, r2
 801254c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012550:	d100      	bne.n	8012554 <memcpy+0xc>
 8012552:	4770      	bx	lr
 8012554:	b510      	push	{r4, lr}
 8012556:	f811 4b01 	ldrb.w	r4, [r1], #1
 801255a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801255e:	4291      	cmp	r1, r2
 8012560:	d1f9      	bne.n	8012556 <memcpy+0xe>
 8012562:	bd10      	pop	{r4, pc}

08012564 <memmove>:
 8012564:	4288      	cmp	r0, r1
 8012566:	b510      	push	{r4, lr}
 8012568:	eb01 0402 	add.w	r4, r1, r2
 801256c:	d902      	bls.n	8012574 <memmove+0x10>
 801256e:	4284      	cmp	r4, r0
 8012570:	4623      	mov	r3, r4
 8012572:	d807      	bhi.n	8012584 <memmove+0x20>
 8012574:	1e43      	subs	r3, r0, #1
 8012576:	42a1      	cmp	r1, r4
 8012578:	d008      	beq.n	801258c <memmove+0x28>
 801257a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801257e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012582:	e7f8      	b.n	8012576 <memmove+0x12>
 8012584:	4402      	add	r2, r0
 8012586:	4601      	mov	r1, r0
 8012588:	428a      	cmp	r2, r1
 801258a:	d100      	bne.n	801258e <memmove+0x2a>
 801258c:	bd10      	pop	{r4, pc}
 801258e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012596:	e7f7      	b.n	8012588 <memmove+0x24>

08012598 <_free_r>:
 8012598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801259a:	2900      	cmp	r1, #0
 801259c:	d048      	beq.n	8012630 <_free_r+0x98>
 801259e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125a2:	9001      	str	r0, [sp, #4]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	f1a1 0404 	sub.w	r4, r1, #4
 80125aa:	bfb8      	it	lt
 80125ac:	18e4      	addlt	r4, r4, r3
 80125ae:	f000 f8d3 	bl	8012758 <__malloc_lock>
 80125b2:	4a20      	ldr	r2, [pc, #128]	; (8012634 <_free_r+0x9c>)
 80125b4:	9801      	ldr	r0, [sp, #4]
 80125b6:	6813      	ldr	r3, [r2, #0]
 80125b8:	4615      	mov	r5, r2
 80125ba:	b933      	cbnz	r3, 80125ca <_free_r+0x32>
 80125bc:	6063      	str	r3, [r4, #4]
 80125be:	6014      	str	r4, [r2, #0]
 80125c0:	b003      	add	sp, #12
 80125c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125c6:	f000 b8cd 	b.w	8012764 <__malloc_unlock>
 80125ca:	42a3      	cmp	r3, r4
 80125cc:	d90b      	bls.n	80125e6 <_free_r+0x4e>
 80125ce:	6821      	ldr	r1, [r4, #0]
 80125d0:	1862      	adds	r2, r4, r1
 80125d2:	4293      	cmp	r3, r2
 80125d4:	bf04      	itt	eq
 80125d6:	681a      	ldreq	r2, [r3, #0]
 80125d8:	685b      	ldreq	r3, [r3, #4]
 80125da:	6063      	str	r3, [r4, #4]
 80125dc:	bf04      	itt	eq
 80125de:	1852      	addeq	r2, r2, r1
 80125e0:	6022      	streq	r2, [r4, #0]
 80125e2:	602c      	str	r4, [r5, #0]
 80125e4:	e7ec      	b.n	80125c0 <_free_r+0x28>
 80125e6:	461a      	mov	r2, r3
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	b10b      	cbz	r3, 80125f0 <_free_r+0x58>
 80125ec:	42a3      	cmp	r3, r4
 80125ee:	d9fa      	bls.n	80125e6 <_free_r+0x4e>
 80125f0:	6811      	ldr	r1, [r2, #0]
 80125f2:	1855      	adds	r5, r2, r1
 80125f4:	42a5      	cmp	r5, r4
 80125f6:	d10b      	bne.n	8012610 <_free_r+0x78>
 80125f8:	6824      	ldr	r4, [r4, #0]
 80125fa:	4421      	add	r1, r4
 80125fc:	1854      	adds	r4, r2, r1
 80125fe:	42a3      	cmp	r3, r4
 8012600:	6011      	str	r1, [r2, #0]
 8012602:	d1dd      	bne.n	80125c0 <_free_r+0x28>
 8012604:	681c      	ldr	r4, [r3, #0]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	6053      	str	r3, [r2, #4]
 801260a:	4421      	add	r1, r4
 801260c:	6011      	str	r1, [r2, #0]
 801260e:	e7d7      	b.n	80125c0 <_free_r+0x28>
 8012610:	d902      	bls.n	8012618 <_free_r+0x80>
 8012612:	230c      	movs	r3, #12
 8012614:	6003      	str	r3, [r0, #0]
 8012616:	e7d3      	b.n	80125c0 <_free_r+0x28>
 8012618:	6825      	ldr	r5, [r4, #0]
 801261a:	1961      	adds	r1, r4, r5
 801261c:	428b      	cmp	r3, r1
 801261e:	bf04      	itt	eq
 8012620:	6819      	ldreq	r1, [r3, #0]
 8012622:	685b      	ldreq	r3, [r3, #4]
 8012624:	6063      	str	r3, [r4, #4]
 8012626:	bf04      	itt	eq
 8012628:	1949      	addeq	r1, r1, r5
 801262a:	6021      	streq	r1, [r4, #0]
 801262c:	6054      	str	r4, [r2, #4]
 801262e:	e7c7      	b.n	80125c0 <_free_r+0x28>
 8012630:	b003      	add	sp, #12
 8012632:	bd30      	pop	{r4, r5, pc}
 8012634:	20001940 	.word	0x20001940

08012638 <_malloc_r>:
 8012638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263a:	1ccd      	adds	r5, r1, #3
 801263c:	f025 0503 	bic.w	r5, r5, #3
 8012640:	3508      	adds	r5, #8
 8012642:	2d0c      	cmp	r5, #12
 8012644:	bf38      	it	cc
 8012646:	250c      	movcc	r5, #12
 8012648:	2d00      	cmp	r5, #0
 801264a:	4606      	mov	r6, r0
 801264c:	db01      	blt.n	8012652 <_malloc_r+0x1a>
 801264e:	42a9      	cmp	r1, r5
 8012650:	d903      	bls.n	801265a <_malloc_r+0x22>
 8012652:	230c      	movs	r3, #12
 8012654:	6033      	str	r3, [r6, #0]
 8012656:	2000      	movs	r0, #0
 8012658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801265a:	f000 f87d 	bl	8012758 <__malloc_lock>
 801265e:	4921      	ldr	r1, [pc, #132]	; (80126e4 <_malloc_r+0xac>)
 8012660:	680a      	ldr	r2, [r1, #0]
 8012662:	4614      	mov	r4, r2
 8012664:	b99c      	cbnz	r4, 801268e <_malloc_r+0x56>
 8012666:	4f20      	ldr	r7, [pc, #128]	; (80126e8 <_malloc_r+0xb0>)
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	b923      	cbnz	r3, 8012676 <_malloc_r+0x3e>
 801266c:	4621      	mov	r1, r4
 801266e:	4630      	mov	r0, r6
 8012670:	f000 f862 	bl	8012738 <_sbrk_r>
 8012674:	6038      	str	r0, [r7, #0]
 8012676:	4629      	mov	r1, r5
 8012678:	4630      	mov	r0, r6
 801267a:	f000 f85d 	bl	8012738 <_sbrk_r>
 801267e:	1c43      	adds	r3, r0, #1
 8012680:	d123      	bne.n	80126ca <_malloc_r+0x92>
 8012682:	230c      	movs	r3, #12
 8012684:	6033      	str	r3, [r6, #0]
 8012686:	4630      	mov	r0, r6
 8012688:	f000 f86c 	bl	8012764 <__malloc_unlock>
 801268c:	e7e3      	b.n	8012656 <_malloc_r+0x1e>
 801268e:	6823      	ldr	r3, [r4, #0]
 8012690:	1b5b      	subs	r3, r3, r5
 8012692:	d417      	bmi.n	80126c4 <_malloc_r+0x8c>
 8012694:	2b0b      	cmp	r3, #11
 8012696:	d903      	bls.n	80126a0 <_malloc_r+0x68>
 8012698:	6023      	str	r3, [r4, #0]
 801269a:	441c      	add	r4, r3
 801269c:	6025      	str	r5, [r4, #0]
 801269e:	e004      	b.n	80126aa <_malloc_r+0x72>
 80126a0:	6863      	ldr	r3, [r4, #4]
 80126a2:	42a2      	cmp	r2, r4
 80126a4:	bf0c      	ite	eq
 80126a6:	600b      	streq	r3, [r1, #0]
 80126a8:	6053      	strne	r3, [r2, #4]
 80126aa:	4630      	mov	r0, r6
 80126ac:	f000 f85a 	bl	8012764 <__malloc_unlock>
 80126b0:	f104 000b 	add.w	r0, r4, #11
 80126b4:	1d23      	adds	r3, r4, #4
 80126b6:	f020 0007 	bic.w	r0, r0, #7
 80126ba:	1ac2      	subs	r2, r0, r3
 80126bc:	d0cc      	beq.n	8012658 <_malloc_r+0x20>
 80126be:	1a1b      	subs	r3, r3, r0
 80126c0:	50a3      	str	r3, [r4, r2]
 80126c2:	e7c9      	b.n	8012658 <_malloc_r+0x20>
 80126c4:	4622      	mov	r2, r4
 80126c6:	6864      	ldr	r4, [r4, #4]
 80126c8:	e7cc      	b.n	8012664 <_malloc_r+0x2c>
 80126ca:	1cc4      	adds	r4, r0, #3
 80126cc:	f024 0403 	bic.w	r4, r4, #3
 80126d0:	42a0      	cmp	r0, r4
 80126d2:	d0e3      	beq.n	801269c <_malloc_r+0x64>
 80126d4:	1a21      	subs	r1, r4, r0
 80126d6:	4630      	mov	r0, r6
 80126d8:	f000 f82e 	bl	8012738 <_sbrk_r>
 80126dc:	3001      	adds	r0, #1
 80126de:	d1dd      	bne.n	801269c <_malloc_r+0x64>
 80126e0:	e7cf      	b.n	8012682 <_malloc_r+0x4a>
 80126e2:	bf00      	nop
 80126e4:	20001940 	.word	0x20001940
 80126e8:	20001944 	.word	0x20001944

080126ec <_realloc_r>:
 80126ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ee:	4607      	mov	r7, r0
 80126f0:	4614      	mov	r4, r2
 80126f2:	460e      	mov	r6, r1
 80126f4:	b921      	cbnz	r1, 8012700 <_realloc_r+0x14>
 80126f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80126fa:	4611      	mov	r1, r2
 80126fc:	f7ff bf9c 	b.w	8012638 <_malloc_r>
 8012700:	b922      	cbnz	r2, 801270c <_realloc_r+0x20>
 8012702:	f7ff ff49 	bl	8012598 <_free_r>
 8012706:	4625      	mov	r5, r4
 8012708:	4628      	mov	r0, r5
 801270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801270c:	f000 f830 	bl	8012770 <_malloc_usable_size_r>
 8012710:	42a0      	cmp	r0, r4
 8012712:	d20f      	bcs.n	8012734 <_realloc_r+0x48>
 8012714:	4621      	mov	r1, r4
 8012716:	4638      	mov	r0, r7
 8012718:	f7ff ff8e 	bl	8012638 <_malloc_r>
 801271c:	4605      	mov	r5, r0
 801271e:	2800      	cmp	r0, #0
 8012720:	d0f2      	beq.n	8012708 <_realloc_r+0x1c>
 8012722:	4631      	mov	r1, r6
 8012724:	4622      	mov	r2, r4
 8012726:	f7ff ff0f 	bl	8012548 <memcpy>
 801272a:	4631      	mov	r1, r6
 801272c:	4638      	mov	r0, r7
 801272e:	f7ff ff33 	bl	8012598 <_free_r>
 8012732:	e7e9      	b.n	8012708 <_realloc_r+0x1c>
 8012734:	4635      	mov	r5, r6
 8012736:	e7e7      	b.n	8012708 <_realloc_r+0x1c>

08012738 <_sbrk_r>:
 8012738:	b538      	push	{r3, r4, r5, lr}
 801273a:	4d06      	ldr	r5, [pc, #24]	; (8012754 <_sbrk_r+0x1c>)
 801273c:	2300      	movs	r3, #0
 801273e:	4604      	mov	r4, r0
 8012740:	4608      	mov	r0, r1
 8012742:	602b      	str	r3, [r5, #0]
 8012744:	f7f4 fc04 	bl	8006f50 <_sbrk>
 8012748:	1c43      	adds	r3, r0, #1
 801274a:	d102      	bne.n	8012752 <_sbrk_r+0x1a>
 801274c:	682b      	ldr	r3, [r5, #0]
 801274e:	b103      	cbz	r3, 8012752 <_sbrk_r+0x1a>
 8012750:	6023      	str	r3, [r4, #0]
 8012752:	bd38      	pop	{r3, r4, r5, pc}
 8012754:	20003604 	.word	0x20003604

08012758 <__malloc_lock>:
 8012758:	4801      	ldr	r0, [pc, #4]	; (8012760 <__malloc_lock+0x8>)
 801275a:	f000 b811 	b.w	8012780 <__retarget_lock_acquire_recursive>
 801275e:	bf00      	nop
 8012760:	2000360c 	.word	0x2000360c

08012764 <__malloc_unlock>:
 8012764:	4801      	ldr	r0, [pc, #4]	; (801276c <__malloc_unlock+0x8>)
 8012766:	f000 b80c 	b.w	8012782 <__retarget_lock_release_recursive>
 801276a:	bf00      	nop
 801276c:	2000360c 	.word	0x2000360c

08012770 <_malloc_usable_size_r>:
 8012770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012774:	1f18      	subs	r0, r3, #4
 8012776:	2b00      	cmp	r3, #0
 8012778:	bfbc      	itt	lt
 801277a:	580b      	ldrlt	r3, [r1, r0]
 801277c:	18c0      	addlt	r0, r0, r3
 801277e:	4770      	bx	lr

08012780 <__retarget_lock_acquire_recursive>:
 8012780:	4770      	bx	lr

08012782 <__retarget_lock_release_recursive>:
 8012782:	4770      	bx	lr

08012784 <sqrtf>:
 8012784:	b508      	push	{r3, lr}
 8012786:	ed2d 8b02 	vpush	{d8}
 801278a:	eeb0 8a40 	vmov.f32	s16, s0
 801278e:	f000 f81f 	bl	80127d0 <__ieee754_sqrtf>
 8012792:	4b0d      	ldr	r3, [pc, #52]	; (80127c8 <sqrtf+0x44>)
 8012794:	f993 3000 	ldrsb.w	r3, [r3]
 8012798:	3301      	adds	r3, #1
 801279a:	d011      	beq.n	80127c0 <sqrtf+0x3c>
 801279c:	eeb4 8a48 	vcmp.f32	s16, s16
 80127a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a4:	d60c      	bvs.n	80127c0 <sqrtf+0x3c>
 80127a6:	eddf 8a09 	vldr	s17, [pc, #36]	; 80127cc <sqrtf+0x48>
 80127aa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80127ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b2:	d505      	bpl.n	80127c0 <sqrtf+0x3c>
 80127b4:	f7ff fb86 	bl	8011ec4 <__errno>
 80127b8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80127bc:	2321      	movs	r3, #33	; 0x21
 80127be:	6003      	str	r3, [r0, #0]
 80127c0:	ecbd 8b02 	vpop	{d8}
 80127c4:	bd08      	pop	{r3, pc}
 80127c6:	bf00      	nop
 80127c8:	200000f0 	.word	0x200000f0
 80127cc:	00000000 	.word	0x00000000

080127d0 <__ieee754_sqrtf>:
 80127d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80127d4:	4770      	bx	lr
	...

080127d8 <_init>:
 80127d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127da:	bf00      	nop
 80127dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127de:	bc08      	pop	{r3}
 80127e0:	469e      	mov	lr, r3
 80127e2:	4770      	bx	lr

080127e4 <_fini>:
 80127e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e6:	bf00      	nop
 80127e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127ea:	bc08      	pop	{r3}
 80127ec:	469e      	mov	lr, r3
 80127ee:	4770      	bx	lr
